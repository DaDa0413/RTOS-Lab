
Lab_2.elf:     file format elf32-littlenios2
Lab_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00018780 memsz 0x00023f2c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016518  040001bc  040001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004fc  040166d4  040166d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd0  04016bd0  04016bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b7ac  040187a0  040187a0  000197a0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000197a0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd0  00000000  00000000  000197c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000021d9  00000000  00000000  0001a598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00030f86  00000000  00000000  0001c771  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000953c  00000000  00000000  0004d6f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b3b1  00000000  00000000  00056c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002680  00000000  00000000  00071fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000244e  00000000  00000000  00074664  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d28c  00000000  00000000  00076ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00083d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000988  00000000  00000000  00083d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00088ff2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00088ff8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00088ffb  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00088ffc  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00089000  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00089004  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00089008  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00089011  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0008901a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  00089023  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001f  00000000  00000000  0008902c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001bc l    d  .text	00000000 .text
040166d4 l    d  .rodata	00000000 .rodata
04016bd0 l    d  .rwdata	00000000 .rwdata
040187a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
04000308 l     F .text	00000154 task1
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
04016bf0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400202c l     F .text	00000058 std
04002138 l     F .text	00000008 __fp_lock
04002140 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
04003100 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04003160 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04003260 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04003380 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
040034d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
04003718 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04018704 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
040039b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
04018708 l     O .rwdata	00000004 lockid
040187c0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0401870c l     O .rwdata	00000004 lockid
040187c8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0400540c l     F .text	00000044 OS_InitMisc
04005450 l     F .text	0000006c OS_InitRdyList
040055b4 l     F .text	000000e0 OS_InitTCBList
04005330 l     F .text	000000dc OS_InitEventList
040054bc l     F .text	0000007c OS_InitTaskIdle
04005538 l     F .text	0000007c OS_InitTaskStat
04005904 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
04007864 l     F .text	00000110 OS_FlagTaskRdy
040075bc l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040175a0 l     O .rwdata	000000c4 epcs
04017664 l     O .rwdata	0000106c jtag_uart
0400c198 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0400c25c l     F .text	000001ec alt_epcs_flash_query
0400c224 l     F .text	00000038 alt_flash_device_register
0400c448 l     F .text	00000108 alt_epcs_flash_memcmp
0400c8d4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400cd84 l     F .text	000002c4 altera_avalon_jtag_uart_irq
0400d048 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400d860 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0400da3c l     F .text	00000038 epcs_await_wip_released
0400da74 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400dfc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400e48c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400e5c8 l     F .text	000000dc alt_file_locked
0400e82c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400f554 l     F .text	00000058 __sprint_r
04016936 l     O .rodata	00000010 blanks.3452
04016926 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
040115b0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
04011764 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 locale.c
0401879c l     O .rwdata	00000004 charset
04016968 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 mprec.c
04016ab0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
04014d54 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
04015e80 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_exit.c
040165f8 l     F .text	00000040 alt_sim_halt
04013400 g     F .text	00000094 _mprec_log10
0401875a g     O .rwdata	00000002 OSTaskNameSize
0400c7d0 g     F .text	00000090 alt_epcs_flash_get_info
040134ec g     F .text	00000088 __any_on
04002ea4 g     F .text	00000070 _isatty_r
04016a88 g     O .rodata	00000028 __mprec_tinytens
04003530 g     F .text	000000c8 alt_main
040006f4 g     F .text	000000a0 _puts_r
04023cbc g     O .bss	00000100 alt_irq
04002f14 g     F .text	00000078 _lseek_r
04008158 g     F .text	000000d0 OS_MemInit
0400c09c g     F .text	00000064 OSTimeSet
04015874 g     F .text	00000088 __eqdf2
04003f68 g     F .text	000006b4 OSEventPendMulti
04023f4c g       *ABS*	00000000 __alt_heap_start
0400ee34 g     F .text	00000020 OSTaskCreateHook
04018868 g     O .bss	00002000 task1_stk
0400f4dc g     F .text	00000044 printf
04018732 g     O .rwdata	00000002 OSMboxEn
04004670 g     F .text	0000007c OSIntEnter
04002ae0 g     F .text	00000068 __sseek
04002094 g     F .text	000000a4 __sinit
04018742 g     O .rwdata	00000002 OSQEn
04012f54 g     F .text	00000084 _setlocale_r
04002194 g     F .text	00000068 __sfmoreglue
04003c24 g     F .text	000000d0 __malloc_unlock
0400ee90 g     F .text	0000001c OSTaskStatHook
040187d0 g     O .bss	00000001 OSLockNesting
04018780 g     O .rwdata	00000002 OSDataSize
040187d1 g     O .bss	00000001 OSRunning
0400157c g     F .text	000000e0 memmove
0400eec8 g     F .text	0000001c OSInitHookBegin
04018778 g     O .rwdata	00000002 OSTmrSize
04002184 g     F .text	00000010 _cleanup
04013574 g     F .text	000000bc _Balloc
040187d4 g     O .bss	00000004 OSIdleCtr
04015984 g     F .text	00000088 __gtdf2
0400eb00 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
04005c38 g     F .text	00000320 OS_TCBInit
0400d9c0 g     F .text	0000007c epcs_sector_erase
00000000 g     F .entry	00000000 __reset
0401877e g     O .rwdata	00000002 OSTmrWheelTblSize
0401871e g     O .rwdata	00000002 OSEventSize
040187d8 g     O .bss	00000001 OSPrioHighRdy
04002e30 g     F .text	00000074 _fstat_r
0400ee54 g     F .text	00000020 OSTaskDelHook
040187ac g     O .bss	00000004 errno
0400eae0 g       .text	00000000 OSStartHighRdy
0400a86c g     F .text	00000200 OSTaskCreateExt
040070d8 g     F .text	00000068 OSFlagPendGetFlagsRdy
0401875e g     O .rwdata	00000002 OSTaskStatStkSize
040060e4 g     F .text	00000334 OSFlagAccept
04008890 g     F .text	000000c8 OSQFlush
04008228 g     F .text	00000154 OSQAccept
040187b8 g     O .bss	00000004 alt_argv
040206dc g       *ABS*	00000000 _gp
0400a698 g     F .text	000001d4 OSTaskCreate
0400a124 g     F .text	00000574 OSTaskChangePrio
040187cc g     O .bss	00000004 alt_heapsem
0401a868 g     O .bss	00002000 worker_stk
04005f58 g     F .text	0000018c OSDebugInit
0400aa6c g     F .text	0000040c OSTaskDel
04005838 g     F .text	000000cc OSNextTask
04017420 g     O .rwdata	00000180 alt_fd_list
04020868 g     O .bss	00000370 OSFlagTbl
0400510c g     F .text	000000b8 OS_EventTaskRemove
0400dbb0 g     F .text	00000064 epcs_write_status_register
0400f174 g     F .text	00000094 alt_find_dev
040014dc g     F .text	000000a0 memcpy
04018748 g     O .rwdata	00000002 OSRdyTblSize
04002178 g     F .text	0000000c _cleanup_r
04015b1c g     F .text	000000f8 __floatsidf
0400e550 g     F .text	00000078 alt_io_redirect
04015a94 g     F .text	00000088 __ltdf2
040166d4 g       *ABS*	00000000 __DTOR_END__
04000794 g     F .text	00000014 puts
04003cf4 g     F .text	00000130 OSEventNameGet
0401872c g     O .rwdata	00000002 OSFlagMax
0400ea34 g     F .text	00000020 altera_nios2_irq_init
0400c968 g     F .text	00000110 alt_epcs_flash_write_block
04013350 g     F .text	000000b0 __ratio
040046ec g     F .text	00000110 OSIntExit
04018766 g     O .rwdata	00000002 OSTCBSize
040187d9 g     O .bss	00000001 OSPrioCur
0400d2c4 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0400f520 g     F .text	00000034 _printf_r
04015fbc g     F .text	00000008 __udivsi3
040032c0 g     F .text	000000c0 isatty
0401874c g     O .rwdata	00000002 OSStkWidth
04016998 g     O .rodata	000000c8 __mprec_tens
04018740 g     O .rwdata	00000002 OSPtrSize
04012f30 g     F .text	00000008 __locale_charset
04018720 g     O .rwdata	00000002 OSEventTblSize
0400ea54 g       .text	00000000 OSCtxSw
040187a0 g     O .bss	00000004 __malloc_top_pad
040187da g     O .bss	00000001 flag
040187dc g     O .bss	00000004 OSTCBList
040187b0 g     O .bss	00000004 alt_fd_list_lock
04018798 g     O .rwdata	00000004 __mb_cur_max
04012f38 g     F .text	0000000c _localeconv_r
04013c6c g     F .text	0000003c __i2b
0400081c g     F .text	0000049c __sfvwrite_r
04020bd8 g     O .bss	00000c30 OSMemTbl
040187e0 g     O .bss	00000001 OSTickStepState
04001c50 g     F .text	00000070 _sbrk_r
04018744 g     O .rwdata	00000002 OSQMax
04021808 g     O .bss	00000800 OSTaskStatStk
04007d40 g     F .text	0000010c OSMemNameGet
04018724 g     O .rwdata	00000002 OSFlagEn
04002f8c g     F .text	00000078 _read_r
0401876a g     O .rwdata	00000002 OSTimeTickHookEn
04008df4 g     F .text	00000180 OSQPost
04007974 g     F .text	000000ac OS_FlagUnlink
040186d0 g     O .rwdata	0000000c __lc_ctype
040186fc g     O .rwdata	00000004 alt_max_fd
040056e8 g     F .text	0000006c OS_MemCopy
040163f8 g     F .text	00000138 __unpack_d
04005754 g     F .text	000000e4 OS_Sched
04002d0c g     F .text	00000110 _fclose_r
04007c3c g     F .text	00000104 OSMemGet
0400b1a0 g     F .text	000001c4 OSTaskNameSet
04001ff8 g     F .text	00000034 fflush
040187a4 g     O .bss	00000004 __malloc_max_sbrked_mem
040187e4 g     O .bss	00000004 OSCtxSwCtr
04022008 g     O .bss	00000032 msgBuffer
0400eeac g     F .text	0000001c OSTimeTickHook
0401872e g     O .rwdata	00000002 OSFlagNameSize
040051c4 g     F .text	00000104 OS_EventTaskRemoveMulti
040151e4 g     F .text	00000074 __adddf3
04004fb8 g     F .text	00000154 OS_EventTaskWaitMulti
0400c860 g     F .text	00000074 alt_epcs_flash_erase_block
04013230 g     F .text	00000120 __b2d
04018746 g     O .rwdata	00000002 OSQSize
040147a4 g     F .text	000005b0 __umoddi3
040033e0 g     F .text	000000f0 lseek
040099d0 g     F .text	0000027c OSSemPend
040186e0 g     O .rwdata	00000004 _global_impure_ptr
0400165c g     F .text	000005f4 _realloc_r
04018730 g     O .rwdata	00000002 OSLowestPrio
04023f4c g       *ABS*	00000000 __bss_end
0400e394 g     F .text	000000f8 alt_iic_isr_register
0400ef1c g     F .text	00000020 OSTCBInitHook
04018776 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0400e924 g     F .text	00000110 alt_tick
040141c8 g     F .text	000005dc __udivdi3
04016a60 g     O .rodata	00000028 __mprec_bigtens
04018718 g     O .rwdata	00000002 OSEventEn
04013ec8 g     F .text	00000120 __s2b
04018772 g     O .rwdata	00000002 OSTmrCfgNameSize
04015cec g     F .text	00000194 __floatunsidf
04013150 g     F .text	00000060 __mcmp
04002160 g     F .text	00000018 __fp_lock_all
0400e34c g     F .text	00000048 alt_ic_irq_enabled
04007780 g     F .text	000000e4 OS_FlagInit
0400e88c g     F .text	00000098 alt_alarm_stop
04018754 g     O .rwdata	00000002 OSTaskIdleStkSize
04018828 g     O .bss	00000004 alt_irq_active
0400955c g     F .text	000000c0 OSSemAccept
04007f6c g     F .text	000000f0 OSMemPut
04007a20 g     F .text	0000021c OSMemCreate
040187e8 g     O .bss	00000004 OSIdleCtrMax
040000ec g     F .exceptions	000000d0 alt_irq_handler
040173f8 g     O .rwdata	00000028 alt_dev_null
04018768 g     O .rwdata	00000002 OSTicksPerSec
0400ea54 g       .text	00000000 OSIntCtxSw
0401301c g     F .text	00000070 __hi0bits
04015c14 g     F .text	000000d8 __fixdfsi
040187ec g     O .bss	00000004 OSTCBFreeList
04009c4c g     F .text	0000017c OSSemPendAbort
040186f4 g     O .rwdata	00000008 alt_dev_list
04003894 g     F .text	00000120 write
0401876c g     O .rwdata	00000002 OSVersionNbr
0400318c g     F .text	000000d4 fstat
04016bd0 g     O .rwdata	00000020 limits
04018714 g     O .rwdata	00000004 OSEndiannessTest
04013da8 g     F .text	00000120 __pow5mult
04018834 g     O .bss	00000004 __nlocale_changed
04015fc4 g     F .text	00000008 __umodsi3
0400dcec g     F .text	0000006c epcs_read_electronic_signature
04018726 g     O .rwdata	00000002 OSFlagGrpSize
04023f4c g       *ABS*	00000000 end
0400cc4c g     F .text	00000138 altera_avalon_jtag_uart_init
04005aa8 g     F .text	000000c8 OS_TaskStat
040166d0 g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
0400d8d0 g     F .text	00000090 alt_avalon_timer_sc_init
04016064 g     F .text	00000080 __clzsi2
0400d584 g     F .text	000002dc altera_avalon_jtag_uart_write
04002084 g     F .text	00000004 __sfp_lock_acquire
040013f8 g     F .text	000000e4 memchr
04005694 g     F .text	00000054 OS_MemClr
0400f5ac g     F .text	00001eac ___vfprintf_internal_r
0400eb24 g     F .text	00000310 OSTaskStkInit
04002418 g     F .text	00000314 _free_r
04004d14 g     F .text	00000194 OS_EventTaskRdy
040115b4 g     F .text	000001b0 __call_exitprocs
040187f0 g     O .bss	00000001 OSCPUUsage
04018838 g     O .bss	00000004 __mlocale_changed
040186e8 g     O .rwdata	00000004 __malloc_sbrk_base
040001bc g     F .text	00000038 _start
0400045c g     F .text	0000014c task2
0401882c g     O .bss	00000004 _alt_tick_rate
04008958 g     F .text	00000320 OSQPend
0400bb64 g     F .text	0000014c OSTimeDly
04013938 g     F .text	0000014c __lshift
0400ef3c g     F .text	00000238 alt_avalon_spi_command
04018830 g     O .bss	00000004 _alt_nticks
040035f8 g     F .text	00000120 read
0400c134 g     F .text	00000064 alt_sys_init
0401147c g     F .text	00000134 __register_exitproc
040187f1 g     O .bss	00000001 OSTaskCtr
0400bcb0 g     F .text	00000178 OSTimeDlyHMSM
04013a84 g     F .text	000001e8 __multiply
0400d15c g     F .text	00000074 altera_avalon_jtag_uart_close
04018840 g     O .bss	00000028 __malloc_current_mallinfo
0401871a g     O .rwdata	00000002 OSEventMax
04013630 g     F .text	0000017c __d2b
04009dc8 g     F .text	00000128 OSSemPost
0400d960 g     F .text	00000060 epcs_read_status_register
04004888 g     F .text	000000e4 OSSchedUnlock
0400cb04 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0400f328 g     F .text	000000f4 alt_get_fd
040187f4 g     O .bss	00000004 OSMemFreeList
040049dc g     F .text	000000ac OSStatInit
040074e8 g     F .text	000000d4 OSFlagQuery
04016530 g     F .text	000000c8 __fpcmp_parts_d
04018750 g     O .rwdata	00000002 OSTaskCreateExtEn
04002c9c g     F .text	00000070 _close_r
0400dd58 g     F .text	00000068 epcs_read_device_id
0400f468 g     F .text	00000074 memcmp
04004cf8 g     F .text	0000001c OS_Dummy
0400cbb4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
04023f4c g       *ABS*	00000000 __alt_stack_base
0400cbfc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
04001cc0 g     F .text	0000013c __swsetup_r
0402203c g     O .bss	000001e0 OSQTbl
0401561c g     F .text	00000258 __divdf3
040021fc g     F .text	000000f0 __sfp
04013494 g     F .text	00000058 __copybits
04016ff0 g     O .rwdata	00000408 __malloc_av_
04002090 g     F .text	00000004 __sinit_lock_release
04015258 g     F .text	000003c4 __muldf3
040187f8 g     O .bss	00000004 OSTCBHighRdy
04002bc4 g     F .text	00000060 __sread
040187fc g     O .bss	00000004 OSQFreeList
0400f208 g     F .text	00000120 alt_find_file
0400df14 g     F .text	000000b4 alt_dev_llist_insert
04003b1c g     F .text	00000108 __malloc_lock
040037d8 g     F .text	000000bc sbrk
04003e24 g     F .text	00000144 OSEventNameSet
04001dfc g     F .text	000001fc _fflush_r
04014114 g     F .text	000000b4 _calloc_r
04018800 g     O .bss	00000001 OSRdyGrp
04018784 g     O .rwdata	00000008 alt_flash_dev_list
040187a0 g       *ABS*	00000000 __bss_start
04002a40 g     F .text	00000098 memset
040001f4 g     F .text	00000114 main
040187bc g     O .bss	00000004 alt_envp
040187a8 g     O .bss	00000004 __malloc_max_total_mem
0400cb5c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
04016760 g     O .rodata	00000100 OSUnMapTbl
0401874a g     O .rwdata	00000002 OSSemEn
04007140 g     F .text	000003a8 OSFlagPost
04002ad8 g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
04002e1c g     F .text	00000014 fclose
04004ea8 g     F .text	00000110 OS_EventTaskWait
0401c868 g     O .bss	00002000 task2_stk
04005b70 g     F .text	000000c8 OS_TaskStatStkChk
04023dbc g     O .bss	00000190 _atexit0
0400ae78 g     F .text	00000170 OSTaskDelReq
0401197c g     F .text	000015b4 _dtoa_r
04000cb8 g     F .text	00000740 _malloc_r
04018700 g     O .rwdata	00000004 alt_errno
0400496c g     F .text	00000070 OSStart
0401e868 g     O .bss	00002000 task3_stk
04003ac0 g     F .text	0000005c __env_unlock
040027f4 g     F .text	000000b8 _fwalk
0400b364 g     F .text	00000218 OSTaskResume
0400805c g     F .text	000000fc OSMemQuery
0401875c g     O .rwdata	00000002 OSTaskStatEn
04018736 g     O .rwdata	00000002 OSMemMax
04008f74 g     F .text	00000188 OSQPostFront
04015efc g     F .text	00000060 __divsi3
04018801 g     O .bss	00000008 OSRdyTbl
04018710 g     O .rwdata	00000002 OSDebugEn
04016abc g     O .rodata	00000014 __thenan_df
040022ec g     F .text	0000012c _malloc_trim_r
040166d4 g       *ABS*	00000000 __CTOR_END__
04018728 g     O .rwdata	00000002 OSFlagNodeSize
04018770 g     O .rwdata	00000002 OSTmrCfgMax
04014058 g     F .text	000000bc strcmp
0400c550 g     F .text	00000280 alt_epcs_flash_write
0400837c g     F .text	00000214 OSQCreate
0400afe8 g     F .text	000001b8 OSTaskNameGet
040090fc g     F .text	00000234 OSQPostOpt
04004a88 g     F .text	00000250 OSTimeTick
04018758 g     O .rwdata	00000002 OSTaskMax
040166d4 g       *ABS*	00000000 __DTOR_LIST__
0400961c g     F .text	00000114 OSSemCreate
0401877c g     O .rwdata	00000002 OSTmrWheelSize
040158fc g     F .text	00000088 __nedf2
04018752 g     O .rwdata	00000002 OSTaskDelEn
04009ef0 g     F .text	00000130 OSSemQuery
04008590 g     F .text	00000300 OSQDel
04008c78 g     F .text	0000017c OSQPendAbort
0400c100 g     F .text	00000034 alt_irq_init
04003778 g     F .text	00000060 alt_release_fd
04016ad0 g     O .rodata	00000100 __clz_tab
0401883c g     O .bss	00000004 _PathLocale
0400f41c g     F .text	00000014 atexit
04002c24 g     F .text	00000078 _write_r
040047fc g     F .text	0000008c OSSchedLock
04012fd8 g     F .text	0000001c setlocale
04006418 g     F .text	0000013c OSFlagCreate
040186dc g     O .rwdata	00000004 _impure_ptr
040187b4 g     O .bss	00000004 alt_argc
0400e08c g     F .text	00000064 _do_dtors
04018722 g     O .rwdata	00000002 OSEventMultiEn
04006554 g     F .text	000002a8 OSFlagDel
0401880c g     O .bss	00000004 OSEventFreeList
04000020 g       .exceptions	00000000 alt_irq_entry
040131b0 g     F .text	00000080 __ulp
04013fe8 g     F .text	00000040 __isinfd
04006a94 g     F .text	00000644 OSFlagPend
0401876e g     O .rwdata	00000002 OSTmrEn
04002148 g     F .text	00000018 __fp_unlock_all
040186ec g     O .rwdata	00000008 alt_fs_list
04005974 g     F .text	00000080 OS_StrCopy
04018738 g     O .rwdata	00000002 OSMemNameSize
0400eee4 g     F .text	0000001c OSInitHookEnd
04018764 g     O .rwdata	00000002 OSTCBPrioTblMax
04012f44 g     F .text	00000010 localeconv
0400daac g     F .text	000000b4 epcs_read_buffer
04018760 g     O .rwdata	00000002 OSTaskStatStkChkEn
0400c1d0 g     F .text	00000054 alt_epcs_flash_init
0400e1c0 g     F .text	00000050 alt_ic_isr_register
04018734 g     O .rwdata	00000002 OSMemEn
0401873e g     O .rwdata	00000002 OSMutexEn
040187a0 g       *ABS*	00000000 _edata
04023f4c g       *ABS*	00000000 _end
0400e0f0 g     F .text	0000007c alt_flash_open_dev
04018810 g     O .bss	00000001 OSIntNesting
0400d1d0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0400be28 g     F .text	00000210 OSTimeDlyResume
04006940 g     F .text	00000154 OSFlagNameSet
0400b57c g     F .text	000001fc OSTaskStkChk
0400e2ac g     F .text	000000a0 alt_ic_irq_disable
0401873a g     O .rwdata	00000002 OSMemSize
04002b48 g     F .text	0000007c __swrite
040186e4 g     O .rwdata	00000004 __malloc_trim_threshold
04018814 g     O .bss	00000004 OSTCBCur
0400f430 g     F .text	00000038 exit
0401873c g     O .rwdata	00000002 OSMemTblSize
0400272c g     F .text	000000c8 _fwalk_reent
040137ac g     F .text	0000018c __mdiff
0400e16c g     F .text	00000054 alt_flash_close_dev
04015f5c g     F .text	00000060 __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04002088 g     F .text	00000004 __sfp_lock_release
0400461c g     F .text	00000054 OSInit
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400b9a4 g     F .text	00000144 OSTaskQuery
040094b0 g     F .text	000000ac OS_QInit
040059f4 g     F .text	00000058 OS_StrLen
04007e4c g     F .text	00000120 OSMemNameSet
04018756 g     O .rwdata	00000002 OSTaskProfileEn
04018818 g     O .bss	00000004 OSTime
0402221c g     O .bss	00000800 OSTaskIdleStk
04014028 g     F .text	00000030 __isnand
04016638 g     F .text	0000002c _exit
0400ddc0 g     F .text	00000154 alt_alarm_start
040067fc g     F .text	00000144 OSFlagNameGet
0400c038 g     F .text	00000064 OSTimeGet
04015fcc g     F .text	00000098 __muldi3
040028ac g     F .text	00000194 __smakebuf_r
040007a8 g     F .text	00000074 strlen
0400db60 g     F .text	00000050 epcs_write_enable
0400ee74 g     F .text	0000001c OSTaskSwHook
0400e6a4 g     F .text	00000188 open
04022a1c g     O .bss	00000c30 OSEventTbl
04015a0c g     F .text	00000088 __gedf2
0402364c g     O .bss	00000570 OSTCBTbl
0400a020 g     F .text	00000104 OSSemSet
0401878c g     O .rwdata	00000004 alt_priority_mask
04009730 g     F .text	000002a0 OSSemDel
0401881c g     O .bss	00000004 OSFlagFreeList
040005a8 g     F .text	0000014c task3
0400e210 g     F .text	0000009c alt_ic_irq_enable
0401871c g     O .rwdata	00000002 OSEventNameSize
04011458 g     F .text	00000024 __vfprintf_internal
04018820 g     O .bss	00000001 OSStatRdy
00000000 g       *ABS*	00000000 __alt_mem_epcs
04023bbc g     O .bss	00000100 OSTCBPrioTbl
04003a14 g     F .text	000000ac __env_lock
04018762 g     O .rwdata	00000002 OSTaskSwHookEn
04015164 g     F .text	00000080 __subdf3
0400ca78 g     F .text	0000008c alt_epcs_flash_read
0401308c g     F .text	000000c4 __lo0bits
04018790 g     O .rwdata	00000008 alt_alarm_list
0401872a g     O .rwdata	00000002 OSFlagWidth
0400e028 g     F .text	00000064 _do_ctors
04003004 g     F .text	000000fc close
040187c4 g     O .bss	00000004 alt_envsem
04018824 g     O .bss	00000004 OSIdleCtrRun
04004cd8 g     F .text	00000020 OSVersion
04018774 g     O .rwdata	00000002 OSTmrCfgWheelSize
0400bae8 g     F .text	0000007c OS_TaskStkClr
040160e4 g     F .text	00000314 __pack_d
0401874e g     O .rwdata	00000002 OSTaskCreateEn
040052c8 g     F .text	00000068 OS_EventWaitListInit
0400ef00 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0400208c g     F .text	00000004 __sinit_lock_acquire
0400dc14 g     F .text	000000d8 epcs_write_buffer
04013ca8 g     F .text	00000100 __multadd
04012ff4 g     F .text	00000028 _Bfree
0400b778 g     F .text	0000022c OSTaskSuspend
04005a4c g     F .text	0000005c OS_TaskIdle
0401877a g     O .rwdata	00000002 OSTmrTblSize
04009330 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	40046700 	call	4004670 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0ffff17 	ldw	r3,-4(fp)
 4000120:	e0bffe17 	ldw	r2,-8(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	1005003a 	cmpeq	r2,r2,zero
 400012c:	1000161e 	bne	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4000130:	e0bffd17 	ldw	r2,-12(fp)
 4000134:	00c100b4 	movhi	r3,1026
 4000138:	18cf2f04 	addi	r3,r3,15548
 400013c:	100490fa 	slli	r2,r2,3
 4000140:	10c5883a 	add	r2,r2,r3
 4000144:	11400017 	ldw	r5,0(r2)
 4000148:	e0bffd17 	ldw	r2,-12(fp)
 400014c:	00c100b4 	movhi	r3,1026
 4000150:	18cf2f04 	addi	r3,r3,15548
 4000154:	100490fa 	slli	r2,r2,3
 4000158:	10c5883a 	add	r2,r2,r3
 400015c:	10800104 	addi	r2,r2,4
 4000160:	11000017 	ldw	r4,0(r2)
 4000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000168:	0005313a 	rdctl	r2,ipending
 400016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 4000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000178:	e0bfff17 	ldw	r2,-4(fp)
 400017c:	1004c03a 	cmpne	r2,r2,zero
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffe17 	ldw	r2,-8(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a4:	40046ec0 	call	40046ec <OSIntExit>
}
 40001a8:	e037883a 	mov	sp,fp
 40001ac:	dfc00117 	ldw	ra,4(sp)
 40001b0:	df000017 	ldw	fp,0(sp)
 40001b4:	dec00204 	addi	sp,sp,8
 40001b8:	f800283a 	ret

Disassembly of section .text:

040001bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001bc:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001c4:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 40001c8:	d681b714 	ori	gp,gp,1756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001cc:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 40001d0:	10a1e814 	ori	r2,r2,34720

    movhi r3, %hi(__bss_end)
 40001d4:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 40001d8:	18cfd314 	ori	r3,r3,16204

    beq r2, r3, 1f
 40001dc:	10c00326 	beq	r2,r3,40001ec <_start+0x30>

0:
    stw zero, (r2)
 40001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e8:	10fffd36 	bltu	r2,r3,40001e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001ec:	40035300 	call	4003530 <alt_main>

040001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001f0:	003fff06 	br	40001f0 <alt_after_alt_main>

040001f4 <main>:
*                                                  MAIN
*********************************************************************************************************
*/

int  main (void)
{
 40001f4:	defff904 	addi	sp,sp,-28
 40001f8:	dfc00615 	stw	ra,24(sp)
 40001fc:	df000515 	stw	fp,20(sp)
 4000200:	df000504 	addi	fp,sp,20
	OSInit();                                              /* Initialize uC/OS-II                      */
 4000204:	400461c0 	call	400461c <OSInit>

	//PC_DOSSaveReturn();                                    /* Save environment to return to DOS        */

	//PC_VectSet(uCOS, OSCtxSw);                             /* Install uC/OS-II's context switch vector */

	OSTaskCreateExt(task1,
 4000208:	018100b4 	movhi	r6,1026
 400020c:	31aa1904 	addi	r6,r6,-22428
 4000210:	00810074 	movhi	r2,1025
 4000214:	109af604 	addi	r2,r2,27608
 4000218:	1007883a 	mov	r3,r2
 400021c:	008002c4 	movi	r2,11
 4000220:	d8800015 	stw	r2,0(sp)
 4000224:	008100b4 	movhi	r2,1026
 4000228:	10a21a04 	addi	r2,r2,-30616
 400022c:	d8800115 	stw	r2,4(sp)
 4000230:	00820004 	movi	r2,2048
 4000234:	d8800215 	stw	r2,8(sp)
 4000238:	d8c00315 	stw	r3,12(sp)
 400023c:	d8000415 	stw	zero,16(sp)
 4000240:	01010034 	movhi	r4,1024
 4000244:	2100c204 	addi	r4,r4,776
 4000248:	000b883a 	mov	r5,zero
 400024c:	01c002c4 	movi	r7,11
 4000250:	400a86c0 	call	400a86c <OSTaskCreateExt>
					TASK_STK_SIZE,
					(void *)limits[1],
					0);


	OSTaskCreateExt(task2,
 4000254:	018100b4 	movhi	r6,1026
 4000258:	31ba1904 	addi	r6,r6,-6044
 400025c:	00810074 	movhi	r2,1025
 4000260:	109af804 	addi	r2,r2,27616
 4000264:	1007883a 	mov	r3,r2
 4000268:	00800304 	movi	r2,12
 400026c:	d8800015 	stw	r2,0(sp)
 4000270:	008100b4 	movhi	r2,1026
 4000274:	10b21a04 	addi	r2,r2,-14232
 4000278:	d8800115 	stw	r2,4(sp)
 400027c:	00820004 	movi	r2,2048
 4000280:	d8800215 	stw	r2,8(sp)
 4000284:	d8c00315 	stw	r3,12(sp)
 4000288:	d8000415 	stw	zero,16(sp)
 400028c:	01010034 	movhi	r4,1024
 4000290:	21011704 	addi	r4,r4,1116
 4000294:	000b883a 	mov	r5,zero
 4000298:	01c00304 	movi	r7,12
 400029c:	400a86c0 	call	400a86c <OSTaskCreateExt>
					task2_stk,
					TASK_STK_SIZE,
					(void *)limits[2],
					0);

	OSTaskCreateExt(task3,
 40002a0:	018100b4 	movhi	r6,1026
 40002a4:	31821904 	addi	r6,r6,2148
 40002a8:	00810074 	movhi	r2,1025
 40002ac:	109afa04 	addi	r2,r2,27624
 40002b0:	1007883a 	mov	r3,r2
 40002b4:	00800344 	movi	r2,13
 40002b8:	d8800015 	stw	r2,0(sp)
 40002bc:	008100b4 	movhi	r2,1026
 40002c0:	10ba1a04 	addi	r2,r2,-6040
 40002c4:	d8800115 	stw	r2,4(sp)
 40002c8:	00820004 	movi	r2,2048
 40002cc:	d8800215 	stw	r2,8(sp)
 40002d0:	d8c00315 	stw	r3,12(sp)
 40002d4:	d8000415 	stw	zero,16(sp)
 40002d8:	01010034 	movhi	r4,1024
 40002dc:	21016a04 	addi	r4,r4,1448
 40002e0:	000b883a 	mov	r5,zero
 40002e4:	01c00344 	movi	r7,13
 40002e8:	400a86c0 	call	400a86c <OSTaskCreateExt>
						TASK3_PRIORITY,
						task3_stk,
						TASK_STK_SIZE,
						(void *)limits[3],
						0);
	OSStart();                                             /* Start multitasking                       */
 40002ec:	400496c0 	call	400496c <OSStart>
    return 0;
 40002f0:	0005883a 	mov	r2,zero
}
 40002f4:	e037883a 	mov	sp,fp
 40002f8:	dfc00117 	ldw	ra,4(sp)
 40002fc:	df000017 	ldw	fp,0(sp)
 4000300:	dec00204 	addi	sp,sp,8
 4000304:	f800283a 	ret

04000308 <task1>:

void  task1 (void *pdata)
{
 4000308:	defff704 	addi	sp,sp,-36
 400030c:	dfc00815 	stw	ra,32(sp)
 4000310:	df000715 	stw	fp,28(sp)
 4000314:	df000704 	addi	fp,sp,28
 4000318:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr;
#endif

    INT32U start=0; //the start time
 400031c:	e03ffd15 	stw	zero,-12(fp)
    INT32U end;                 //the end time
    INT16U toDelay;

    pdata = pdata;
    OSTimeSet(0);
 4000320:	0009883a 	mov	r4,zero
 4000324:	400c09c0 	call	400c09c <OSTimeSet>
    //OS_EXIT_CRITICAL();

    //OSStatInit();                                          /* Initialize uC/OS-II's statistics         */


    printf("Task 1 start\n");
 4000328:	01010074 	movhi	r4,1025
 400032c:	2119b504 	addi	r4,r4,26324
 4000330:	40007940 	call	4000794 <puts>
 4000334:	00000006 	br	4000338 <task1+0x30>

    while (1)
    {
        while (OSTCBCur->compTime > 0)
 4000338:	008100b4 	movhi	r2,1026
 400033c:	10a20504 	addi	r2,r2,-30700
 4000340:	10800017 	ldw	r2,0(r2)
 4000344:	10801b03 	ldbu	r2,108(r2)
 4000348:	10803fcc 	andi	r2,r2,255
 400034c:	1004c03a 	cmpne	r2,r2,zero
 4000350:	103ff91e 	bne	r2,zero,4000338 <task1+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000354:	0005303a 	rdctl	r2,status
 4000358:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400035c:	e0fffa17 	ldw	r3,-24(fp)
 4000360:	00bfff84 	movi	r2,-2
 4000364:	1884703a 	and	r2,r3,r2
 4000368:	1001703a 	wrctl	status,r2
  
  return context;
 400036c:	e0bffa17 	ldw	r2,-24(fp)
        {

        }  // Blocked here: Computing;

        OS_ENTER_CRITICAL();
 4000370:	e0bffe15 	stw	r2,-8(fp)
        end = OSTimeGet(); // end time of computation
 4000374:	400c0380 	call	400c038 <OSTimeGet>
 4000378:	e0bffc15 	stw	r2,-16(fp)
        if (end > start + OSTCBCur->period)
 400037c:	008100b4 	movhi	r2,1026
 4000380:	10a20504 	addi	r2,r2,-30700
 4000384:	10800017 	ldw	r2,0(r2)
 4000388:	10801b43 	ldbu	r2,109(r2)
 400038c:	10c03fcc 	andi	r3,r2,255
 4000390:	e0bffd17 	ldw	r2,-12(fp)
 4000394:	1887883a 	add	r3,r3,r2
 4000398:	e0bffc17 	ldw	r2,-16(fp)
 400039c:	1880052e 	bgeu	r3,r2,40003b4 <task1+0xac>
        {
            printf("Task 1 miss the deadline\n");
 40003a0:	01010074 	movhi	r4,1025
 40003a4:	2119b904 	addi	r4,r4,26340
 40003a8:	40007940 	call	4000794 <puts>
            toDelay = 0;
 40003ac:	e03ffb0d 	sth	zero,-20(fp)
 40003b0:	00000b06 	br	40003e0 <task1+0xd8>
        }
        else
            toDelay = (OSTCBCur->period) - (end - start);
 40003b4:	008100b4 	movhi	r2,1026
 40003b8:	10a20504 	addi	r2,r2,-30700
 40003bc:	10800017 	ldw	r2,0(r2)
 40003c0:	10801b43 	ldbu	r2,109(r2)
 40003c4:	11003fcc 	andi	r4,r2,255
 40003c8:	e0bffc17 	ldw	r2,-16(fp)
 40003cc:	1007883a 	mov	r3,r2
 40003d0:	e0bffd17 	ldw	r2,-12(fp)
 40003d4:	1885c83a 	sub	r2,r3,r2
 40003d8:	2085c83a 	sub	r2,r4,r2
 40003dc:	e0bffb0d 	sth	r2,-20(fp)
        start = start + (OSTCBCur->period); // next start time
 40003e0:	008100b4 	movhi	r2,1026
 40003e4:	10a20504 	addi	r2,r2,-30700
 40003e8:	10800017 	ldw	r2,0(r2)
 40003ec:	10801b43 	ldbu	r2,109(r2)
 40003f0:	10c03fcc 	andi	r3,r2,255
 40003f4:	e0bffd17 	ldw	r2,-12(fp)
 40003f8:	10c5883a 	add	r2,r2,r3
 40003fc:	e0bffd15 	stw	r2,-12(fp)

        OSTCBCur->deadline = start + (OSTCBCur->period);
 4000400:	008100b4 	movhi	r2,1026
 4000404:	10a20504 	addi	r2,r2,-30700
 4000408:	11000017 	ldw	r4,0(r2)
 400040c:	008100b4 	movhi	r2,1026
 4000410:	10a20504 	addi	r2,r2,-30700
 4000414:	10800017 	ldw	r2,0(r2)
 4000418:	10801b43 	ldbu	r2,109(r2)
 400041c:	10c03fcc 	andi	r3,r2,255
 4000420:	e0bffd17 	ldw	r2,-12(fp)
 4000424:	1885883a 	add	r2,r3,r2
 4000428:	20801c15 	stw	r2,112(r4)
        OSTCBCur->compTime = 1;
 400042c:	008100b4 	movhi	r2,1026
 4000430:	10a20504 	addi	r2,r2,-30700
 4000434:	10c00017 	ldw	r3,0(r2)
 4000438:	00800044 	movi	r2,1
 400043c:	18801b05 	stb	r2,108(r3)
 4000440:	e0bffe17 	ldw	r2,-8(fp)
 4000444:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000448:	e0bff917 	ldw	r2,-28(fp)
 400044c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();

        OSTimeDly(toDelay); // delay and wait (P-C) times
 4000450:	e13ffb0b 	ldhu	r4,-20(fp)
 4000454:	400bb640 	call	400bb64 <OSTimeDly>
    }
 4000458:	003fb706 	br	4000338 <task1+0x30>

0400045c <task2>:
}


/* Prints "Hello World" and sleeps for three seconds */
void  task2 (void *pdata)
{
 400045c:	defff704 	addi	sp,sp,-36
 4000460:	dfc00815 	stw	ra,32(sp)
 4000464:	df000715 	stw	fp,28(sp)
 4000468:	df000704 	addi	fp,sp,28
 400046c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr;
#endif
    INT32U start = 0; //the start time
 4000470:	e03ffd15 	stw	zero,-12(fp)
    INT32U end;                 //the end time
    INT16U toDelay;

    pdata = pdata;
    printf("Task 2 start\n");
 4000474:	01010074 	movhi	r4,1025
 4000478:	2119c004 	addi	r4,r4,26368
 400047c:	40007940 	call	4000794 <puts>
 4000480:	00000006 	br	4000484 <task2+0x28>

    while (1)
    {

        while (OSTCBCur->compTime > 0)
 4000484:	008100b4 	movhi	r2,1026
 4000488:	10a20504 	addi	r2,r2,-30700
 400048c:	10800017 	ldw	r2,0(r2)
 4000490:	10801b03 	ldbu	r2,108(r2)
 4000494:	10803fcc 	andi	r2,r2,255
 4000498:	1004c03a 	cmpne	r2,r2,zero
 400049c:	103ff91e 	bne	r2,zero,4000484 <task2+0x28>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40004a0:	0005303a 	rdctl	r2,status
 40004a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40004a8:	e0fffa17 	ldw	r3,-24(fp)
 40004ac:	00bfff84 	movi	r2,-2
 40004b0:	1884703a 	and	r2,r3,r2
 40004b4:	1001703a 	wrctl	status,r2
  
  return context;
 40004b8:	e0bffa17 	ldw	r2,-24(fp)
        {

        }// Blocked here: Computing;

        OS_ENTER_CRITICAL();
 40004bc:	e0bffe15 	stw	r2,-8(fp)
        end = OSTimeGet(); // end time of computation
 40004c0:	400c0380 	call	400c038 <OSTimeGet>
 40004c4:	e0bffc15 	stw	r2,-16(fp)
        if (end > start + OSTCBCur->period)
 40004c8:	008100b4 	movhi	r2,1026
 40004cc:	10a20504 	addi	r2,r2,-30700
 40004d0:	10800017 	ldw	r2,0(r2)
 40004d4:	10801b43 	ldbu	r2,109(r2)
 40004d8:	10c03fcc 	andi	r3,r2,255
 40004dc:	e0bffd17 	ldw	r2,-12(fp)
 40004e0:	1887883a 	add	r3,r3,r2
 40004e4:	e0bffc17 	ldw	r2,-16(fp)
 40004e8:	1880052e 	bgeu	r3,r2,4000500 <task2+0xa4>
        {
            printf("Task 2 miss the deadline\n");
 40004ec:	01010074 	movhi	r4,1025
 40004f0:	2119c404 	addi	r4,r4,26384
 40004f4:	40007940 	call	4000794 <puts>
            toDelay = 0;
 40004f8:	e03ffb0d 	sth	zero,-20(fp)
 40004fc:	00000b06 	br	400052c <task2+0xd0>
        }
        else
            toDelay = (OSTCBCur->period) - (end - start);
 4000500:	008100b4 	movhi	r2,1026
 4000504:	10a20504 	addi	r2,r2,-30700
 4000508:	10800017 	ldw	r2,0(r2)
 400050c:	10801b43 	ldbu	r2,109(r2)
 4000510:	11003fcc 	andi	r4,r2,255
 4000514:	e0bffc17 	ldw	r2,-16(fp)
 4000518:	1007883a 	mov	r3,r2
 400051c:	e0bffd17 	ldw	r2,-12(fp)
 4000520:	1885c83a 	sub	r2,r3,r2
 4000524:	2085c83a 	sub	r2,r4,r2
 4000528:	e0bffb0d 	sth	r2,-20(fp)
        start = start + (OSTCBCur->period); // next start time
 400052c:	008100b4 	movhi	r2,1026
 4000530:	10a20504 	addi	r2,r2,-30700
 4000534:	10800017 	ldw	r2,0(r2)
 4000538:	10801b43 	ldbu	r2,109(r2)
 400053c:	10c03fcc 	andi	r3,r2,255
 4000540:	e0bffd17 	ldw	r2,-12(fp)
 4000544:	10c5883a 	add	r2,r2,r3
 4000548:	e0bffd15 	stw	r2,-12(fp)

        OSTCBCur->deadline = start + (OSTCBCur->period);
 400054c:	008100b4 	movhi	r2,1026
 4000550:	10a20504 	addi	r2,r2,-30700
 4000554:	11000017 	ldw	r4,0(r2)
 4000558:	008100b4 	movhi	r2,1026
 400055c:	10a20504 	addi	r2,r2,-30700
 4000560:	10800017 	ldw	r2,0(r2)
 4000564:	10801b43 	ldbu	r2,109(r2)
 4000568:	10c03fcc 	andi	r3,r2,255
 400056c:	e0bffd17 	ldw	r2,-12(fp)
 4000570:	1885883a 	add	r2,r3,r2
 4000574:	20801c15 	stw	r2,112(r4)
        OSTCBCur->compTime = 2;
 4000578:	008100b4 	movhi	r2,1026
 400057c:	10a20504 	addi	r2,r2,-30700
 4000580:	10c00017 	ldw	r3,0(r2)
 4000584:	00800084 	movi	r2,2
 4000588:	18801b05 	stb	r2,108(r3)
 400058c:	e0bffe17 	ldw	r2,-8(fp)
 4000590:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000594:	e0bff917 	ldw	r2,-28(fp)
 4000598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();

        OSTimeDly(toDelay); // delay and wait (P-C) times
 400059c:	e13ffb0b 	ldhu	r4,-20(fp)
 40005a0:	400bb640 	call	400bb64 <OSTimeDly>
    }
 40005a4:	003fb706 	br	4000484 <task2+0x28>

040005a8 <task3>:
}

void  task3 (void *pdata)
{
 40005a8:	defff704 	addi	sp,sp,-36
 40005ac:	dfc00815 	stw	ra,32(sp)
 40005b0:	df000715 	stw	fp,28(sp)
 40005b4:	df000704 	addi	fp,sp,28
 40005b8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr;
#endif
    INT32U start = 0; //the start time
 40005bc:	e03ffd15 	stw	zero,-12(fp)
    INT32U end;                 //the end time
    INT16U toDelay;

    pdata = pdata;
    printf("Task 3 start\n");
 40005c0:	01010074 	movhi	r4,1025
 40005c4:	2119cb04 	addi	r4,r4,26412
 40005c8:	40007940 	call	4000794 <puts>
 40005cc:	00000006 	br	40005d0 <task3+0x28>

    while (1)
    {

        while (OSTCBCur->compTime > 0)
 40005d0:	008100b4 	movhi	r2,1026
 40005d4:	10a20504 	addi	r2,r2,-30700
 40005d8:	10800017 	ldw	r2,0(r2)
 40005dc:	10801b03 	ldbu	r2,108(r2)
 40005e0:	10803fcc 	andi	r2,r2,255
 40005e4:	1004c03a 	cmpne	r2,r2,zero
 40005e8:	103ff91e 	bne	r2,zero,40005d0 <task3+0x28>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40005ec:	0005303a 	rdctl	r2,status
 40005f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40005f4:	e0fffa17 	ldw	r3,-24(fp)
 40005f8:	00bfff84 	movi	r2,-2
 40005fc:	1884703a 	and	r2,r3,r2
 4000600:	1001703a 	wrctl	status,r2
  
  return context;
 4000604:	e0bffa17 	ldw	r2,-24(fp)
        {

        }// Blocked here: Computing;

        OS_ENTER_CRITICAL();
 4000608:	e0bffe15 	stw	r2,-8(fp)
        end = OSTimeGet(); // end time of computation
 400060c:	400c0380 	call	400c038 <OSTimeGet>
 4000610:	e0bffc15 	stw	r2,-16(fp)
        if (end > start + OSTCBCur->period)
 4000614:	008100b4 	movhi	r2,1026
 4000618:	10a20504 	addi	r2,r2,-30700
 400061c:	10800017 	ldw	r2,0(r2)
 4000620:	10801b43 	ldbu	r2,109(r2)
 4000624:	10c03fcc 	andi	r3,r2,255
 4000628:	e0bffd17 	ldw	r2,-12(fp)
 400062c:	1887883a 	add	r3,r3,r2
 4000630:	e0bffc17 	ldw	r2,-16(fp)
 4000634:	1880052e 	bgeu	r3,r2,400064c <task3+0xa4>
        {
            printf("Task 2 miss the deadline\n");
 4000638:	01010074 	movhi	r4,1025
 400063c:	2119c404 	addi	r4,r4,26384
 4000640:	40007940 	call	4000794 <puts>
            toDelay = 0;
 4000644:	e03ffb0d 	sth	zero,-20(fp)
 4000648:	00000b06 	br	4000678 <task3+0xd0>
        }
        else
            toDelay = (OSTCBCur->period) - (end - start);
 400064c:	008100b4 	movhi	r2,1026
 4000650:	10a20504 	addi	r2,r2,-30700
 4000654:	10800017 	ldw	r2,0(r2)
 4000658:	10801b43 	ldbu	r2,109(r2)
 400065c:	11003fcc 	andi	r4,r2,255
 4000660:	e0bffc17 	ldw	r2,-16(fp)
 4000664:	1007883a 	mov	r3,r2
 4000668:	e0bffd17 	ldw	r2,-12(fp)
 400066c:	1885c83a 	sub	r2,r3,r2
 4000670:	2085c83a 	sub	r2,r4,r2
 4000674:	e0bffb0d 	sth	r2,-20(fp)
        start = start + (OSTCBCur->period); // next start time
 4000678:	008100b4 	movhi	r2,1026
 400067c:	10a20504 	addi	r2,r2,-30700
 4000680:	10800017 	ldw	r2,0(r2)
 4000684:	10801b43 	ldbu	r2,109(r2)
 4000688:	10c03fcc 	andi	r3,r2,255
 400068c:	e0bffd17 	ldw	r2,-12(fp)
 4000690:	10c5883a 	add	r2,r2,r3
 4000694:	e0bffd15 	stw	r2,-12(fp)

        OSTCBCur->deadline = start + (OSTCBCur->period);
 4000698:	008100b4 	movhi	r2,1026
 400069c:	10a20504 	addi	r2,r2,-30700
 40006a0:	11000017 	ldw	r4,0(r2)
 40006a4:	008100b4 	movhi	r2,1026
 40006a8:	10a20504 	addi	r2,r2,-30700
 40006ac:	10800017 	ldw	r2,0(r2)
 40006b0:	10801b43 	ldbu	r2,109(r2)
 40006b4:	10c03fcc 	andi	r3,r2,255
 40006b8:	e0bffd17 	ldw	r2,-12(fp)
 40006bc:	1885883a 	add	r2,r3,r2
 40006c0:	20801c15 	stw	r2,112(r4)
        OSTCBCur->compTime = 2;
 40006c4:	008100b4 	movhi	r2,1026
 40006c8:	10a20504 	addi	r2,r2,-30700
 40006cc:	10c00017 	ldw	r3,0(r2)
 40006d0:	00800084 	movi	r2,2
 40006d4:	18801b05 	stb	r2,108(r3)
 40006d8:	e0bffe17 	ldw	r2,-8(fp)
 40006dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40006e0:	e0bff917 	ldw	r2,-28(fp)
 40006e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();

        OSTimeDly(toDelay); // delay and wait (P-C) times
 40006e8:	e13ffb0b 	ldhu	r4,-20(fp)
 40006ec:	400bb640 	call	400bb64 <OSTimeDly>
    }
 40006f0:	003fb706 	br	40005d0 <task3+0x28>

040006f4 <_puts_r>:
 40006f4:	defff604 	addi	sp,sp,-40
 40006f8:	dc400715 	stw	r17,28(sp)
 40006fc:	2023883a 	mov	r17,r4
 4000700:	2809883a 	mov	r4,r5
 4000704:	dfc00915 	stw	ra,36(sp)
 4000708:	dcc00815 	stw	r19,32(sp)
 400070c:	2827883a 	mov	r19,r5
 4000710:	40007a80 	call	40007a8 <strlen>
 4000714:	89400217 	ldw	r5,8(r17)
 4000718:	00c10074 	movhi	r3,1025
 400071c:	18d9cf04 	addi	r3,r3,26428
 4000720:	01c00044 	movi	r7,1
 4000724:	12000044 	addi	r8,r2,1
 4000728:	d8c00515 	stw	r3,20(sp)
 400072c:	d9c00615 	stw	r7,24(sp)
 4000730:	d8c00304 	addi	r3,sp,12
 4000734:	01c00084 	movi	r7,2
 4000738:	8809883a 	mov	r4,r17
 400073c:	d80d883a 	mov	r6,sp
 4000740:	d8c00015 	stw	r3,0(sp)
 4000744:	dcc00315 	stw	r19,12(sp)
 4000748:	da000215 	stw	r8,8(sp)
 400074c:	d9c00115 	stw	r7,4(sp)
 4000750:	d8800415 	stw	r2,16(sp)
 4000754:	400081c0 	call	400081c <__sfvwrite_r>
 4000758:	00ffffc4 	movi	r3,-1
 400075c:	10000626 	beq	r2,zero,4000778 <_puts_r+0x84>
 4000760:	1805883a 	mov	r2,r3
 4000764:	dfc00917 	ldw	ra,36(sp)
 4000768:	dcc00817 	ldw	r19,32(sp)
 400076c:	dc400717 	ldw	r17,28(sp)
 4000770:	dec00a04 	addi	sp,sp,40
 4000774:	f800283a 	ret
 4000778:	00c00284 	movi	r3,10
 400077c:	1805883a 	mov	r2,r3
 4000780:	dfc00917 	ldw	ra,36(sp)
 4000784:	dcc00817 	ldw	r19,32(sp)
 4000788:	dc400717 	ldw	r17,28(sp)
 400078c:	dec00a04 	addi	sp,sp,40
 4000790:	f800283a 	ret

04000794 <puts>:
 4000794:	008100b4 	movhi	r2,1026
 4000798:	10a1b704 	addi	r2,r2,-31012
 400079c:	200b883a 	mov	r5,r4
 40007a0:	11000017 	ldw	r4,0(r2)
 40007a4:	40006f41 	jmpi	40006f4 <_puts_r>

040007a8 <strlen>:
 40007a8:	208000cc 	andi	r2,r4,3
 40007ac:	2011883a 	mov	r8,r4
 40007b0:	1000161e 	bne	r2,zero,400080c <strlen+0x64>
 40007b4:	20c00017 	ldw	r3,0(r4)
 40007b8:	017fbff4 	movhi	r5,65279
 40007bc:	297fbfc4 	addi	r5,r5,-257
 40007c0:	01e02074 	movhi	r7,32897
 40007c4:	39e02004 	addi	r7,r7,-32640
 40007c8:	1945883a 	add	r2,r3,r5
 40007cc:	11c4703a 	and	r2,r2,r7
 40007d0:	00c6303a 	nor	r3,zero,r3
 40007d4:	1886703a 	and	r3,r3,r2
 40007d8:	18000c1e 	bne	r3,zero,400080c <strlen+0x64>
 40007dc:	280d883a 	mov	r6,r5
 40007e0:	380b883a 	mov	r5,r7
 40007e4:	21000104 	addi	r4,r4,4
 40007e8:	20800017 	ldw	r2,0(r4)
 40007ec:	1187883a 	add	r3,r2,r6
 40007f0:	1946703a 	and	r3,r3,r5
 40007f4:	0084303a 	nor	r2,zero,r2
 40007f8:	10c4703a 	and	r2,r2,r3
 40007fc:	103ff926 	beq	r2,zero,40007e4 <strlen+0x3c>
 4000800:	20800007 	ldb	r2,0(r4)
 4000804:	10000326 	beq	r2,zero,4000814 <strlen+0x6c>
 4000808:	21000044 	addi	r4,r4,1
 400080c:	20800007 	ldb	r2,0(r4)
 4000810:	103ffd1e 	bne	r2,zero,4000808 <strlen+0x60>
 4000814:	2205c83a 	sub	r2,r4,r8
 4000818:	f800283a 	ret

0400081c <__sfvwrite_r>:
 400081c:	30800217 	ldw	r2,8(r6)
 4000820:	defff504 	addi	sp,sp,-44
 4000824:	df000915 	stw	fp,36(sp)
 4000828:	dd800715 	stw	r22,28(sp)
 400082c:	dc800315 	stw	r18,12(sp)
 4000830:	dfc00a15 	stw	ra,40(sp)
 4000834:	ddc00815 	stw	r23,32(sp)
 4000838:	dd400615 	stw	r21,24(sp)
 400083c:	dd000515 	stw	r20,20(sp)
 4000840:	dcc00415 	stw	r19,16(sp)
 4000844:	dc400215 	stw	r17,8(sp)
 4000848:	dc000115 	stw	r16,4(sp)
 400084c:	302d883a 	mov	r22,r6
 4000850:	2039883a 	mov	fp,r4
 4000854:	2825883a 	mov	r18,r5
 4000858:	10001c26 	beq	r2,zero,40008cc <__sfvwrite_r+0xb0>
 400085c:	29c0030b 	ldhu	r7,12(r5)
 4000860:	3880020c 	andi	r2,r7,8
 4000864:	10002726 	beq	r2,zero,4000904 <__sfvwrite_r+0xe8>
 4000868:	28800417 	ldw	r2,16(r5)
 400086c:	10002526 	beq	r2,zero,4000904 <__sfvwrite_r+0xe8>
 4000870:	3880008c 	andi	r2,r7,2
 4000874:	b5400017 	ldw	r21,0(r22)
 4000878:	10002826 	beq	r2,zero,400091c <__sfvwrite_r+0x100>
 400087c:	0021883a 	mov	r16,zero
 4000880:	0023883a 	mov	r17,zero
 4000884:	880d883a 	mov	r6,r17
 4000888:	e009883a 	mov	r4,fp
 400088c:	00810004 	movi	r2,1024
 4000890:	80006e26 	beq	r16,zero,4000a4c <__sfvwrite_r+0x230>
 4000894:	800f883a 	mov	r7,r16
 4000898:	91400717 	ldw	r5,28(r18)
 400089c:	1400012e 	bgeu	r2,r16,40008a4 <__sfvwrite_r+0x88>
 40008a0:	100f883a 	mov	r7,r2
 40008a4:	90c00917 	ldw	r3,36(r18)
 40008a8:	183ee83a 	callr	r3
 40008ac:	1007883a 	mov	r3,r2
 40008b0:	80a1c83a 	sub	r16,r16,r2
 40008b4:	88a3883a 	add	r17,r17,r2
 40008b8:	00806d0e 	bge	zero,r2,4000a70 <__sfvwrite_r+0x254>
 40008bc:	b0800217 	ldw	r2,8(r22)
 40008c0:	10c5c83a 	sub	r2,r2,r3
 40008c4:	b0800215 	stw	r2,8(r22)
 40008c8:	103fee1e 	bne	r2,zero,4000884 <__sfvwrite_r+0x68>
 40008cc:	0009883a 	mov	r4,zero
 40008d0:	2005883a 	mov	r2,r4
 40008d4:	dfc00a17 	ldw	ra,40(sp)
 40008d8:	df000917 	ldw	fp,36(sp)
 40008dc:	ddc00817 	ldw	r23,32(sp)
 40008e0:	dd800717 	ldw	r22,28(sp)
 40008e4:	dd400617 	ldw	r21,24(sp)
 40008e8:	dd000517 	ldw	r20,20(sp)
 40008ec:	dcc00417 	ldw	r19,16(sp)
 40008f0:	dc800317 	ldw	r18,12(sp)
 40008f4:	dc400217 	ldw	r17,8(sp)
 40008f8:	dc000117 	ldw	r16,4(sp)
 40008fc:	dec00b04 	addi	sp,sp,44
 4000900:	f800283a 	ret
 4000904:	4001cc00 	call	4001cc0 <__swsetup_r>
 4000908:	1000e41e 	bne	r2,zero,4000c9c <__sfvwrite_r+0x480>
 400090c:	91c0030b 	ldhu	r7,12(r18)
 4000910:	b5400017 	ldw	r21,0(r22)
 4000914:	3880008c 	andi	r2,r7,2
 4000918:	103fd81e 	bne	r2,zero,400087c <__sfvwrite_r+0x60>
 400091c:	3880004c 	andi	r2,r7,1
 4000920:	1005003a 	cmpeq	r2,r2,zero
 4000924:	10005726 	beq	r2,zero,4000a84 <__sfvwrite_r+0x268>
 4000928:	0029883a 	mov	r20,zero
 400092c:	002f883a 	mov	r23,zero
 4000930:	a0004226 	beq	r20,zero,4000a3c <__sfvwrite_r+0x220>
 4000934:	3880800c 	andi	r2,r7,512
 4000938:	94000217 	ldw	r16,8(r18)
 400093c:	10008b26 	beq	r2,zero,4000b6c <__sfvwrite_r+0x350>
 4000940:	800d883a 	mov	r6,r16
 4000944:	a400a536 	bltu	r20,r16,4000bdc <__sfvwrite_r+0x3c0>
 4000948:	3881200c 	andi	r2,r7,1152
 400094c:	10002726 	beq	r2,zero,40009ec <__sfvwrite_r+0x1d0>
 4000950:	90800517 	ldw	r2,20(r18)
 4000954:	92000417 	ldw	r8,16(r18)
 4000958:	91400017 	ldw	r5,0(r18)
 400095c:	1087883a 	add	r3,r2,r2
 4000960:	1887883a 	add	r3,r3,r2
 4000964:	1808d7fa 	srli	r4,r3,31
 4000968:	2a21c83a 	sub	r16,r5,r8
 400096c:	80800044 	addi	r2,r16,1
 4000970:	20c9883a 	add	r4,r4,r3
 4000974:	2027d07a 	srai	r19,r4,1
 4000978:	a085883a 	add	r2,r20,r2
 400097c:	980d883a 	mov	r6,r19
 4000980:	9880022e 	bgeu	r19,r2,400098c <__sfvwrite_r+0x170>
 4000984:	1027883a 	mov	r19,r2
 4000988:	100d883a 	mov	r6,r2
 400098c:	3881000c 	andi	r2,r7,1024
 4000990:	1000b826 	beq	r2,zero,4000c74 <__sfvwrite_r+0x458>
 4000994:	300b883a 	mov	r5,r6
 4000998:	e009883a 	mov	r4,fp
 400099c:	4000cb80 	call	4000cb8 <_malloc_r>
 40009a0:	10003126 	beq	r2,zero,4000a68 <__sfvwrite_r+0x24c>
 40009a4:	91400417 	ldw	r5,16(r18)
 40009a8:	1009883a 	mov	r4,r2
 40009ac:	800d883a 	mov	r6,r16
 40009b0:	1023883a 	mov	r17,r2
 40009b4:	40014dc0 	call	40014dc <memcpy>
 40009b8:	90c0030b 	ldhu	r3,12(r18)
 40009bc:	00beffc4 	movi	r2,-1025
 40009c0:	1886703a 	and	r3,r3,r2
 40009c4:	18c02014 	ori	r3,r3,128
 40009c8:	90c0030d 	sth	r3,12(r18)
 40009cc:	9c07c83a 	sub	r3,r19,r16
 40009d0:	8c05883a 	add	r2,r17,r16
 40009d4:	a00d883a 	mov	r6,r20
 40009d8:	a021883a 	mov	r16,r20
 40009dc:	90800015 	stw	r2,0(r18)
 40009e0:	90c00215 	stw	r3,8(r18)
 40009e4:	94400415 	stw	r17,16(r18)
 40009e8:	94c00515 	stw	r19,20(r18)
 40009ec:	91000017 	ldw	r4,0(r18)
 40009f0:	b80b883a 	mov	r5,r23
 40009f4:	a023883a 	mov	r17,r20
 40009f8:	400157c0 	call	400157c <memmove>
 40009fc:	90c00217 	ldw	r3,8(r18)
 4000a00:	90800017 	ldw	r2,0(r18)
 4000a04:	a027883a 	mov	r19,r20
 4000a08:	1c07c83a 	sub	r3,r3,r16
 4000a0c:	1405883a 	add	r2,r2,r16
 4000a10:	90c00215 	stw	r3,8(r18)
 4000a14:	a021883a 	mov	r16,r20
 4000a18:	90800015 	stw	r2,0(r18)
 4000a1c:	b0800217 	ldw	r2,8(r22)
 4000a20:	1405c83a 	sub	r2,r2,r16
 4000a24:	b0800215 	stw	r2,8(r22)
 4000a28:	103fa826 	beq	r2,zero,40008cc <__sfvwrite_r+0xb0>
 4000a2c:	a469c83a 	sub	r20,r20,r17
 4000a30:	91c0030b 	ldhu	r7,12(r18)
 4000a34:	bcef883a 	add	r23,r23,r19
 4000a38:	a03fbe1e 	bne	r20,zero,4000934 <__sfvwrite_r+0x118>
 4000a3c:	adc00017 	ldw	r23,0(r21)
 4000a40:	ad000117 	ldw	r20,4(r21)
 4000a44:	ad400204 	addi	r21,r21,8
 4000a48:	003fb906 	br	4000930 <__sfvwrite_r+0x114>
 4000a4c:	ac400017 	ldw	r17,0(r21)
 4000a50:	ac000117 	ldw	r16,4(r21)
 4000a54:	ad400204 	addi	r21,r21,8
 4000a58:	003f8a06 	br	4000884 <__sfvwrite_r+0x68>
 4000a5c:	91400417 	ldw	r5,16(r18)
 4000a60:	e009883a 	mov	r4,fp
 4000a64:	40024180 	call	4002418 <_free_r>
 4000a68:	00800304 	movi	r2,12
 4000a6c:	e0800015 	stw	r2,0(fp)
 4000a70:	9080030b 	ldhu	r2,12(r18)
 4000a74:	013fffc4 	movi	r4,-1
 4000a78:	10801014 	ori	r2,r2,64
 4000a7c:	9080030d 	sth	r2,12(r18)
 4000a80:	003f9306 	br	40008d0 <__sfvwrite_r+0xb4>
 4000a84:	0027883a 	mov	r19,zero
 4000a88:	002f883a 	mov	r23,zero
 4000a8c:	d8000015 	stw	zero,0(sp)
 4000a90:	0029883a 	mov	r20,zero
 4000a94:	98001e26 	beq	r19,zero,4000b10 <__sfvwrite_r+0x2f4>
 4000a98:	d8c00017 	ldw	r3,0(sp)
 4000a9c:	1804c03a 	cmpne	r2,r3,zero
 4000aa0:	10005e26 	beq	r2,zero,4000c1c <__sfvwrite_r+0x400>
 4000aa4:	9821883a 	mov	r16,r19
 4000aa8:	a4c0012e 	bgeu	r20,r19,4000ab0 <__sfvwrite_r+0x294>
 4000aac:	a021883a 	mov	r16,r20
 4000ab0:	91000017 	ldw	r4,0(r18)
 4000ab4:	90800417 	ldw	r2,16(r18)
 4000ab8:	91800217 	ldw	r6,8(r18)
 4000abc:	91c00517 	ldw	r7,20(r18)
 4000ac0:	1100022e 	bgeu	r2,r4,4000acc <__sfvwrite_r+0x2b0>
 4000ac4:	31e3883a 	add	r17,r6,r7
 4000ac8:	8c001616 	blt	r17,r16,4000b24 <__sfvwrite_r+0x308>
 4000acc:	81c03816 	blt	r16,r7,4000bb0 <__sfvwrite_r+0x394>
 4000ad0:	90c00917 	ldw	r3,36(r18)
 4000ad4:	91400717 	ldw	r5,28(r18)
 4000ad8:	e009883a 	mov	r4,fp
 4000adc:	b80d883a 	mov	r6,r23
 4000ae0:	183ee83a 	callr	r3
 4000ae4:	1023883a 	mov	r17,r2
 4000ae8:	00bfe10e 	bge	zero,r2,4000a70 <__sfvwrite_r+0x254>
 4000aec:	a469c83a 	sub	r20,r20,r17
 4000af0:	a0001826 	beq	r20,zero,4000b54 <__sfvwrite_r+0x338>
 4000af4:	b0800217 	ldw	r2,8(r22)
 4000af8:	1445c83a 	sub	r2,r2,r17
 4000afc:	b0800215 	stw	r2,8(r22)
 4000b00:	103f7226 	beq	r2,zero,40008cc <__sfvwrite_r+0xb0>
 4000b04:	9c67c83a 	sub	r19,r19,r17
 4000b08:	bc6f883a 	add	r23,r23,r17
 4000b0c:	983fe21e 	bne	r19,zero,4000a98 <__sfvwrite_r+0x27c>
 4000b10:	adc00017 	ldw	r23,0(r21)
 4000b14:	acc00117 	ldw	r19,4(r21)
 4000b18:	ad400204 	addi	r21,r21,8
 4000b1c:	d8000015 	stw	zero,0(sp)
 4000b20:	003fdc06 	br	4000a94 <__sfvwrite_r+0x278>
 4000b24:	b80b883a 	mov	r5,r23
 4000b28:	880d883a 	mov	r6,r17
 4000b2c:	400157c0 	call	400157c <memmove>
 4000b30:	90c00017 	ldw	r3,0(r18)
 4000b34:	e009883a 	mov	r4,fp
 4000b38:	900b883a 	mov	r5,r18
 4000b3c:	1c47883a 	add	r3,r3,r17
 4000b40:	90c00015 	stw	r3,0(r18)
 4000b44:	4001dfc0 	call	4001dfc <_fflush_r>
 4000b48:	103fc91e 	bne	r2,zero,4000a70 <__sfvwrite_r+0x254>
 4000b4c:	a469c83a 	sub	r20,r20,r17
 4000b50:	a03fe81e 	bne	r20,zero,4000af4 <__sfvwrite_r+0x2d8>
 4000b54:	e009883a 	mov	r4,fp
 4000b58:	900b883a 	mov	r5,r18
 4000b5c:	4001dfc0 	call	4001dfc <_fflush_r>
 4000b60:	103fc31e 	bne	r2,zero,4000a70 <__sfvwrite_r+0x254>
 4000b64:	d8000015 	stw	zero,0(sp)
 4000b68:	003fe206 	br	4000af4 <__sfvwrite_r+0x2d8>
 4000b6c:	91000017 	ldw	r4,0(r18)
 4000b70:	90800417 	ldw	r2,16(r18)
 4000b74:	1100022e 	bgeu	r2,r4,4000b80 <__sfvwrite_r+0x364>
 4000b78:	8023883a 	mov	r17,r16
 4000b7c:	85003136 	bltu	r16,r20,4000c44 <__sfvwrite_r+0x428>
 4000b80:	91c00517 	ldw	r7,20(r18)
 4000b84:	a1c01836 	bltu	r20,r7,4000be8 <__sfvwrite_r+0x3cc>
 4000b88:	90c00917 	ldw	r3,36(r18)
 4000b8c:	91400717 	ldw	r5,28(r18)
 4000b90:	e009883a 	mov	r4,fp
 4000b94:	b80d883a 	mov	r6,r23
 4000b98:	183ee83a 	callr	r3
 4000b9c:	1021883a 	mov	r16,r2
 4000ba0:	00bfb30e 	bge	zero,r2,4000a70 <__sfvwrite_r+0x254>
 4000ba4:	1023883a 	mov	r17,r2
 4000ba8:	1027883a 	mov	r19,r2
 4000bac:	003f9b06 	br	4000a1c <__sfvwrite_r+0x200>
 4000bb0:	b80b883a 	mov	r5,r23
 4000bb4:	800d883a 	mov	r6,r16
 4000bb8:	400157c0 	call	400157c <memmove>
 4000bbc:	90c00217 	ldw	r3,8(r18)
 4000bc0:	90800017 	ldw	r2,0(r18)
 4000bc4:	8023883a 	mov	r17,r16
 4000bc8:	1c07c83a 	sub	r3,r3,r16
 4000bcc:	1405883a 	add	r2,r2,r16
 4000bd0:	90c00215 	stw	r3,8(r18)
 4000bd4:	90800015 	stw	r2,0(r18)
 4000bd8:	003fc406 	br	4000aec <__sfvwrite_r+0x2d0>
 4000bdc:	a00d883a 	mov	r6,r20
 4000be0:	a021883a 	mov	r16,r20
 4000be4:	003f8106 	br	40009ec <__sfvwrite_r+0x1d0>
 4000be8:	b80b883a 	mov	r5,r23
 4000bec:	a00d883a 	mov	r6,r20
 4000bf0:	400157c0 	call	400157c <memmove>
 4000bf4:	90c00217 	ldw	r3,8(r18)
 4000bf8:	90800017 	ldw	r2,0(r18)
 4000bfc:	a021883a 	mov	r16,r20
 4000c00:	1d07c83a 	sub	r3,r3,r20
 4000c04:	1505883a 	add	r2,r2,r20
 4000c08:	a023883a 	mov	r17,r20
 4000c0c:	a027883a 	mov	r19,r20
 4000c10:	90c00215 	stw	r3,8(r18)
 4000c14:	90800015 	stw	r2,0(r18)
 4000c18:	003f8006 	br	4000a1c <__sfvwrite_r+0x200>
 4000c1c:	b809883a 	mov	r4,r23
 4000c20:	01400284 	movi	r5,10
 4000c24:	980d883a 	mov	r6,r19
 4000c28:	40013f80 	call	40013f8 <memchr>
 4000c2c:	10001726 	beq	r2,zero,4000c8c <__sfvwrite_r+0x470>
 4000c30:	15c5c83a 	sub	r2,r2,r23
 4000c34:	15000044 	addi	r20,r2,1
 4000c38:	00800044 	movi	r2,1
 4000c3c:	d8800015 	stw	r2,0(sp)
 4000c40:	003f9806 	br	4000aa4 <__sfvwrite_r+0x288>
 4000c44:	b80b883a 	mov	r5,r23
 4000c48:	800d883a 	mov	r6,r16
 4000c4c:	400157c0 	call	400157c <memmove>
 4000c50:	90c00017 	ldw	r3,0(r18)
 4000c54:	e009883a 	mov	r4,fp
 4000c58:	900b883a 	mov	r5,r18
 4000c5c:	1c07883a 	add	r3,r3,r16
 4000c60:	90c00015 	stw	r3,0(r18)
 4000c64:	8027883a 	mov	r19,r16
 4000c68:	4001dfc0 	call	4001dfc <_fflush_r>
 4000c6c:	103f6b26 	beq	r2,zero,4000a1c <__sfvwrite_r+0x200>
 4000c70:	003f7f06 	br	4000a70 <__sfvwrite_r+0x254>
 4000c74:	400b883a 	mov	r5,r8
 4000c78:	e009883a 	mov	r4,fp
 4000c7c:	400165c0 	call	400165c <_realloc_r>
 4000c80:	103f7626 	beq	r2,zero,4000a5c <__sfvwrite_r+0x240>
 4000c84:	1023883a 	mov	r17,r2
 4000c88:	003f5006 	br	40009cc <__sfvwrite_r+0x1b0>
 4000c8c:	00c00044 	movi	r3,1
 4000c90:	9d000044 	addi	r20,r19,1
 4000c94:	d8c00015 	stw	r3,0(sp)
 4000c98:	003f8206 	br	4000aa4 <__sfvwrite_r+0x288>
 4000c9c:	9080030b 	ldhu	r2,12(r18)
 4000ca0:	00c00244 	movi	r3,9
 4000ca4:	013fffc4 	movi	r4,-1
 4000ca8:	10801014 	ori	r2,r2,64
 4000cac:	9080030d 	sth	r2,12(r18)
 4000cb0:	e0c00015 	stw	r3,0(fp)
 4000cb4:	003f0606 	br	40008d0 <__sfvwrite_r+0xb4>

04000cb8 <_malloc_r>:
 4000cb8:	defff604 	addi	sp,sp,-40
 4000cbc:	28c002c4 	addi	r3,r5,11
 4000cc0:	00800584 	movi	r2,22
 4000cc4:	dc800215 	stw	r18,8(sp)
 4000cc8:	dfc00915 	stw	ra,36(sp)
 4000ccc:	df000815 	stw	fp,32(sp)
 4000cd0:	ddc00715 	stw	r23,28(sp)
 4000cd4:	dd800615 	stw	r22,24(sp)
 4000cd8:	dd400515 	stw	r21,20(sp)
 4000cdc:	dd000415 	stw	r20,16(sp)
 4000ce0:	dcc00315 	stw	r19,12(sp)
 4000ce4:	dc400115 	stw	r17,4(sp)
 4000ce8:	dc000015 	stw	r16,0(sp)
 4000cec:	2025883a 	mov	r18,r4
 4000cf0:	10c01236 	bltu	r2,r3,4000d3c <_malloc_r+0x84>
 4000cf4:	04400404 	movi	r17,16
 4000cf8:	8940142e 	bgeu	r17,r5,4000d4c <_malloc_r+0x94>
 4000cfc:	00800304 	movi	r2,12
 4000d00:	0007883a 	mov	r3,zero
 4000d04:	90800015 	stw	r2,0(r18)
 4000d08:	1805883a 	mov	r2,r3
 4000d0c:	dfc00917 	ldw	ra,36(sp)
 4000d10:	df000817 	ldw	fp,32(sp)
 4000d14:	ddc00717 	ldw	r23,28(sp)
 4000d18:	dd800617 	ldw	r22,24(sp)
 4000d1c:	dd400517 	ldw	r21,20(sp)
 4000d20:	dd000417 	ldw	r20,16(sp)
 4000d24:	dcc00317 	ldw	r19,12(sp)
 4000d28:	dc800217 	ldw	r18,8(sp)
 4000d2c:	dc400117 	ldw	r17,4(sp)
 4000d30:	dc000017 	ldw	r16,0(sp)
 4000d34:	dec00a04 	addi	sp,sp,40
 4000d38:	f800283a 	ret
 4000d3c:	00bffe04 	movi	r2,-8
 4000d40:	18a2703a 	and	r17,r3,r2
 4000d44:	883fed16 	blt	r17,zero,4000cfc <_malloc_r+0x44>
 4000d48:	897fec36 	bltu	r17,r5,4000cfc <_malloc_r+0x44>
 4000d4c:	9009883a 	mov	r4,r18
 4000d50:	4003b1c0 	call	4003b1c <__malloc_lock>
 4000d54:	00807dc4 	movi	r2,503
 4000d58:	14402b2e 	bgeu	r2,r17,4000e08 <_malloc_r+0x150>
 4000d5c:	8806d27a 	srli	r3,r17,9
 4000d60:	18003f1e 	bne	r3,zero,4000e60 <_malloc_r+0x1a8>
 4000d64:	880cd0fa 	srli	r6,r17,3
 4000d68:	300490fa 	slli	r2,r6,3
 4000d6c:	02c10074 	movhi	r11,1025
 4000d70:	5adbfc04 	addi	r11,r11,28656
 4000d74:	12cb883a 	add	r5,r2,r11
 4000d78:	2c000317 	ldw	r16,12(r5)
 4000d7c:	580f883a 	mov	r7,r11
 4000d80:	2c00041e 	bne	r5,r16,4000d94 <_malloc_r+0xdc>
 4000d84:	00000a06 	br	4000db0 <_malloc_r+0xf8>
 4000d88:	1800860e 	bge	r3,zero,4000fa4 <_malloc_r+0x2ec>
 4000d8c:	84000317 	ldw	r16,12(r16)
 4000d90:	2c000726 	beq	r5,r16,4000db0 <_malloc_r+0xf8>
 4000d94:	80800117 	ldw	r2,4(r16)
 4000d98:	00ffff04 	movi	r3,-4
 4000d9c:	10c8703a 	and	r4,r2,r3
 4000da0:	2447c83a 	sub	r3,r4,r17
 4000da4:	008003c4 	movi	r2,15
 4000da8:	10fff70e 	bge	r2,r3,4000d88 <_malloc_r+0xd0>
 4000dac:	31bfffc4 	addi	r6,r6,-1
 4000db0:	32400044 	addi	r9,r6,1
 4000db4:	02810074 	movhi	r10,1025
 4000db8:	529bfe04 	addi	r10,r10,28664
 4000dbc:	54000217 	ldw	r16,8(r10)
 4000dc0:	8280a026 	beq	r16,r10,4001044 <_malloc_r+0x38c>
 4000dc4:	80800117 	ldw	r2,4(r16)
 4000dc8:	00ffff04 	movi	r3,-4
 4000dcc:	10ca703a 	and	r5,r2,r3
 4000dd0:	2c4dc83a 	sub	r6,r5,r17
 4000dd4:	008003c4 	movi	r2,15
 4000dd8:	11808316 	blt	r2,r6,4000fe8 <_malloc_r+0x330>
 4000ddc:	52800315 	stw	r10,12(r10)
 4000de0:	52800215 	stw	r10,8(r10)
 4000de4:	30002916 	blt	r6,zero,4000e8c <_malloc_r+0x1d4>
 4000de8:	8147883a 	add	r3,r16,r5
 4000dec:	18800117 	ldw	r2,4(r3)
 4000df0:	9009883a 	mov	r4,r18
 4000df4:	10800054 	ori	r2,r2,1
 4000df8:	18800115 	stw	r2,4(r3)
 4000dfc:	4003c240 	call	4003c24 <__malloc_unlock>
 4000e00:	80c00204 	addi	r3,r16,8
 4000e04:	003fc006 	br	4000d08 <_malloc_r+0x50>
 4000e08:	02c10074 	movhi	r11,1025
 4000e0c:	5adbfc04 	addi	r11,r11,28656
 4000e10:	8ac5883a 	add	r2,r17,r11
 4000e14:	14000317 	ldw	r16,12(r2)
 4000e18:	580f883a 	mov	r7,r11
 4000e1c:	8806d0fa 	srli	r3,r17,3
 4000e20:	14006c26 	beq	r2,r16,4000fd4 <_malloc_r+0x31c>
 4000e24:	80c00117 	ldw	r3,4(r16)
 4000e28:	00bfff04 	movi	r2,-4
 4000e2c:	81800317 	ldw	r6,12(r16)
 4000e30:	1886703a 	and	r3,r3,r2
 4000e34:	80c7883a 	add	r3,r16,r3
 4000e38:	18800117 	ldw	r2,4(r3)
 4000e3c:	81400217 	ldw	r5,8(r16)
 4000e40:	9009883a 	mov	r4,r18
 4000e44:	10800054 	ori	r2,r2,1
 4000e48:	18800115 	stw	r2,4(r3)
 4000e4c:	31400215 	stw	r5,8(r6)
 4000e50:	29800315 	stw	r6,12(r5)
 4000e54:	4003c240 	call	4003c24 <__malloc_unlock>
 4000e58:	80c00204 	addi	r3,r16,8
 4000e5c:	003faa06 	br	4000d08 <_malloc_r+0x50>
 4000e60:	00800104 	movi	r2,4
 4000e64:	10c0052e 	bgeu	r2,r3,4000e7c <_malloc_r+0x1c4>
 4000e68:	00800504 	movi	r2,20
 4000e6c:	10c07836 	bltu	r2,r3,4001050 <_malloc_r+0x398>
 4000e70:	198016c4 	addi	r6,r3,91
 4000e74:	300490fa 	slli	r2,r6,3
 4000e78:	003fbc06 	br	4000d6c <_malloc_r+0xb4>
 4000e7c:	8804d1ba 	srli	r2,r17,6
 4000e80:	11800e04 	addi	r6,r2,56
 4000e84:	300490fa 	slli	r2,r6,3
 4000e88:	003fb806 	br	4000d6c <_malloc_r+0xb4>
 4000e8c:	00807fc4 	movi	r2,511
 4000e90:	1140bb36 	bltu	r2,r5,4001180 <_malloc_r+0x4c8>
 4000e94:	2806d0fa 	srli	r3,r5,3
 4000e98:	573ffe04 	addi	fp,r10,-8
 4000e9c:	00800044 	movi	r2,1
 4000ea0:	180890fa 	slli	r4,r3,3
 4000ea4:	1807d0ba 	srai	r3,r3,2
 4000ea8:	e1c00117 	ldw	r7,4(fp)
 4000eac:	5909883a 	add	r4,r11,r4
 4000eb0:	21400217 	ldw	r5,8(r4)
 4000eb4:	10c4983a 	sll	r2,r2,r3
 4000eb8:	81000315 	stw	r4,12(r16)
 4000ebc:	81400215 	stw	r5,8(r16)
 4000ec0:	388eb03a 	or	r7,r7,r2
 4000ec4:	2c000315 	stw	r16,12(r5)
 4000ec8:	24000215 	stw	r16,8(r4)
 4000ecc:	e1c00115 	stw	r7,4(fp)
 4000ed0:	4807883a 	mov	r3,r9
 4000ed4:	4800cd16 	blt	r9,zero,400120c <_malloc_r+0x554>
 4000ed8:	1807d0ba 	srai	r3,r3,2
 4000edc:	00800044 	movi	r2,1
 4000ee0:	10c8983a 	sll	r4,r2,r3
 4000ee4:	39004436 	bltu	r7,r4,4000ff8 <_malloc_r+0x340>
 4000ee8:	21c4703a 	and	r2,r4,r7
 4000eec:	10000a1e 	bne	r2,zero,4000f18 <_malloc_r+0x260>
 4000ef0:	2109883a 	add	r4,r4,r4
 4000ef4:	00bfff04 	movi	r2,-4
 4000ef8:	4884703a 	and	r2,r9,r2
 4000efc:	3906703a 	and	r3,r7,r4
 4000f00:	12400104 	addi	r9,r2,4
 4000f04:	1800041e 	bne	r3,zero,4000f18 <_malloc_r+0x260>
 4000f08:	2109883a 	add	r4,r4,r4
 4000f0c:	3904703a 	and	r2,r7,r4
 4000f10:	4a400104 	addi	r9,r9,4
 4000f14:	103ffc26 	beq	r2,zero,4000f08 <_malloc_r+0x250>
 4000f18:	480490fa 	slli	r2,r9,3
 4000f1c:	4819883a 	mov	r12,r9
 4000f20:	023fff04 	movi	r8,-4
 4000f24:	589b883a 	add	r13,r11,r2
 4000f28:	6807883a 	mov	r3,r13
 4000f2c:	014003c4 	movi	r5,15
 4000f30:	1c000317 	ldw	r16,12(r3)
 4000f34:	1c00041e 	bne	r3,r16,4000f48 <_malloc_r+0x290>
 4000f38:	0000a706 	br	40011d8 <_malloc_r+0x520>
 4000f3c:	3000ab0e 	bge	r6,zero,40011ec <_malloc_r+0x534>
 4000f40:	84000317 	ldw	r16,12(r16)
 4000f44:	1c00a426 	beq	r3,r16,40011d8 <_malloc_r+0x520>
 4000f48:	80800117 	ldw	r2,4(r16)
 4000f4c:	1204703a 	and	r2,r2,r8
 4000f50:	144dc83a 	sub	r6,r2,r17
 4000f54:	29bff90e 	bge	r5,r6,4000f3c <_malloc_r+0x284>
 4000f58:	81000317 	ldw	r4,12(r16)
 4000f5c:	80c00217 	ldw	r3,8(r16)
 4000f60:	89400054 	ori	r5,r17,1
 4000f64:	8445883a 	add	r2,r16,r17
 4000f68:	20c00215 	stw	r3,8(r4)
 4000f6c:	19000315 	stw	r4,12(r3)
 4000f70:	81400115 	stw	r5,4(r16)
 4000f74:	1187883a 	add	r3,r2,r6
 4000f78:	31000054 	ori	r4,r6,1
 4000f7c:	50800315 	stw	r2,12(r10)
 4000f80:	50800215 	stw	r2,8(r10)
 4000f84:	19800015 	stw	r6,0(r3)
 4000f88:	11000115 	stw	r4,4(r2)
 4000f8c:	12800215 	stw	r10,8(r2)
 4000f90:	12800315 	stw	r10,12(r2)
 4000f94:	9009883a 	mov	r4,r18
 4000f98:	4003c240 	call	4003c24 <__malloc_unlock>
 4000f9c:	80c00204 	addi	r3,r16,8
 4000fa0:	003f5906 	br	4000d08 <_malloc_r+0x50>
 4000fa4:	8109883a 	add	r4,r16,r4
 4000fa8:	20800117 	ldw	r2,4(r4)
 4000fac:	80c00217 	ldw	r3,8(r16)
 4000fb0:	81400317 	ldw	r5,12(r16)
 4000fb4:	10800054 	ori	r2,r2,1
 4000fb8:	20800115 	stw	r2,4(r4)
 4000fbc:	28c00215 	stw	r3,8(r5)
 4000fc0:	19400315 	stw	r5,12(r3)
 4000fc4:	9009883a 	mov	r4,r18
 4000fc8:	4003c240 	call	4003c24 <__malloc_unlock>
 4000fcc:	80c00204 	addi	r3,r16,8
 4000fd0:	003f4d06 	br	4000d08 <_malloc_r+0x50>
 4000fd4:	80800204 	addi	r2,r16,8
 4000fd8:	14000317 	ldw	r16,12(r2)
 4000fdc:	143f911e 	bne	r2,r16,4000e24 <_malloc_r+0x16c>
 4000fe0:	1a400084 	addi	r9,r3,2
 4000fe4:	003f7306 	br	4000db4 <_malloc_r+0xfc>
 4000fe8:	88c00054 	ori	r3,r17,1
 4000fec:	8445883a 	add	r2,r16,r17
 4000ff0:	80c00115 	stw	r3,4(r16)
 4000ff4:	003fdf06 	br	4000f74 <_malloc_r+0x2bc>
 4000ff8:	e4000217 	ldw	r16,8(fp)
 4000ffc:	00bfff04 	movi	r2,-4
 4001000:	80c00117 	ldw	r3,4(r16)
 4001004:	802d883a 	mov	r22,r16
 4001008:	18aa703a 	and	r21,r3,r2
 400100c:	ac401636 	bltu	r21,r17,4001068 <_malloc_r+0x3b0>
 4001010:	ac49c83a 	sub	r4,r21,r17
 4001014:	008003c4 	movi	r2,15
 4001018:	1100130e 	bge	r2,r4,4001068 <_malloc_r+0x3b0>
 400101c:	88800054 	ori	r2,r17,1
 4001020:	8447883a 	add	r3,r16,r17
 4001024:	80800115 	stw	r2,4(r16)
 4001028:	20800054 	ori	r2,r4,1
 400102c:	18800115 	stw	r2,4(r3)
 4001030:	e0c00215 	stw	r3,8(fp)
 4001034:	9009883a 	mov	r4,r18
 4001038:	4003c240 	call	4003c24 <__malloc_unlock>
 400103c:	80c00204 	addi	r3,r16,8
 4001040:	003f3106 	br	4000d08 <_malloc_r+0x50>
 4001044:	39c00117 	ldw	r7,4(r7)
 4001048:	573ffe04 	addi	fp,r10,-8
 400104c:	003fa006 	br	4000ed0 <_malloc_r+0x218>
 4001050:	00801504 	movi	r2,84
 4001054:	10c06736 	bltu	r2,r3,40011f4 <_malloc_r+0x53c>
 4001058:	8804d33a 	srli	r2,r17,12
 400105c:	11801b84 	addi	r6,r2,110
 4001060:	300490fa 	slli	r2,r6,3
 4001064:	003f4106 	br	4000d6c <_malloc_r+0xb4>
 4001068:	d0a03117 	ldw	r2,-32572(gp)
 400106c:	d0e00317 	ldw	r3,-32756(gp)
 4001070:	053fffc4 	movi	r20,-1
 4001074:	10800404 	addi	r2,r2,16
 4001078:	88a7883a 	add	r19,r17,r2
 400107c:	1d000326 	beq	r3,r20,400108c <_malloc_r+0x3d4>
 4001080:	98c3ffc4 	addi	r3,r19,4095
 4001084:	00bc0004 	movi	r2,-4096
 4001088:	18a6703a 	and	r19,r3,r2
 400108c:	9009883a 	mov	r4,r18
 4001090:	980b883a 	mov	r5,r19
 4001094:	4001c500 	call	4001c50 <_sbrk_r>
 4001098:	1009883a 	mov	r4,r2
 400109c:	15000426 	beq	r2,r20,40010b0 <_malloc_r+0x3f8>
 40010a0:	854b883a 	add	r5,r16,r21
 40010a4:	1029883a 	mov	r20,r2
 40010a8:	11405a2e 	bgeu	r2,r5,4001214 <_malloc_r+0x55c>
 40010ac:	87000c26 	beq	r16,fp,40010e0 <_malloc_r+0x428>
 40010b0:	e4000217 	ldw	r16,8(fp)
 40010b4:	80c00117 	ldw	r3,4(r16)
 40010b8:	00bfff04 	movi	r2,-4
 40010bc:	1884703a 	and	r2,r3,r2
 40010c0:	14400336 	bltu	r2,r17,40010d0 <_malloc_r+0x418>
 40010c4:	1449c83a 	sub	r4,r2,r17
 40010c8:	008003c4 	movi	r2,15
 40010cc:	113fd316 	blt	r2,r4,400101c <_malloc_r+0x364>
 40010d0:	9009883a 	mov	r4,r18
 40010d4:	4003c240 	call	4003c24 <__malloc_unlock>
 40010d8:	0007883a 	mov	r3,zero
 40010dc:	003f0a06 	br	4000d08 <_malloc_r+0x50>
 40010e0:	05c100b4 	movhi	r23,1026
 40010e4:	bde21004 	addi	r23,r23,-30656
 40010e8:	b8800017 	ldw	r2,0(r23)
 40010ec:	988d883a 	add	r6,r19,r2
 40010f0:	b9800015 	stw	r6,0(r23)
 40010f4:	d0e00317 	ldw	r3,-32756(gp)
 40010f8:	00bfffc4 	movi	r2,-1
 40010fc:	18808e26 	beq	r3,r2,4001338 <_malloc_r+0x680>
 4001100:	2145c83a 	sub	r2,r4,r5
 4001104:	3085883a 	add	r2,r6,r2
 4001108:	b8800015 	stw	r2,0(r23)
 400110c:	20c001cc 	andi	r3,r4,7
 4001110:	18005f1e 	bne	r3,zero,4001290 <_malloc_r+0x5d8>
 4001114:	000b883a 	mov	r5,zero
 4001118:	a4c5883a 	add	r2,r20,r19
 400111c:	1083ffcc 	andi	r2,r2,4095
 4001120:	00c40004 	movi	r3,4096
 4001124:	1887c83a 	sub	r3,r3,r2
 4001128:	28e7883a 	add	r19,r5,r3
 400112c:	9009883a 	mov	r4,r18
 4001130:	980b883a 	mov	r5,r19
 4001134:	4001c500 	call	4001c50 <_sbrk_r>
 4001138:	1007883a 	mov	r3,r2
 400113c:	00bfffc4 	movi	r2,-1
 4001140:	18807a26 	beq	r3,r2,400132c <_malloc_r+0x674>
 4001144:	1d05c83a 	sub	r2,r3,r20
 4001148:	9885883a 	add	r2,r19,r2
 400114c:	10c00054 	ori	r3,r2,1
 4001150:	b8800017 	ldw	r2,0(r23)
 4001154:	a021883a 	mov	r16,r20
 4001158:	a0c00115 	stw	r3,4(r20)
 400115c:	9885883a 	add	r2,r19,r2
 4001160:	b8800015 	stw	r2,0(r23)
 4001164:	e5000215 	stw	r20,8(fp)
 4001168:	b7003626 	beq	r22,fp,4001244 <_malloc_r+0x58c>
 400116c:	018003c4 	movi	r6,15
 4001170:	35404b36 	bltu	r6,r21,40012a0 <_malloc_r+0x5e8>
 4001174:	00800044 	movi	r2,1
 4001178:	a0800115 	stw	r2,4(r20)
 400117c:	003fcd06 	br	40010b4 <_malloc_r+0x3fc>
 4001180:	2808d27a 	srli	r4,r5,9
 4001184:	2000371e 	bne	r4,zero,4001264 <_malloc_r+0x5ac>
 4001188:	2808d0fa 	srli	r4,r5,3
 400118c:	200690fa 	slli	r3,r4,3
 4001190:	1ad1883a 	add	r8,r3,r11
 4001194:	41800217 	ldw	r6,8(r8)
 4001198:	41805b26 	beq	r8,r6,4001308 <_malloc_r+0x650>
 400119c:	30800117 	ldw	r2,4(r6)
 40011a0:	00ffff04 	movi	r3,-4
 40011a4:	10c4703a 	and	r2,r2,r3
 40011a8:	2880022e 	bgeu	r5,r2,40011b4 <_malloc_r+0x4fc>
 40011ac:	31800217 	ldw	r6,8(r6)
 40011b0:	41bffa1e 	bne	r8,r6,400119c <_malloc_r+0x4e4>
 40011b4:	32000317 	ldw	r8,12(r6)
 40011b8:	39c00117 	ldw	r7,4(r7)
 40011bc:	82000315 	stw	r8,12(r16)
 40011c0:	81800215 	stw	r6,8(r16)
 40011c4:	07010074 	movhi	fp,1025
 40011c8:	e71bfc04 	addi	fp,fp,28656
 40011cc:	34000315 	stw	r16,12(r6)
 40011d0:	44000215 	stw	r16,8(r8)
 40011d4:	003f3e06 	br	4000ed0 <_malloc_r+0x218>
 40011d8:	63000044 	addi	r12,r12,1
 40011dc:	608000cc 	andi	r2,r12,3
 40011e0:	10005d26 	beq	r2,zero,4001358 <_malloc_r+0x6a0>
 40011e4:	18c00204 	addi	r3,r3,8
 40011e8:	003f5106 	br	4000f30 <_malloc_r+0x278>
 40011ec:	8089883a 	add	r4,r16,r2
 40011f0:	003f6d06 	br	4000fa8 <_malloc_r+0x2f0>
 40011f4:	00805504 	movi	r2,340
 40011f8:	10c02036 	bltu	r2,r3,400127c <_malloc_r+0x5c4>
 40011fc:	8804d3fa 	srli	r2,r17,15
 4001200:	11801dc4 	addi	r6,r2,119
 4001204:	300490fa 	slli	r2,r6,3
 4001208:	003ed806 	br	4000d6c <_malloc_r+0xb4>
 400120c:	48c000c4 	addi	r3,r9,3
 4001210:	003f3106 	br	4000ed8 <_malloc_r+0x220>
 4001214:	05c100b4 	movhi	r23,1026
 4001218:	bde21004 	addi	r23,r23,-30656
 400121c:	b8800017 	ldw	r2,0(r23)
 4001220:	988d883a 	add	r6,r19,r2
 4001224:	b9800015 	stw	r6,0(r23)
 4001228:	293fb21e 	bne	r5,r4,40010f4 <_malloc_r+0x43c>
 400122c:	2083ffcc 	andi	r2,r4,4095
 4001230:	103fb01e 	bne	r2,zero,40010f4 <_malloc_r+0x43c>
 4001234:	e4000217 	ldw	r16,8(fp)
 4001238:	9d45883a 	add	r2,r19,r21
 400123c:	10800054 	ori	r2,r2,1
 4001240:	80800115 	stw	r2,4(r16)
 4001244:	b8c00017 	ldw	r3,0(r23)
 4001248:	d0a03217 	ldw	r2,-32568(gp)
 400124c:	10c0012e 	bgeu	r2,r3,4001254 <_malloc_r+0x59c>
 4001250:	d0e03215 	stw	r3,-32568(gp)
 4001254:	d0a03317 	ldw	r2,-32564(gp)
 4001258:	10ff962e 	bgeu	r2,r3,40010b4 <_malloc_r+0x3fc>
 400125c:	d0e03315 	stw	r3,-32564(gp)
 4001260:	003f9406 	br	40010b4 <_malloc_r+0x3fc>
 4001264:	00800104 	movi	r2,4
 4001268:	11001e36 	bltu	r2,r4,40012e4 <_malloc_r+0x62c>
 400126c:	2804d1ba 	srli	r2,r5,6
 4001270:	11000e04 	addi	r4,r2,56
 4001274:	200690fa 	slli	r3,r4,3
 4001278:	003fc506 	br	4001190 <_malloc_r+0x4d8>
 400127c:	00815504 	movi	r2,1364
 4001280:	10c01d2e 	bgeu	r2,r3,40012f8 <_malloc_r+0x640>
 4001284:	01801f84 	movi	r6,126
 4001288:	0080fc04 	movi	r2,1008
 400128c:	003eb706 	br	4000d6c <_malloc_r+0xb4>
 4001290:	00800204 	movi	r2,8
 4001294:	10cbc83a 	sub	r5,r2,r3
 4001298:	2169883a 	add	r20,r4,r5
 400129c:	003f9e06 	br	4001118 <_malloc_r+0x460>
 40012a0:	00bffe04 	movi	r2,-8
 40012a4:	a93ffd04 	addi	r4,r21,-12
 40012a8:	2088703a 	and	r4,r4,r2
 40012ac:	b10b883a 	add	r5,r22,r4
 40012b0:	00c00144 	movi	r3,5
 40012b4:	28c00215 	stw	r3,8(r5)
 40012b8:	28c00115 	stw	r3,4(r5)
 40012bc:	b0800117 	ldw	r2,4(r22)
 40012c0:	1080004c 	andi	r2,r2,1
 40012c4:	2084b03a 	or	r2,r4,r2
 40012c8:	b0800115 	stw	r2,4(r22)
 40012cc:	313fdd2e 	bgeu	r6,r4,4001244 <_malloc_r+0x58c>
 40012d0:	b1400204 	addi	r5,r22,8
 40012d4:	9009883a 	mov	r4,r18
 40012d8:	40024180 	call	4002418 <_free_r>
 40012dc:	e4000217 	ldw	r16,8(fp)
 40012e0:	003fd806 	br	4001244 <_malloc_r+0x58c>
 40012e4:	00800504 	movi	r2,20
 40012e8:	11001536 	bltu	r2,r4,4001340 <_malloc_r+0x688>
 40012ec:	210016c4 	addi	r4,r4,91
 40012f0:	200690fa 	slli	r3,r4,3
 40012f4:	003fa606 	br	4001190 <_malloc_r+0x4d8>
 40012f8:	8804d4ba 	srli	r2,r17,18
 40012fc:	11801f04 	addi	r6,r2,124
 4001300:	300490fa 	slli	r2,r6,3
 4001304:	003e9906 	br	4000d6c <_malloc_r+0xb4>
 4001308:	2009d0ba 	srai	r4,r4,2
 400130c:	01410074 	movhi	r5,1025
 4001310:	295bfc04 	addi	r5,r5,28656
 4001314:	00c00044 	movi	r3,1
 4001318:	28800117 	ldw	r2,4(r5)
 400131c:	1906983a 	sll	r3,r3,r4
 4001320:	10c4b03a 	or	r2,r2,r3
 4001324:	28800115 	stw	r2,4(r5)
 4001328:	003fa306 	br	40011b8 <_malloc_r+0x500>
 400132c:	0027883a 	mov	r19,zero
 4001330:	00c00044 	movi	r3,1
 4001334:	003f8606 	br	4001150 <_malloc_r+0x498>
 4001338:	d1200315 	stw	r4,-32756(gp)
 400133c:	003f7306 	br	400110c <_malloc_r+0x454>
 4001340:	00801504 	movi	r2,84
 4001344:	11001936 	bltu	r2,r4,40013ac <_malloc_r+0x6f4>
 4001348:	2804d33a 	srli	r2,r5,12
 400134c:	11001b84 	addi	r4,r2,110
 4001350:	200690fa 	slli	r3,r4,3
 4001354:	003f8e06 	br	4001190 <_malloc_r+0x4d8>
 4001358:	480b883a 	mov	r5,r9
 400135c:	6807883a 	mov	r3,r13
 4001360:	288000cc 	andi	r2,r5,3
 4001364:	18fffe04 	addi	r3,r3,-8
 4001368:	297fffc4 	addi	r5,r5,-1
 400136c:	10001526 	beq	r2,zero,40013c4 <_malloc_r+0x70c>
 4001370:	18800217 	ldw	r2,8(r3)
 4001374:	10fffa26 	beq	r2,r3,4001360 <_malloc_r+0x6a8>
 4001378:	2109883a 	add	r4,r4,r4
 400137c:	393f1e36 	bltu	r7,r4,4000ff8 <_malloc_r+0x340>
 4001380:	203f1d26 	beq	r4,zero,4000ff8 <_malloc_r+0x340>
 4001384:	21c4703a 	and	r2,r4,r7
 4001388:	10000226 	beq	r2,zero,4001394 <_malloc_r+0x6dc>
 400138c:	6013883a 	mov	r9,r12
 4001390:	003ee106 	br	4000f18 <_malloc_r+0x260>
 4001394:	2109883a 	add	r4,r4,r4
 4001398:	3904703a 	and	r2,r7,r4
 400139c:	63000104 	addi	r12,r12,4
 40013a0:	103ffc26 	beq	r2,zero,4001394 <_malloc_r+0x6dc>
 40013a4:	6013883a 	mov	r9,r12
 40013a8:	003edb06 	br	4000f18 <_malloc_r+0x260>
 40013ac:	00805504 	movi	r2,340
 40013b0:	11000836 	bltu	r2,r4,40013d4 <_malloc_r+0x71c>
 40013b4:	2804d3fa 	srli	r2,r5,15
 40013b8:	11001dc4 	addi	r4,r2,119
 40013bc:	200690fa 	slli	r3,r4,3
 40013c0:	003f7306 	br	4001190 <_malloc_r+0x4d8>
 40013c4:	0104303a 	nor	r2,zero,r4
 40013c8:	388e703a 	and	r7,r7,r2
 40013cc:	e1c00115 	stw	r7,4(fp)
 40013d0:	003fe906 	br	4001378 <_malloc_r+0x6c0>
 40013d4:	00815504 	movi	r2,1364
 40013d8:	1100032e 	bgeu	r2,r4,40013e8 <_malloc_r+0x730>
 40013dc:	01001f84 	movi	r4,126
 40013e0:	00c0fc04 	movi	r3,1008
 40013e4:	003f6a06 	br	4001190 <_malloc_r+0x4d8>
 40013e8:	2804d4ba 	srli	r2,r5,18
 40013ec:	11001f04 	addi	r4,r2,124
 40013f0:	200690fa 	slli	r3,r4,3
 40013f4:	003f6606 	br	4001190 <_malloc_r+0x4d8>

040013f8 <memchr>:
 40013f8:	008000c4 	movi	r2,3
 40013fc:	29403fcc 	andi	r5,r5,255
 4001400:	2007883a 	mov	r3,r4
 4001404:	1180022e 	bgeu	r2,r6,4001410 <memchr+0x18>
 4001408:	2084703a 	and	r2,r4,r2
 400140c:	10000b26 	beq	r2,zero,400143c <memchr+0x44>
 4001410:	313fffc4 	addi	r4,r6,-1
 4001414:	3000051e 	bne	r6,zero,400142c <memchr+0x34>
 4001418:	00002c06 	br	40014cc <memchr+0xd4>
 400141c:	213fffc4 	addi	r4,r4,-1
 4001420:	00bfffc4 	movi	r2,-1
 4001424:	18c00044 	addi	r3,r3,1
 4001428:	20802826 	beq	r4,r2,40014cc <memchr+0xd4>
 400142c:	18800003 	ldbu	r2,0(r3)
 4001430:	28bffa1e 	bne	r5,r2,400141c <memchr+0x24>
 4001434:	1805883a 	mov	r2,r3
 4001438:	f800283a 	ret
 400143c:	0011883a 	mov	r8,zero
 4001440:	0007883a 	mov	r3,zero
 4001444:	01c00104 	movi	r7,4
 4001448:	4004923a 	slli	r2,r8,8
 400144c:	18c00044 	addi	r3,r3,1
 4001450:	1151883a 	add	r8,r2,r5
 4001454:	19fffc1e 	bne	r3,r7,4001448 <memchr+0x50>
 4001458:	02bfbff4 	movhi	r10,65279
 400145c:	52bfbfc4 	addi	r10,r10,-257
 4001460:	02602074 	movhi	r9,32897
 4001464:	4a602004 	addi	r9,r9,-32640
 4001468:	02c000c4 	movi	r11,3
 400146c:	20800017 	ldw	r2,0(r4)
 4001470:	31bfff04 	addi	r6,r6,-4
 4001474:	200f883a 	mov	r7,r4
 4001478:	1204f03a 	xor	r2,r2,r8
 400147c:	1287883a 	add	r3,r2,r10
 4001480:	1a46703a 	and	r3,r3,r9
 4001484:	0084303a 	nor	r2,zero,r2
 4001488:	10c4703a 	and	r2,r2,r3
 400148c:	10000b26 	beq	r2,zero,40014bc <memchr+0xc4>
 4001490:	20800003 	ldbu	r2,0(r4)
 4001494:	28800f26 	beq	r5,r2,40014d4 <memchr+0xdc>
 4001498:	20800043 	ldbu	r2,1(r4)
 400149c:	21c00044 	addi	r7,r4,1
 40014a0:	28800c26 	beq	r5,r2,40014d4 <memchr+0xdc>
 40014a4:	20800083 	ldbu	r2,2(r4)
 40014a8:	21c00084 	addi	r7,r4,2
 40014ac:	28800926 	beq	r5,r2,40014d4 <memchr+0xdc>
 40014b0:	208000c3 	ldbu	r2,3(r4)
 40014b4:	21c000c4 	addi	r7,r4,3
 40014b8:	28800626 	beq	r5,r2,40014d4 <memchr+0xdc>
 40014bc:	21000104 	addi	r4,r4,4
 40014c0:	59bfea36 	bltu	r11,r6,400146c <memchr+0x74>
 40014c4:	2007883a 	mov	r3,r4
 40014c8:	003fd106 	br	4001410 <memchr+0x18>
 40014cc:	0005883a 	mov	r2,zero
 40014d0:	f800283a 	ret
 40014d4:	3805883a 	mov	r2,r7
 40014d8:	f800283a 	ret

040014dc <memcpy>:
 40014dc:	01c003c4 	movi	r7,15
 40014e0:	2007883a 	mov	r3,r4
 40014e4:	3980032e 	bgeu	r7,r6,40014f4 <memcpy+0x18>
 40014e8:	2904b03a 	or	r2,r5,r4
 40014ec:	108000cc 	andi	r2,r2,3
 40014f0:	10000926 	beq	r2,zero,4001518 <memcpy+0x3c>
 40014f4:	30000626 	beq	r6,zero,4001510 <memcpy+0x34>
 40014f8:	30cd883a 	add	r6,r6,r3
 40014fc:	28800003 	ldbu	r2,0(r5)
 4001500:	29400044 	addi	r5,r5,1
 4001504:	18800005 	stb	r2,0(r3)
 4001508:	18c00044 	addi	r3,r3,1
 400150c:	30fffb1e 	bne	r6,r3,40014fc <memcpy+0x20>
 4001510:	2005883a 	mov	r2,r4
 4001514:	f800283a 	ret
 4001518:	3811883a 	mov	r8,r7
 400151c:	200f883a 	mov	r7,r4
 4001520:	28c00017 	ldw	r3,0(r5)
 4001524:	31bffc04 	addi	r6,r6,-16
 4001528:	38c00015 	stw	r3,0(r7)
 400152c:	28800117 	ldw	r2,4(r5)
 4001530:	38800115 	stw	r2,4(r7)
 4001534:	28c00217 	ldw	r3,8(r5)
 4001538:	38c00215 	stw	r3,8(r7)
 400153c:	28800317 	ldw	r2,12(r5)
 4001540:	29400404 	addi	r5,r5,16
 4001544:	38800315 	stw	r2,12(r7)
 4001548:	39c00404 	addi	r7,r7,16
 400154c:	41bff436 	bltu	r8,r6,4001520 <memcpy+0x44>
 4001550:	008000c4 	movi	r2,3
 4001554:	1180072e 	bgeu	r2,r6,4001574 <memcpy+0x98>
 4001558:	1007883a 	mov	r3,r2
 400155c:	28800017 	ldw	r2,0(r5)
 4001560:	31bfff04 	addi	r6,r6,-4
 4001564:	29400104 	addi	r5,r5,4
 4001568:	38800015 	stw	r2,0(r7)
 400156c:	39c00104 	addi	r7,r7,4
 4001570:	19bffa36 	bltu	r3,r6,400155c <memcpy+0x80>
 4001574:	3807883a 	mov	r3,r7
 4001578:	003fde06 	br	40014f4 <memcpy+0x18>

0400157c <memmove>:
 400157c:	2807883a 	mov	r3,r5
 4001580:	2011883a 	mov	r8,r4
 4001584:	29000c2e 	bgeu	r5,r4,40015b8 <memmove+0x3c>
 4001588:	298f883a 	add	r7,r5,r6
 400158c:	21c00a2e 	bgeu	r4,r7,40015b8 <memmove+0x3c>
 4001590:	30000726 	beq	r6,zero,40015b0 <memmove+0x34>
 4001594:	2187883a 	add	r3,r4,r6
 4001598:	198dc83a 	sub	r6,r3,r6
 400159c:	39ffffc4 	addi	r7,r7,-1
 40015a0:	38800003 	ldbu	r2,0(r7)
 40015a4:	18ffffc4 	addi	r3,r3,-1
 40015a8:	18800005 	stb	r2,0(r3)
 40015ac:	19bffb1e 	bne	r3,r6,400159c <memmove+0x20>
 40015b0:	2005883a 	mov	r2,r4
 40015b4:	f800283a 	ret
 40015b8:	01c003c4 	movi	r7,15
 40015bc:	39800a36 	bltu	r7,r6,40015e8 <memmove+0x6c>
 40015c0:	303ffb26 	beq	r6,zero,40015b0 <memmove+0x34>
 40015c4:	400f883a 	mov	r7,r8
 40015c8:	320d883a 	add	r6,r6,r8
 40015cc:	28800003 	ldbu	r2,0(r5)
 40015d0:	29400044 	addi	r5,r5,1
 40015d4:	38800005 	stb	r2,0(r7)
 40015d8:	39c00044 	addi	r7,r7,1
 40015dc:	39bffb1e 	bne	r7,r6,40015cc <memmove+0x50>
 40015e0:	2005883a 	mov	r2,r4
 40015e4:	f800283a 	ret
 40015e8:	1904b03a 	or	r2,r3,r4
 40015ec:	108000cc 	andi	r2,r2,3
 40015f0:	103ff31e 	bne	r2,zero,40015c0 <memmove+0x44>
 40015f4:	3811883a 	mov	r8,r7
 40015f8:	180b883a 	mov	r5,r3
 40015fc:	200f883a 	mov	r7,r4
 4001600:	28c00017 	ldw	r3,0(r5)
 4001604:	31bffc04 	addi	r6,r6,-16
 4001608:	38c00015 	stw	r3,0(r7)
 400160c:	28800117 	ldw	r2,4(r5)
 4001610:	38800115 	stw	r2,4(r7)
 4001614:	28c00217 	ldw	r3,8(r5)
 4001618:	38c00215 	stw	r3,8(r7)
 400161c:	28800317 	ldw	r2,12(r5)
 4001620:	29400404 	addi	r5,r5,16
 4001624:	38800315 	stw	r2,12(r7)
 4001628:	39c00404 	addi	r7,r7,16
 400162c:	41bff436 	bltu	r8,r6,4001600 <memmove+0x84>
 4001630:	008000c4 	movi	r2,3
 4001634:	1180072e 	bgeu	r2,r6,4001654 <memmove+0xd8>
 4001638:	1007883a 	mov	r3,r2
 400163c:	28800017 	ldw	r2,0(r5)
 4001640:	31bfff04 	addi	r6,r6,-4
 4001644:	29400104 	addi	r5,r5,4
 4001648:	38800015 	stw	r2,0(r7)
 400164c:	39c00104 	addi	r7,r7,4
 4001650:	19bffa36 	bltu	r3,r6,400163c <memmove+0xc0>
 4001654:	3811883a 	mov	r8,r7
 4001658:	003fd906 	br	40015c0 <memmove+0x44>

0400165c <_realloc_r>:
 400165c:	defff404 	addi	sp,sp,-48
 4001660:	dd800815 	stw	r22,32(sp)
 4001664:	dc800415 	stw	r18,16(sp)
 4001668:	dc400315 	stw	r17,12(sp)
 400166c:	dfc00b15 	stw	ra,44(sp)
 4001670:	df000a15 	stw	fp,40(sp)
 4001674:	ddc00915 	stw	r23,36(sp)
 4001678:	dd400715 	stw	r21,28(sp)
 400167c:	dd000615 	stw	r20,24(sp)
 4001680:	dcc00515 	stw	r19,20(sp)
 4001684:	dc000215 	stw	r16,8(sp)
 4001688:	2825883a 	mov	r18,r5
 400168c:	3023883a 	mov	r17,r6
 4001690:	202d883a 	mov	r22,r4
 4001694:	2800c926 	beq	r5,zero,40019bc <_realloc_r+0x360>
 4001698:	4003b1c0 	call	4003b1c <__malloc_lock>
 400169c:	943ffe04 	addi	r16,r18,-8
 40016a0:	88c002c4 	addi	r3,r17,11
 40016a4:	00800584 	movi	r2,22
 40016a8:	82000117 	ldw	r8,4(r16)
 40016ac:	10c01b2e 	bgeu	r2,r3,400171c <_realloc_r+0xc0>
 40016b0:	00bffe04 	movi	r2,-8
 40016b4:	188e703a 	and	r7,r3,r2
 40016b8:	3839883a 	mov	fp,r7
 40016bc:	38001a16 	blt	r7,zero,4001728 <_realloc_r+0xcc>
 40016c0:	e4401936 	bltu	fp,r17,4001728 <_realloc_r+0xcc>
 40016c4:	013fff04 	movi	r4,-4
 40016c8:	4126703a 	and	r19,r8,r4
 40016cc:	99c02616 	blt	r19,r7,4001768 <_realloc_r+0x10c>
 40016d0:	802b883a 	mov	r21,r16
 40016d4:	9829883a 	mov	r20,r19
 40016d8:	84000204 	addi	r16,r16,8
 40016dc:	a80f883a 	mov	r7,r21
 40016e0:	a70dc83a 	sub	r6,r20,fp
 40016e4:	008003c4 	movi	r2,15
 40016e8:	1180c136 	bltu	r2,r6,40019f0 <_realloc_r+0x394>
 40016ec:	38800117 	ldw	r2,4(r7)
 40016f0:	a549883a 	add	r4,r20,r21
 40016f4:	1080004c 	andi	r2,r2,1
 40016f8:	a084b03a 	or	r2,r20,r2
 40016fc:	38800115 	stw	r2,4(r7)
 4001700:	20c00117 	ldw	r3,4(r4)
 4001704:	18c00054 	ori	r3,r3,1
 4001708:	20c00115 	stw	r3,4(r4)
 400170c:	b009883a 	mov	r4,r22
 4001710:	4003c240 	call	4003c24 <__malloc_unlock>
 4001714:	8023883a 	mov	r17,r16
 4001718:	00000606 	br	4001734 <_realloc_r+0xd8>
 400171c:	01c00404 	movi	r7,16
 4001720:	3839883a 	mov	fp,r7
 4001724:	e47fe72e 	bgeu	fp,r17,40016c4 <_realloc_r+0x68>
 4001728:	00800304 	movi	r2,12
 400172c:	0023883a 	mov	r17,zero
 4001730:	b0800015 	stw	r2,0(r22)
 4001734:	8805883a 	mov	r2,r17
 4001738:	dfc00b17 	ldw	ra,44(sp)
 400173c:	df000a17 	ldw	fp,40(sp)
 4001740:	ddc00917 	ldw	r23,36(sp)
 4001744:	dd800817 	ldw	r22,32(sp)
 4001748:	dd400717 	ldw	r21,28(sp)
 400174c:	dd000617 	ldw	r20,24(sp)
 4001750:	dcc00517 	ldw	r19,20(sp)
 4001754:	dc800417 	ldw	r18,16(sp)
 4001758:	dc400317 	ldw	r17,12(sp)
 400175c:	dc000217 	ldw	r16,8(sp)
 4001760:	dec00c04 	addi	sp,sp,48
 4001764:	f800283a 	ret
 4001768:	00810074 	movhi	r2,1025
 400176c:	109bfc04 	addi	r2,r2,28656
 4001770:	12400217 	ldw	r9,8(r2)
 4001774:	84cd883a 	add	r6,r16,r19
 4001778:	802b883a 	mov	r21,r16
 400177c:	3240b926 	beq	r6,r9,4001a64 <_realloc_r+0x408>
 4001780:	31400117 	ldw	r5,4(r6)
 4001784:	00bfff84 	movi	r2,-2
 4001788:	2884703a 	and	r2,r5,r2
 400178c:	1185883a 	add	r2,r2,r6
 4001790:	10c00117 	ldw	r3,4(r2)
 4001794:	18c0004c 	andi	r3,r3,1
 4001798:	1807003a 	cmpeq	r3,r3,zero
 400179c:	1800a326 	beq	r3,zero,4001a2c <_realloc_r+0x3d0>
 40017a0:	2908703a 	and	r4,r5,r4
 40017a4:	9929883a 	add	r20,r19,r4
 40017a8:	a1c0a30e 	bge	r20,r7,4001a38 <_realloc_r+0x3dc>
 40017ac:	4080004c 	andi	r2,r8,1
 40017b0:	1000551e 	bne	r2,zero,4001908 <_realloc_r+0x2ac>
 40017b4:	80800017 	ldw	r2,0(r16)
 40017b8:	80afc83a 	sub	r23,r16,r2
 40017bc:	b8c00117 	ldw	r3,4(r23)
 40017c0:	00bfff04 	movi	r2,-4
 40017c4:	1884703a 	and	r2,r3,r2
 40017c8:	30002e26 	beq	r6,zero,4001884 <_realloc_r+0x228>
 40017cc:	3240b926 	beq	r6,r9,4001ab4 <_realloc_r+0x458>
 40017d0:	98a9883a 	add	r20,r19,r2
 40017d4:	2509883a 	add	r4,r4,r20
 40017d8:	d9000015 	stw	r4,0(sp)
 40017dc:	21c02a16 	blt	r4,r7,4001888 <_realloc_r+0x22c>
 40017e0:	30800317 	ldw	r2,12(r6)
 40017e4:	30c00217 	ldw	r3,8(r6)
 40017e8:	01400904 	movi	r5,36
 40017ec:	99bfff04 	addi	r6,r19,-4
 40017f0:	18800315 	stw	r2,12(r3)
 40017f4:	10c00215 	stw	r3,8(r2)
 40017f8:	b9000317 	ldw	r4,12(r23)
 40017fc:	b8800217 	ldw	r2,8(r23)
 4001800:	b82b883a 	mov	r21,r23
 4001804:	bc000204 	addi	r16,r23,8
 4001808:	20800215 	stw	r2,8(r4)
 400180c:	11000315 	stw	r4,12(r2)
 4001810:	2980e436 	bltu	r5,r6,4001ba4 <_realloc_r+0x548>
 4001814:	008004c4 	movi	r2,19
 4001818:	9009883a 	mov	r4,r18
 400181c:	8011883a 	mov	r8,r16
 4001820:	11800f2e 	bgeu	r2,r6,4001860 <_realloc_r+0x204>
 4001824:	90800017 	ldw	r2,0(r18)
 4001828:	ba000404 	addi	r8,r23,16
 400182c:	91000204 	addi	r4,r18,8
 4001830:	b8800215 	stw	r2,8(r23)
 4001834:	90c00117 	ldw	r3,4(r18)
 4001838:	008006c4 	movi	r2,27
 400183c:	b8c00315 	stw	r3,12(r23)
 4001840:	1180072e 	bgeu	r2,r6,4001860 <_realloc_r+0x204>
 4001844:	90c00217 	ldw	r3,8(r18)
 4001848:	ba000604 	addi	r8,r23,24
 400184c:	91000404 	addi	r4,r18,16
 4001850:	b8c00415 	stw	r3,16(r23)
 4001854:	90800317 	ldw	r2,12(r18)
 4001858:	b8800515 	stw	r2,20(r23)
 400185c:	3140e726 	beq	r6,r5,4001bfc <_realloc_r+0x5a0>
 4001860:	20800017 	ldw	r2,0(r4)
 4001864:	dd000017 	ldw	r20,0(sp)
 4001868:	b80f883a 	mov	r7,r23
 400186c:	40800015 	stw	r2,0(r8)
 4001870:	20c00117 	ldw	r3,4(r4)
 4001874:	40c00115 	stw	r3,4(r8)
 4001878:	20800217 	ldw	r2,8(r4)
 400187c:	40800215 	stw	r2,8(r8)
 4001880:	003f9706 	br	40016e0 <_realloc_r+0x84>
 4001884:	98a9883a 	add	r20,r19,r2
 4001888:	a1c01f16 	blt	r20,r7,4001908 <_realloc_r+0x2ac>
 400188c:	b8c00317 	ldw	r3,12(r23)
 4001890:	b8800217 	ldw	r2,8(r23)
 4001894:	99bfff04 	addi	r6,r19,-4
 4001898:	01400904 	movi	r5,36
 400189c:	b82b883a 	mov	r21,r23
 40018a0:	18800215 	stw	r2,8(r3)
 40018a4:	10c00315 	stw	r3,12(r2)
 40018a8:	bc000204 	addi	r16,r23,8
 40018ac:	2980c336 	bltu	r5,r6,4001bbc <_realloc_r+0x560>
 40018b0:	008004c4 	movi	r2,19
 40018b4:	9009883a 	mov	r4,r18
 40018b8:	8011883a 	mov	r8,r16
 40018bc:	11800f2e 	bgeu	r2,r6,40018fc <_realloc_r+0x2a0>
 40018c0:	90800017 	ldw	r2,0(r18)
 40018c4:	ba000404 	addi	r8,r23,16
 40018c8:	91000204 	addi	r4,r18,8
 40018cc:	b8800215 	stw	r2,8(r23)
 40018d0:	90c00117 	ldw	r3,4(r18)
 40018d4:	008006c4 	movi	r2,27
 40018d8:	b8c00315 	stw	r3,12(r23)
 40018dc:	1180072e 	bgeu	r2,r6,40018fc <_realloc_r+0x2a0>
 40018e0:	90c00217 	ldw	r3,8(r18)
 40018e4:	ba000604 	addi	r8,r23,24
 40018e8:	91000404 	addi	r4,r18,16
 40018ec:	b8c00415 	stw	r3,16(r23)
 40018f0:	90800317 	ldw	r2,12(r18)
 40018f4:	b8800515 	stw	r2,20(r23)
 40018f8:	3140c726 	beq	r6,r5,4001c18 <_realloc_r+0x5bc>
 40018fc:	20800017 	ldw	r2,0(r4)
 4001900:	b80f883a 	mov	r7,r23
 4001904:	003fd906 	br	400186c <_realloc_r+0x210>
 4001908:	880b883a 	mov	r5,r17
 400190c:	b009883a 	mov	r4,r22
 4001910:	4000cb80 	call	4000cb8 <_malloc_r>
 4001914:	1023883a 	mov	r17,r2
 4001918:	10002526 	beq	r2,zero,40019b0 <_realloc_r+0x354>
 400191c:	80800117 	ldw	r2,4(r16)
 4001920:	00ffff84 	movi	r3,-2
 4001924:	893ffe04 	addi	r4,r17,-8
 4001928:	10c4703a 	and	r2,r2,r3
 400192c:	8085883a 	add	r2,r16,r2
 4001930:	20809526 	beq	r4,r2,4001b88 <_realloc_r+0x52c>
 4001934:	99bfff04 	addi	r6,r19,-4
 4001938:	01c00904 	movi	r7,36
 400193c:	39804536 	bltu	r7,r6,4001a54 <_realloc_r+0x3f8>
 4001940:	008004c4 	movi	r2,19
 4001944:	9009883a 	mov	r4,r18
 4001948:	880b883a 	mov	r5,r17
 400194c:	11800f2e 	bgeu	r2,r6,400198c <_realloc_r+0x330>
 4001950:	90800017 	ldw	r2,0(r18)
 4001954:	89400204 	addi	r5,r17,8
 4001958:	91000204 	addi	r4,r18,8
 400195c:	88800015 	stw	r2,0(r17)
 4001960:	90c00117 	ldw	r3,4(r18)
 4001964:	008006c4 	movi	r2,27
 4001968:	88c00115 	stw	r3,4(r17)
 400196c:	1180072e 	bgeu	r2,r6,400198c <_realloc_r+0x330>
 4001970:	90c00217 	ldw	r3,8(r18)
 4001974:	89400404 	addi	r5,r17,16
 4001978:	91000404 	addi	r4,r18,16
 400197c:	88c00215 	stw	r3,8(r17)
 4001980:	90800317 	ldw	r2,12(r18)
 4001984:	88800315 	stw	r2,12(r17)
 4001988:	31c09126 	beq	r6,r7,4001bd0 <_realloc_r+0x574>
 400198c:	20800017 	ldw	r2,0(r4)
 4001990:	28800015 	stw	r2,0(r5)
 4001994:	20c00117 	ldw	r3,4(r4)
 4001998:	28c00115 	stw	r3,4(r5)
 400199c:	20800217 	ldw	r2,8(r4)
 40019a0:	28800215 	stw	r2,8(r5)
 40019a4:	900b883a 	mov	r5,r18
 40019a8:	b009883a 	mov	r4,r22
 40019ac:	40024180 	call	4002418 <_free_r>
 40019b0:	b009883a 	mov	r4,r22
 40019b4:	4003c240 	call	4003c24 <__malloc_unlock>
 40019b8:	003f5e06 	br	4001734 <_realloc_r+0xd8>
 40019bc:	300b883a 	mov	r5,r6
 40019c0:	dfc00b17 	ldw	ra,44(sp)
 40019c4:	df000a17 	ldw	fp,40(sp)
 40019c8:	ddc00917 	ldw	r23,36(sp)
 40019cc:	dd800817 	ldw	r22,32(sp)
 40019d0:	dd400717 	ldw	r21,28(sp)
 40019d4:	dd000617 	ldw	r20,24(sp)
 40019d8:	dcc00517 	ldw	r19,20(sp)
 40019dc:	dc800417 	ldw	r18,16(sp)
 40019e0:	dc400317 	ldw	r17,12(sp)
 40019e4:	dc000217 	ldw	r16,8(sp)
 40019e8:	dec00c04 	addi	sp,sp,48
 40019ec:	4000cb81 	jmpi	4000cb8 <_malloc_r>
 40019f0:	38800117 	ldw	r2,4(r7)
 40019f4:	e54b883a 	add	r5,fp,r21
 40019f8:	31000054 	ori	r4,r6,1
 40019fc:	1080004c 	andi	r2,r2,1
 4001a00:	1704b03a 	or	r2,r2,fp
 4001a04:	38800115 	stw	r2,4(r7)
 4001a08:	29000115 	stw	r4,4(r5)
 4001a0c:	2987883a 	add	r3,r5,r6
 4001a10:	18800117 	ldw	r2,4(r3)
 4001a14:	29400204 	addi	r5,r5,8
 4001a18:	b009883a 	mov	r4,r22
 4001a1c:	10800054 	ori	r2,r2,1
 4001a20:	18800115 	stw	r2,4(r3)
 4001a24:	40024180 	call	4002418 <_free_r>
 4001a28:	003f3806 	br	400170c <_realloc_r+0xb0>
 4001a2c:	000d883a 	mov	r6,zero
 4001a30:	0009883a 	mov	r4,zero
 4001a34:	003f5d06 	br	40017ac <_realloc_r+0x150>
 4001a38:	30c00217 	ldw	r3,8(r6)
 4001a3c:	30800317 	ldw	r2,12(r6)
 4001a40:	800f883a 	mov	r7,r16
 4001a44:	84000204 	addi	r16,r16,8
 4001a48:	10c00215 	stw	r3,8(r2)
 4001a4c:	18800315 	stw	r2,12(r3)
 4001a50:	003f2306 	br	40016e0 <_realloc_r+0x84>
 4001a54:	8809883a 	mov	r4,r17
 4001a58:	900b883a 	mov	r5,r18
 4001a5c:	400157c0 	call	400157c <memmove>
 4001a60:	003fd006 	br	40019a4 <_realloc_r+0x348>
 4001a64:	30800117 	ldw	r2,4(r6)
 4001a68:	e0c00404 	addi	r3,fp,16
 4001a6c:	1108703a 	and	r4,r2,r4
 4001a70:	9905883a 	add	r2,r19,r4
 4001a74:	10ff4d16 	blt	r2,r3,40017ac <_realloc_r+0x150>
 4001a78:	1705c83a 	sub	r2,r2,fp
 4001a7c:	870b883a 	add	r5,r16,fp
 4001a80:	10800054 	ori	r2,r2,1
 4001a84:	28800115 	stw	r2,4(r5)
 4001a88:	80c00117 	ldw	r3,4(r16)
 4001a8c:	00810074 	movhi	r2,1025
 4001a90:	109bfc04 	addi	r2,r2,28656
 4001a94:	b009883a 	mov	r4,r22
 4001a98:	18c0004c 	andi	r3,r3,1
 4001a9c:	e0c6b03a 	or	r3,fp,r3
 4001aa0:	11400215 	stw	r5,8(r2)
 4001aa4:	80c00115 	stw	r3,4(r16)
 4001aa8:	4003c240 	call	4003c24 <__malloc_unlock>
 4001aac:	84400204 	addi	r17,r16,8
 4001ab0:	003f2006 	br	4001734 <_realloc_r+0xd8>
 4001ab4:	98a9883a 	add	r20,r19,r2
 4001ab8:	2509883a 	add	r4,r4,r20
 4001abc:	e0800404 	addi	r2,fp,16
 4001ac0:	d9000115 	stw	r4,4(sp)
 4001ac4:	20bf7016 	blt	r4,r2,4001888 <_realloc_r+0x22c>
 4001ac8:	b8c00317 	ldw	r3,12(r23)
 4001acc:	b8800217 	ldw	r2,8(r23)
 4001ad0:	99bfff04 	addi	r6,r19,-4
 4001ad4:	01400904 	movi	r5,36
 4001ad8:	18800215 	stw	r2,8(r3)
 4001adc:	10c00315 	stw	r3,12(r2)
 4001ae0:	bc400204 	addi	r17,r23,8
 4001ae4:	29804136 	bltu	r5,r6,4001bec <_realloc_r+0x590>
 4001ae8:	008004c4 	movi	r2,19
 4001aec:	9009883a 	mov	r4,r18
 4001af0:	880f883a 	mov	r7,r17
 4001af4:	11800f2e 	bgeu	r2,r6,4001b34 <_realloc_r+0x4d8>
 4001af8:	90800017 	ldw	r2,0(r18)
 4001afc:	b9c00404 	addi	r7,r23,16
 4001b00:	91000204 	addi	r4,r18,8
 4001b04:	b8800215 	stw	r2,8(r23)
 4001b08:	90c00117 	ldw	r3,4(r18)
 4001b0c:	008006c4 	movi	r2,27
 4001b10:	b8c00315 	stw	r3,12(r23)
 4001b14:	1180072e 	bgeu	r2,r6,4001b34 <_realloc_r+0x4d8>
 4001b18:	90c00217 	ldw	r3,8(r18)
 4001b1c:	b9c00604 	addi	r7,r23,24
 4001b20:	91000404 	addi	r4,r18,16
 4001b24:	b8c00415 	stw	r3,16(r23)
 4001b28:	90800317 	ldw	r2,12(r18)
 4001b2c:	b8800515 	stw	r2,20(r23)
 4001b30:	31404026 	beq	r6,r5,4001c34 <_realloc_r+0x5d8>
 4001b34:	20800017 	ldw	r2,0(r4)
 4001b38:	38800015 	stw	r2,0(r7)
 4001b3c:	20c00117 	ldw	r3,4(r4)
 4001b40:	38c00115 	stw	r3,4(r7)
 4001b44:	20800217 	ldw	r2,8(r4)
 4001b48:	38800215 	stw	r2,8(r7)
 4001b4c:	d8c00117 	ldw	r3,4(sp)
 4001b50:	bf0b883a 	add	r5,r23,fp
 4001b54:	b009883a 	mov	r4,r22
 4001b58:	1f05c83a 	sub	r2,r3,fp
 4001b5c:	10800054 	ori	r2,r2,1
 4001b60:	28800115 	stw	r2,4(r5)
 4001b64:	b8c00117 	ldw	r3,4(r23)
 4001b68:	00810074 	movhi	r2,1025
 4001b6c:	109bfc04 	addi	r2,r2,28656
 4001b70:	11400215 	stw	r5,8(r2)
 4001b74:	18c0004c 	andi	r3,r3,1
 4001b78:	e0c6b03a 	or	r3,fp,r3
 4001b7c:	b8c00115 	stw	r3,4(r23)
 4001b80:	4003c240 	call	4003c24 <__malloc_unlock>
 4001b84:	003eeb06 	br	4001734 <_realloc_r+0xd8>
 4001b88:	20800117 	ldw	r2,4(r4)
 4001b8c:	00ffff04 	movi	r3,-4
 4001b90:	800f883a 	mov	r7,r16
 4001b94:	10c4703a 	and	r2,r2,r3
 4001b98:	98a9883a 	add	r20,r19,r2
 4001b9c:	84000204 	addi	r16,r16,8
 4001ba0:	003ecf06 	br	40016e0 <_realloc_r+0x84>
 4001ba4:	900b883a 	mov	r5,r18
 4001ba8:	8009883a 	mov	r4,r16
 4001bac:	400157c0 	call	400157c <memmove>
 4001bb0:	dd000017 	ldw	r20,0(sp)
 4001bb4:	b80f883a 	mov	r7,r23
 4001bb8:	003ec906 	br	40016e0 <_realloc_r+0x84>
 4001bbc:	900b883a 	mov	r5,r18
 4001bc0:	8009883a 	mov	r4,r16
 4001bc4:	400157c0 	call	400157c <memmove>
 4001bc8:	b80f883a 	mov	r7,r23
 4001bcc:	003ec406 	br	40016e0 <_realloc_r+0x84>
 4001bd0:	90c00417 	ldw	r3,16(r18)
 4001bd4:	89400604 	addi	r5,r17,24
 4001bd8:	91000604 	addi	r4,r18,24
 4001bdc:	88c00415 	stw	r3,16(r17)
 4001be0:	90800517 	ldw	r2,20(r18)
 4001be4:	88800515 	stw	r2,20(r17)
 4001be8:	003f6806 	br	400198c <_realloc_r+0x330>
 4001bec:	900b883a 	mov	r5,r18
 4001bf0:	8809883a 	mov	r4,r17
 4001bf4:	400157c0 	call	400157c <memmove>
 4001bf8:	003fd406 	br	4001b4c <_realloc_r+0x4f0>
 4001bfc:	90c00417 	ldw	r3,16(r18)
 4001c00:	91000604 	addi	r4,r18,24
 4001c04:	ba000804 	addi	r8,r23,32
 4001c08:	b8c00615 	stw	r3,24(r23)
 4001c0c:	90800517 	ldw	r2,20(r18)
 4001c10:	b8800715 	stw	r2,28(r23)
 4001c14:	003f1206 	br	4001860 <_realloc_r+0x204>
 4001c18:	90c00417 	ldw	r3,16(r18)
 4001c1c:	91000604 	addi	r4,r18,24
 4001c20:	ba000804 	addi	r8,r23,32
 4001c24:	b8c00615 	stw	r3,24(r23)
 4001c28:	90800517 	ldw	r2,20(r18)
 4001c2c:	b8800715 	stw	r2,28(r23)
 4001c30:	003f3206 	br	40018fc <_realloc_r+0x2a0>
 4001c34:	90c00417 	ldw	r3,16(r18)
 4001c38:	91000604 	addi	r4,r18,24
 4001c3c:	b9c00804 	addi	r7,r23,32
 4001c40:	b8c00615 	stw	r3,24(r23)
 4001c44:	90800517 	ldw	r2,20(r18)
 4001c48:	b8800715 	stw	r2,28(r23)
 4001c4c:	003fb906 	br	4001b34 <_realloc_r+0x4d8>

04001c50 <_sbrk_r>:
 4001c50:	defffd04 	addi	sp,sp,-12
 4001c54:	dc000015 	stw	r16,0(sp)
 4001c58:	040100b4 	movhi	r16,1026
 4001c5c:	8421eb04 	addi	r16,r16,-30804
 4001c60:	dc400115 	stw	r17,4(sp)
 4001c64:	80000015 	stw	zero,0(r16)
 4001c68:	2023883a 	mov	r17,r4
 4001c6c:	2809883a 	mov	r4,r5
 4001c70:	dfc00215 	stw	ra,8(sp)
 4001c74:	40037d80 	call	40037d8 <sbrk>
 4001c78:	1007883a 	mov	r3,r2
 4001c7c:	00bfffc4 	movi	r2,-1
 4001c80:	18800626 	beq	r3,r2,4001c9c <_sbrk_r+0x4c>
 4001c84:	1805883a 	mov	r2,r3
 4001c88:	dfc00217 	ldw	ra,8(sp)
 4001c8c:	dc400117 	ldw	r17,4(sp)
 4001c90:	dc000017 	ldw	r16,0(sp)
 4001c94:	dec00304 	addi	sp,sp,12
 4001c98:	f800283a 	ret
 4001c9c:	80800017 	ldw	r2,0(r16)
 4001ca0:	103ff826 	beq	r2,zero,4001c84 <_sbrk_r+0x34>
 4001ca4:	88800015 	stw	r2,0(r17)
 4001ca8:	1805883a 	mov	r2,r3
 4001cac:	dfc00217 	ldw	ra,8(sp)
 4001cb0:	dc400117 	ldw	r17,4(sp)
 4001cb4:	dc000017 	ldw	r16,0(sp)
 4001cb8:	dec00304 	addi	sp,sp,12
 4001cbc:	f800283a 	ret

04001cc0 <__swsetup_r>:
 4001cc0:	008100b4 	movhi	r2,1026
 4001cc4:	10a1b704 	addi	r2,r2,-31012
 4001cc8:	10c00017 	ldw	r3,0(r2)
 4001ccc:	defffd04 	addi	sp,sp,-12
 4001cd0:	dc400115 	stw	r17,4(sp)
 4001cd4:	dc000015 	stw	r16,0(sp)
 4001cd8:	dfc00215 	stw	ra,8(sp)
 4001cdc:	2023883a 	mov	r17,r4
 4001ce0:	2821883a 	mov	r16,r5
 4001ce4:	18000226 	beq	r3,zero,4001cf0 <__swsetup_r+0x30>
 4001ce8:	18800e17 	ldw	r2,56(r3)
 4001cec:	10001f26 	beq	r2,zero,4001d6c <__swsetup_r+0xac>
 4001cf0:	8100030b 	ldhu	r4,12(r16)
 4001cf4:	2080020c 	andi	r2,r4,8
 4001cf8:	10002826 	beq	r2,zero,4001d9c <__swsetup_r+0xdc>
 4001cfc:	81400417 	ldw	r5,16(r16)
 4001d00:	28001d26 	beq	r5,zero,4001d78 <__swsetup_r+0xb8>
 4001d04:	2080004c 	andi	r2,r4,1
 4001d08:	1005003a 	cmpeq	r2,r2,zero
 4001d0c:	10000b26 	beq	r2,zero,4001d3c <__swsetup_r+0x7c>
 4001d10:	2080008c 	andi	r2,r4,2
 4001d14:	10001226 	beq	r2,zero,4001d60 <__swsetup_r+0xa0>
 4001d18:	0005883a 	mov	r2,zero
 4001d1c:	80800215 	stw	r2,8(r16)
 4001d20:	28000b26 	beq	r5,zero,4001d50 <__swsetup_r+0x90>
 4001d24:	0005883a 	mov	r2,zero
 4001d28:	dfc00217 	ldw	ra,8(sp)
 4001d2c:	dc400117 	ldw	r17,4(sp)
 4001d30:	dc000017 	ldw	r16,0(sp)
 4001d34:	dec00304 	addi	sp,sp,12
 4001d38:	f800283a 	ret
 4001d3c:	80800517 	ldw	r2,20(r16)
 4001d40:	80000215 	stw	zero,8(r16)
 4001d44:	0085c83a 	sub	r2,zero,r2
 4001d48:	80800615 	stw	r2,24(r16)
 4001d4c:	283ff51e 	bne	r5,zero,4001d24 <__swsetup_r+0x64>
 4001d50:	2080200c 	andi	r2,r4,128
 4001d54:	103ff326 	beq	r2,zero,4001d24 <__swsetup_r+0x64>
 4001d58:	00bfffc4 	movi	r2,-1
 4001d5c:	003ff206 	br	4001d28 <__swsetup_r+0x68>
 4001d60:	80800517 	ldw	r2,20(r16)
 4001d64:	80800215 	stw	r2,8(r16)
 4001d68:	003fed06 	br	4001d20 <__swsetup_r+0x60>
 4001d6c:	1809883a 	mov	r4,r3
 4001d70:	40020940 	call	4002094 <__sinit>
 4001d74:	003fde06 	br	4001cf0 <__swsetup_r+0x30>
 4001d78:	20c0a00c 	andi	r3,r4,640
 4001d7c:	00808004 	movi	r2,512
 4001d80:	18bfe026 	beq	r3,r2,4001d04 <__swsetup_r+0x44>
 4001d84:	8809883a 	mov	r4,r17
 4001d88:	800b883a 	mov	r5,r16
 4001d8c:	40028ac0 	call	40028ac <__smakebuf_r>
 4001d90:	8100030b 	ldhu	r4,12(r16)
 4001d94:	81400417 	ldw	r5,16(r16)
 4001d98:	003fda06 	br	4001d04 <__swsetup_r+0x44>
 4001d9c:	2080040c 	andi	r2,r4,16
 4001da0:	103fed26 	beq	r2,zero,4001d58 <__swsetup_r+0x98>
 4001da4:	2080010c 	andi	r2,r4,4
 4001da8:	10001226 	beq	r2,zero,4001df4 <__swsetup_r+0x134>
 4001dac:	81400c17 	ldw	r5,48(r16)
 4001db0:	28000526 	beq	r5,zero,4001dc8 <__swsetup_r+0x108>
 4001db4:	80801004 	addi	r2,r16,64
 4001db8:	28800226 	beq	r5,r2,4001dc4 <__swsetup_r+0x104>
 4001dbc:	8809883a 	mov	r4,r17
 4001dc0:	40024180 	call	4002418 <_free_r>
 4001dc4:	80000c15 	stw	zero,48(r16)
 4001dc8:	8080030b 	ldhu	r2,12(r16)
 4001dcc:	81400417 	ldw	r5,16(r16)
 4001dd0:	80000115 	stw	zero,4(r16)
 4001dd4:	10bff6cc 	andi	r2,r2,65499
 4001dd8:	8080030d 	sth	r2,12(r16)
 4001ddc:	81400015 	stw	r5,0(r16)
 4001de0:	8080030b 	ldhu	r2,12(r16)
 4001de4:	10800214 	ori	r2,r2,8
 4001de8:	113fffcc 	andi	r4,r2,65535
 4001dec:	8080030d 	sth	r2,12(r16)
 4001df0:	003fc306 	br	4001d00 <__swsetup_r+0x40>
 4001df4:	81400417 	ldw	r5,16(r16)
 4001df8:	003ff906 	br	4001de0 <__swsetup_r+0x120>

04001dfc <_fflush_r>:
 4001dfc:	defffb04 	addi	sp,sp,-20
 4001e00:	dcc00315 	stw	r19,12(sp)
 4001e04:	dc800215 	stw	r18,8(sp)
 4001e08:	dfc00415 	stw	ra,16(sp)
 4001e0c:	dc400115 	stw	r17,4(sp)
 4001e10:	dc000015 	stw	r16,0(sp)
 4001e14:	2027883a 	mov	r19,r4
 4001e18:	2825883a 	mov	r18,r5
 4001e1c:	20000226 	beq	r4,zero,4001e28 <_fflush_r+0x2c>
 4001e20:	20800e17 	ldw	r2,56(r4)
 4001e24:	10005626 	beq	r2,zero,4001f80 <_fflush_r+0x184>
 4001e28:	9100030b 	ldhu	r4,12(r18)
 4001e2c:	20ffffcc 	andi	r3,r4,65535
 4001e30:	18e0001c 	xori	r3,r3,32768
 4001e34:	18e00004 	addi	r3,r3,-32768
 4001e38:	1880020c 	andi	r2,r3,8
 4001e3c:	1000261e 	bne	r2,zero,4001ed8 <_fflush_r+0xdc>
 4001e40:	90c00117 	ldw	r3,4(r18)
 4001e44:	20820014 	ori	r2,r4,2048
 4001e48:	9080030d 	sth	r2,12(r18)
 4001e4c:	1009883a 	mov	r4,r2
 4001e50:	00c0400e 	bge	zero,r3,4001f54 <_fflush_r+0x158>
 4001e54:	92000a17 	ldw	r8,40(r18)
 4001e58:	40004026 	beq	r8,zero,4001f5c <_fflush_r+0x160>
 4001e5c:	2084000c 	andi	r2,r4,4096
 4001e60:	10005326 	beq	r2,zero,4001fb0 <_fflush_r+0x1b4>
 4001e64:	94001417 	ldw	r16,80(r18)
 4001e68:	9080030b 	ldhu	r2,12(r18)
 4001e6c:	1080010c 	andi	r2,r2,4
 4001e70:	1000481e 	bne	r2,zero,4001f94 <_fflush_r+0x198>
 4001e74:	91400717 	ldw	r5,28(r18)
 4001e78:	9809883a 	mov	r4,r19
 4001e7c:	800d883a 	mov	r6,r16
 4001e80:	000f883a 	mov	r7,zero
 4001e84:	403ee83a 	callr	r8
 4001e88:	8080261e 	bne	r16,r2,4001f24 <_fflush_r+0x128>
 4001e8c:	9080030b 	ldhu	r2,12(r18)
 4001e90:	91000417 	ldw	r4,16(r18)
 4001e94:	90000115 	stw	zero,4(r18)
 4001e98:	10bdffcc 	andi	r2,r2,63487
 4001e9c:	10ffffcc 	andi	r3,r2,65535
 4001ea0:	18c4000c 	andi	r3,r3,4096
 4001ea4:	9080030d 	sth	r2,12(r18)
 4001ea8:	91000015 	stw	r4,0(r18)
 4001eac:	18002b26 	beq	r3,zero,4001f5c <_fflush_r+0x160>
 4001eb0:	0007883a 	mov	r3,zero
 4001eb4:	1805883a 	mov	r2,r3
 4001eb8:	94001415 	stw	r16,80(r18)
 4001ebc:	dfc00417 	ldw	ra,16(sp)
 4001ec0:	dcc00317 	ldw	r19,12(sp)
 4001ec4:	dc800217 	ldw	r18,8(sp)
 4001ec8:	dc400117 	ldw	r17,4(sp)
 4001ecc:	dc000017 	ldw	r16,0(sp)
 4001ed0:	dec00504 	addi	sp,sp,20
 4001ed4:	f800283a 	ret
 4001ed8:	94400417 	ldw	r17,16(r18)
 4001edc:	88001f26 	beq	r17,zero,4001f5c <_fflush_r+0x160>
 4001ee0:	90800017 	ldw	r2,0(r18)
 4001ee4:	18c000cc 	andi	r3,r3,3
 4001ee8:	94400015 	stw	r17,0(r18)
 4001eec:	1461c83a 	sub	r16,r2,r17
 4001ef0:	18002526 	beq	r3,zero,4001f88 <_fflush_r+0x18c>
 4001ef4:	0005883a 	mov	r2,zero
 4001ef8:	90800215 	stw	r2,8(r18)
 4001efc:	0400170e 	bge	zero,r16,4001f5c <_fflush_r+0x160>
 4001f00:	90c00917 	ldw	r3,36(r18)
 4001f04:	91400717 	ldw	r5,28(r18)
 4001f08:	880d883a 	mov	r6,r17
 4001f0c:	800f883a 	mov	r7,r16
 4001f10:	9809883a 	mov	r4,r19
 4001f14:	183ee83a 	callr	r3
 4001f18:	88a3883a 	add	r17,r17,r2
 4001f1c:	80a1c83a 	sub	r16,r16,r2
 4001f20:	00bff616 	blt	zero,r2,4001efc <_fflush_r+0x100>
 4001f24:	9080030b 	ldhu	r2,12(r18)
 4001f28:	00ffffc4 	movi	r3,-1
 4001f2c:	10801014 	ori	r2,r2,64
 4001f30:	9080030d 	sth	r2,12(r18)
 4001f34:	1805883a 	mov	r2,r3
 4001f38:	dfc00417 	ldw	ra,16(sp)
 4001f3c:	dcc00317 	ldw	r19,12(sp)
 4001f40:	dc800217 	ldw	r18,8(sp)
 4001f44:	dc400117 	ldw	r17,4(sp)
 4001f48:	dc000017 	ldw	r16,0(sp)
 4001f4c:	dec00504 	addi	sp,sp,20
 4001f50:	f800283a 	ret
 4001f54:	90800f17 	ldw	r2,60(r18)
 4001f58:	00bfbe16 	blt	zero,r2,4001e54 <_fflush_r+0x58>
 4001f5c:	0007883a 	mov	r3,zero
 4001f60:	1805883a 	mov	r2,r3
 4001f64:	dfc00417 	ldw	ra,16(sp)
 4001f68:	dcc00317 	ldw	r19,12(sp)
 4001f6c:	dc800217 	ldw	r18,8(sp)
 4001f70:	dc400117 	ldw	r17,4(sp)
 4001f74:	dc000017 	ldw	r16,0(sp)
 4001f78:	dec00504 	addi	sp,sp,20
 4001f7c:	f800283a 	ret
 4001f80:	40020940 	call	4002094 <__sinit>
 4001f84:	003fa806 	br	4001e28 <_fflush_r+0x2c>
 4001f88:	90800517 	ldw	r2,20(r18)
 4001f8c:	90800215 	stw	r2,8(r18)
 4001f90:	003fda06 	br	4001efc <_fflush_r+0x100>
 4001f94:	90800117 	ldw	r2,4(r18)
 4001f98:	90c00c17 	ldw	r3,48(r18)
 4001f9c:	80a1c83a 	sub	r16,r16,r2
 4001fa0:	183fb426 	beq	r3,zero,4001e74 <_fflush_r+0x78>
 4001fa4:	90800f17 	ldw	r2,60(r18)
 4001fa8:	80a1c83a 	sub	r16,r16,r2
 4001fac:	003fb106 	br	4001e74 <_fflush_r+0x78>
 4001fb0:	91400717 	ldw	r5,28(r18)
 4001fb4:	9809883a 	mov	r4,r19
 4001fb8:	000d883a 	mov	r6,zero
 4001fbc:	01c00044 	movi	r7,1
 4001fc0:	403ee83a 	callr	r8
 4001fc4:	1021883a 	mov	r16,r2
 4001fc8:	00bfffc4 	movi	r2,-1
 4001fcc:	80800226 	beq	r16,r2,4001fd8 <_fflush_r+0x1dc>
 4001fd0:	92000a17 	ldw	r8,40(r18)
 4001fd4:	003fa406 	br	4001e68 <_fflush_r+0x6c>
 4001fd8:	98c00017 	ldw	r3,0(r19)
 4001fdc:	00800744 	movi	r2,29
 4001fe0:	18bfde26 	beq	r3,r2,4001f5c <_fflush_r+0x160>
 4001fe4:	9080030b 	ldhu	r2,12(r18)
 4001fe8:	8007883a 	mov	r3,r16
 4001fec:	10801014 	ori	r2,r2,64
 4001ff0:	9080030d 	sth	r2,12(r18)
 4001ff4:	003fcf06 	br	4001f34 <_fflush_r+0x138>

04001ff8 <fflush>:
 4001ff8:	01410034 	movhi	r5,1024
 4001ffc:	29477f04 	addi	r5,r5,7676
 4002000:	2007883a 	mov	r3,r4
 4002004:	20000526 	beq	r4,zero,400201c <fflush+0x24>
 4002008:	008100b4 	movhi	r2,1026
 400200c:	10a1b704 	addi	r2,r2,-31012
 4002010:	11000017 	ldw	r4,0(r2)
 4002014:	180b883a 	mov	r5,r3
 4002018:	4001dfc1 	jmpi	4001dfc <_fflush_r>
 400201c:	008100b4 	movhi	r2,1026
 4002020:	10a1b804 	addi	r2,r2,-31008
 4002024:	11000017 	ldw	r4,0(r2)
 4002028:	400272c1 	jmpi	400272c <_fwalk_reent>

0400202c <std>:
 400202c:	00810034 	movhi	r2,1024
 4002030:	108ab604 	addi	r2,r2,10968
 4002034:	20800b15 	stw	r2,44(r4)
 4002038:	00810034 	movhi	r2,1024
 400203c:	108af104 	addi	r2,r2,11204
 4002040:	20800815 	stw	r2,32(r4)
 4002044:	00c10034 	movhi	r3,1024
 4002048:	18cad204 	addi	r3,r3,11080
 400204c:	00810034 	movhi	r2,1024
 4002050:	108ab804 	addi	r2,r2,10976
 4002054:	2140030d 	sth	r5,12(r4)
 4002058:	2180038d 	sth	r6,14(r4)
 400205c:	20c00915 	stw	r3,36(r4)
 4002060:	20800a15 	stw	r2,40(r4)
 4002064:	20000015 	stw	zero,0(r4)
 4002068:	20000115 	stw	zero,4(r4)
 400206c:	20000215 	stw	zero,8(r4)
 4002070:	20000415 	stw	zero,16(r4)
 4002074:	20000515 	stw	zero,20(r4)
 4002078:	20000615 	stw	zero,24(r4)
 400207c:	21000715 	stw	r4,28(r4)
 4002080:	f800283a 	ret

04002084 <__sfp_lock_acquire>:
 4002084:	f800283a 	ret

04002088 <__sfp_lock_release>:
 4002088:	f800283a 	ret

0400208c <__sinit_lock_acquire>:
 400208c:	f800283a 	ret

04002090 <__sinit_lock_release>:
 4002090:	f800283a 	ret

04002094 <__sinit>:
 4002094:	20800e17 	ldw	r2,56(r4)
 4002098:	defffd04 	addi	sp,sp,-12
 400209c:	dc400115 	stw	r17,4(sp)
 40020a0:	dc000015 	stw	r16,0(sp)
 40020a4:	dfc00215 	stw	ra,8(sp)
 40020a8:	04400044 	movi	r17,1
 40020ac:	01400104 	movi	r5,4
 40020b0:	000d883a 	mov	r6,zero
 40020b4:	2021883a 	mov	r16,r4
 40020b8:	2200bb04 	addi	r8,r4,748
 40020bc:	200f883a 	mov	r7,r4
 40020c0:	10000526 	beq	r2,zero,40020d8 <__sinit+0x44>
 40020c4:	dfc00217 	ldw	ra,8(sp)
 40020c8:	dc400117 	ldw	r17,4(sp)
 40020cc:	dc000017 	ldw	r16,0(sp)
 40020d0:	dec00304 	addi	sp,sp,12
 40020d4:	f800283a 	ret
 40020d8:	21000117 	ldw	r4,4(r4)
 40020dc:	00810034 	movhi	r2,1024
 40020e0:	10885e04 	addi	r2,r2,8568
 40020e4:	00c000c4 	movi	r3,3
 40020e8:	80800f15 	stw	r2,60(r16)
 40020ec:	80c0b915 	stw	r3,740(r16)
 40020f0:	8200ba15 	stw	r8,744(r16)
 40020f4:	84400e15 	stw	r17,56(r16)
 40020f8:	8000b815 	stw	zero,736(r16)
 40020fc:	400202c0 	call	400202c <std>
 4002100:	81000217 	ldw	r4,8(r16)
 4002104:	880d883a 	mov	r6,r17
 4002108:	800f883a 	mov	r7,r16
 400210c:	01400284 	movi	r5,10
 4002110:	400202c0 	call	400202c <std>
 4002114:	81000317 	ldw	r4,12(r16)
 4002118:	800f883a 	mov	r7,r16
 400211c:	01400484 	movi	r5,18
 4002120:	01800084 	movi	r6,2
 4002124:	dfc00217 	ldw	ra,8(sp)
 4002128:	dc400117 	ldw	r17,4(sp)
 400212c:	dc000017 	ldw	r16,0(sp)
 4002130:	dec00304 	addi	sp,sp,12
 4002134:	400202c1 	jmpi	400202c <std>

04002138 <__fp_lock>:
 4002138:	0005883a 	mov	r2,zero
 400213c:	f800283a 	ret

04002140 <__fp_unlock>:
 4002140:	0005883a 	mov	r2,zero
 4002144:	f800283a 	ret

04002148 <__fp_unlock_all>:
 4002148:	008100b4 	movhi	r2,1026
 400214c:	10a1b704 	addi	r2,r2,-31012
 4002150:	11000017 	ldw	r4,0(r2)
 4002154:	01410034 	movhi	r5,1024
 4002158:	29485004 	addi	r5,r5,8512
 400215c:	40027f41 	jmpi	40027f4 <_fwalk>

04002160 <__fp_lock_all>:
 4002160:	008100b4 	movhi	r2,1026
 4002164:	10a1b704 	addi	r2,r2,-31012
 4002168:	11000017 	ldw	r4,0(r2)
 400216c:	01410034 	movhi	r5,1024
 4002170:	29484e04 	addi	r5,r5,8504
 4002174:	40027f41 	jmpi	40027f4 <_fwalk>

04002178 <_cleanup_r>:
 4002178:	01410034 	movhi	r5,1024
 400217c:	294b8704 	addi	r5,r5,11804
 4002180:	40027f41 	jmpi	40027f4 <_fwalk>

04002184 <_cleanup>:
 4002184:	008100b4 	movhi	r2,1026
 4002188:	10a1b804 	addi	r2,r2,-31008
 400218c:	11000017 	ldw	r4,0(r2)
 4002190:	40021781 	jmpi	4002178 <_cleanup_r>

04002194 <__sfmoreglue>:
 4002194:	defffc04 	addi	sp,sp,-16
 4002198:	dc400115 	stw	r17,4(sp)
 400219c:	2c401724 	muli	r17,r5,92
 40021a0:	dc800215 	stw	r18,8(sp)
 40021a4:	2825883a 	mov	r18,r5
 40021a8:	89400304 	addi	r5,r17,12
 40021ac:	dc000015 	stw	r16,0(sp)
 40021b0:	dfc00315 	stw	ra,12(sp)
 40021b4:	4000cb80 	call	4000cb8 <_malloc_r>
 40021b8:	0021883a 	mov	r16,zero
 40021bc:	880d883a 	mov	r6,r17
 40021c0:	000b883a 	mov	r5,zero
 40021c4:	10000626 	beq	r2,zero,40021e0 <__sfmoreglue+0x4c>
 40021c8:	11000304 	addi	r4,r2,12
 40021cc:	14800115 	stw	r18,4(r2)
 40021d0:	10000015 	stw	zero,0(r2)
 40021d4:	11000215 	stw	r4,8(r2)
 40021d8:	1021883a 	mov	r16,r2
 40021dc:	4002a400 	call	4002a40 <memset>
 40021e0:	8005883a 	mov	r2,r16
 40021e4:	dfc00317 	ldw	ra,12(sp)
 40021e8:	dc800217 	ldw	r18,8(sp)
 40021ec:	dc400117 	ldw	r17,4(sp)
 40021f0:	dc000017 	ldw	r16,0(sp)
 40021f4:	dec00404 	addi	sp,sp,16
 40021f8:	f800283a 	ret

040021fc <__sfp>:
 40021fc:	defffd04 	addi	sp,sp,-12
 4002200:	008100b4 	movhi	r2,1026
 4002204:	10a1b804 	addi	r2,r2,-31008
 4002208:	dc000015 	stw	r16,0(sp)
 400220c:	14000017 	ldw	r16,0(r2)
 4002210:	dc400115 	stw	r17,4(sp)
 4002214:	dfc00215 	stw	ra,8(sp)
 4002218:	80800e17 	ldw	r2,56(r16)
 400221c:	2023883a 	mov	r17,r4
 4002220:	10002626 	beq	r2,zero,40022bc <__sfp+0xc0>
 4002224:	8400b804 	addi	r16,r16,736
 4002228:	80800117 	ldw	r2,4(r16)
 400222c:	81000217 	ldw	r4,8(r16)
 4002230:	10ffffc4 	addi	r3,r2,-1
 4002234:	18000916 	blt	r3,zero,400225c <__sfp+0x60>
 4002238:	2080030f 	ldh	r2,12(r4)
 400223c:	10000b26 	beq	r2,zero,400226c <__sfp+0x70>
 4002240:	017fffc4 	movi	r5,-1
 4002244:	00000206 	br	4002250 <__sfp+0x54>
 4002248:	2080030f 	ldh	r2,12(r4)
 400224c:	10000726 	beq	r2,zero,400226c <__sfp+0x70>
 4002250:	18ffffc4 	addi	r3,r3,-1
 4002254:	21001704 	addi	r4,r4,92
 4002258:	197ffb1e 	bne	r3,r5,4002248 <__sfp+0x4c>
 400225c:	80800017 	ldw	r2,0(r16)
 4002260:	10001926 	beq	r2,zero,40022c8 <__sfp+0xcc>
 4002264:	1021883a 	mov	r16,r2
 4002268:	003fef06 	br	4002228 <__sfp+0x2c>
 400226c:	00bfffc4 	movi	r2,-1
 4002270:	00c00044 	movi	r3,1
 4002274:	2080038d 	sth	r2,14(r4)
 4002278:	20c0030d 	sth	r3,12(r4)
 400227c:	20000015 	stw	zero,0(r4)
 4002280:	20000215 	stw	zero,8(r4)
 4002284:	20000115 	stw	zero,4(r4)
 4002288:	20000415 	stw	zero,16(r4)
 400228c:	20000515 	stw	zero,20(r4)
 4002290:	20000615 	stw	zero,24(r4)
 4002294:	20000c15 	stw	zero,48(r4)
 4002298:	20000d15 	stw	zero,52(r4)
 400229c:	20001115 	stw	zero,68(r4)
 40022a0:	20001215 	stw	zero,72(r4)
 40022a4:	2005883a 	mov	r2,r4
 40022a8:	dfc00217 	ldw	ra,8(sp)
 40022ac:	dc400117 	ldw	r17,4(sp)
 40022b0:	dc000017 	ldw	r16,0(sp)
 40022b4:	dec00304 	addi	sp,sp,12
 40022b8:	f800283a 	ret
 40022bc:	8009883a 	mov	r4,r16
 40022c0:	40020940 	call	4002094 <__sinit>
 40022c4:	003fd706 	br	4002224 <__sfp+0x28>
 40022c8:	8809883a 	mov	r4,r17
 40022cc:	01400104 	movi	r5,4
 40022d0:	40021940 	call	4002194 <__sfmoreglue>
 40022d4:	80800015 	stw	r2,0(r16)
 40022d8:	103fe21e 	bne	r2,zero,4002264 <__sfp+0x68>
 40022dc:	00800304 	movi	r2,12
 40022e0:	0009883a 	mov	r4,zero
 40022e4:	88800015 	stw	r2,0(r17)
 40022e8:	003fee06 	br	40022a4 <__sfp+0xa8>

040022ec <_malloc_trim_r>:
 40022ec:	defffb04 	addi	sp,sp,-20
 40022f0:	dcc00315 	stw	r19,12(sp)
 40022f4:	04c10074 	movhi	r19,1025
 40022f8:	9cdbfc04 	addi	r19,r19,28656
 40022fc:	dc800215 	stw	r18,8(sp)
 4002300:	dc400115 	stw	r17,4(sp)
 4002304:	dc000015 	stw	r16,0(sp)
 4002308:	2823883a 	mov	r17,r5
 400230c:	2025883a 	mov	r18,r4
 4002310:	dfc00415 	stw	ra,16(sp)
 4002314:	4003b1c0 	call	4003b1c <__malloc_lock>
 4002318:	98800217 	ldw	r2,8(r19)
 400231c:	9009883a 	mov	r4,r18
 4002320:	000b883a 	mov	r5,zero
 4002324:	10c00117 	ldw	r3,4(r2)
 4002328:	00bfff04 	movi	r2,-4
 400232c:	18a0703a 	and	r16,r3,r2
 4002330:	8463c83a 	sub	r17,r16,r17
 4002334:	8c43fbc4 	addi	r17,r17,4079
 4002338:	8822d33a 	srli	r17,r17,12
 400233c:	0083ffc4 	movi	r2,4095
 4002340:	8c7fffc4 	addi	r17,r17,-1
 4002344:	8822933a 	slli	r17,r17,12
 4002348:	1440060e 	bge	r2,r17,4002364 <_malloc_trim_r+0x78>
 400234c:	4001c500 	call	4001c50 <_sbrk_r>
 4002350:	98c00217 	ldw	r3,8(r19)
 4002354:	9009883a 	mov	r4,r18
 4002358:	044bc83a 	sub	r5,zero,r17
 400235c:	80c7883a 	add	r3,r16,r3
 4002360:	10c00926 	beq	r2,r3,4002388 <_malloc_trim_r+0x9c>
 4002364:	4003c240 	call	4003c24 <__malloc_unlock>
 4002368:	0005883a 	mov	r2,zero
 400236c:	dfc00417 	ldw	ra,16(sp)
 4002370:	dcc00317 	ldw	r19,12(sp)
 4002374:	dc800217 	ldw	r18,8(sp)
 4002378:	dc400117 	ldw	r17,4(sp)
 400237c:	dc000017 	ldw	r16,0(sp)
 4002380:	dec00504 	addi	sp,sp,20
 4002384:	f800283a 	ret
 4002388:	9009883a 	mov	r4,r18
 400238c:	4001c500 	call	4001c50 <_sbrk_r>
 4002390:	844dc83a 	sub	r6,r16,r17
 4002394:	00ffffc4 	movi	r3,-1
 4002398:	9009883a 	mov	r4,r18
 400239c:	000b883a 	mov	r5,zero
 40023a0:	01c100b4 	movhi	r7,1026
 40023a4:	39e21004 	addi	r7,r7,-30656
 40023a8:	31800054 	ori	r6,r6,1
 40023ac:	10c00926 	beq	r2,r3,40023d4 <_malloc_trim_r+0xe8>
 40023b0:	38800017 	ldw	r2,0(r7)
 40023b4:	98c00217 	ldw	r3,8(r19)
 40023b8:	9009883a 	mov	r4,r18
 40023bc:	1445c83a 	sub	r2,r2,r17
 40023c0:	38800015 	stw	r2,0(r7)
 40023c4:	19800115 	stw	r6,4(r3)
 40023c8:	4003c240 	call	4003c24 <__malloc_unlock>
 40023cc:	00800044 	movi	r2,1
 40023d0:	003fe606 	br	400236c <_malloc_trim_r+0x80>
 40023d4:	4001c500 	call	4001c50 <_sbrk_r>
 40023d8:	99800217 	ldw	r6,8(r19)
 40023dc:	100f883a 	mov	r7,r2
 40023e0:	9009883a 	mov	r4,r18
 40023e4:	1187c83a 	sub	r3,r2,r6
 40023e8:	008003c4 	movi	r2,15
 40023ec:	19400054 	ori	r5,r3,1
 40023f0:	10ffdc0e 	bge	r2,r3,4002364 <_malloc_trim_r+0x78>
 40023f4:	008100b4 	movhi	r2,1026
 40023f8:	10a1ba04 	addi	r2,r2,-31000
 40023fc:	10c00017 	ldw	r3,0(r2)
 4002400:	008100b4 	movhi	r2,1026
 4002404:	10a21004 	addi	r2,r2,-30656
 4002408:	31400115 	stw	r5,4(r6)
 400240c:	38c7c83a 	sub	r3,r7,r3
 4002410:	10c00015 	stw	r3,0(r2)
 4002414:	003fd306 	br	4002364 <_malloc_trim_r+0x78>

04002418 <_free_r>:
 4002418:	defffd04 	addi	sp,sp,-12
 400241c:	dc400115 	stw	r17,4(sp)
 4002420:	dc000015 	stw	r16,0(sp)
 4002424:	dfc00215 	stw	ra,8(sp)
 4002428:	2821883a 	mov	r16,r5
 400242c:	2023883a 	mov	r17,r4
 4002430:	28005a26 	beq	r5,zero,400259c <_free_r+0x184>
 4002434:	4003b1c0 	call	4003b1c <__malloc_lock>
 4002438:	823ffe04 	addi	r8,r16,-8
 400243c:	41400117 	ldw	r5,4(r8)
 4002440:	00bfff84 	movi	r2,-2
 4002444:	02810074 	movhi	r10,1025
 4002448:	529bfc04 	addi	r10,r10,28656
 400244c:	288e703a 	and	r7,r5,r2
 4002450:	41cd883a 	add	r6,r8,r7
 4002454:	30c00117 	ldw	r3,4(r6)
 4002458:	51000217 	ldw	r4,8(r10)
 400245c:	00bfff04 	movi	r2,-4
 4002460:	1892703a 	and	r9,r3,r2
 4002464:	5017883a 	mov	r11,r10
 4002468:	31006726 	beq	r6,r4,4002608 <_free_r+0x1f0>
 400246c:	2880004c 	andi	r2,r5,1
 4002470:	1005003a 	cmpeq	r2,r2,zero
 4002474:	32400115 	stw	r9,4(r6)
 4002478:	10001a1e 	bne	r2,zero,40024e4 <_free_r+0xcc>
 400247c:	000b883a 	mov	r5,zero
 4002480:	3247883a 	add	r3,r6,r9
 4002484:	18800117 	ldw	r2,4(r3)
 4002488:	1080004c 	andi	r2,r2,1
 400248c:	1000231e 	bne	r2,zero,400251c <_free_r+0x104>
 4002490:	280ac03a 	cmpne	r5,r5,zero
 4002494:	3a4f883a 	add	r7,r7,r9
 4002498:	2800451e 	bne	r5,zero,40025b0 <_free_r+0x198>
 400249c:	31000217 	ldw	r4,8(r6)
 40024a0:	00810074 	movhi	r2,1025
 40024a4:	109bfe04 	addi	r2,r2,28664
 40024a8:	20807b26 	beq	r4,r2,4002698 <_free_r+0x280>
 40024ac:	30800317 	ldw	r2,12(r6)
 40024b0:	3a07883a 	add	r3,r7,r8
 40024b4:	19c00015 	stw	r7,0(r3)
 40024b8:	11000215 	stw	r4,8(r2)
 40024bc:	20800315 	stw	r2,12(r4)
 40024c0:	38800054 	ori	r2,r7,1
 40024c4:	40800115 	stw	r2,4(r8)
 40024c8:	28001a26 	beq	r5,zero,4002534 <_free_r+0x11c>
 40024cc:	8809883a 	mov	r4,r17
 40024d0:	dfc00217 	ldw	ra,8(sp)
 40024d4:	dc400117 	ldw	r17,4(sp)
 40024d8:	dc000017 	ldw	r16,0(sp)
 40024dc:	dec00304 	addi	sp,sp,12
 40024e0:	4003c241 	jmpi	4003c24 <__malloc_unlock>
 40024e4:	80bffe17 	ldw	r2,-8(r16)
 40024e8:	50c00204 	addi	r3,r10,8
 40024ec:	4091c83a 	sub	r8,r8,r2
 40024f0:	41000217 	ldw	r4,8(r8)
 40024f4:	388f883a 	add	r7,r7,r2
 40024f8:	20c06126 	beq	r4,r3,4002680 <_free_r+0x268>
 40024fc:	40800317 	ldw	r2,12(r8)
 4002500:	3247883a 	add	r3,r6,r9
 4002504:	000b883a 	mov	r5,zero
 4002508:	11000215 	stw	r4,8(r2)
 400250c:	20800315 	stw	r2,12(r4)
 4002510:	18800117 	ldw	r2,4(r3)
 4002514:	1080004c 	andi	r2,r2,1
 4002518:	103fdd26 	beq	r2,zero,4002490 <_free_r+0x78>
 400251c:	38800054 	ori	r2,r7,1
 4002520:	3a07883a 	add	r3,r7,r8
 4002524:	280ac03a 	cmpne	r5,r5,zero
 4002528:	40800115 	stw	r2,4(r8)
 400252c:	19c00015 	stw	r7,0(r3)
 4002530:	283fe61e 	bne	r5,zero,40024cc <_free_r+0xb4>
 4002534:	00807fc4 	movi	r2,511
 4002538:	11c01f2e 	bgeu	r2,r7,40025b8 <_free_r+0x1a0>
 400253c:	3806d27a 	srli	r3,r7,9
 4002540:	1800481e 	bne	r3,zero,4002664 <_free_r+0x24c>
 4002544:	3804d0fa 	srli	r2,r7,3
 4002548:	100690fa 	slli	r3,r2,3
 400254c:	1acd883a 	add	r6,r3,r11
 4002550:	31400217 	ldw	r5,8(r6)
 4002554:	31405926 	beq	r6,r5,40026bc <_free_r+0x2a4>
 4002558:	28800117 	ldw	r2,4(r5)
 400255c:	00ffff04 	movi	r3,-4
 4002560:	10c4703a 	and	r2,r2,r3
 4002564:	3880022e 	bgeu	r7,r2,4002570 <_free_r+0x158>
 4002568:	29400217 	ldw	r5,8(r5)
 400256c:	317ffa1e 	bne	r6,r5,4002558 <_free_r+0x140>
 4002570:	29800317 	ldw	r6,12(r5)
 4002574:	41800315 	stw	r6,12(r8)
 4002578:	41400215 	stw	r5,8(r8)
 400257c:	8809883a 	mov	r4,r17
 4002580:	2a000315 	stw	r8,12(r5)
 4002584:	32000215 	stw	r8,8(r6)
 4002588:	dfc00217 	ldw	ra,8(sp)
 400258c:	dc400117 	ldw	r17,4(sp)
 4002590:	dc000017 	ldw	r16,0(sp)
 4002594:	dec00304 	addi	sp,sp,12
 4002598:	4003c241 	jmpi	4003c24 <__malloc_unlock>
 400259c:	dfc00217 	ldw	ra,8(sp)
 40025a0:	dc400117 	ldw	r17,4(sp)
 40025a4:	dc000017 	ldw	r16,0(sp)
 40025a8:	dec00304 	addi	sp,sp,12
 40025ac:	f800283a 	ret
 40025b0:	31000217 	ldw	r4,8(r6)
 40025b4:	003fbd06 	br	40024ac <_free_r+0x94>
 40025b8:	3806d0fa 	srli	r3,r7,3
 40025bc:	00800044 	movi	r2,1
 40025c0:	51400117 	ldw	r5,4(r10)
 40025c4:	180890fa 	slli	r4,r3,3
 40025c8:	1807d0ba 	srai	r3,r3,2
 40025cc:	22c9883a 	add	r4,r4,r11
 40025d0:	21800217 	ldw	r6,8(r4)
 40025d4:	10c4983a 	sll	r2,r2,r3
 40025d8:	41000315 	stw	r4,12(r8)
 40025dc:	41800215 	stw	r6,8(r8)
 40025e0:	288ab03a 	or	r5,r5,r2
 40025e4:	22000215 	stw	r8,8(r4)
 40025e8:	8809883a 	mov	r4,r17
 40025ec:	51400115 	stw	r5,4(r10)
 40025f0:	32000315 	stw	r8,12(r6)
 40025f4:	dfc00217 	ldw	ra,8(sp)
 40025f8:	dc400117 	ldw	r17,4(sp)
 40025fc:	dc000017 	ldw	r16,0(sp)
 4002600:	dec00304 	addi	sp,sp,12
 4002604:	4003c241 	jmpi	4003c24 <__malloc_unlock>
 4002608:	2880004c 	andi	r2,r5,1
 400260c:	3a4d883a 	add	r6,r7,r9
 4002610:	1000071e 	bne	r2,zero,4002630 <_free_r+0x218>
 4002614:	80bffe17 	ldw	r2,-8(r16)
 4002618:	4091c83a 	sub	r8,r8,r2
 400261c:	41000317 	ldw	r4,12(r8)
 4002620:	40c00217 	ldw	r3,8(r8)
 4002624:	308d883a 	add	r6,r6,r2
 4002628:	20c00215 	stw	r3,8(r4)
 400262c:	19000315 	stw	r4,12(r3)
 4002630:	008100b4 	movhi	r2,1026
 4002634:	10a1b904 	addi	r2,r2,-31004
 4002638:	11000017 	ldw	r4,0(r2)
 400263c:	30c00054 	ori	r3,r6,1
 4002640:	52000215 	stw	r8,8(r10)
 4002644:	40c00115 	stw	r3,4(r8)
 4002648:	313fa036 	bltu	r6,r4,40024cc <_free_r+0xb4>
 400264c:	008100b4 	movhi	r2,1026
 4002650:	10a1e804 	addi	r2,r2,-30816
 4002654:	11400017 	ldw	r5,0(r2)
 4002658:	8809883a 	mov	r4,r17
 400265c:	40022ec0 	call	40022ec <_malloc_trim_r>
 4002660:	003f9a06 	br	40024cc <_free_r+0xb4>
 4002664:	00800104 	movi	r2,4
 4002668:	10c0072e 	bgeu	r2,r3,4002688 <_free_r+0x270>
 400266c:	00800504 	movi	r2,20
 4002670:	10c01936 	bltu	r2,r3,40026d8 <_free_r+0x2c0>
 4002674:	188016c4 	addi	r2,r3,91
 4002678:	100690fa 	slli	r3,r2,3
 400267c:	003fb306 	br	400254c <_free_r+0x134>
 4002680:	01400044 	movi	r5,1
 4002684:	003f7e06 	br	4002480 <_free_r+0x68>
 4002688:	3804d1ba 	srli	r2,r7,6
 400268c:	10800e04 	addi	r2,r2,56
 4002690:	100690fa 	slli	r3,r2,3
 4002694:	003fad06 	br	400254c <_free_r+0x134>
 4002698:	22000315 	stw	r8,12(r4)
 400269c:	22000215 	stw	r8,8(r4)
 40026a0:	3a05883a 	add	r2,r7,r8
 40026a4:	38c00054 	ori	r3,r7,1
 40026a8:	11c00015 	stw	r7,0(r2)
 40026ac:	41000215 	stw	r4,8(r8)
 40026b0:	40c00115 	stw	r3,4(r8)
 40026b4:	41000315 	stw	r4,12(r8)
 40026b8:	003f8406 	br	40024cc <_free_r+0xb4>
 40026bc:	1005d0ba 	srai	r2,r2,2
 40026c0:	00c00044 	movi	r3,1
 40026c4:	51000117 	ldw	r4,4(r10)
 40026c8:	1886983a 	sll	r3,r3,r2
 40026cc:	20c8b03a 	or	r4,r4,r3
 40026d0:	51000115 	stw	r4,4(r10)
 40026d4:	003fa706 	br	4002574 <_free_r+0x15c>
 40026d8:	00801504 	movi	r2,84
 40026dc:	10c00436 	bltu	r2,r3,40026f0 <_free_r+0x2d8>
 40026e0:	3804d33a 	srli	r2,r7,12
 40026e4:	10801b84 	addi	r2,r2,110
 40026e8:	100690fa 	slli	r3,r2,3
 40026ec:	003f9706 	br	400254c <_free_r+0x134>
 40026f0:	00805504 	movi	r2,340
 40026f4:	10c00436 	bltu	r2,r3,4002708 <_free_r+0x2f0>
 40026f8:	3804d3fa 	srli	r2,r7,15
 40026fc:	10801dc4 	addi	r2,r2,119
 4002700:	100690fa 	slli	r3,r2,3
 4002704:	003f9106 	br	400254c <_free_r+0x134>
 4002708:	00815504 	movi	r2,1364
 400270c:	10c0032e 	bgeu	r2,r3,400271c <_free_r+0x304>
 4002710:	00801f84 	movi	r2,126
 4002714:	00c0fc04 	movi	r3,1008
 4002718:	003f8c06 	br	400254c <_free_r+0x134>
 400271c:	3804d4ba 	srli	r2,r7,18
 4002720:	10801f04 	addi	r2,r2,124
 4002724:	100690fa 	slli	r3,r2,3
 4002728:	003f8806 	br	400254c <_free_r+0x134>

0400272c <_fwalk_reent>:
 400272c:	defff704 	addi	sp,sp,-36
 4002730:	dcc00315 	stw	r19,12(sp)
 4002734:	24c0b804 	addi	r19,r4,736
 4002738:	dd800615 	stw	r22,24(sp)
 400273c:	dd400515 	stw	r21,20(sp)
 4002740:	dfc00815 	stw	ra,32(sp)
 4002744:	ddc00715 	stw	r23,28(sp)
 4002748:	dd000415 	stw	r20,16(sp)
 400274c:	dc800215 	stw	r18,8(sp)
 4002750:	dc400115 	stw	r17,4(sp)
 4002754:	dc000015 	stw	r16,0(sp)
 4002758:	202b883a 	mov	r21,r4
 400275c:	282d883a 	mov	r22,r5
 4002760:	40020840 	call	4002084 <__sfp_lock_acquire>
 4002764:	98002126 	beq	r19,zero,40027ec <_fwalk_reent+0xc0>
 4002768:	002f883a 	mov	r23,zero
 400276c:	9c800117 	ldw	r18,4(r19)
 4002770:	9c000217 	ldw	r16,8(r19)
 4002774:	90bfffc4 	addi	r2,r18,-1
 4002778:	10000d16 	blt	r2,zero,40027b0 <_fwalk_reent+0x84>
 400277c:	0023883a 	mov	r17,zero
 4002780:	053fffc4 	movi	r20,-1
 4002784:	8080030f 	ldh	r2,12(r16)
 4002788:	8c400044 	addi	r17,r17,1
 400278c:	10000626 	beq	r2,zero,40027a8 <_fwalk_reent+0x7c>
 4002790:	8080038f 	ldh	r2,14(r16)
 4002794:	800b883a 	mov	r5,r16
 4002798:	a809883a 	mov	r4,r21
 400279c:	15000226 	beq	r2,r20,40027a8 <_fwalk_reent+0x7c>
 40027a0:	b03ee83a 	callr	r22
 40027a4:	b8aeb03a 	or	r23,r23,r2
 40027a8:	84001704 	addi	r16,r16,92
 40027ac:	947ff51e 	bne	r18,r17,4002784 <_fwalk_reent+0x58>
 40027b0:	9cc00017 	ldw	r19,0(r19)
 40027b4:	983fed1e 	bne	r19,zero,400276c <_fwalk_reent+0x40>
 40027b8:	40020880 	call	4002088 <__sfp_lock_release>
 40027bc:	b805883a 	mov	r2,r23
 40027c0:	dfc00817 	ldw	ra,32(sp)
 40027c4:	ddc00717 	ldw	r23,28(sp)
 40027c8:	dd800617 	ldw	r22,24(sp)
 40027cc:	dd400517 	ldw	r21,20(sp)
 40027d0:	dd000417 	ldw	r20,16(sp)
 40027d4:	dcc00317 	ldw	r19,12(sp)
 40027d8:	dc800217 	ldw	r18,8(sp)
 40027dc:	dc400117 	ldw	r17,4(sp)
 40027e0:	dc000017 	ldw	r16,0(sp)
 40027e4:	dec00904 	addi	sp,sp,36
 40027e8:	f800283a 	ret
 40027ec:	002f883a 	mov	r23,zero
 40027f0:	003ff106 	br	40027b8 <_fwalk_reent+0x8c>

040027f4 <_fwalk>:
 40027f4:	defff804 	addi	sp,sp,-32
 40027f8:	dcc00315 	stw	r19,12(sp)
 40027fc:	24c0b804 	addi	r19,r4,736
 4002800:	dd400515 	stw	r21,20(sp)
 4002804:	dfc00715 	stw	ra,28(sp)
 4002808:	dd800615 	stw	r22,24(sp)
 400280c:	dd000415 	stw	r20,16(sp)
 4002810:	dc800215 	stw	r18,8(sp)
 4002814:	dc400115 	stw	r17,4(sp)
 4002818:	dc000015 	stw	r16,0(sp)
 400281c:	282b883a 	mov	r21,r5
 4002820:	40020840 	call	4002084 <__sfp_lock_acquire>
 4002824:	98001f26 	beq	r19,zero,40028a4 <_fwalk+0xb0>
 4002828:	002d883a 	mov	r22,zero
 400282c:	9c800117 	ldw	r18,4(r19)
 4002830:	9c000217 	ldw	r16,8(r19)
 4002834:	90bfffc4 	addi	r2,r18,-1
 4002838:	10000c16 	blt	r2,zero,400286c <_fwalk+0x78>
 400283c:	0023883a 	mov	r17,zero
 4002840:	053fffc4 	movi	r20,-1
 4002844:	8080030f 	ldh	r2,12(r16)
 4002848:	8c400044 	addi	r17,r17,1
 400284c:	10000526 	beq	r2,zero,4002864 <_fwalk+0x70>
 4002850:	8080038f 	ldh	r2,14(r16)
 4002854:	8009883a 	mov	r4,r16
 4002858:	15000226 	beq	r2,r20,4002864 <_fwalk+0x70>
 400285c:	a83ee83a 	callr	r21
 4002860:	b0acb03a 	or	r22,r22,r2
 4002864:	84001704 	addi	r16,r16,92
 4002868:	947ff61e 	bne	r18,r17,4002844 <_fwalk+0x50>
 400286c:	9cc00017 	ldw	r19,0(r19)
 4002870:	983fee1e 	bne	r19,zero,400282c <_fwalk+0x38>
 4002874:	40020880 	call	4002088 <__sfp_lock_release>
 4002878:	b005883a 	mov	r2,r22
 400287c:	dfc00717 	ldw	ra,28(sp)
 4002880:	dd800617 	ldw	r22,24(sp)
 4002884:	dd400517 	ldw	r21,20(sp)
 4002888:	dd000417 	ldw	r20,16(sp)
 400288c:	dcc00317 	ldw	r19,12(sp)
 4002890:	dc800217 	ldw	r18,8(sp)
 4002894:	dc400117 	ldw	r17,4(sp)
 4002898:	dc000017 	ldw	r16,0(sp)
 400289c:	dec00804 	addi	sp,sp,32
 40028a0:	f800283a 	ret
 40028a4:	002d883a 	mov	r22,zero
 40028a8:	003ff206 	br	4002874 <_fwalk+0x80>

040028ac <__smakebuf_r>:
 40028ac:	2880030b 	ldhu	r2,12(r5)
 40028b0:	deffed04 	addi	sp,sp,-76
 40028b4:	dc401015 	stw	r17,64(sp)
 40028b8:	1080008c 	andi	r2,r2,2
 40028bc:	dc000f15 	stw	r16,60(sp)
 40028c0:	dfc01215 	stw	ra,72(sp)
 40028c4:	dc801115 	stw	r18,68(sp)
 40028c8:	2821883a 	mov	r16,r5
 40028cc:	2023883a 	mov	r17,r4
 40028d0:	10000b26 	beq	r2,zero,4002900 <__smakebuf_r+0x54>
 40028d4:	28c010c4 	addi	r3,r5,67
 40028d8:	00800044 	movi	r2,1
 40028dc:	28800515 	stw	r2,20(r5)
 40028e0:	28c00415 	stw	r3,16(r5)
 40028e4:	28c00015 	stw	r3,0(r5)
 40028e8:	dfc01217 	ldw	ra,72(sp)
 40028ec:	dc801117 	ldw	r18,68(sp)
 40028f0:	dc401017 	ldw	r17,64(sp)
 40028f4:	dc000f17 	ldw	r16,60(sp)
 40028f8:	dec01304 	addi	sp,sp,76
 40028fc:	f800283a 	ret
 4002900:	2940038f 	ldh	r5,14(r5)
 4002904:	28002116 	blt	r5,zero,400298c <__smakebuf_r+0xe0>
 4002908:	d80d883a 	mov	r6,sp
 400290c:	4002e300 	call	4002e30 <_fstat_r>
 4002910:	10001e16 	blt	r2,zero,400298c <__smakebuf_r+0xe0>
 4002914:	d8800117 	ldw	r2,4(sp)
 4002918:	00e00014 	movui	r3,32768
 400291c:	113c000c 	andi	r4,r2,61440
 4002920:	20c03126 	beq	r4,r3,40029e8 <__smakebuf_r+0x13c>
 4002924:	8080030b 	ldhu	r2,12(r16)
 4002928:	00c80004 	movi	r3,8192
 400292c:	10820014 	ori	r2,r2,2048
 4002930:	8080030d 	sth	r2,12(r16)
 4002934:	20c01e26 	beq	r4,r3,40029b0 <__smakebuf_r+0x104>
 4002938:	04810004 	movi	r18,1024
 400293c:	8809883a 	mov	r4,r17
 4002940:	900b883a 	mov	r5,r18
 4002944:	4000cb80 	call	4000cb8 <_malloc_r>
 4002948:	1009883a 	mov	r4,r2
 400294c:	10003126 	beq	r2,zero,4002a14 <__smakebuf_r+0x168>
 4002950:	80c0030b 	ldhu	r3,12(r16)
 4002954:	00810034 	movhi	r2,1024
 4002958:	10885e04 	addi	r2,r2,8568
 400295c:	88800f15 	stw	r2,60(r17)
 4002960:	18c02014 	ori	r3,r3,128
 4002964:	84800515 	stw	r18,20(r16)
 4002968:	80c0030d 	sth	r3,12(r16)
 400296c:	81000415 	stw	r4,16(r16)
 4002970:	81000015 	stw	r4,0(r16)
 4002974:	dfc01217 	ldw	ra,72(sp)
 4002978:	dc801117 	ldw	r18,68(sp)
 400297c:	dc401017 	ldw	r17,64(sp)
 4002980:	dc000f17 	ldw	r16,60(sp)
 4002984:	dec01304 	addi	sp,sp,76
 4002988:	f800283a 	ret
 400298c:	80c0030b 	ldhu	r3,12(r16)
 4002990:	1880200c 	andi	r2,r3,128
 4002994:	10000426 	beq	r2,zero,40029a8 <__smakebuf_r+0xfc>
 4002998:	04801004 	movi	r18,64
 400299c:	18820014 	ori	r2,r3,2048
 40029a0:	8080030d 	sth	r2,12(r16)
 40029a4:	003fe506 	br	400293c <__smakebuf_r+0x90>
 40029a8:	04810004 	movi	r18,1024
 40029ac:	003ffb06 	br	400299c <__smakebuf_r+0xf0>
 40029b0:	8140038f 	ldh	r5,14(r16)
 40029b4:	8809883a 	mov	r4,r17
 40029b8:	4002ea40 	call	4002ea4 <_isatty_r>
 40029bc:	103fde26 	beq	r2,zero,4002938 <__smakebuf_r+0x8c>
 40029c0:	8080030b 	ldhu	r2,12(r16)
 40029c4:	80c010c4 	addi	r3,r16,67
 40029c8:	04810004 	movi	r18,1024
 40029cc:	10800054 	ori	r2,r2,1
 40029d0:	8080030d 	sth	r2,12(r16)
 40029d4:	00800044 	movi	r2,1
 40029d8:	80c00415 	stw	r3,16(r16)
 40029dc:	80800515 	stw	r2,20(r16)
 40029e0:	80c00015 	stw	r3,0(r16)
 40029e4:	003fd506 	br	400293c <__smakebuf_r+0x90>
 40029e8:	80c00a17 	ldw	r3,40(r16)
 40029ec:	00810034 	movhi	r2,1024
 40029f0:	108ab804 	addi	r2,r2,10976
 40029f4:	18bfcb1e 	bne	r3,r2,4002924 <__smakebuf_r+0x78>
 40029f8:	8080030b 	ldhu	r2,12(r16)
 40029fc:	00c10004 	movi	r3,1024
 4002a00:	1825883a 	mov	r18,r3
 4002a04:	10c4b03a 	or	r2,r2,r3
 4002a08:	8080030d 	sth	r2,12(r16)
 4002a0c:	80c01315 	stw	r3,76(r16)
 4002a10:	003fca06 	br	400293c <__smakebuf_r+0x90>
 4002a14:	8100030b 	ldhu	r4,12(r16)
 4002a18:	2080800c 	andi	r2,r4,512
 4002a1c:	103fb21e 	bne	r2,zero,40028e8 <__smakebuf_r+0x3c>
 4002a20:	80c010c4 	addi	r3,r16,67
 4002a24:	21000094 	ori	r4,r4,2
 4002a28:	00800044 	movi	r2,1
 4002a2c:	80800515 	stw	r2,20(r16)
 4002a30:	8100030d 	sth	r4,12(r16)
 4002a34:	80c00415 	stw	r3,16(r16)
 4002a38:	80c00015 	stw	r3,0(r16)
 4002a3c:	003faa06 	br	40028e8 <__smakebuf_r+0x3c>

04002a40 <memset>:
 4002a40:	008000c4 	movi	r2,3
 4002a44:	29403fcc 	andi	r5,r5,255
 4002a48:	2007883a 	mov	r3,r4
 4002a4c:	1180022e 	bgeu	r2,r6,4002a58 <memset+0x18>
 4002a50:	2084703a 	and	r2,r4,r2
 4002a54:	10000826 	beq	r2,zero,4002a78 <memset+0x38>
 4002a58:	30000526 	beq	r6,zero,4002a70 <memset+0x30>
 4002a5c:	2805883a 	mov	r2,r5
 4002a60:	30cd883a 	add	r6,r6,r3
 4002a64:	18800005 	stb	r2,0(r3)
 4002a68:	18c00044 	addi	r3,r3,1
 4002a6c:	19bffd1e 	bne	r3,r6,4002a64 <memset+0x24>
 4002a70:	2005883a 	mov	r2,r4
 4002a74:	f800283a 	ret
 4002a78:	2804923a 	slli	r2,r5,8
 4002a7c:	020003c4 	movi	r8,15
 4002a80:	200f883a 	mov	r7,r4
 4002a84:	2884b03a 	or	r2,r5,r2
 4002a88:	1006943a 	slli	r3,r2,16
 4002a8c:	10c6b03a 	or	r3,r2,r3
 4002a90:	41800a2e 	bgeu	r8,r6,4002abc <memset+0x7c>
 4002a94:	4005883a 	mov	r2,r8
 4002a98:	31bffc04 	addi	r6,r6,-16
 4002a9c:	38c00015 	stw	r3,0(r7)
 4002aa0:	38c00115 	stw	r3,4(r7)
 4002aa4:	38c00215 	stw	r3,8(r7)
 4002aa8:	38c00315 	stw	r3,12(r7)
 4002aac:	39c00404 	addi	r7,r7,16
 4002ab0:	11bff936 	bltu	r2,r6,4002a98 <memset+0x58>
 4002ab4:	008000c4 	movi	r2,3
 4002ab8:	1180052e 	bgeu	r2,r6,4002ad0 <memset+0x90>
 4002abc:	31bfff04 	addi	r6,r6,-4
 4002ac0:	008000c4 	movi	r2,3
 4002ac4:	38c00015 	stw	r3,0(r7)
 4002ac8:	39c00104 	addi	r7,r7,4
 4002acc:	11bffb36 	bltu	r2,r6,4002abc <memset+0x7c>
 4002ad0:	3807883a 	mov	r3,r7
 4002ad4:	003fe006 	br	4002a58 <memset+0x18>

04002ad8 <__sclose>:
 4002ad8:	2940038f 	ldh	r5,14(r5)
 4002adc:	4002c9c1 	jmpi	4002c9c <_close_r>

04002ae0 <__sseek>:
 4002ae0:	defffe04 	addi	sp,sp,-8
 4002ae4:	dc000015 	stw	r16,0(sp)
 4002ae8:	2821883a 	mov	r16,r5
 4002aec:	2940038f 	ldh	r5,14(r5)
 4002af0:	dfc00115 	stw	ra,4(sp)
 4002af4:	4002f140 	call	4002f14 <_lseek_r>
 4002af8:	1007883a 	mov	r3,r2
 4002afc:	00bfffc4 	movi	r2,-1
 4002b00:	18800926 	beq	r3,r2,4002b28 <__sseek+0x48>
 4002b04:	8080030b 	ldhu	r2,12(r16)
 4002b08:	80c01415 	stw	r3,80(r16)
 4002b0c:	10840014 	ori	r2,r2,4096
 4002b10:	8080030d 	sth	r2,12(r16)
 4002b14:	1805883a 	mov	r2,r3
 4002b18:	dfc00117 	ldw	ra,4(sp)
 4002b1c:	dc000017 	ldw	r16,0(sp)
 4002b20:	dec00204 	addi	sp,sp,8
 4002b24:	f800283a 	ret
 4002b28:	8080030b 	ldhu	r2,12(r16)
 4002b2c:	10bbffcc 	andi	r2,r2,61439
 4002b30:	8080030d 	sth	r2,12(r16)
 4002b34:	1805883a 	mov	r2,r3
 4002b38:	dfc00117 	ldw	ra,4(sp)
 4002b3c:	dc000017 	ldw	r16,0(sp)
 4002b40:	dec00204 	addi	sp,sp,8
 4002b44:	f800283a 	ret

04002b48 <__swrite>:
 4002b48:	2880030b 	ldhu	r2,12(r5)
 4002b4c:	defffb04 	addi	sp,sp,-20
 4002b50:	dcc00315 	stw	r19,12(sp)
 4002b54:	1080400c 	andi	r2,r2,256
 4002b58:	dc800215 	stw	r18,8(sp)
 4002b5c:	dc400115 	stw	r17,4(sp)
 4002b60:	dc000015 	stw	r16,0(sp)
 4002b64:	3027883a 	mov	r19,r6
 4002b68:	3825883a 	mov	r18,r7
 4002b6c:	dfc00415 	stw	ra,16(sp)
 4002b70:	2821883a 	mov	r16,r5
 4002b74:	000d883a 	mov	r6,zero
 4002b78:	01c00084 	movi	r7,2
 4002b7c:	2023883a 	mov	r17,r4
 4002b80:	10000226 	beq	r2,zero,4002b8c <__swrite+0x44>
 4002b84:	2940038f 	ldh	r5,14(r5)
 4002b88:	4002f140 	call	4002f14 <_lseek_r>
 4002b8c:	8080030b 	ldhu	r2,12(r16)
 4002b90:	8140038f 	ldh	r5,14(r16)
 4002b94:	8809883a 	mov	r4,r17
 4002b98:	10bbffcc 	andi	r2,r2,61439
 4002b9c:	980d883a 	mov	r6,r19
 4002ba0:	900f883a 	mov	r7,r18
 4002ba4:	8080030d 	sth	r2,12(r16)
 4002ba8:	dfc00417 	ldw	ra,16(sp)
 4002bac:	dcc00317 	ldw	r19,12(sp)
 4002bb0:	dc800217 	ldw	r18,8(sp)
 4002bb4:	dc400117 	ldw	r17,4(sp)
 4002bb8:	dc000017 	ldw	r16,0(sp)
 4002bbc:	dec00504 	addi	sp,sp,20
 4002bc0:	4002c241 	jmpi	4002c24 <_write_r>

04002bc4 <__sread>:
 4002bc4:	defffe04 	addi	sp,sp,-8
 4002bc8:	dc000015 	stw	r16,0(sp)
 4002bcc:	2821883a 	mov	r16,r5
 4002bd0:	2940038f 	ldh	r5,14(r5)
 4002bd4:	dfc00115 	stw	ra,4(sp)
 4002bd8:	4002f8c0 	call	4002f8c <_read_r>
 4002bdc:	1007883a 	mov	r3,r2
 4002be0:	10000816 	blt	r2,zero,4002c04 <__sread+0x40>
 4002be4:	80801417 	ldw	r2,80(r16)
 4002be8:	10c5883a 	add	r2,r2,r3
 4002bec:	80801415 	stw	r2,80(r16)
 4002bf0:	1805883a 	mov	r2,r3
 4002bf4:	dfc00117 	ldw	ra,4(sp)
 4002bf8:	dc000017 	ldw	r16,0(sp)
 4002bfc:	dec00204 	addi	sp,sp,8
 4002c00:	f800283a 	ret
 4002c04:	8080030b 	ldhu	r2,12(r16)
 4002c08:	10bbffcc 	andi	r2,r2,61439
 4002c0c:	8080030d 	sth	r2,12(r16)
 4002c10:	1805883a 	mov	r2,r3
 4002c14:	dfc00117 	ldw	ra,4(sp)
 4002c18:	dc000017 	ldw	r16,0(sp)
 4002c1c:	dec00204 	addi	sp,sp,8
 4002c20:	f800283a 	ret

04002c24 <_write_r>:
 4002c24:	defffd04 	addi	sp,sp,-12
 4002c28:	dc000015 	stw	r16,0(sp)
 4002c2c:	040100b4 	movhi	r16,1026
 4002c30:	8421eb04 	addi	r16,r16,-30804
 4002c34:	dc400115 	stw	r17,4(sp)
 4002c38:	80000015 	stw	zero,0(r16)
 4002c3c:	2023883a 	mov	r17,r4
 4002c40:	2809883a 	mov	r4,r5
 4002c44:	300b883a 	mov	r5,r6
 4002c48:	380d883a 	mov	r6,r7
 4002c4c:	dfc00215 	stw	ra,8(sp)
 4002c50:	40038940 	call	4003894 <write>
 4002c54:	1007883a 	mov	r3,r2
 4002c58:	00bfffc4 	movi	r2,-1
 4002c5c:	18800626 	beq	r3,r2,4002c78 <_write_r+0x54>
 4002c60:	1805883a 	mov	r2,r3
 4002c64:	dfc00217 	ldw	ra,8(sp)
 4002c68:	dc400117 	ldw	r17,4(sp)
 4002c6c:	dc000017 	ldw	r16,0(sp)
 4002c70:	dec00304 	addi	sp,sp,12
 4002c74:	f800283a 	ret
 4002c78:	80800017 	ldw	r2,0(r16)
 4002c7c:	103ff826 	beq	r2,zero,4002c60 <_write_r+0x3c>
 4002c80:	88800015 	stw	r2,0(r17)
 4002c84:	1805883a 	mov	r2,r3
 4002c88:	dfc00217 	ldw	ra,8(sp)
 4002c8c:	dc400117 	ldw	r17,4(sp)
 4002c90:	dc000017 	ldw	r16,0(sp)
 4002c94:	dec00304 	addi	sp,sp,12
 4002c98:	f800283a 	ret

04002c9c <_close_r>:
 4002c9c:	defffd04 	addi	sp,sp,-12
 4002ca0:	dc000015 	stw	r16,0(sp)
 4002ca4:	040100b4 	movhi	r16,1026
 4002ca8:	8421eb04 	addi	r16,r16,-30804
 4002cac:	dc400115 	stw	r17,4(sp)
 4002cb0:	80000015 	stw	zero,0(r16)
 4002cb4:	2023883a 	mov	r17,r4
 4002cb8:	2809883a 	mov	r4,r5
 4002cbc:	dfc00215 	stw	ra,8(sp)
 4002cc0:	40030040 	call	4003004 <close>
 4002cc4:	1007883a 	mov	r3,r2
 4002cc8:	00bfffc4 	movi	r2,-1
 4002ccc:	18800626 	beq	r3,r2,4002ce8 <_close_r+0x4c>
 4002cd0:	1805883a 	mov	r2,r3
 4002cd4:	dfc00217 	ldw	ra,8(sp)
 4002cd8:	dc400117 	ldw	r17,4(sp)
 4002cdc:	dc000017 	ldw	r16,0(sp)
 4002ce0:	dec00304 	addi	sp,sp,12
 4002ce4:	f800283a 	ret
 4002ce8:	80800017 	ldw	r2,0(r16)
 4002cec:	103ff826 	beq	r2,zero,4002cd0 <_close_r+0x34>
 4002cf0:	88800015 	stw	r2,0(r17)
 4002cf4:	1805883a 	mov	r2,r3
 4002cf8:	dfc00217 	ldw	ra,8(sp)
 4002cfc:	dc400117 	ldw	r17,4(sp)
 4002d00:	dc000017 	ldw	r16,0(sp)
 4002d04:	dec00304 	addi	sp,sp,12
 4002d08:	f800283a 	ret

04002d0c <_fclose_r>:
 4002d0c:	defffc04 	addi	sp,sp,-16
 4002d10:	dc400115 	stw	r17,4(sp)
 4002d14:	dc000015 	stw	r16,0(sp)
 4002d18:	dfc00315 	stw	ra,12(sp)
 4002d1c:	dc800215 	stw	r18,8(sp)
 4002d20:	2821883a 	mov	r16,r5
 4002d24:	2023883a 	mov	r17,r4
 4002d28:	28002926 	beq	r5,zero,4002dd0 <_fclose_r+0xc4>
 4002d2c:	40020840 	call	4002084 <__sfp_lock_acquire>
 4002d30:	88000226 	beq	r17,zero,4002d3c <_fclose_r+0x30>
 4002d34:	88800e17 	ldw	r2,56(r17)
 4002d38:	10002d26 	beq	r2,zero,4002df0 <_fclose_r+0xe4>
 4002d3c:	8080030f 	ldh	r2,12(r16)
 4002d40:	10002226 	beq	r2,zero,4002dcc <_fclose_r+0xc0>
 4002d44:	8809883a 	mov	r4,r17
 4002d48:	800b883a 	mov	r5,r16
 4002d4c:	4001dfc0 	call	4001dfc <_fflush_r>
 4002d50:	1025883a 	mov	r18,r2
 4002d54:	80800b17 	ldw	r2,44(r16)
 4002d58:	10000426 	beq	r2,zero,4002d6c <_fclose_r+0x60>
 4002d5c:	81400717 	ldw	r5,28(r16)
 4002d60:	8809883a 	mov	r4,r17
 4002d64:	103ee83a 	callr	r2
 4002d68:	10002a16 	blt	r2,zero,4002e14 <_fclose_r+0x108>
 4002d6c:	8080030b 	ldhu	r2,12(r16)
 4002d70:	1080200c 	andi	r2,r2,128
 4002d74:	1000231e 	bne	r2,zero,4002e04 <_fclose_r+0xf8>
 4002d78:	81400c17 	ldw	r5,48(r16)
 4002d7c:	28000526 	beq	r5,zero,4002d94 <_fclose_r+0x88>
 4002d80:	80801004 	addi	r2,r16,64
 4002d84:	28800226 	beq	r5,r2,4002d90 <_fclose_r+0x84>
 4002d88:	8809883a 	mov	r4,r17
 4002d8c:	40024180 	call	4002418 <_free_r>
 4002d90:	80000c15 	stw	zero,48(r16)
 4002d94:	81401117 	ldw	r5,68(r16)
 4002d98:	28000326 	beq	r5,zero,4002da8 <_fclose_r+0x9c>
 4002d9c:	8809883a 	mov	r4,r17
 4002da0:	40024180 	call	4002418 <_free_r>
 4002da4:	80001115 	stw	zero,68(r16)
 4002da8:	8000030d 	sth	zero,12(r16)
 4002dac:	40020880 	call	4002088 <__sfp_lock_release>
 4002db0:	9005883a 	mov	r2,r18
 4002db4:	dfc00317 	ldw	ra,12(sp)
 4002db8:	dc800217 	ldw	r18,8(sp)
 4002dbc:	dc400117 	ldw	r17,4(sp)
 4002dc0:	dc000017 	ldw	r16,0(sp)
 4002dc4:	dec00404 	addi	sp,sp,16
 4002dc8:	f800283a 	ret
 4002dcc:	40020880 	call	4002088 <__sfp_lock_release>
 4002dd0:	0025883a 	mov	r18,zero
 4002dd4:	9005883a 	mov	r2,r18
 4002dd8:	dfc00317 	ldw	ra,12(sp)
 4002ddc:	dc800217 	ldw	r18,8(sp)
 4002de0:	dc400117 	ldw	r17,4(sp)
 4002de4:	dc000017 	ldw	r16,0(sp)
 4002de8:	dec00404 	addi	sp,sp,16
 4002dec:	f800283a 	ret
 4002df0:	8809883a 	mov	r4,r17
 4002df4:	40020940 	call	4002094 <__sinit>
 4002df8:	8080030f 	ldh	r2,12(r16)
 4002dfc:	103fd11e 	bne	r2,zero,4002d44 <_fclose_r+0x38>
 4002e00:	003ff206 	br	4002dcc <_fclose_r+0xc0>
 4002e04:	81400417 	ldw	r5,16(r16)
 4002e08:	8809883a 	mov	r4,r17
 4002e0c:	40024180 	call	4002418 <_free_r>
 4002e10:	003fd906 	br	4002d78 <_fclose_r+0x6c>
 4002e14:	04bfffc4 	movi	r18,-1
 4002e18:	003fd406 	br	4002d6c <_fclose_r+0x60>

04002e1c <fclose>:
 4002e1c:	008100b4 	movhi	r2,1026
 4002e20:	10a1b704 	addi	r2,r2,-31012
 4002e24:	200b883a 	mov	r5,r4
 4002e28:	11000017 	ldw	r4,0(r2)
 4002e2c:	4002d0c1 	jmpi	4002d0c <_fclose_r>

04002e30 <_fstat_r>:
 4002e30:	defffd04 	addi	sp,sp,-12
 4002e34:	dc000015 	stw	r16,0(sp)
 4002e38:	040100b4 	movhi	r16,1026
 4002e3c:	8421eb04 	addi	r16,r16,-30804
 4002e40:	dc400115 	stw	r17,4(sp)
 4002e44:	80000015 	stw	zero,0(r16)
 4002e48:	2023883a 	mov	r17,r4
 4002e4c:	2809883a 	mov	r4,r5
 4002e50:	300b883a 	mov	r5,r6
 4002e54:	dfc00215 	stw	ra,8(sp)
 4002e58:	400318c0 	call	400318c <fstat>
 4002e5c:	1007883a 	mov	r3,r2
 4002e60:	00bfffc4 	movi	r2,-1
 4002e64:	18800626 	beq	r3,r2,4002e80 <_fstat_r+0x50>
 4002e68:	1805883a 	mov	r2,r3
 4002e6c:	dfc00217 	ldw	ra,8(sp)
 4002e70:	dc400117 	ldw	r17,4(sp)
 4002e74:	dc000017 	ldw	r16,0(sp)
 4002e78:	dec00304 	addi	sp,sp,12
 4002e7c:	f800283a 	ret
 4002e80:	80800017 	ldw	r2,0(r16)
 4002e84:	103ff826 	beq	r2,zero,4002e68 <_fstat_r+0x38>
 4002e88:	88800015 	stw	r2,0(r17)
 4002e8c:	1805883a 	mov	r2,r3
 4002e90:	dfc00217 	ldw	ra,8(sp)
 4002e94:	dc400117 	ldw	r17,4(sp)
 4002e98:	dc000017 	ldw	r16,0(sp)
 4002e9c:	dec00304 	addi	sp,sp,12
 4002ea0:	f800283a 	ret

04002ea4 <_isatty_r>:
 4002ea4:	defffd04 	addi	sp,sp,-12
 4002ea8:	dc000015 	stw	r16,0(sp)
 4002eac:	040100b4 	movhi	r16,1026
 4002eb0:	8421eb04 	addi	r16,r16,-30804
 4002eb4:	dc400115 	stw	r17,4(sp)
 4002eb8:	80000015 	stw	zero,0(r16)
 4002ebc:	2023883a 	mov	r17,r4
 4002ec0:	2809883a 	mov	r4,r5
 4002ec4:	dfc00215 	stw	ra,8(sp)
 4002ec8:	40032c00 	call	40032c0 <isatty>
 4002ecc:	1007883a 	mov	r3,r2
 4002ed0:	00bfffc4 	movi	r2,-1
 4002ed4:	18800626 	beq	r3,r2,4002ef0 <_isatty_r+0x4c>
 4002ed8:	1805883a 	mov	r2,r3
 4002edc:	dfc00217 	ldw	ra,8(sp)
 4002ee0:	dc400117 	ldw	r17,4(sp)
 4002ee4:	dc000017 	ldw	r16,0(sp)
 4002ee8:	dec00304 	addi	sp,sp,12
 4002eec:	f800283a 	ret
 4002ef0:	80800017 	ldw	r2,0(r16)
 4002ef4:	103ff826 	beq	r2,zero,4002ed8 <_isatty_r+0x34>
 4002ef8:	88800015 	stw	r2,0(r17)
 4002efc:	1805883a 	mov	r2,r3
 4002f00:	dfc00217 	ldw	ra,8(sp)
 4002f04:	dc400117 	ldw	r17,4(sp)
 4002f08:	dc000017 	ldw	r16,0(sp)
 4002f0c:	dec00304 	addi	sp,sp,12
 4002f10:	f800283a 	ret

04002f14 <_lseek_r>:
 4002f14:	defffd04 	addi	sp,sp,-12
 4002f18:	dc000015 	stw	r16,0(sp)
 4002f1c:	040100b4 	movhi	r16,1026
 4002f20:	8421eb04 	addi	r16,r16,-30804
 4002f24:	dc400115 	stw	r17,4(sp)
 4002f28:	80000015 	stw	zero,0(r16)
 4002f2c:	2023883a 	mov	r17,r4
 4002f30:	2809883a 	mov	r4,r5
 4002f34:	300b883a 	mov	r5,r6
 4002f38:	380d883a 	mov	r6,r7
 4002f3c:	dfc00215 	stw	ra,8(sp)
 4002f40:	40033e00 	call	40033e0 <lseek>
 4002f44:	1007883a 	mov	r3,r2
 4002f48:	00bfffc4 	movi	r2,-1
 4002f4c:	18800626 	beq	r3,r2,4002f68 <_lseek_r+0x54>
 4002f50:	1805883a 	mov	r2,r3
 4002f54:	dfc00217 	ldw	ra,8(sp)
 4002f58:	dc400117 	ldw	r17,4(sp)
 4002f5c:	dc000017 	ldw	r16,0(sp)
 4002f60:	dec00304 	addi	sp,sp,12
 4002f64:	f800283a 	ret
 4002f68:	80800017 	ldw	r2,0(r16)
 4002f6c:	103ff826 	beq	r2,zero,4002f50 <_lseek_r+0x3c>
 4002f70:	88800015 	stw	r2,0(r17)
 4002f74:	1805883a 	mov	r2,r3
 4002f78:	dfc00217 	ldw	ra,8(sp)
 4002f7c:	dc400117 	ldw	r17,4(sp)
 4002f80:	dc000017 	ldw	r16,0(sp)
 4002f84:	dec00304 	addi	sp,sp,12
 4002f88:	f800283a 	ret

04002f8c <_read_r>:
 4002f8c:	defffd04 	addi	sp,sp,-12
 4002f90:	dc000015 	stw	r16,0(sp)
 4002f94:	040100b4 	movhi	r16,1026
 4002f98:	8421eb04 	addi	r16,r16,-30804
 4002f9c:	dc400115 	stw	r17,4(sp)
 4002fa0:	80000015 	stw	zero,0(r16)
 4002fa4:	2023883a 	mov	r17,r4
 4002fa8:	2809883a 	mov	r4,r5
 4002fac:	300b883a 	mov	r5,r6
 4002fb0:	380d883a 	mov	r6,r7
 4002fb4:	dfc00215 	stw	ra,8(sp)
 4002fb8:	40035f80 	call	40035f8 <read>
 4002fbc:	1007883a 	mov	r3,r2
 4002fc0:	00bfffc4 	movi	r2,-1
 4002fc4:	18800626 	beq	r3,r2,4002fe0 <_read_r+0x54>
 4002fc8:	1805883a 	mov	r2,r3
 4002fcc:	dfc00217 	ldw	ra,8(sp)
 4002fd0:	dc400117 	ldw	r17,4(sp)
 4002fd4:	dc000017 	ldw	r16,0(sp)
 4002fd8:	dec00304 	addi	sp,sp,12
 4002fdc:	f800283a 	ret
 4002fe0:	80800017 	ldw	r2,0(r16)
 4002fe4:	103ff826 	beq	r2,zero,4002fc8 <_read_r+0x3c>
 4002fe8:	88800015 	stw	r2,0(r17)
 4002fec:	1805883a 	mov	r2,r3
 4002ff0:	dfc00217 	ldw	ra,8(sp)
 4002ff4:	dc400117 	ldw	r17,4(sp)
 4002ff8:	dc000017 	ldw	r16,0(sp)
 4002ffc:	dec00304 	addi	sp,sp,12
 4003000:	f800283a 	ret

04003004 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4003004:	defff804 	addi	sp,sp,-32
 4003008:	dfc00715 	stw	ra,28(sp)
 400300c:	df000615 	stw	fp,24(sp)
 4003010:	df000604 	addi	fp,sp,24
 4003014:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4003018:	e0bffc17 	ldw	r2,-16(fp)
 400301c:	1004803a 	cmplt	r2,r2,zero
 4003020:	1000081e 	bne	r2,zero,4003044 <close+0x40>
 4003024:	e0bffc17 	ldw	r2,-16(fp)
 4003028:	10800324 	muli	r2,r2,12
 400302c:	1007883a 	mov	r3,r2
 4003030:	00810074 	movhi	r2,1025
 4003034:	109d0804 	addi	r2,r2,29728
 4003038:	1887883a 	add	r3,r3,r2
 400303c:	e0ffff15 	stw	r3,-4(fp)
 4003040:	00000106 	br	4003048 <close+0x44>
 4003044:	e03fff15 	stw	zero,-4(fp)
 4003048:	e0bfff17 	ldw	r2,-4(fp)
 400304c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4003050:	e0bffb17 	ldw	r2,-20(fp)
 4003054:	1005003a 	cmpeq	r2,r2,zero
 4003058:	10001d1e 	bne	r2,zero,40030d0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400305c:	e0bffb17 	ldw	r2,-20(fp)
 4003060:	10800017 	ldw	r2,0(r2)
 4003064:	10800417 	ldw	r2,16(r2)
 4003068:	1005003a 	cmpeq	r2,r2,zero
 400306c:	1000071e 	bne	r2,zero,400308c <close+0x88>
 4003070:	e0bffb17 	ldw	r2,-20(fp)
 4003074:	10800017 	ldw	r2,0(r2)
 4003078:	10800417 	ldw	r2,16(r2)
 400307c:	e13ffb17 	ldw	r4,-20(fp)
 4003080:	103ee83a 	callr	r2
 4003084:	e0bffe15 	stw	r2,-8(fp)
 4003088:	00000106 	br	4003090 <close+0x8c>
 400308c:	e03ffe15 	stw	zero,-8(fp)
 4003090:	e0bffe17 	ldw	r2,-8(fp)
 4003094:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4003098:	e13ffc17 	ldw	r4,-16(fp)
 400309c:	40037780 	call	4003778 <alt_release_fd>
    if (rval < 0)
 40030a0:	e0bffa17 	ldw	r2,-24(fp)
 40030a4:	1004403a 	cmpge	r2,r2,zero
 40030a8:	1000071e 	bne	r2,zero,40030c8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 40030ac:	40031000 	call	4003100 <alt_get_errno>
 40030b0:	e0fffa17 	ldw	r3,-24(fp)
 40030b4:	00c7c83a 	sub	r3,zero,r3
 40030b8:	10c00015 	stw	r3,0(r2)
      return -1;
 40030bc:	00bfffc4 	movi	r2,-1
 40030c0:	e0bffd15 	stw	r2,-12(fp)
 40030c4:	00000806 	br	40030e8 <close+0xe4>
    }
    return 0;
 40030c8:	e03ffd15 	stw	zero,-12(fp)
 40030cc:	00000606 	br	40030e8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40030d0:	40031000 	call	4003100 <alt_get_errno>
 40030d4:	1007883a 	mov	r3,r2
 40030d8:	00801444 	movi	r2,81
 40030dc:	18800015 	stw	r2,0(r3)
    return -1;
 40030e0:	00bfffc4 	movi	r2,-1
 40030e4:	e0bffd15 	stw	r2,-12(fp)
 40030e8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 40030ec:	e037883a 	mov	sp,fp
 40030f0:	dfc00117 	ldw	ra,4(sp)
 40030f4:	df000017 	ldw	fp,0(sp)
 40030f8:	dec00204 	addi	sp,sp,8
 40030fc:	f800283a 	ret

04003100 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003100:	defffd04 	addi	sp,sp,-12
 4003104:	dfc00215 	stw	ra,8(sp)
 4003108:	df000115 	stw	fp,4(sp)
 400310c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003110:	008100b4 	movhi	r2,1026
 4003114:	10a1c004 	addi	r2,r2,-30976
 4003118:	10800017 	ldw	r2,0(r2)
 400311c:	1005003a 	cmpeq	r2,r2,zero
 4003120:	1000061e 	bne	r2,zero,400313c <alt_get_errno+0x3c>
 4003124:	008100b4 	movhi	r2,1026
 4003128:	10a1c004 	addi	r2,r2,-30976
 400312c:	10800017 	ldw	r2,0(r2)
 4003130:	103ee83a 	callr	r2
 4003134:	e0bfff15 	stw	r2,-4(fp)
 4003138:	00000306 	br	4003148 <alt_get_errno+0x48>
 400313c:	008100b4 	movhi	r2,1026
 4003140:	10a1eb04 	addi	r2,r2,-30804
 4003144:	e0bfff15 	stw	r2,-4(fp)
 4003148:	e0bfff17 	ldw	r2,-4(fp)
}
 400314c:	e037883a 	mov	sp,fp
 4003150:	dfc00117 	ldw	ra,4(sp)
 4003154:	df000017 	ldw	fp,0(sp)
 4003158:	dec00204 	addi	sp,sp,8
 400315c:	f800283a 	ret

04003160 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4003160:	defffc04 	addi	sp,sp,-16
 4003164:	df000315 	stw	fp,12(sp)
 4003168:	df000304 	addi	fp,sp,12
 400316c:	e13ffd15 	stw	r4,-12(fp)
 4003170:	e17ffe15 	stw	r5,-8(fp)
 4003174:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4003178:	e0bfff17 	ldw	r2,-4(fp)
}
 400317c:	e037883a 	mov	sp,fp
 4003180:	df000017 	ldw	fp,0(sp)
 4003184:	dec00104 	addi	sp,sp,4
 4003188:	f800283a 	ret

0400318c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400318c:	defff904 	addi	sp,sp,-28
 4003190:	dfc00615 	stw	ra,24(sp)
 4003194:	df000515 	stw	fp,20(sp)
 4003198:	df000504 	addi	fp,sp,20
 400319c:	e13ffc15 	stw	r4,-16(fp)
 40031a0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40031a4:	e0bffc17 	ldw	r2,-16(fp)
 40031a8:	1004803a 	cmplt	r2,r2,zero
 40031ac:	1000081e 	bne	r2,zero,40031d0 <fstat+0x44>
 40031b0:	e0bffc17 	ldw	r2,-16(fp)
 40031b4:	10800324 	muli	r2,r2,12
 40031b8:	1007883a 	mov	r3,r2
 40031bc:	00810074 	movhi	r2,1025
 40031c0:	109d0804 	addi	r2,r2,29728
 40031c4:	1887883a 	add	r3,r3,r2
 40031c8:	e0ffff15 	stw	r3,-4(fp)
 40031cc:	00000106 	br	40031d4 <fstat+0x48>
 40031d0:	e03fff15 	stw	zero,-4(fp)
 40031d4:	e0bfff17 	ldw	r2,-4(fp)
 40031d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40031dc:	e0bffb17 	ldw	r2,-20(fp)
 40031e0:	1005003a 	cmpeq	r2,r2,zero
 40031e4:	1000121e 	bne	r2,zero,4003230 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40031e8:	e0bffb17 	ldw	r2,-20(fp)
 40031ec:	10800017 	ldw	r2,0(r2)
 40031f0:	10800817 	ldw	r2,32(r2)
 40031f4:	1005003a 	cmpeq	r2,r2,zero
 40031f8:	1000081e 	bne	r2,zero,400321c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 40031fc:	e0bffb17 	ldw	r2,-20(fp)
 4003200:	10800017 	ldw	r2,0(r2)
 4003204:	10800817 	ldw	r2,32(r2)
 4003208:	e13ffb17 	ldw	r4,-20(fp)
 400320c:	e17ffd17 	ldw	r5,-12(fp)
 4003210:	103ee83a 	callr	r2
 4003214:	e0bffe15 	stw	r2,-8(fp)
 4003218:	00000b06 	br	4003248 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400321c:	e0fffd17 	ldw	r3,-12(fp)
 4003220:	00880004 	movi	r2,8192
 4003224:	18800115 	stw	r2,4(r3)
      return 0;
 4003228:	e03ffe15 	stw	zero,-8(fp)
 400322c:	00000606 	br	4003248 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003230:	40032600 	call	4003260 <alt_get_errno>
 4003234:	1007883a 	mov	r3,r2
 4003238:	00801444 	movi	r2,81
 400323c:	18800015 	stw	r2,0(r3)
    return -1;
 4003240:	00bfffc4 	movi	r2,-1
 4003244:	e0bffe15 	stw	r2,-8(fp)
 4003248:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400324c:	e037883a 	mov	sp,fp
 4003250:	dfc00117 	ldw	ra,4(sp)
 4003254:	df000017 	ldw	fp,0(sp)
 4003258:	dec00204 	addi	sp,sp,8
 400325c:	f800283a 	ret

04003260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003260:	defffd04 	addi	sp,sp,-12
 4003264:	dfc00215 	stw	ra,8(sp)
 4003268:	df000115 	stw	fp,4(sp)
 400326c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003270:	008100b4 	movhi	r2,1026
 4003274:	10a1c004 	addi	r2,r2,-30976
 4003278:	10800017 	ldw	r2,0(r2)
 400327c:	1005003a 	cmpeq	r2,r2,zero
 4003280:	1000061e 	bne	r2,zero,400329c <alt_get_errno+0x3c>
 4003284:	008100b4 	movhi	r2,1026
 4003288:	10a1c004 	addi	r2,r2,-30976
 400328c:	10800017 	ldw	r2,0(r2)
 4003290:	103ee83a 	callr	r2
 4003294:	e0bfff15 	stw	r2,-4(fp)
 4003298:	00000306 	br	40032a8 <alt_get_errno+0x48>
 400329c:	008100b4 	movhi	r2,1026
 40032a0:	10a1eb04 	addi	r2,r2,-30804
 40032a4:	e0bfff15 	stw	r2,-4(fp)
 40032a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40032ac:	e037883a 	mov	sp,fp
 40032b0:	dfc00117 	ldw	ra,4(sp)
 40032b4:	df000017 	ldw	fp,0(sp)
 40032b8:	dec00204 	addi	sp,sp,8
 40032bc:	f800283a 	ret

040032c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40032c0:	deffeb04 	addi	sp,sp,-84
 40032c4:	dfc01415 	stw	ra,80(sp)
 40032c8:	df001315 	stw	fp,76(sp)
 40032cc:	df001304 	addi	fp,sp,76
 40032d0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40032d4:	e0bffd17 	ldw	r2,-12(fp)
 40032d8:	1004803a 	cmplt	r2,r2,zero
 40032dc:	1000081e 	bne	r2,zero,4003300 <isatty+0x40>
 40032e0:	e0bffd17 	ldw	r2,-12(fp)
 40032e4:	10800324 	muli	r2,r2,12
 40032e8:	1007883a 	mov	r3,r2
 40032ec:	00810074 	movhi	r2,1025
 40032f0:	109d0804 	addi	r2,r2,29728
 40032f4:	1887883a 	add	r3,r3,r2
 40032f8:	e0ffff15 	stw	r3,-4(fp)
 40032fc:	00000106 	br	4003304 <isatty+0x44>
 4003300:	e03fff15 	stw	zero,-4(fp)
 4003304:	e0bfff17 	ldw	r2,-4(fp)
 4003308:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 400330c:	e0bfed17 	ldw	r2,-76(fp)
 4003310:	1005003a 	cmpeq	r2,r2,zero
 4003314:	10000f1e 	bne	r2,zero,4003354 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4003318:	e0bfed17 	ldw	r2,-76(fp)
 400331c:	10800017 	ldw	r2,0(r2)
 4003320:	10800817 	ldw	r2,32(r2)
 4003324:	1004c03a 	cmpne	r2,r2,zero
 4003328:	1000031e 	bne	r2,zero,4003338 <isatty+0x78>
    {
      return 1;
 400332c:	00800044 	movi	r2,1
 4003330:	e0bffe15 	stw	r2,-8(fp)
 4003334:	00000c06 	br	4003368 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4003338:	e17fee04 	addi	r5,fp,-72
 400333c:	e13ffd17 	ldw	r4,-12(fp)
 4003340:	400318c0 	call	400318c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4003344:	e0bfef17 	ldw	r2,-68(fp)
 4003348:	10880020 	cmpeqi	r2,r2,8192
 400334c:	e0bffe15 	stw	r2,-8(fp)
 4003350:	00000506 	br	4003368 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003354:	40033800 	call	4003380 <alt_get_errno>
 4003358:	1007883a 	mov	r3,r2
 400335c:	00801444 	movi	r2,81
 4003360:	18800015 	stw	r2,0(r3)
    return 0;
 4003364:	e03ffe15 	stw	zero,-8(fp)
 4003368:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400336c:	e037883a 	mov	sp,fp
 4003370:	dfc00117 	ldw	ra,4(sp)
 4003374:	df000017 	ldw	fp,0(sp)
 4003378:	dec00204 	addi	sp,sp,8
 400337c:	f800283a 	ret

04003380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003380:	defffd04 	addi	sp,sp,-12
 4003384:	dfc00215 	stw	ra,8(sp)
 4003388:	df000115 	stw	fp,4(sp)
 400338c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003390:	008100b4 	movhi	r2,1026
 4003394:	10a1c004 	addi	r2,r2,-30976
 4003398:	10800017 	ldw	r2,0(r2)
 400339c:	1005003a 	cmpeq	r2,r2,zero
 40033a0:	1000061e 	bne	r2,zero,40033bc <alt_get_errno+0x3c>
 40033a4:	008100b4 	movhi	r2,1026
 40033a8:	10a1c004 	addi	r2,r2,-30976
 40033ac:	10800017 	ldw	r2,0(r2)
 40033b0:	103ee83a 	callr	r2
 40033b4:	e0bfff15 	stw	r2,-4(fp)
 40033b8:	00000306 	br	40033c8 <alt_get_errno+0x48>
 40033bc:	008100b4 	movhi	r2,1026
 40033c0:	10a1eb04 	addi	r2,r2,-30804
 40033c4:	e0bfff15 	stw	r2,-4(fp)
 40033c8:	e0bfff17 	ldw	r2,-4(fp)
}
 40033cc:	e037883a 	mov	sp,fp
 40033d0:	dfc00117 	ldw	ra,4(sp)
 40033d4:	df000017 	ldw	fp,0(sp)
 40033d8:	dec00204 	addi	sp,sp,8
 40033dc:	f800283a 	ret

040033e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40033e0:	defff804 	addi	sp,sp,-32
 40033e4:	dfc00715 	stw	ra,28(sp)
 40033e8:	df000615 	stw	fp,24(sp)
 40033ec:	df000604 	addi	fp,sp,24
 40033f0:	e13ffc15 	stw	r4,-16(fp)
 40033f4:	e17ffd15 	stw	r5,-12(fp)
 40033f8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40033fc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003400:	e0bffc17 	ldw	r2,-16(fp)
 4003404:	1004803a 	cmplt	r2,r2,zero
 4003408:	1000081e 	bne	r2,zero,400342c <lseek+0x4c>
 400340c:	e0bffc17 	ldw	r2,-16(fp)
 4003410:	10800324 	muli	r2,r2,12
 4003414:	1007883a 	mov	r3,r2
 4003418:	00810074 	movhi	r2,1025
 400341c:	109d0804 	addi	r2,r2,29728
 4003420:	1887883a 	add	r3,r3,r2
 4003424:	e0ffff15 	stw	r3,-4(fp)
 4003428:	00000106 	br	4003430 <lseek+0x50>
 400342c:	e03fff15 	stw	zero,-4(fp)
 4003430:	e0bfff17 	ldw	r2,-4(fp)
 4003434:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 4003438:	e0bffb17 	ldw	r2,-20(fp)
 400343c:	1005003a 	cmpeq	r2,r2,zero
 4003440:	1000111e 	bne	r2,zero,4003488 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4003444:	e0bffb17 	ldw	r2,-20(fp)
 4003448:	10800017 	ldw	r2,0(r2)
 400344c:	10800717 	ldw	r2,28(r2)
 4003450:	1005003a 	cmpeq	r2,r2,zero
 4003454:	1000091e 	bne	r2,zero,400347c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4003458:	e0bffb17 	ldw	r2,-20(fp)
 400345c:	10800017 	ldw	r2,0(r2)
 4003460:	10800717 	ldw	r2,28(r2)
 4003464:	e13ffb17 	ldw	r4,-20(fp)
 4003468:	e17ffd17 	ldw	r5,-12(fp)
 400346c:	e1bffe17 	ldw	r6,-8(fp)
 4003470:	103ee83a 	callr	r2
 4003474:	e0bffa15 	stw	r2,-24(fp)
 4003478:	00000506 	br	4003490 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400347c:	00bfde84 	movi	r2,-134
 4003480:	e0bffa15 	stw	r2,-24(fp)
 4003484:	00000206 	br	4003490 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 4003488:	00bfebc4 	movi	r2,-81
 400348c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 4003490:	e0bffa17 	ldw	r2,-24(fp)
 4003494:	1004403a 	cmpge	r2,r2,zero
 4003498:	1000071e 	bne	r2,zero,40034b8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 400349c:	40034d00 	call	40034d0 <alt_get_errno>
 40034a0:	1007883a 	mov	r3,r2
 40034a4:	e0bffa17 	ldw	r2,-24(fp)
 40034a8:	0085c83a 	sub	r2,zero,r2
 40034ac:	18800015 	stw	r2,0(r3)
    rc = -1;
 40034b0:	00bfffc4 	movi	r2,-1
 40034b4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 40034b8:	e0bffa17 	ldw	r2,-24(fp)
}
 40034bc:	e037883a 	mov	sp,fp
 40034c0:	dfc00117 	ldw	ra,4(sp)
 40034c4:	df000017 	ldw	fp,0(sp)
 40034c8:	dec00204 	addi	sp,sp,8
 40034cc:	f800283a 	ret

040034d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40034d0:	defffd04 	addi	sp,sp,-12
 40034d4:	dfc00215 	stw	ra,8(sp)
 40034d8:	df000115 	stw	fp,4(sp)
 40034dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40034e0:	008100b4 	movhi	r2,1026
 40034e4:	10a1c004 	addi	r2,r2,-30976
 40034e8:	10800017 	ldw	r2,0(r2)
 40034ec:	1005003a 	cmpeq	r2,r2,zero
 40034f0:	1000061e 	bne	r2,zero,400350c <alt_get_errno+0x3c>
 40034f4:	008100b4 	movhi	r2,1026
 40034f8:	10a1c004 	addi	r2,r2,-30976
 40034fc:	10800017 	ldw	r2,0(r2)
 4003500:	103ee83a 	callr	r2
 4003504:	e0bfff15 	stw	r2,-4(fp)
 4003508:	00000306 	br	4003518 <alt_get_errno+0x48>
 400350c:	008100b4 	movhi	r2,1026
 4003510:	10a1eb04 	addi	r2,r2,-30804
 4003514:	e0bfff15 	stw	r2,-4(fp)
 4003518:	e0bfff17 	ldw	r2,-4(fp)
}
 400351c:	e037883a 	mov	sp,fp
 4003520:	dfc00117 	ldw	ra,4(sp)
 4003524:	df000017 	ldw	fp,0(sp)
 4003528:	dec00204 	addi	sp,sp,8
 400352c:	f800283a 	ret

04003530 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4003530:	defffb04 	addi	sp,sp,-20
 4003534:	dfc00415 	stw	ra,16(sp)
 4003538:	df000315 	stw	fp,12(sp)
 400353c:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4003540:	0009883a 	mov	r4,zero
 4003544:	400c1000 	call	400c100 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4003548:	400461c0 	call	400461c <OSInit>
 400354c:	01000044 	movi	r4,1
 4003550:	400961c0 	call	400961c <OSSemCreate>
 4003554:	1007883a 	mov	r3,r2
 4003558:	008100b4 	movhi	r2,1026
 400355c:	10a1f104 	addi	r2,r2,-30780
 4003560:	10c00015 	stw	r3,0(r2)
 4003564:	01000044 	movi	r4,1
 4003568:	400961c0 	call	400961c <OSSemCreate>
 400356c:	1007883a 	mov	r3,r2
 4003570:	008100b4 	movhi	r2,1026
 4003574:	10a1f304 	addi	r2,r2,-30772
 4003578:	10c00015 	stw	r3,0(r2)
 400357c:	008100b4 	movhi	r2,1026
 4003580:	10a1ec04 	addi	r2,r2,-30800
 4003584:	e0bffd15 	stw	r2,-12(fp)
 4003588:	00800044 	movi	r2,1
 400358c:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 4003590:	e13ffe0b 	ldhu	r4,-8(fp)
 4003594:	400961c0 	call	400961c <OSSemCreate>
 4003598:	1007883a 	mov	r3,r2
 400359c:	e0bffd17 	ldw	r2,-12(fp)
 40035a0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40035a4:	400c1340 	call	400c134 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40035a8:	01010074 	movhi	r4,1025
 40035ac:	2119d404 	addi	r4,r4,26448
 40035b0:	01410074 	movhi	r5,1025
 40035b4:	2959d404 	addi	r5,r5,26448
 40035b8:	01810074 	movhi	r6,1025
 40035bc:	3199d404 	addi	r6,r6,26448
 40035c0:	400e5500 	call	400e550 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40035c4:	400e0280 	call	400e028 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40035c8:	01010074 	movhi	r4,1025
 40035cc:	21382304 	addi	r4,r4,-8052
 40035d0:	400f41c0 	call	400f41c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40035d4:	d1203617 	ldw	r4,-32552(gp)
 40035d8:	d1603717 	ldw	r5,-32548(gp)
 40035dc:	d1a03817 	ldw	r6,-32544(gp)
 40035e0:	40001f40 	call	40001f4 <main>
 40035e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40035e8:	01000044 	movi	r4,1
 40035ec:	40030040 	call	4003004 <close>
  exit (result);
 40035f0:	e13fff17 	ldw	r4,-4(fp)
 40035f4:	400f4300 	call	400f430 <exit>

040035f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40035f8:	defff704 	addi	sp,sp,-36
 40035fc:	dfc00815 	stw	ra,32(sp)
 4003600:	df000715 	stw	fp,28(sp)
 4003604:	df000704 	addi	fp,sp,28
 4003608:	e13ffb15 	stw	r4,-20(fp)
 400360c:	e17ffc15 	stw	r5,-16(fp)
 4003610:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003614:	e0bffb17 	ldw	r2,-20(fp)
 4003618:	1004803a 	cmplt	r2,r2,zero
 400361c:	1000081e 	bne	r2,zero,4003640 <read+0x48>
 4003620:	e0bffb17 	ldw	r2,-20(fp)
 4003624:	10800324 	muli	r2,r2,12
 4003628:	1007883a 	mov	r3,r2
 400362c:	00810074 	movhi	r2,1025
 4003630:	109d0804 	addi	r2,r2,29728
 4003634:	1887883a 	add	r3,r3,r2
 4003638:	e0ffff15 	stw	r3,-4(fp)
 400363c:	00000106 	br	4003644 <read+0x4c>
 4003640:	e03fff15 	stw	zero,-4(fp)
 4003644:	e0bfff17 	ldw	r2,-4(fp)
 4003648:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400364c:	e0bffa17 	ldw	r2,-24(fp)
 4003650:	1005003a 	cmpeq	r2,r2,zero
 4003654:	1000241e 	bne	r2,zero,40036e8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4003658:	e0bffa17 	ldw	r2,-24(fp)
 400365c:	10800217 	ldw	r2,8(r2)
 4003660:	108000cc 	andi	r2,r2,3
 4003664:	10800060 	cmpeqi	r2,r2,1
 4003668:	10001a1e 	bne	r2,zero,40036d4 <read+0xdc>
 400366c:	e0bffa17 	ldw	r2,-24(fp)
 4003670:	10800017 	ldw	r2,0(r2)
 4003674:	10800517 	ldw	r2,20(r2)
 4003678:	1005003a 	cmpeq	r2,r2,zero
 400367c:	1000151e 	bne	r2,zero,40036d4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4003680:	e0bffa17 	ldw	r2,-24(fp)
 4003684:	10800017 	ldw	r2,0(r2)
 4003688:	10800517 	ldw	r2,20(r2)
 400368c:	e17ffc17 	ldw	r5,-16(fp)
 4003690:	e1bffd17 	ldw	r6,-12(fp)
 4003694:	e13ffa17 	ldw	r4,-24(fp)
 4003698:	103ee83a 	callr	r2
 400369c:	e0bff915 	stw	r2,-28(fp)
 40036a0:	e0bff917 	ldw	r2,-28(fp)
 40036a4:	1004403a 	cmpge	r2,r2,zero
 40036a8:	1000071e 	bne	r2,zero,40036c8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 40036ac:	40037180 	call	4003718 <alt_get_errno>
 40036b0:	e0fff917 	ldw	r3,-28(fp)
 40036b4:	00c7c83a 	sub	r3,zero,r3
 40036b8:	10c00015 	stw	r3,0(r2)
          return -1;
 40036bc:	00bfffc4 	movi	r2,-1
 40036c0:	e0bffe15 	stw	r2,-8(fp)
 40036c4:	00000e06 	br	4003700 <read+0x108>
        }
        return rval;
 40036c8:	e0bff917 	ldw	r2,-28(fp)
 40036cc:	e0bffe15 	stw	r2,-8(fp)
 40036d0:	00000b06 	br	4003700 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40036d4:	40037180 	call	4003718 <alt_get_errno>
 40036d8:	1007883a 	mov	r3,r2
 40036dc:	00800344 	movi	r2,13
 40036e0:	18800015 	stw	r2,0(r3)
 40036e4:	00000406 	br	40036f8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40036e8:	40037180 	call	4003718 <alt_get_errno>
 40036ec:	1007883a 	mov	r3,r2
 40036f0:	00801444 	movi	r2,81
 40036f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40036f8:	00bfffc4 	movi	r2,-1
 40036fc:	e0bffe15 	stw	r2,-8(fp)
 4003700:	e0bffe17 	ldw	r2,-8(fp)
}
 4003704:	e037883a 	mov	sp,fp
 4003708:	dfc00117 	ldw	ra,4(sp)
 400370c:	df000017 	ldw	fp,0(sp)
 4003710:	dec00204 	addi	sp,sp,8
 4003714:	f800283a 	ret

04003718 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003718:	defffd04 	addi	sp,sp,-12
 400371c:	dfc00215 	stw	ra,8(sp)
 4003720:	df000115 	stw	fp,4(sp)
 4003724:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003728:	008100b4 	movhi	r2,1026
 400372c:	10a1c004 	addi	r2,r2,-30976
 4003730:	10800017 	ldw	r2,0(r2)
 4003734:	1005003a 	cmpeq	r2,r2,zero
 4003738:	1000061e 	bne	r2,zero,4003754 <alt_get_errno+0x3c>
 400373c:	008100b4 	movhi	r2,1026
 4003740:	10a1c004 	addi	r2,r2,-30976
 4003744:	10800017 	ldw	r2,0(r2)
 4003748:	103ee83a 	callr	r2
 400374c:	e0bfff15 	stw	r2,-4(fp)
 4003750:	00000306 	br	4003760 <alt_get_errno+0x48>
 4003754:	008100b4 	movhi	r2,1026
 4003758:	10a1eb04 	addi	r2,r2,-30804
 400375c:	e0bfff15 	stw	r2,-4(fp)
 4003760:	e0bfff17 	ldw	r2,-4(fp)
}
 4003764:	e037883a 	mov	sp,fp
 4003768:	dfc00117 	ldw	ra,4(sp)
 400376c:	df000017 	ldw	fp,0(sp)
 4003770:	dec00204 	addi	sp,sp,8
 4003774:	f800283a 	ret

04003778 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4003778:	defffe04 	addi	sp,sp,-8
 400377c:	df000115 	stw	fp,4(sp)
 4003780:	df000104 	addi	fp,sp,4
 4003784:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4003788:	e0bfff17 	ldw	r2,-4(fp)
 400378c:	108000d0 	cmplti	r2,r2,3
 4003790:	10000d1e 	bne	r2,zero,40037c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4003794:	e0bfff17 	ldw	r2,-4(fp)
 4003798:	00c10074 	movhi	r3,1025
 400379c:	18dd0804 	addi	r3,r3,29728
 40037a0:	10800324 	muli	r2,r2,12
 40037a4:	10c5883a 	add	r2,r2,r3
 40037a8:	10800204 	addi	r2,r2,8
 40037ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40037b0:	e0bfff17 	ldw	r2,-4(fp)
 40037b4:	00c10074 	movhi	r3,1025
 40037b8:	18dd0804 	addi	r3,r3,29728
 40037bc:	10800324 	muli	r2,r2,12
 40037c0:	10c5883a 	add	r2,r2,r3
 40037c4:	10000015 	stw	zero,0(r2)
  }
}
 40037c8:	e037883a 	mov	sp,fp
 40037cc:	df000017 	ldw	fp,0(sp)
 40037d0:	dec00104 	addi	sp,sp,4
 40037d4:	f800283a 	ret

040037d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40037d8:	defff804 	addi	sp,sp,-32
 40037dc:	df000715 	stw	fp,28(sp)
 40037e0:	df000704 	addi	fp,sp,28
 40037e4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40037e8:	0005303a 	rdctl	r2,status
 40037ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40037f0:	e0fffb17 	ldw	r3,-20(fp)
 40037f4:	00bfff84 	movi	r2,-2
 40037f8:	1884703a 	and	r2,r3,r2
 40037fc:	1001703a 	wrctl	status,r2
  
  return context;
 4003800:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4003804:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4003808:	d0a00a17 	ldw	r2,-32728(gp)
 400380c:	10c000c4 	addi	r3,r2,3
 4003810:	00bfff04 	movi	r2,-4
 4003814:	1884703a 	and	r2,r3,r2
 4003818:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400381c:	d0e00a17 	ldw	r3,-32728(gp)
 4003820:	e0bffe17 	ldw	r2,-8(fp)
 4003824:	1887883a 	add	r3,r3,r2
 4003828:	00818034 	movhi	r2,1536
 400382c:	10800004 	addi	r2,r2,0
 4003830:	10c0072e 	bgeu	r2,r3,4003850 <sbrk+0x78>
 4003834:	e0bffd17 	ldw	r2,-12(fp)
 4003838:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400383c:	e0bffa17 	ldw	r2,-24(fp)
 4003840:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4003844:	00bfffc4 	movi	r2,-1
 4003848:	e0bfff15 	stw	r2,-4(fp)
 400384c:	00000c06 	br	4003880 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 4003850:	d0a00a17 	ldw	r2,-32728(gp)
 4003854:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 4003858:	d0e00a17 	ldw	r3,-32728(gp)
 400385c:	e0bffe17 	ldw	r2,-8(fp)
 4003860:	1885883a 	add	r2,r3,r2
 4003864:	d0a00a15 	stw	r2,-32728(gp)
 4003868:	e0bffd17 	ldw	r2,-12(fp)
 400386c:	e0bff915 	stw	r2,-28(fp)
 4003870:	e0bff917 	ldw	r2,-28(fp)
 4003874:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4003878:	e0bffc17 	ldw	r2,-16(fp)
 400387c:	e0bfff15 	stw	r2,-4(fp)
 4003880:	e0bfff17 	ldw	r2,-4(fp)
} 
 4003884:	e037883a 	mov	sp,fp
 4003888:	df000017 	ldw	fp,0(sp)
 400388c:	dec00104 	addi	sp,sp,4
 4003890:	f800283a 	ret

04003894 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4003894:	defff704 	addi	sp,sp,-36
 4003898:	dfc00815 	stw	ra,32(sp)
 400389c:	df000715 	stw	fp,28(sp)
 40038a0:	df000704 	addi	fp,sp,28
 40038a4:	e13ffb15 	stw	r4,-20(fp)
 40038a8:	e17ffc15 	stw	r5,-16(fp)
 40038ac:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40038b0:	e0bffb17 	ldw	r2,-20(fp)
 40038b4:	1004803a 	cmplt	r2,r2,zero
 40038b8:	1000081e 	bne	r2,zero,40038dc <write+0x48>
 40038bc:	e0bffb17 	ldw	r2,-20(fp)
 40038c0:	10800324 	muli	r2,r2,12
 40038c4:	1007883a 	mov	r3,r2
 40038c8:	00810074 	movhi	r2,1025
 40038cc:	109d0804 	addi	r2,r2,29728
 40038d0:	1887883a 	add	r3,r3,r2
 40038d4:	e0ffff15 	stw	r3,-4(fp)
 40038d8:	00000106 	br	40038e0 <write+0x4c>
 40038dc:	e03fff15 	stw	zero,-4(fp)
 40038e0:	e0bfff17 	ldw	r2,-4(fp)
 40038e4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 40038e8:	e0bffa17 	ldw	r2,-24(fp)
 40038ec:	1005003a 	cmpeq	r2,r2,zero
 40038f0:	1000241e 	bne	r2,zero,4003984 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40038f4:	e0bffa17 	ldw	r2,-24(fp)
 40038f8:	10800217 	ldw	r2,8(r2)
 40038fc:	108000cc 	andi	r2,r2,3
 4003900:	1005003a 	cmpeq	r2,r2,zero
 4003904:	10001a1e 	bne	r2,zero,4003970 <write+0xdc>
 4003908:	e0bffa17 	ldw	r2,-24(fp)
 400390c:	10800017 	ldw	r2,0(r2)
 4003910:	10800617 	ldw	r2,24(r2)
 4003914:	1005003a 	cmpeq	r2,r2,zero
 4003918:	1000151e 	bne	r2,zero,4003970 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400391c:	e0bffa17 	ldw	r2,-24(fp)
 4003920:	10800017 	ldw	r2,0(r2)
 4003924:	10800617 	ldw	r2,24(r2)
 4003928:	e17ffc17 	ldw	r5,-16(fp)
 400392c:	e1bffd17 	ldw	r6,-12(fp)
 4003930:	e13ffa17 	ldw	r4,-24(fp)
 4003934:	103ee83a 	callr	r2
 4003938:	e0bff915 	stw	r2,-28(fp)
 400393c:	e0bff917 	ldw	r2,-28(fp)
 4003940:	1004403a 	cmpge	r2,r2,zero
 4003944:	1000071e 	bne	r2,zero,4003964 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 4003948:	40039b40 	call	40039b4 <alt_get_errno>
 400394c:	e0fff917 	ldw	r3,-28(fp)
 4003950:	00c7c83a 	sub	r3,zero,r3
 4003954:	10c00015 	stw	r3,0(r2)
        return -1;
 4003958:	00bfffc4 	movi	r2,-1
 400395c:	e0bffe15 	stw	r2,-8(fp)
 4003960:	00000e06 	br	400399c <write+0x108>
      }
      return rval;
 4003964:	e0bff917 	ldw	r2,-28(fp)
 4003968:	e0bffe15 	stw	r2,-8(fp)
 400396c:	00000b06 	br	400399c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4003970:	40039b40 	call	40039b4 <alt_get_errno>
 4003974:	1007883a 	mov	r3,r2
 4003978:	00800344 	movi	r2,13
 400397c:	18800015 	stw	r2,0(r3)
 4003980:	00000406 	br	4003994 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4003984:	40039b40 	call	40039b4 <alt_get_errno>
 4003988:	1007883a 	mov	r3,r2
 400398c:	00801444 	movi	r2,81
 4003990:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003994:	00bfffc4 	movi	r2,-1
 4003998:	e0bffe15 	stw	r2,-8(fp)
 400399c:	e0bffe17 	ldw	r2,-8(fp)
}
 40039a0:	e037883a 	mov	sp,fp
 40039a4:	dfc00117 	ldw	ra,4(sp)
 40039a8:	df000017 	ldw	fp,0(sp)
 40039ac:	dec00204 	addi	sp,sp,8
 40039b0:	f800283a 	ret

040039b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40039b4:	defffd04 	addi	sp,sp,-12
 40039b8:	dfc00215 	stw	ra,8(sp)
 40039bc:	df000115 	stw	fp,4(sp)
 40039c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40039c4:	008100b4 	movhi	r2,1026
 40039c8:	10a1c004 	addi	r2,r2,-30976
 40039cc:	10800017 	ldw	r2,0(r2)
 40039d0:	1005003a 	cmpeq	r2,r2,zero
 40039d4:	1000061e 	bne	r2,zero,40039f0 <alt_get_errno+0x3c>
 40039d8:	008100b4 	movhi	r2,1026
 40039dc:	10a1c004 	addi	r2,r2,-30976
 40039e0:	10800017 	ldw	r2,0(r2)
 40039e4:	103ee83a 	callr	r2
 40039e8:	e0bfff15 	stw	r2,-4(fp)
 40039ec:	00000306 	br	40039fc <alt_get_errno+0x48>
 40039f0:	008100b4 	movhi	r2,1026
 40039f4:	10a1eb04 	addi	r2,r2,-30804
 40039f8:	e0bfff15 	stw	r2,-4(fp)
 40039fc:	e0bfff17 	ldw	r2,-4(fp)
}
 4003a00:	e037883a 	mov	sp,fp
 4003a04:	dfc00117 	ldw	ra,4(sp)
 4003a08:	df000017 	ldw	fp,0(sp)
 4003a0c:	dec00204 	addi	sp,sp,8
 4003a10:	f800283a 	ret

04003a14 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 4003a14:	deffdb04 	addi	sp,sp,-148
 4003a18:	dfc02415 	stw	ra,144(sp)
 4003a1c:	df002315 	stw	fp,140(sp)
 4003a20:	df002304 	addi	fp,sp,140
 4003a24:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4003a28:	e17fde04 	addi	r5,fp,-136
 4003a2c:	01003fc4 	movi	r4,255
 4003a30:	400b9a40 	call	400b9a4 <OSTaskQuery>
 4003a34:	e0bffe05 	stb	r2,-8(fp)
  if (err != OS_NO_ERR)
 4003a38:	e0bffe03 	ldbu	r2,-8(fp)
 4003a3c:	10803fcc 	andi	r2,r2,255
 4003a40:	1004c03a 	cmpne	r2,r2,zero
 4003a44:	1000191e 	bne	r2,zero,4003aac <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 4003a48:	e0bfea83 	ldbu	r2,-86(fp)
 4003a4c:	10803fcc 	andi	r2,r2,255
 4003a50:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 4003a54:	d1203a17 	ldw	r4,-32536(gp)
 4003a58:	e17ffb04 	addi	r5,fp,-20
 4003a5c:	4009ef00 	call	4009ef0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 4003a60:	e0bffd83 	ldbu	r2,-10(fp)
 4003a64:	10803fcc 	andi	r2,r2,255
 4003a68:	1005003a 	cmpeq	r2,r2,zero
 4003a6c:	1000071e 	bne	r2,zero,4003a8c <__env_lock+0x78>
 4003a70:	d0e00b17 	ldw	r3,-32724(gp)
 4003a74:	e0bfdd17 	ldw	r2,-140(fp)
 4003a78:	10c0041e 	bne	r2,r3,4003a8c <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 4003a7c:	d0a03917 	ldw	r2,-32540(gp)
 4003a80:	10800044 	addi	r2,r2,1
 4003a84:	d0a03915 	stw	r2,-32540(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 4003a88:	00000806 	br	4003aac <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 4003a8c:	d1203a17 	ldw	r4,-32536(gp)
 4003a90:	e1bffe04 	addi	r6,fp,-8
 4003a94:	000b883a 	mov	r5,zero
 4003a98:	40099d00 	call	40099d0 <OSSemPend>
    locks  = 1;
 4003a9c:	00800044 	movi	r2,1
 4003aa0:	d0a03915 	stw	r2,-32540(gp)
    lockid = id;
 4003aa4:	e0bfdd17 	ldw	r2,-140(fp)
 4003aa8:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4003aac:	e037883a 	mov	sp,fp
 4003ab0:	dfc00117 	ldw	ra,4(sp)
 4003ab4:	df000017 	ldw	fp,0(sp)
 4003ab8:	dec00204 	addi	sp,sp,8
 4003abc:	f800283a 	ret

04003ac0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 4003ac0:	defffd04 	addi	sp,sp,-12
 4003ac4:	dfc00215 	stw	ra,8(sp)
 4003ac8:	df000115 	stw	fp,4(sp)
 4003acc:	df000104 	addi	fp,sp,4
 4003ad0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 4003ad4:	d0a03917 	ldw	r2,-32540(gp)
 4003ad8:	1005003a 	cmpeq	r2,r2,zero
 4003adc:	10000a1e 	bne	r2,zero,4003b08 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 4003ae0:	d0a03917 	ldw	r2,-32540(gp)
 4003ae4:	10bfffc4 	addi	r2,r2,-1
 4003ae8:	d0a03915 	stw	r2,-32540(gp)
 4003aec:	d0a03917 	ldw	r2,-32540(gp)
 4003af0:	1004c03a 	cmpne	r2,r2,zero
 4003af4:	1000041e 	bne	r2,zero,4003b08 <__env_unlock+0x48>
  {
    lockid = -1;
 4003af8:	00bfffc4 	movi	r2,-1
 4003afc:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
 4003b00:	d1203a17 	ldw	r4,-32536(gp)
 4003b04:	4009dc80 	call	4009dc8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4003b08:	e037883a 	mov	sp,fp
 4003b0c:	dfc00117 	ldw	ra,4(sp)
 4003b10:	df000017 	ldw	fp,0(sp)
 4003b14:	dec00204 	addi	sp,sp,8
 4003b18:	f800283a 	ret

04003b1c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 4003b1c:	deffd704 	addi	sp,sp,-164
 4003b20:	dfc02815 	stw	ra,160(sp)
 4003b24:	df002715 	stw	fp,156(sp)
 4003b28:	df002704 	addi	fp,sp,156
 4003b2c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4003b30:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 4003b34:	008100b4 	movhi	r2,1026
 4003b38:	10a1f444 	addi	r2,r2,-30767
 4003b3c:	10800003 	ldbu	r2,0(r2)
 4003b40:	10803fcc 	andi	r2,r2,255
 4003b44:	10800058 	cmpnei	r2,r2,1
 4003b48:	1000311e 	bne	r2,zero,4003c10 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4003b4c:	e17fde04 	addi	r5,fp,-136
 4003b50:	01003fc4 	movi	r4,255
 4003b54:	400b9a40 	call	400b9a4 <OSTaskQuery>
 4003b58:	e0bffe05 	stb	r2,-8(fp)
  if (err != OS_NO_ERR)
 4003b5c:	e0bffe03 	ldbu	r2,-8(fp)
 4003b60:	10803fcc 	andi	r2,r2,255
 4003b64:	1004c03a 	cmpne	r2,r2,zero
 4003b68:	1000291e 	bne	r2,zero,4003c10 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 4003b6c:	e0bfea83 	ldbu	r2,-86(fp)
 4003b70:	10803fcc 	andi	r2,r2,255
 4003b74:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 4003b78:	d1203c17 	ldw	r4,-32528(gp)
 4003b7c:	e17ffb04 	addi	r5,fp,-20
 4003b80:	4009ef00 	call	4009ef0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003b84:	0005303a 	rdctl	r2,status
 4003b88:	e0bfdb15 	stw	r2,-148(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003b8c:	e0ffdb17 	ldw	r3,-148(fp)
 4003b90:	00bfff84 	movi	r2,-2
 4003b94:	1884703a 	and	r2,r3,r2
 4003b98:	1001703a 	wrctl	status,r2
  
  return context;
 4003b9c:	e0bfdb17 	ldw	r2,-148(fp)
  
  OS_ENTER_CRITICAL();
 4003ba0:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
 4003ba4:	e0bffb0b 	ldhu	r2,-20(fp)
 4003ba8:	10bfffcc 	andi	r2,r2,65535
 4003bac:	1004c03a 	cmpne	r2,r2,zero
 4003bb0:	10000b1e 	bne	r2,zero,4003be0 <__malloc_lock+0xc4>
 4003bb4:	d0e00c17 	ldw	r3,-32720(gp)
 4003bb8:	e0bfdd17 	ldw	r2,-140(fp)
 4003bbc:	10c0081e 	bne	r2,r3,4003be0 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 4003bc0:	d0a03b17 	ldw	r2,-32532(gp)
 4003bc4:	10800044 	addi	r2,r2,1
 4003bc8:	d0a03b15 	stw	r2,-32532(gp)
 4003bcc:	e0bfdc17 	ldw	r2,-144(fp)
 4003bd0:	e0bfda15 	stw	r2,-152(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003bd4:	e0bfda17 	ldw	r2,-152(fp)
 4003bd8:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 4003bdc:	00000c06 	br	4003c10 <__malloc_lock+0xf4>
 4003be0:	e0bfdc17 	ldw	r2,-144(fp)
 4003be4:	e0bfd915 	stw	r2,-156(fp)
 4003be8:	e0bfd917 	ldw	r2,-156(fp)
 4003bec:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 4003bf0:	d1203c17 	ldw	r4,-32528(gp)
 4003bf4:	e1bffe04 	addi	r6,fp,-8
 4003bf8:	000b883a 	mov	r5,zero
 4003bfc:	40099d00 	call	40099d0 <OSSemPend>
    locks  = 1;
 4003c00:	00800044 	movi	r2,1
 4003c04:	d0a03b15 	stw	r2,-32532(gp)
    lockid = id;
 4003c08:	e0bfdd17 	ldw	r2,-140(fp)
 4003c0c:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4003c10:	e037883a 	mov	sp,fp
 4003c14:	dfc00117 	ldw	ra,4(sp)
 4003c18:	df000017 	ldw	fp,0(sp)
 4003c1c:	dec00204 	addi	sp,sp,8
 4003c20:	f800283a 	ret

04003c24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4003c24:	defff804 	addi	sp,sp,-32
 4003c28:	dfc00715 	stw	ra,28(sp)
 4003c2c:	df000615 	stw	fp,24(sp)
 4003c30:	df000604 	addi	fp,sp,24
 4003c34:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4003c38:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 4003c3c:	008100b4 	movhi	r2,1026
 4003c40:	10a1f444 	addi	r2,r2,-30767
 4003c44:	10800003 	ldbu	r2,0(r2)
 4003c48:	10803fcc 	andi	r2,r2,255
 4003c4c:	10800058 	cmpnei	r2,r2,1
 4003c50:	1000231e 	bne	r2,zero,4003ce0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003c54:	0005303a 	rdctl	r2,status
 4003c58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003c5c:	e0fffd17 	ldw	r3,-12(fp)
 4003c60:	00bfff84 	movi	r2,-2
 4003c64:	1884703a 	and	r2,r3,r2
 4003c68:	1001703a 	wrctl	status,r2
  
  return context;
 4003c6c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 4003c70:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 4003c74:	d0a03b17 	ldw	r2,-32532(gp)
 4003c78:	1004c03a 	cmpne	r2,r2,zero
 4003c7c:	1000051e 	bne	r2,zero,4003c94 <__malloc_unlock+0x70>
 4003c80:	e0bffe17 	ldw	r2,-8(fp)
 4003c84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003c88:	e0bffc17 	ldw	r2,-16(fp)
 4003c8c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 4003c90:	00001306 	br	4003ce0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 4003c94:	d0a03b17 	ldw	r2,-32532(gp)
 4003c98:	10bfffc4 	addi	r2,r2,-1
 4003c9c:	d0a03b15 	stw	r2,-32532(gp)
 4003ca0:	d0a03b17 	ldw	r2,-32532(gp)
 4003ca4:	1004c03a 	cmpne	r2,r2,zero
 4003ca8:	1000091e 	bne	r2,zero,4003cd0 <__malloc_unlock+0xac>
  {
    lockid = -1;
 4003cac:	00bfffc4 	movi	r2,-1
 4003cb0:	d0a00c15 	stw	r2,-32720(gp)
 4003cb4:	e0bffe17 	ldw	r2,-8(fp)
 4003cb8:	e0bffb15 	stw	r2,-20(fp)
 4003cbc:	e0bffb17 	ldw	r2,-20(fp)
 4003cc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 4003cc4:	d1203c17 	ldw	r4,-32528(gp)
 4003cc8:	4009dc80 	call	4009dc8 <OSSemPost>
 4003ccc:	00000406 	br	4003ce0 <__malloc_unlock+0xbc>
 4003cd0:	e0bffe17 	ldw	r2,-8(fp)
 4003cd4:	e0bffa15 	stw	r2,-24(fp)
 4003cd8:	e0bffa17 	ldw	r2,-24(fp)
 4003cdc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4003ce0:	e037883a 	mov	sp,fp
 4003ce4:	dfc00117 	ldw	ra,4(sp)
 4003ce8:	df000017 	ldw	fp,0(sp)
 4003cec:	dec00204 	addi	sp,sp,8
 4003cf0:	f800283a 	ret

04003cf4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4003cf4:	defff604 	addi	sp,sp,-40
 4003cf8:	dfc00915 	stw	ra,36(sp)
 4003cfc:	df000815 	stw	fp,32(sp)
 4003d00:	df000804 	addi	fp,sp,32
 4003d04:	e13ffc15 	stw	r4,-16(fp)
 4003d08:	e17ffd15 	stw	r5,-12(fp)
 4003d0c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4003d10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4003d14:	e0bffe17 	ldw	r2,-8(fp)
 4003d18:	1004c03a 	cmpne	r2,r2,zero
 4003d1c:	1000021e 	bne	r2,zero,4003d28 <OSEventNameGet+0x34>
        return (0);
 4003d20:	e03fff15 	stw	zero,-4(fp)
 4003d24:	00003906 	br	4003e0c <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4003d28:	e0bffc17 	ldw	r2,-16(fp)
 4003d2c:	1004c03a 	cmpne	r2,r2,zero
 4003d30:	1000051e 	bne	r2,zero,4003d48 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 4003d34:	e0fffe17 	ldw	r3,-8(fp)
 4003d38:	00800104 	movi	r2,4
 4003d3c:	18800005 	stb	r2,0(r3)
        return (0);
 4003d40:	e03fff15 	stw	zero,-4(fp)
 4003d44:	00003106 	br	4003e0c <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4003d48:	e0bffd17 	ldw	r2,-12(fp)
 4003d4c:	1004c03a 	cmpne	r2,r2,zero
 4003d50:	1000051e 	bne	r2,zero,4003d68 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 4003d54:	e0fffe17 	ldw	r3,-8(fp)
 4003d58:	00800304 	movi	r2,12
 4003d5c:	18800005 	stb	r2,0(r3)
        return (0);
 4003d60:	e03fff15 	stw	zero,-4(fp)
 4003d64:	00002906 	br	4003e0c <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4003d68:	d0a04d03 	ldbu	r2,-32460(gp)
 4003d6c:	10803fcc 	andi	r2,r2,255
 4003d70:	1005003a 	cmpeq	r2,r2,zero
 4003d74:	1000051e 	bne	r2,zero,4003d8c <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 4003d78:	e0fffe17 	ldw	r3,-8(fp)
 4003d7c:	00800444 	movi	r2,17
 4003d80:	18800005 	stb	r2,0(r3)
        return (0);
 4003d84:	e03fff15 	stw	zero,-4(fp)
 4003d88:	00002006 	br	4003e0c <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 4003d8c:	e0bffc17 	ldw	r2,-16(fp)
 4003d90:	10800003 	ldbu	r2,0(r2)
 4003d94:	10803fcc 	andi	r2,r2,255
 4003d98:	10bfffc4 	addi	r2,r2,-1
 4003d9c:	10800128 	cmpgeui	r2,r2,4
 4003da0:	1000161e 	bne	r2,zero,4003dfc <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003da4:	0005303a 	rdctl	r2,status
 4003da8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003dac:	e0fff917 	ldw	r3,-28(fp)
 4003db0:	00bfff84 	movi	r2,-2
 4003db4:	1884703a 	and	r2,r3,r2
 4003db8:	1001703a 	wrctl	status,r2
  
  return context;
 4003dbc:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 4003dc0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 4003dc4:	e0bffc17 	ldw	r2,-16(fp)
 4003dc8:	114004c4 	addi	r5,r2,19
 4003dcc:	e13ffd17 	ldw	r4,-12(fp)
 4003dd0:	40059740 	call	4005974 <OS_StrCopy>
 4003dd4:	e0bffb05 	stb	r2,-20(fp)
 4003dd8:	e0bffa17 	ldw	r2,-24(fp)
 4003ddc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003de0:	e0bff817 	ldw	r2,-32(fp)
 4003de4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4003de8:	e0bffe17 	ldw	r2,-8(fp)
 4003dec:	10000005 	stb	zero,0(r2)
    return (len);
 4003df0:	e0bffb03 	ldbu	r2,-20(fp)
 4003df4:	e0bfff15 	stw	r2,-4(fp)
 4003df8:	00000406 	br	4003e0c <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4003dfc:	e0fffe17 	ldw	r3,-8(fp)
 4003e00:	00800044 	movi	r2,1
 4003e04:	18800005 	stb	r2,0(r3)
             return (0);
 4003e08:	e03fff15 	stw	zero,-4(fp)
 4003e0c:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 4003e10:	e037883a 	mov	sp,fp
 4003e14:	dfc00117 	ldw	ra,4(sp)
 4003e18:	df000017 	ldw	fp,0(sp)
 4003e1c:	dec00204 	addi	sp,sp,8
 4003e20:	f800283a 	ret

04003e24 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4003e24:	defff604 	addi	sp,sp,-40
 4003e28:	dfc00915 	stw	ra,36(sp)
 4003e2c:	df000815 	stw	fp,32(sp)
 4003e30:	df000804 	addi	fp,sp,32
 4003e34:	e13ffd15 	stw	r4,-12(fp)
 4003e38:	e17ffe15 	stw	r5,-8(fp)
 4003e3c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4003e40:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4003e44:	e0bfff17 	ldw	r2,-4(fp)
 4003e48:	1005003a 	cmpeq	r2,r2,zero
 4003e4c:	1000411e 	bne	r2,zero,4003f54 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4003e50:	e0bffd17 	ldw	r2,-12(fp)
 4003e54:	1004c03a 	cmpne	r2,r2,zero
 4003e58:	1000041e 	bne	r2,zero,4003e6c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 4003e5c:	e0ffff17 	ldw	r3,-4(fp)
 4003e60:	00800104 	movi	r2,4
 4003e64:	18800005 	stb	r2,0(r3)
        return;
 4003e68:	00003a06 	br	4003f54 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4003e6c:	e0bffe17 	ldw	r2,-8(fp)
 4003e70:	1004c03a 	cmpne	r2,r2,zero
 4003e74:	1000041e 	bne	r2,zero,4003e88 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 4003e78:	e0ffff17 	ldw	r3,-4(fp)
 4003e7c:	00800304 	movi	r2,12
 4003e80:	18800005 	stb	r2,0(r3)
        return;
 4003e84:	00003306 	br	4003f54 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4003e88:	d0a04d03 	ldbu	r2,-32460(gp)
 4003e8c:	10803fcc 	andi	r2,r2,255
 4003e90:	1005003a 	cmpeq	r2,r2,zero
 4003e94:	1000041e 	bne	r2,zero,4003ea8 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 4003e98:	e0ffff17 	ldw	r3,-4(fp)
 4003e9c:	00800484 	movi	r2,18
 4003ea0:	18800005 	stb	r2,0(r3)
        return;
 4003ea4:	00002b06 	br	4003f54 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 4003ea8:	e0bffd17 	ldw	r2,-12(fp)
 4003eac:	10800003 	ldbu	r2,0(r2)
 4003eb0:	10803fcc 	andi	r2,r2,255
 4003eb4:	10bfffc4 	addi	r2,r2,-1
 4003eb8:	10800128 	cmpgeui	r2,r2,4
 4003ebc:	10000f1e 	bne	r2,zero,4003efc <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003ec0:	0005303a 	rdctl	r2,status
 4003ec4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003ec8:	e0fffa17 	ldw	r3,-24(fp)
 4003ecc:	00bfff84 	movi	r2,-2
 4003ed0:	1884703a 	and	r2,r3,r2
 4003ed4:	1001703a 	wrctl	status,r2
  
  return context;
 4003ed8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 4003edc:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 4003ee0:	e13ffe17 	ldw	r4,-8(fp)
 4003ee4:	40059f40 	call	40059f4 <OS_StrLen>
 4003ee8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 4003eec:	e0bffc03 	ldbu	r2,-16(fp)
 4003ef0:	10800828 	cmpgeui	r2,r2,32
 4003ef4:	1000051e 	bne	r2,zero,4003f0c <OSEventNameSet+0xe8>
 4003ef8:	00000c06 	br	4003f2c <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4003efc:	e0ffff17 	ldw	r3,-4(fp)
 4003f00:	00800044 	movi	r2,1
 4003f04:	18800005 	stb	r2,0(r3)
             return;
 4003f08:	00001206 	br	4003f54 <OSEventNameSet+0x130>
 4003f0c:	e0bffb17 	ldw	r2,-20(fp)
 4003f10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003f14:	e0bff917 	ldw	r2,-28(fp)
 4003f18:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 4003f1c:	e0ffff17 	ldw	r3,-4(fp)
 4003f20:	008002c4 	movi	r2,11
 4003f24:	18800005 	stb	r2,0(r3)
        return;
 4003f28:	00000a06 	br	4003f54 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 4003f2c:	e0bffd17 	ldw	r2,-12(fp)
 4003f30:	110004c4 	addi	r4,r2,19
 4003f34:	e17ffe17 	ldw	r5,-8(fp)
 4003f38:	40059740 	call	4005974 <OS_StrCopy>
 4003f3c:	e0bffb17 	ldw	r2,-20(fp)
 4003f40:	e0bff815 	stw	r2,-32(fp)
 4003f44:	e0bff817 	ldw	r2,-32(fp)
 4003f48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4003f4c:	e0bfff17 	ldw	r2,-4(fp)
 4003f50:	10000005 	stb	zero,0(r2)
}
 4003f54:	e037883a 	mov	sp,fp
 4003f58:	dfc00117 	ldw	ra,4(sp)
 4003f5c:	df000017 	ldw	fp,0(sp)
 4003f60:	dec00204 	addi	sp,sp,8
 4003f64:	f800283a 	ret

04003f68 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 4003f68:	deffe704 	addi	sp,sp,-100
 4003f6c:	dfc01815 	stw	ra,96(sp)
 4003f70:	df001715 	stw	fp,92(sp)
 4003f74:	df001704 	addi	fp,sp,92
 4003f78:	e13ff615 	stw	r4,-40(fp)
 4003f7c:	e17ff715 	stw	r5,-36(fp)
 4003f80:	e1bff815 	stw	r6,-32(fp)
 4003f84:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 4003f88:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 4003f8c:	e0800217 	ldw	r2,8(fp)
 4003f90:	1004c03a 	cmpne	r2,r2,zero
 4003f94:	1000021e 	bne	r2,zero,4003fa0 <OSEventPendMulti+0x38>
        return (0);
 4003f98:	e03fff15 	stw	zero,-4(fp)
 4003f9c:	00019906 	br	4004604 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 4003fa0:	e0bff617 	ldw	r2,-40(fp)
 4003fa4:	1004c03a 	cmpne	r2,r2,zero
 4003fa8:	1000051e 	bne	r2,zero,4003fc0 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 4003fac:	e0c00217 	ldw	r3,8(fp)
 4003fb0:	00800104 	movi	r2,4
 4003fb4:	18800005 	stb	r2,0(r3)
        return (0);
 4003fb8:	e03fff15 	stw	zero,-4(fp)
 4003fbc:	00019106 	br	4004604 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 4003fc0:	e0bff717 	ldw	r2,-36(fp)
 4003fc4:	1004c03a 	cmpne	r2,r2,zero
 4003fc8:	1000051e 	bne	r2,zero,4003fe0 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 4003fcc:	e0c00217 	ldw	r3,8(fp)
 4003fd0:	00800104 	movi	r2,4
 4003fd4:	18800005 	stb	r2,0(r3)
        return (0);
 4003fd8:	e03fff15 	stw	zero,-4(fp)
 4003fdc:	00018906 	br	4004604 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 4003fe0:	e0bff817 	ldw	r2,-32(fp)
 4003fe4:	1004c03a 	cmpne	r2,r2,zero
 4003fe8:	1000051e 	bne	r2,zero,4004000 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 4003fec:	e0c00217 	ldw	r3,8(fp)
 4003ff0:	00800104 	movi	r2,4
 4003ff4:	18800005 	stb	r2,0(r3)
        return (0);
 4003ff8:	e03fff15 	stw	zero,-4(fp)
 4003ffc:	00018106 	br	4004604 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 4004000:	e0bff717 	ldw	r2,-36(fp)
 4004004:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 4004008:	e0bff617 	ldw	r2,-40(fp)
 400400c:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 4004010:	e0bff517 	ldw	r2,-44(fp)
 4004014:	10800017 	ldw	r2,0(r2)
 4004018:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 400401c:	00001806 	br	4004080 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 4004020:	e0bff417 	ldw	r2,-48(fp)
 4004024:	10800003 	ldbu	r2,0(r2)
 4004028:	10803fcc 	andi	r2,r2,255
 400402c:	e0bffe15 	stw	r2,-8(fp)
 4004030:	e0fffe17 	ldw	r3,-8(fp)
 4004034:	188000a0 	cmpeqi	r2,r3,2
 4004038:	10000b1e 	bne	r2,zero,4004068 <OSEventPendMulti+0x100>
 400403c:	e0fffe17 	ldw	r3,-8(fp)
 4004040:	188000e0 	cmpeqi	r2,r3,3
 4004044:	1000081e 	bne	r2,zero,4004068 <OSEventPendMulti+0x100>
 4004048:	e0fffe17 	ldw	r3,-8(fp)
 400404c:	18800060 	cmpeqi	r2,r3,1
 4004050:	1000051e 	bne	r2,zero,4004068 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:
            case OS_EVENT_TYPE_FLAG:
            default:
                *perr = OS_ERR_EVENT_TYPE;
 4004054:	e0c00217 	ldw	r3,8(fp)
 4004058:	00800044 	movi	r2,1
 400405c:	18800005 	stb	r2,0(r3)
                 return (0);
 4004060:	e03fff15 	stw	zero,-4(fp)
 4004064:	00016706 	br	4004604 <OSEventPendMulti+0x69c>
        }
        pevents++;
 4004068:	e0bff517 	ldw	r2,-44(fp)
 400406c:	10800104 	addi	r2,r2,4
 4004070:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 4004074:	e0bff517 	ldw	r2,-44(fp)
 4004078:	10800017 	ldw	r2,0(r2)
 400407c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 4004080:	e0bff417 	ldw	r2,-48(fp)
 4004084:	1004c03a 	cmpne	r2,r2,zero
 4004088:	103fe51e 	bne	r2,zero,4004020 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 400408c:	d0a04d03 	ldbu	r2,-32460(gp)
 4004090:	10803fcc 	andi	r2,r2,255
 4004094:	1005003a 	cmpeq	r2,r2,zero
 4004098:	1000051e 	bne	r2,zero,40040b0 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 400409c:	e0c00217 	ldw	r3,8(fp)
 40040a0:	00800084 	movi	r2,2
 40040a4:	18800005 	stb	r2,0(r3)
        return (0);
 40040a8:	e03fff15 	stw	zero,-4(fp)
 40040ac:	00015506 	br	4004604 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 40040b0:	d0a03d03 	ldbu	r2,-32524(gp)
 40040b4:	10803fcc 	andi	r2,r2,255
 40040b8:	1005003a 	cmpeq	r2,r2,zero
 40040bc:	1000051e 	bne	r2,zero,40040d4 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 40040c0:	e0c00217 	ldw	r3,8(fp)
 40040c4:	00800344 	movi	r2,13
 40040c8:	18800005 	stb	r2,0(r3)
        return (0);
 40040cc:	e03fff15 	stw	zero,-4(fp)
 40040d0:	00014c06 	br	4004604 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40040d4:	0005303a 	rdctl	r2,status
 40040d8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40040dc:	e0ffef17 	ldw	r3,-68(fp)
 40040e0:	00bfff84 	movi	r2,-2
 40040e4:	1884703a 	and	r2,r3,r2
 40040e8:	1001703a 	wrctl	status,r2
  
  return context;
 40040ec:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 40040f0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 40040f4:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 40040f8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 40040fc:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 4004100:	e0bff617 	ldw	r2,-40(fp)
 4004104:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 4004108:	e0bff517 	ldw	r2,-44(fp)
 400410c:	10800017 	ldw	r2,0(r2)
 4004110:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 4004114:	00008f06 	br	4004354 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 4004118:	e0bff417 	ldw	r2,-48(fp)
 400411c:	10800003 	ldbu	r2,0(r2)
 4004120:	10803fcc 	andi	r2,r2,255
 4004124:	e0bffd15 	stw	r2,-12(fp)
 4004128:	e0fffd17 	ldw	r3,-12(fp)
 400412c:	188000a0 	cmpeqi	r2,r3,2
 4004130:	1000441e 	bne	r2,zero,4004244 <OSEventPendMulti+0x2dc>
 4004134:	e0fffd17 	ldw	r3,-12(fp)
 4004138:	188000e0 	cmpeqi	r2,r3,3
 400413c:	1000041e 	bne	r2,zero,4004150 <OSEventPendMulti+0x1e8>
 4004140:	e0fffd17 	ldw	r3,-12(fp)
 4004144:	18800060 	cmpeqi	r2,r3,1
 4004148:	1000211e 	bne	r2,zero,40041d0 <OSEventPendMulti+0x268>
 400414c:	00006f06 	br	400430c <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 4004150:	e0bff417 	ldw	r2,-48(fp)
 4004154:	1080020b 	ldhu	r2,8(r2)
 4004158:	10bfffcc 	andi	r2,r2,65535
 400415c:	1005003a 	cmpeq	r2,r2,zero
 4004160:	1000171e 	bne	r2,zero,40041c0 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 4004164:	e0bff417 	ldw	r2,-48(fp)
 4004168:	1080020b 	ldhu	r2,8(r2)
 400416c:	10bfffc4 	addi	r2,r2,-1
 4004170:	1007883a 	mov	r3,r2
 4004174:	e0bff417 	ldw	r2,-48(fp)
 4004178:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 400417c:	e0fff717 	ldw	r3,-36(fp)
 4004180:	e0bff417 	ldw	r2,-48(fp)
 4004184:	18800015 	stw	r2,0(r3)
 4004188:	e0bff717 	ldw	r2,-36(fp)
 400418c:	10800104 	addi	r2,r2,4
 4004190:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 4004194:	00800044 	movi	r2,1
 4004198:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 400419c:	e0bff817 	ldw	r2,-32(fp)
 40041a0:	10000015 	stw	zero,0(r2)
 40041a4:	e0bff817 	ldw	r2,-32(fp)
 40041a8:	10800104 	addi	r2,r2,4
 40041ac:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 40041b0:	e0bff18b 	ldhu	r2,-58(fp)
 40041b4:	10800044 	addi	r2,r2,1
 40041b8:	e0bff18d 	sth	r2,-58(fp)
 40041bc:	00005f06 	br	400433c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 40041c0:	e0bff103 	ldbu	r2,-60(fp)
 40041c4:	10800054 	ori	r2,r2,1
 40041c8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 40041cc:	00005b06 	br	400433c <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 40041d0:	e0bff417 	ldw	r2,-48(fp)
 40041d4:	10800117 	ldw	r2,4(r2)
 40041d8:	1005003a 	cmpeq	r2,r2,zero
 40041dc:	1000151e 	bne	r2,zero,4004234 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 40041e0:	e0bff417 	ldw	r2,-48(fp)
 40041e4:	10c00117 	ldw	r3,4(r2)
 40041e8:	e0bff817 	ldw	r2,-32(fp)
 40041ec:	10c00015 	stw	r3,0(r2)
 40041f0:	e0bff817 	ldw	r2,-32(fp)
 40041f4:	10800104 	addi	r2,r2,4
 40041f8:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 40041fc:	e0bff417 	ldw	r2,-48(fp)
 4004200:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 4004204:	e0fff717 	ldw	r3,-36(fp)
 4004208:	e0bff417 	ldw	r2,-48(fp)
 400420c:	18800015 	stw	r2,0(r3)
 4004210:	e0bff717 	ldw	r2,-36(fp)
 4004214:	10800104 	addi	r2,r2,4
 4004218:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 400421c:	00800044 	movi	r2,1
 4004220:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 4004224:	e0bff18b 	ldhu	r2,-58(fp)
 4004228:	10800044 	addi	r2,r2,1
 400422c:	e0bff18d 	sth	r2,-58(fp)
 4004230:	00004206 	br	400433c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 4004234:	e0bff103 	ldbu	r2,-60(fp)
 4004238:	10800094 	ori	r2,r2,2
 400423c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 4004240:	00003e06 	br	400433c <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 4004244:	e0bff417 	ldw	r2,-48(fp)
 4004248:	10800117 	ldw	r2,4(r2)
 400424c:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 4004250:	e0bff317 	ldw	r2,-52(fp)
 4004254:	1080058b 	ldhu	r2,22(r2)
 4004258:	10bfffcc 	andi	r2,r2,65535
 400425c:	1005003a 	cmpeq	r2,r2,zero
 4004260:	1000261e 	bne	r2,zero,40042fc <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 4004264:	e0bff317 	ldw	r2,-52(fp)
 4004268:	11000417 	ldw	r4,16(r2)
 400426c:	20c00017 	ldw	r3,0(r4)
 4004270:	e0bff817 	ldw	r2,-32(fp)
 4004274:	10c00015 	stw	r3,0(r2)
 4004278:	e0bff817 	ldw	r2,-32(fp)
 400427c:	10800104 	addi	r2,r2,4
 4004280:	e0bff815 	stw	r2,-32(fp)
 4004284:	20c00104 	addi	r3,r4,4
 4004288:	e0bff317 	ldw	r2,-52(fp)
 400428c:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 4004290:	e0bff317 	ldw	r2,-52(fp)
 4004294:	10c00417 	ldw	r3,16(r2)
 4004298:	e0bff317 	ldw	r2,-52(fp)
 400429c:	10800217 	ldw	r2,8(r2)
 40042a0:	1880041e 	bne	r3,r2,40042b4 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 40042a4:	e0bff317 	ldw	r2,-52(fp)
 40042a8:	10c00117 	ldw	r3,4(r2)
 40042ac:	e0bff317 	ldw	r2,-52(fp)
 40042b0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 40042b4:	e0bff317 	ldw	r2,-52(fp)
 40042b8:	1080058b 	ldhu	r2,22(r2)
 40042bc:	10bfffc4 	addi	r2,r2,-1
 40042c0:	1007883a 	mov	r3,r2
 40042c4:	e0bff317 	ldw	r2,-52(fp)
 40042c8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 40042cc:	e0fff717 	ldw	r3,-36(fp)
 40042d0:	e0bff417 	ldw	r2,-48(fp)
 40042d4:	18800015 	stw	r2,0(r3)
 40042d8:	e0bff717 	ldw	r2,-36(fp)
 40042dc:	10800104 	addi	r2,r2,4
 40042e0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 40042e4:	00800044 	movi	r2,1
 40042e8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 40042ec:	e0bff18b 	ldhu	r2,-58(fp)
 40042f0:	10800044 	addi	r2,r2,1
 40042f4:	e0bff18d 	sth	r2,-58(fp)
 40042f8:	00001006 	br	400433c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 40042fc:	e0bff103 	ldbu	r2,-60(fp)
 4004300:	10800114 	ori	r2,r2,4
 4004304:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 4004308:	00000c06 	br	400433c <OSEventPendMulti+0x3d4>
 400430c:	e0bff017 	ldw	r2,-64(fp)
 4004310:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004314:	e0bfee17 	ldw	r2,-72(fp)
 4004318:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:
            case OS_EVENT_TYPE_FLAG:
            default:
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 400431c:	e0bff717 	ldw	r2,-36(fp)
 4004320:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 4004324:	e0c00217 	ldw	r3,8(fp)
 4004328:	00800044 	movi	r2,1
 400432c:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 4004330:	e0bff18b 	ldhu	r2,-58(fp)
 4004334:	e0bfff15 	stw	r2,-4(fp)
 4004338:	0000b206 	br	4004604 <OSEventPendMulti+0x69c>
        }
        pevents++;
 400433c:	e0bff517 	ldw	r2,-44(fp)
 4004340:	10800104 	addi	r2,r2,4
 4004344:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 4004348:	e0bff517 	ldw	r2,-44(fp)
 400434c:	10800017 	ldw	r2,0(r2)
 4004350:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 4004354:	e0bff417 	ldw	r2,-48(fp)
 4004358:	1004c03a 	cmpne	r2,r2,zero
 400435c:	103f6e1e 	bne	r2,zero,4004118 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 4004360:	e0bff203 	ldbu	r2,-56(fp)
 4004364:	10800058 	cmpnei	r2,r2,1
 4004368:	10000b1e 	bne	r2,zero,4004398 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 400436c:	e0bff717 	ldw	r2,-36(fp)
 4004370:	10000015 	stw	zero,0(r2)
 4004374:	e0bff017 	ldw	r2,-64(fp)
 4004378:	e0bfed15 	stw	r2,-76(fp)
 400437c:	e0bfed17 	ldw	r2,-76(fp)
 4004380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 4004384:	e0800217 	ldw	r2,8(fp)
 4004388:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 400438c:	e0fff18b 	ldhu	r3,-58(fp)
 4004390:	e0ffff15 	stw	r3,-4(fp)
 4004394:	00009b06 	br	4004604 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 4004398:	d1204e17 	ldw	r4,-32456(gp)
 400439c:	d0a04e17 	ldw	r2,-32456(gp)
 40043a0:	10c00c03 	ldbu	r3,48(r2)
 40043a4:	e0bff103 	ldbu	r2,-60(fp)
 40043a8:	1884b03a 	or	r2,r3,r2
 40043ac:	1007883a 	mov	r3,r2
 40043b0:	00bfe004 	movi	r2,-128
 40043b4:	1884b03a 	or	r2,r3,r2
 40043b8:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 40043bc:	d0a04e17 	ldw	r2,-32456(gp)
 40043c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 40043c4:	d0e04e17 	ldw	r3,-32456(gp)
 40043c8:	e0bff90b 	ldhu	r2,-28(fp)
 40043cc:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 40043d0:	e13ff617 	ldw	r4,-40(fp)
 40043d4:	4004fb80 	call	4004fb8 <OS_EventTaskWaitMulti>
 40043d8:	e0bff017 	ldw	r2,-64(fp)
 40043dc:	e0bfec15 	stw	r2,-80(fp)
 40043e0:	e0bfec17 	ldw	r2,-80(fp)
 40043e4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 40043e8:	40057540 	call	4005754 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40043ec:	0005303a 	rdctl	r2,status
 40043f0:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40043f4:	e0ffeb17 	ldw	r3,-84(fp)
 40043f8:	00bfff84 	movi	r2,-2
 40043fc:	1884703a 	and	r2,r3,r2
 4004400:	1001703a 	wrctl	status,r2
  
  return context;
 4004404:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 4004408:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 400440c:	d0a04e17 	ldw	r2,-32456(gp)
 4004410:	10800c43 	ldbu	r2,49(r2)
 4004414:	10803fcc 	andi	r2,r2,255
 4004418:	e0bffc15 	stw	r2,-16(fp)
 400441c:	e0fffc17 	ldw	r3,-16(fp)
 4004420:	1805003a 	cmpeq	r2,r3,zero
 4004424:	1000041e 	bne	r2,zero,4004438 <OSEventPendMulti+0x4d0>
 4004428:	e0fffc17 	ldw	r3,-16(fp)
 400442c:	188000a0 	cmpeqi	r2,r3,2
 4004430:	1000011e 	bne	r2,zero,4004438 <OSEventPendMulti+0x4d0>
 4004434:	00001906 	br	400449c <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 4004438:	d0a04e17 	ldw	r2,-32456(gp)
 400443c:	10800717 	ldw	r2,28(r2)
 4004440:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 4004444:	e0bff417 	ldw	r2,-48(fp)
 4004448:	1005003a 	cmpeq	r2,r2,zero
 400444c:	10000c1e 	bne	r2,zero,4004480 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 4004450:	e0fff717 	ldw	r3,-36(fp)
 4004454:	e0bff417 	ldw	r2,-48(fp)
 4004458:	18800015 	stw	r2,0(r3)
 400445c:	e0bff717 	ldw	r2,-36(fp)
 4004460:	10800104 	addi	r2,r2,4
 4004464:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 4004468:	e0bff717 	ldw	r2,-36(fp)
 400446c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 4004470:	e0bff18b 	ldhu	r2,-58(fp)
 4004474:	10800044 	addi	r2,r2,1
 4004478:	e0bff18d 	sth	r2,-58(fp)
 400447c:	00000a06 	br	40044a8 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 4004480:	d0a04e17 	ldw	r2,-32456(gp)
 4004484:	00c00044 	movi	r3,1
 4004488:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400448c:	d1204e17 	ldw	r4,-32456(gp)
 4004490:	e17ff617 	ldw	r5,-40(fp)
 4004494:	40051c40 	call	40051c4 <OS_EventTaskRemoveMulti>
             }
			 break;
 4004498:	00000306 	br	40044a8 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400449c:	d1204e17 	ldw	r4,-32456(gp)
 40044a0:	e17ff617 	ldw	r5,-40(fp)
 40044a4:	40051c40 	call	40051c4 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 40044a8:	d0a04e17 	ldw	r2,-32456(gp)
 40044ac:	10800c43 	ldbu	r2,49(r2)
 40044b0:	10803fcc 	andi	r2,r2,255
 40044b4:	e0bffb15 	stw	r2,-20(fp)
 40044b8:	e0fffb17 	ldw	r3,-20(fp)
 40044bc:	1805003a 	cmpeq	r2,r3,zero
 40044c0:	1000041e 	bne	r2,zero,40044d4 <OSEventPendMulti+0x56c>
 40044c4:	e0fffb17 	ldw	r3,-20(fp)
 40044c8:	188000a0 	cmpeqi	r2,r3,2
 40044cc:	10002c1e 	bne	r2,zero,4004580 <OSEventPendMulti+0x618>
 40044d0:	00003406 	br	40045a4 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 40044d4:	e0bff417 	ldw	r2,-48(fp)
 40044d8:	10800003 	ldbu	r2,0(r2)
 40044dc:	10803fcc 	andi	r2,r2,255
 40044e0:	e0bffa15 	stw	r2,-24(fp)
 40044e4:	e0fffa17 	ldw	r3,-24(fp)
 40044e8:	18800050 	cmplti	r2,r3,1
 40044ec:	1000151e 	bne	r2,zero,4004544 <OSEventPendMulti+0x5dc>
 40044f0:	e0fffa17 	ldw	r3,-24(fp)
 40044f4:	188000d0 	cmplti	r2,r3,3
 40044f8:	10000a1e 	bne	r2,zero,4004524 <OSEventPendMulti+0x5bc>
 40044fc:	e0fffa17 	ldw	r3,-24(fp)
 4004500:	188000e0 	cmpeqi	r2,r3,3
 4004504:	1000011e 	bne	r2,zero,400450c <OSEventPendMulti+0x5a4>
 4004508:	00000e06 	br	4004544 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 400450c:	e0bff817 	ldw	r2,-32(fp)
 4004510:	10000015 	stw	zero,0(r2)
 4004514:	e0bff817 	ldw	r2,-32(fp)
 4004518:	10800104 	addi	r2,r2,4
 400451c:	e0bff815 	stw	r2,-32(fp)
                      break;
 4004520:	00001406 	br	4004574 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 4004524:	d0a04e17 	ldw	r2,-32456(gp)
 4004528:	10c00917 	ldw	r3,36(r2)
 400452c:	e0bff817 	ldw	r2,-32(fp)
 4004530:	10c00015 	stw	r3,0(r2)
 4004534:	e0bff817 	ldw	r2,-32(fp)
 4004538:	10800104 	addi	r2,r2,4
 400453c:	e0bff815 	stw	r2,-32(fp)
                      break;
 4004540:	00000c06 	br	4004574 <OSEventPendMulti+0x60c>
 4004544:	e0bff017 	ldw	r2,-64(fp)
 4004548:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400454c:	e0bfea17 	ldw	r2,-88(fp)
 4004550:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:
                 case OS_EVENT_TYPE_FLAG:
                 default:
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 4004554:	e0bff717 	ldw	r2,-36(fp)
 4004558:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 400455c:	e0c00217 	ldw	r3,8(fp)
 4004560:	00800044 	movi	r2,1
 4004564:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 4004568:	e0bff18b 	ldhu	r2,-58(fp)
 400456c:	e0bfff15 	stw	r2,-4(fp)
 4004570:	00002406 	br	4004604 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 4004574:	e0800217 	ldw	r2,8(fp)
 4004578:	10000005 	stb	zero,0(r2)
             break;
 400457c:	00001106 	br	40045c4 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 4004580:	e0bff817 	ldw	r2,-32(fp)
 4004584:	10000015 	stw	zero,0(r2)
 4004588:	e0bff817 	ldw	r2,-32(fp)
 400458c:	10800104 	addi	r2,r2,4
 4004590:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 4004594:	e0c00217 	ldw	r3,8(fp)
 4004598:	00800384 	movi	r2,14
 400459c:	18800005 	stb	r2,0(r3)
             break;
 40045a0:	00000806 	br	40045c4 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_TO:
        default:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 40045a4:	e0bff817 	ldw	r2,-32(fp)
 40045a8:	10000015 	stw	zero,0(r2)
 40045ac:	e0bff817 	ldw	r2,-32(fp)
 40045b0:	10800104 	addi	r2,r2,4
 40045b4:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 40045b8:	e0c00217 	ldw	r3,8(fp)
 40045bc:	00800284 	movi	r2,10
 40045c0:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 40045c4:	d0a04e17 	ldw	r2,-32456(gp)
 40045c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 40045cc:	d0a04e17 	ldw	r2,-32456(gp)
 40045d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 40045d4:	d0a04e17 	ldw	r2,-32456(gp)
 40045d8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 40045dc:	d0a04e17 	ldw	r2,-32456(gp)
 40045e0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 40045e4:	d0a04e17 	ldw	r2,-32456(gp)
 40045e8:	10000915 	stw	zero,36(r2)
 40045ec:	e0bff017 	ldw	r2,-64(fp)
 40045f0:	e0bfe915 	stw	r2,-92(fp)
 40045f4:	e0bfe917 	ldw	r2,-92(fp)
 40045f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 40045fc:	e0fff18b 	ldhu	r3,-58(fp)
 4004600:	e0ffff15 	stw	r3,-4(fp)
 4004604:	e0bfff17 	ldw	r2,-4(fp)
}
 4004608:	e037883a 	mov	sp,fp
 400460c:	dfc00117 	ldw	ra,4(sp)
 4004610:	df000017 	ldw	fp,0(sp)
 4004614:	dec00204 	addi	sp,sp,8
 4004618:	f800283a 	ret

0400461c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 400461c:	defffe04 	addi	sp,sp,-8
 4004620:	dfc00115 	stw	ra,4(sp)
 4004624:	df000015 	stw	fp,0(sp)
 4004628:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 400462c:	400eec80 	call	400eec8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 4004630:	400540c0 	call	400540c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 4004634:	40054500 	call	4005450 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 4004638:	40055b40 	call	40055b4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 400463c:	40053300 	call	4005330 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 4004640:	40077800 	call	4007780 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 4004644:	40081580 	call	4008158 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 4004648:	40094b00 	call	40094b0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 400464c:	40054bc0 	call	40054bc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 4004650:	40055380 	call	4005538 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 4004654:	400eee40 	call	400eee4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 4004658:	4005f580 	call	4005f58 <OSDebugInit>
#endif
}
 400465c:	e037883a 	mov	sp,fp
 4004660:	dfc00117 	ldw	ra,4(sp)
 4004664:	df000017 	ldw	fp,0(sp)
 4004668:	dec00204 	addi	sp,sp,8
 400466c:	f800283a 	ret

04004670 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 4004670:	defffc04 	addi	sp,sp,-16
 4004674:	df000315 	stw	fp,12(sp)
 4004678:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400467c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 4004680:	d0a03d43 	ldbu	r2,-32523(gp)
 4004684:	10803fcc 	andi	r2,r2,255
 4004688:	10800058 	cmpnei	r2,r2,1
 400468c:	1000131e 	bne	r2,zero,40046dc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004690:	0005303a 	rdctl	r2,status
 4004694:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004698:	e0fffe17 	ldw	r3,-8(fp)
 400469c:	00bfff84 	movi	r2,-2
 40046a0:	1884703a 	and	r2,r3,r2
 40046a4:	1001703a 	wrctl	status,r2
  
  return context;
 40046a8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 40046ac:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 40046b0:	d0a04d03 	ldbu	r2,-32460(gp)
 40046b4:	10803fcc 	andi	r2,r2,255
 40046b8:	10803fe0 	cmpeqi	r2,r2,255
 40046bc:	1000031e 	bne	r2,zero,40046cc <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 40046c0:	d0a04d03 	ldbu	r2,-32460(gp)
 40046c4:	10800044 	addi	r2,r2,1
 40046c8:	d0a04d05 	stb	r2,-32460(gp)
 40046cc:	e0bfff17 	ldw	r2,-4(fp)
 40046d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40046d4:	e0bffd17 	ldw	r2,-12(fp)
 40046d8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 40046dc:	e037883a 	mov	sp,fp
 40046e0:	df000017 	ldw	fp,0(sp)
 40046e4:	dec00104 	addi	sp,sp,4
 40046e8:	f800283a 	ret

040046ec <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 40046ec:	defffb04 	addi	sp,sp,-20
 40046f0:	dfc00415 	stw	ra,16(sp)
 40046f4:	df000315 	stw	fp,12(sp)
 40046f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr;
#endif


    if (OSRunning == OS_TRUE) {
 40046fc:	d0a03d43 	ldbu	r2,-32523(gp)
 4004700:	10803fcc 	andi	r2,r2,255
 4004704:	10800058 	cmpnei	r2,r2,1
 4004708:	1000371e 	bne	r2,zero,40047e8 <OSIntExit+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400470c:	0005303a 	rdctl	r2,status
 4004710:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004714:	e0fffe17 	ldw	r3,-8(fp)
 4004718:	00bfff84 	movi	r2,-2
 400471c:	1884703a 	and	r2,r3,r2
 4004720:	1001703a 	wrctl	status,r2
  
  return context;
 4004724:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 4004728:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 400472c:	d0a04d03 	ldbu	r2,-32460(gp)
 4004730:	10803fcc 	andi	r2,r2,255
 4004734:	1005003a 	cmpeq	r2,r2,zero
 4004738:	1000031e 	bne	r2,zero,4004748 <OSIntExit+0x5c>
            OSIntNesting--;
 400473c:	d0a04d03 	ldbu	r2,-32460(gp)
 4004740:	10bfffc4 	addi	r2,r2,-1
 4004744:	d0a04d05 	stb	r2,-32460(gp)
        }
        if ((OSIntNesting == 0) && (OSLockNesting == 0)) { /* Reschedule only if all ISRs complete ... */
 4004748:	d0a04d03 	ldbu	r2,-32460(gp)
 400474c:	10803fcc 	andi	r2,r2,255
 4004750:	1004c03a 	cmpne	r2,r2,zero
 4004754:	1000201e 	bne	r2,zero,40047d8 <OSIntExit+0xec>
 4004758:	d0a03d03 	ldbu	r2,-32524(gp)
 400475c:	10803fcc 	andi	r2,r2,255
 4004760:	1004c03a 	cmpne	r2,r2,zero
 4004764:	10001c1e 	bne	r2,zero,40047d8 <OSIntExit+0xec>
            // *** Daniel Modified ***
            // OSIntExitY    = OSUnMapTbl[OSRdyGrp];          /* ... and not locked.                      */
            // OSPrioHighRdy = (INT8U)((OSIntExitY << 3) + OSUnMapTbl[OSRdyTbl[OSIntExitY]]);
            OSNextTask();
 4004768:	40058380 	call	4005838 <OSNextTask>
            // ** End modification ***
            if (OSPrioHighRdy != OSPrioCur) {              /* No Ctx Sw if current task is highest rdy */
 400476c:	d0a03f03 	ldbu	r2,-32516(gp)
 4004770:	d0e03f43 	ldbu	r3,-32515(gp)
 4004774:	11003fcc 	andi	r4,r2,255
 4004778:	18803fcc 	andi	r2,r3,255
 400477c:	20801626 	beq	r4,r2,40047d8 <OSIntExit+0xec>
            	// Modified
				printf("%lu preempt %d %d\n", OSTimeGet(), OSPrioCur, OSPrioHighRdy);
 4004780:	400c0380 	call	400c038 <OSTimeGet>
 4004784:	100b883a 	mov	r5,r2
 4004788:	d0a03f43 	ldbu	r2,-32515(gp)
 400478c:	11803fcc 	andi	r6,r2,255
 4004790:	d0a03f03 	ldbu	r2,-32516(gp)
 4004794:	11c03fcc 	andi	r7,r2,255
 4004798:	01010074 	movhi	r4,1025
 400479c:	211a1804 	addi	r4,r4,26720
 40047a0:	400f4dc0 	call	400f4dc <printf>
				OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 40047a4:	d0a03f03 	ldbu	r2,-32516(gp)
 40047a8:	10803fcc 	andi	r2,r2,255
 40047ac:	00c100b4 	movhi	r3,1026
 40047b0:	18ceef04 	addi	r3,r3,15292
 40047b4:	1085883a 	add	r2,r2,r2
 40047b8:	1085883a 	add	r2,r2,r2
 40047bc:	10c5883a 	add	r2,r2,r3
 40047c0:	10800017 	ldw	r2,0(r2)
 40047c4:	d0a04715 	stw	r2,-32484(gp)
				OSCtxSwCtr++;                              /* Keep track of the number of ctx switches */
 40047c8:	d0a04217 	ldw	r2,-32504(gp)
 40047cc:	10800044 	addi	r2,r2,1
 40047d0:	d0a04215 	stw	r2,-32504(gp)
				OSIntCtxSw();                              /* Perform interrupt level ctx switch       */
 40047d4:	400ea540 	call	400ea54 <OSCtxSw>
 40047d8:	e0bfff17 	ldw	r2,-4(fp)
 40047dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40047e0:	e0bffd17 	ldw	r2,-12(fp)
 40047e4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 40047e8:	e037883a 	mov	sp,fp
 40047ec:	dfc00117 	ldw	ra,4(sp)
 40047f0:	df000017 	ldw	fp,0(sp)
 40047f4:	dec00204 	addi	sp,sp,8
 40047f8:	f800283a 	ret

040047fc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 40047fc:	defffc04 	addi	sp,sp,-16
 4004800:	df000315 	stw	fp,12(sp)
 4004804:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4004808:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 400480c:	d0a03d43 	ldbu	r2,-32523(gp)
 4004810:	10803fcc 	andi	r2,r2,255
 4004814:	10800058 	cmpnei	r2,r2,1
 4004818:	1000171e 	bne	r2,zero,4004878 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400481c:	0005303a 	rdctl	r2,status
 4004820:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004824:	e0fffe17 	ldw	r3,-8(fp)
 4004828:	00bfff84 	movi	r2,-2
 400482c:	1884703a 	and	r2,r3,r2
 4004830:	1001703a 	wrctl	status,r2
  
  return context;
 4004834:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 4004838:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 400483c:	d0a04d03 	ldbu	r2,-32460(gp)
 4004840:	10803fcc 	andi	r2,r2,255
 4004844:	1004c03a 	cmpne	r2,r2,zero
 4004848:	1000071e 	bne	r2,zero,4004868 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 400484c:	d0a03d03 	ldbu	r2,-32524(gp)
 4004850:	10803fcc 	andi	r2,r2,255
 4004854:	10803fe0 	cmpeqi	r2,r2,255
 4004858:	1000031e 	bne	r2,zero,4004868 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 400485c:	d0a03d03 	ldbu	r2,-32524(gp)
 4004860:	10800044 	addi	r2,r2,1
 4004864:	d0a03d05 	stb	r2,-32524(gp)
 4004868:	e0bfff17 	ldw	r2,-4(fp)
 400486c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004870:	e0bffd17 	ldw	r2,-12(fp)
 4004874:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 4004878:	e037883a 	mov	sp,fp
 400487c:	df000017 	ldw	fp,0(sp)
 4004880:	dec00104 	addi	sp,sp,4
 4004884:	f800283a 	ret

04004888 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 4004888:	defff804 	addi	sp,sp,-32
 400488c:	dfc00715 	stw	ra,28(sp)
 4004890:	df000615 	stw	fp,24(sp)
 4004894:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4004898:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 400489c:	d0a03d43 	ldbu	r2,-32523(gp)
 40048a0:	10803fcc 	andi	r2,r2,255
 40048a4:	10800058 	cmpnei	r2,r2,1
 40048a8:	10002b1e 	bne	r2,zero,4004958 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40048ac:	0005303a 	rdctl	r2,status
 40048b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40048b4:	e0fffe17 	ldw	r3,-8(fp)
 40048b8:	00bfff84 	movi	r2,-2
 40048bc:	1884703a 	and	r2,r3,r2
 40048c0:	1001703a 	wrctl	status,r2
  
  return context;
 40048c4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 40048c8:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 40048cc:	d0a03d03 	ldbu	r2,-32524(gp)
 40048d0:	10803fcc 	andi	r2,r2,255
 40048d4:	1005003a 	cmpeq	r2,r2,zero
 40048d8:	10001b1e 	bne	r2,zero,4004948 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 40048dc:	d0a03d03 	ldbu	r2,-32524(gp)
 40048e0:	10bfffc4 	addi	r2,r2,-1
 40048e4:	d0a03d05 	stb	r2,-32524(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 40048e8:	d0a03d03 	ldbu	r2,-32524(gp)
 40048ec:	10803fcc 	andi	r2,r2,255
 40048f0:	1004c03a 	cmpne	r2,r2,zero
 40048f4:	10000f1e 	bne	r2,zero,4004934 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 40048f8:	d0a04d03 	ldbu	r2,-32460(gp)
 40048fc:	10803fcc 	andi	r2,r2,255
 4004900:	1004c03a 	cmpne	r2,r2,zero
 4004904:	1000061e 	bne	r2,zero,4004920 <OSSchedUnlock+0x98>
 4004908:	e0bfff17 	ldw	r2,-4(fp)
 400490c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004910:	e0bffd17 	ldw	r2,-12(fp)
 4004914:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 4004918:	40057540 	call	4005754 <OS_Sched>
 400491c:	00000e06 	br	4004958 <OSSchedUnlock+0xd0>
 4004920:	e0bfff17 	ldw	r2,-4(fp)
 4004924:	e0bffc15 	stw	r2,-16(fp)
 4004928:	e0bffc17 	ldw	r2,-16(fp)
 400492c:	1001703a 	wrctl	status,r2
 4004930:	00000906 	br	4004958 <OSSchedUnlock+0xd0>
 4004934:	e0bfff17 	ldw	r2,-4(fp)
 4004938:	e0bffb15 	stw	r2,-20(fp)
 400493c:	e0bffb17 	ldw	r2,-20(fp)
 4004940:	1001703a 	wrctl	status,r2
 4004944:	00000406 	br	4004958 <OSSchedUnlock+0xd0>
 4004948:	e0bfff17 	ldw	r2,-4(fp)
 400494c:	e0bffa15 	stw	r2,-24(fp)
 4004950:	e0bffa17 	ldw	r2,-24(fp)
 4004954:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 4004958:	e037883a 	mov	sp,fp
 400495c:	dfc00117 	ldw	ra,4(sp)
 4004960:	df000017 	ldw	fp,0(sp)
 4004964:	dec00204 	addi	sp,sp,8
 4004968:	f800283a 	ret

0400496c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 400496c:	defffd04 	addi	sp,sp,-12
 4004970:	dfc00215 	stw	ra,8(sp)
 4004974:	df000115 	stw	fp,4(sp)
 4004978:	df000104 	addi	fp,sp,4
    INT8U y;
    INT8U x;

    if (OSRunning == OS_FALSE) {
 400497c:	d0a03d43 	ldbu	r2,-32523(gp)
 4004980:	10803fcc 	andi	r2,r2,255
 4004984:	1004c03a 	cmpne	r2,r2,zero
 4004988:	10000f1e 	bne	r2,zero,40049c8 <OSStart+0x5c>
    	// y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
		// x             = OSUnMapTbl[OSRdyTbl[y]];
		// OSPrioHighRdy = (INT8U)((y << 3) + x);
		// Modified
        OSNextTask();
 400498c:	40058380 	call	4005838 <OSNextTask>
        OSPrioCur     = OSPrioHighRdy;
 4004990:	d0a03f03 	ldbu	r2,-32516(gp)
 4004994:	d0a03f45 	stb	r2,-32515(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 4004998:	d0a03f03 	ldbu	r2,-32516(gp)
 400499c:	10803fcc 	andi	r2,r2,255
 40049a0:	00c100b4 	movhi	r3,1026
 40049a4:	18ceef04 	addi	r3,r3,15292
 40049a8:	1085883a 	add	r2,r2,r2
 40049ac:	1085883a 	add	r2,r2,r2
 40049b0:	10c5883a 	add	r2,r2,r3
 40049b4:	10800017 	ldw	r2,0(r2)
 40049b8:	d0a04715 	stw	r2,-32484(gp)
        OSTCBCur      = OSTCBHighRdy;
 40049bc:	d0a04717 	ldw	r2,-32484(gp)
 40049c0:	d0a04e15 	stw	r2,-32456(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 40049c4:	400eae00 	call	400eae0 <OSStartHighRdy>
    }
}
 40049c8:	e037883a 	mov	sp,fp
 40049cc:	dfc00117 	ldw	ra,4(sp)
 40049d0:	df000017 	ldw	fp,0(sp)
 40049d4:	dec00204 	addi	sp,sp,8
 40049d8:	f800283a 	ret

040049dc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 40049dc:	defff904 	addi	sp,sp,-28
 40049e0:	dfc00615 	stw	ra,24(sp)
 40049e4:	df000515 	stw	fp,20(sp)
 40049e8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40049ec:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 40049f0:	01000084 	movi	r4,2
 40049f4:	400bb640 	call	400bb64 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40049f8:	0005303a 	rdctl	r2,status
 40049fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004a00:	e0fffe17 	ldw	r3,-8(fp)
 4004a04:	00bfff84 	movi	r2,-2
 4004a08:	1884703a 	and	r2,r3,r2
 4004a0c:	1001703a 	wrctl	status,r2
  
  return context;
 4004a10:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 4004a14:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 4004a18:	d0203e15 	stw	zero,-32520(gp)
 4004a1c:	e0bfff17 	ldw	r2,-4(fp)
 4004a20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004a24:	e0bffd17 	ldw	r2,-12(fp)
 4004a28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 4004a2c:	01000284 	movi	r4,10
 4004a30:	400bb640 	call	400bb64 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004a34:	0005303a 	rdctl	r2,status
 4004a38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004a3c:	e0fffc17 	ldw	r3,-16(fp)
 4004a40:	00bfff84 	movi	r2,-2
 4004a44:	1884703a 	and	r2,r3,r2
 4004a48:	1001703a 	wrctl	status,r2
  
  return context;
 4004a4c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 4004a50:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 4004a54:	d0a03e17 	ldw	r2,-32520(gp)
 4004a58:	d0a04315 	stw	r2,-32500(gp)
    OSStatRdy    = OS_TRUE;
 4004a5c:	00800044 	movi	r2,1
 4004a60:	d0a05105 	stb	r2,-32444(gp)
 4004a64:	e0bfff17 	ldw	r2,-4(fp)
 4004a68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004a6c:	e0bffb17 	ldw	r2,-20(fp)
 4004a70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4004a74:	e037883a 	mov	sp,fp
 4004a78:	dfc00117 	ldw	ra,4(sp)
 4004a7c:	df000017 	ldw	fp,0(sp)
 4004a80:	dec00204 	addi	sp,sp,8
 4004a84:	f800283a 	ret

04004a88 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 4004a88:	defff604 	addi	sp,sp,-40
 4004a8c:	dfc00915 	stw	ra,36(sp)
 4004a90:	df000815 	stw	fp,32(sp)
 4004a94:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4004a98:	e03ffc15 	stw	zero,-16(fp)
    // Modified
	/*OS_ENTER_CRITICAL();
	if (OSRunning == OS_TRUE)
		OSTCBCur->compTime--;
	OS_EXIT_CRITICAL();*/
    OSTCBCur->compTime--;
 4004a9c:	d0e04e17 	ldw	r3,-32456(gp)
 4004aa0:	18801b03 	ldbu	r2,108(r3)
 4004aa4:	10bfffc4 	addi	r2,r2,-1
 4004aa8:	18801b05 	stb	r2,108(r3)

#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 4004aac:	400eeac0 	call	400eeac <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004ab0:	0005303a 	rdctl	r2,status
 4004ab4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004ab8:	e0fffb17 	ldw	r3,-20(fp)
 4004abc:	00bfff84 	movi	r2,-2
 4004ac0:	1884703a 	and	r2,r3,r2
 4004ac4:	1001703a 	wrctl	status,r2
  
  return context;
 4004ac8:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 4004acc:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 4004ad0:	d0a04f17 	ldw	r2,-32452(gp)
 4004ad4:	10800044 	addi	r2,r2,1
 4004ad8:	d0a04f15 	stw	r2,-32452(gp)
 4004adc:	e0bffc17 	ldw	r2,-16(fp)
 4004ae0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004ae4:	e0bffa17 	ldw	r2,-24(fp)
 4004ae8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 4004aec:	d0a03d43 	ldbu	r2,-32523(gp)
 4004af0:	10803fcc 	andi	r2,r2,255
 4004af4:	10800058 	cmpnei	r2,r2,1
 4004af8:	1000721e 	bne	r2,zero,4004cc4 <OSTimeTick+0x23c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 4004afc:	d0a04103 	ldbu	r2,-32508(gp)
 4004b00:	10803fcc 	andi	r2,r2,255
 4004b04:	e0bfff15 	stw	r2,-4(fp)
 4004b08:	e0ffff17 	ldw	r3,-4(fp)
 4004b0c:	18800060 	cmpeqi	r2,r3,1
 4004b10:	10000a1e 	bne	r2,zero,4004b3c <OSTimeTick+0xb4>
 4004b14:	e0ffff17 	ldw	r3,-4(fp)
 4004b18:	188000a0 	cmpeqi	r2,r3,2
 4004b1c:	1000091e 	bne	r2,zero,4004b44 <OSTimeTick+0xbc>
 4004b20:	e0ffff17 	ldw	r3,-4(fp)
 4004b24:	1805003a 	cmpeq	r2,r3,zero
 4004b28:	1000011e 	bne	r2,zero,4004b30 <OSTimeTick+0xa8>
 4004b2c:	00000a06 	br	4004b58 <OSTimeTick+0xd0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 4004b30:	00800044 	movi	r2,1
 4004b34:	e0bffd05 	stb	r2,-12(fp)
                 break;
 4004b38:	00000a06 	br	4004b64 <OSTimeTick+0xdc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 4004b3c:	e03ffd05 	stb	zero,-12(fp)
                 break;
 4004b40:	00000806 	br	4004b64 <OSTimeTick+0xdc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 4004b44:	00800044 	movi	r2,1
 4004b48:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 4004b4c:	00800044 	movi	r2,1
 4004b50:	d0a04105 	stb	r2,-32508(gp)
                 break;
 4004b54:	00000306 	br	4004b64 <OSTimeTick+0xdc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 4004b58:	00800044 	movi	r2,1
 4004b5c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 4004b60:	d0204105 	stb	zero,-32508(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 4004b64:	e0bffd03 	ldbu	r2,-12(fp)
 4004b68:	1005003a 	cmpeq	r2,r2,zero
 4004b6c:	1000551e 	bne	r2,zero,4004cc4 <OSTimeTick+0x23c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 4004b70:	d0a04017 	ldw	r2,-32512(gp)
 4004b74:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4004b78:	00004d06 	br	4004cb0 <OSTimeTick+0x228>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004b7c:	0005303a 	rdctl	r2,status
 4004b80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004b84:	e0fff917 	ldw	r3,-28(fp)
 4004b88:	00bfff84 	movi	r2,-2
 4004b8c:	1884703a 	and	r2,r3,r2
 4004b90:	1001703a 	wrctl	status,r2
  
  return context;
 4004b94:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 4004b98:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 4004b9c:	e0bffe17 	ldw	r2,-8(fp)
 4004ba0:	10800b8b 	ldhu	r2,46(r2)
 4004ba4:	10bfffcc 	andi	r2,r2,65535
 4004ba8:	1005003a 	cmpeq	r2,r2,zero
 4004bac:	1000391e 	bne	r2,zero,4004c94 <OSTimeTick+0x20c>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 4004bb0:	e0bffe17 	ldw	r2,-8(fp)
 4004bb4:	10800b8b 	ldhu	r2,46(r2)
 4004bb8:	10bfffc4 	addi	r2,r2,-1
 4004bbc:	1007883a 	mov	r3,r2
 4004bc0:	e0bffe17 	ldw	r2,-8(fp)
 4004bc4:	10c00b8d 	sth	r3,46(r2)
 4004bc8:	e0bffe17 	ldw	r2,-8(fp)
 4004bcc:	10800b8b 	ldhu	r2,46(r2)
 4004bd0:	10bfffcc 	andi	r2,r2,65535
 4004bd4:	1004c03a 	cmpne	r2,r2,zero
 4004bd8:	10002e1e 	bne	r2,zero,4004c94 <OSTimeTick+0x20c>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4004bdc:	e0bffe17 	ldw	r2,-8(fp)
 4004be0:	10800c03 	ldbu	r2,48(r2)
 4004be4:	10803fcc 	andi	r2,r2,255
 4004be8:	10800dcc 	andi	r2,r2,55
 4004bec:	1005003a 	cmpeq	r2,r2,zero
 4004bf0:	10000b1e 	bne	r2,zero,4004c20 <OSTimeTick+0x198>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 4004bf4:	e0bffe17 	ldw	r2,-8(fp)
 4004bf8:	10c00c03 	ldbu	r3,48(r2)
 4004bfc:	00bff204 	movi	r2,-56
 4004c00:	1884703a 	and	r2,r3,r2
 4004c04:	1007883a 	mov	r3,r2
 4004c08:	e0bffe17 	ldw	r2,-8(fp)
 4004c0c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 4004c10:	e0fffe17 	ldw	r3,-8(fp)
 4004c14:	00800044 	movi	r2,1
 4004c18:	18800c45 	stb	r2,49(r3)
 4004c1c:	00000206 	br	4004c28 <OSTimeTick+0x1a0>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 4004c20:	e0bffe17 	ldw	r2,-8(fp)
 4004c24:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 4004c28:	e0bffe17 	ldw	r2,-8(fp)
 4004c2c:	10800c03 	ldbu	r2,48(r2)
 4004c30:	10803fcc 	andi	r2,r2,255
 4004c34:	1080020c 	andi	r2,r2,8
 4004c38:	1004c03a 	cmpne	r2,r2,zero
 4004c3c:	1000151e 	bne	r2,zero,4004c94 <OSTimeTick+0x20c>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 4004c40:	e0bffe17 	ldw	r2,-8(fp)
 4004c44:	10c00d83 	ldbu	r3,54(r2)
 4004c48:	d0a04903 	ldbu	r2,-32476(gp)
 4004c4c:	1884b03a 	or	r2,r3,r2
 4004c50:	d0a04905 	stb	r2,-32476(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4004c54:	e0bffe17 	ldw	r2,-8(fp)
 4004c58:	10800d03 	ldbu	r2,52(r2)
 4004c5c:	11003fcc 	andi	r4,r2,255
 4004c60:	e0bffe17 	ldw	r2,-8(fp)
 4004c64:	10800d03 	ldbu	r2,52(r2)
 4004c68:	10c03fcc 	andi	r3,r2,255
 4004c6c:	d0a04944 	addi	r2,gp,-32475
 4004c70:	1885883a 	add	r2,r3,r2
 4004c74:	10c00003 	ldbu	r3,0(r2)
 4004c78:	e0bffe17 	ldw	r2,-8(fp)
 4004c7c:	10800d43 	ldbu	r2,53(r2)
 4004c80:	1884b03a 	or	r2,r3,r2
 4004c84:	1007883a 	mov	r3,r2
 4004c88:	d0a04944 	addi	r2,gp,-32475
 4004c8c:	2085883a 	add	r2,r4,r2
 4004c90:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 4004c94:	e0bffe17 	ldw	r2,-8(fp)
 4004c98:	10800517 	ldw	r2,20(r2)
 4004c9c:	e0bffe15 	stw	r2,-8(fp)
 4004ca0:	e0bffc17 	ldw	r2,-16(fp)
 4004ca4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004ca8:	e0bff817 	ldw	r2,-32(fp)
 4004cac:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4004cb0:	e0bffe17 	ldw	r2,-8(fp)
 4004cb4:	10800c83 	ldbu	r2,50(r2)
 4004cb8:	10803fcc 	andi	r2,r2,255
 4004cbc:	10800fd8 	cmpnei	r2,r2,63
 4004cc0:	103fae1e 	bne	r2,zero,4004b7c <OSTimeTick+0xf4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 4004cc4:	e037883a 	mov	sp,fp
 4004cc8:	dfc00117 	ldw	ra,4(sp)
 4004ccc:	df000017 	ldw	fp,0(sp)
 4004cd0:	dec00204 	addi	sp,sp,8
 4004cd4:	f800283a 	ret

04004cd8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 4004cd8:	deffff04 	addi	sp,sp,-4
 4004cdc:	df000015 	stw	fp,0(sp)
 4004ce0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 4004ce4:	00804784 	movi	r2,286
}
 4004ce8:	e037883a 	mov	sp,fp
 4004cec:	df000017 	ldw	fp,0(sp)
 4004cf0:	dec00104 	addi	sp,sp,4
 4004cf4:	f800283a 	ret

04004cf8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 4004cf8:	deffff04 	addi	sp,sp,-4
 4004cfc:	df000015 	stw	fp,0(sp)
 4004d00:	d839883a 	mov	fp,sp
}
 4004d04:	e037883a 	mov	sp,fp
 4004d08:	df000017 	ldw	fp,0(sp)
 4004d0c:	dec00104 	addi	sp,sp,4
 4004d10:	f800283a 	ret

04004d14 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 4004d14:	defff804 	addi	sp,sp,-32
 4004d18:	dfc00715 	stw	ra,28(sp)
 4004d1c:	df000615 	stw	fp,24(sp)
 4004d20:	df000604 	addi	fp,sp,24
 4004d24:	e13ffc15 	stw	r4,-16(fp)
 4004d28:	e17ffd15 	stw	r5,-12(fp)
 4004d2c:	e1bffe05 	stb	r6,-8(fp)
 4004d30:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 4004d34:	e0bffc17 	ldw	r2,-16(fp)
 4004d38:	10800283 	ldbu	r2,10(r2)
 4004d3c:	10c03fcc 	andi	r3,r2,255
 4004d40:	00810074 	movhi	r2,1025
 4004d44:	1099d804 	addi	r2,r2,26464
 4004d48:	10c5883a 	add	r2,r2,r3
 4004d4c:	10800003 	ldbu	r2,0(r2)
 4004d50:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 4004d54:	e0fffa83 	ldbu	r3,-22(fp)
 4004d58:	e0bffc17 	ldw	r2,-16(fp)
 4004d5c:	1885883a 	add	r2,r3,r2
 4004d60:	10800204 	addi	r2,r2,8
 4004d64:	108000c3 	ldbu	r2,3(r2)
 4004d68:	10c03fcc 	andi	r3,r2,255
 4004d6c:	00810074 	movhi	r2,1025
 4004d70:	1099d804 	addi	r2,r2,26464
 4004d74:	10c5883a 	add	r2,r2,r3
 4004d78:	10800003 	ldbu	r2,0(r2)
 4004d7c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 4004d80:	e0bffa83 	ldbu	r2,-22(fp)
 4004d84:	100490fa 	slli	r2,r2,3
 4004d88:	1007883a 	mov	r3,r2
 4004d8c:	e0bffa43 	ldbu	r2,-23(fp)
 4004d90:	1885883a 	add	r2,r3,r2
 4004d94:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 4004d98:	e0bffa03 	ldbu	r2,-24(fp)
 4004d9c:	00c100b4 	movhi	r3,1026
 4004da0:	18ceef04 	addi	r3,r3,15292
 4004da4:	1085883a 	add	r2,r2,r2
 4004da8:	1085883a 	add	r2,r2,r2
 4004dac:	10c5883a 	add	r2,r2,r3
 4004db0:	10800017 	ldw	r2,0(r2)
 4004db4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 4004db8:	e0bffb17 	ldw	r2,-20(fp)
 4004dbc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 4004dc0:	e0fffb17 	ldw	r3,-20(fp)
 4004dc4:	e0bffd17 	ldw	r2,-12(fp)
 4004dc8:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 4004dcc:	e0bffb17 	ldw	r2,-20(fp)
 4004dd0:	10800c03 	ldbu	r2,48(r2)
 4004dd4:	1007883a 	mov	r3,r2
 4004dd8:	e0bffe03 	ldbu	r2,-8(fp)
 4004ddc:	0084303a 	nor	r2,zero,r2
 4004de0:	1884703a 	and	r2,r3,r2
 4004de4:	1007883a 	mov	r3,r2
 4004de8:	e0bffb17 	ldw	r2,-20(fp)
 4004dec:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 4004df0:	e0fffb17 	ldw	r3,-20(fp)
 4004df4:	e0bfff03 	ldbu	r2,-4(fp)
 4004df8:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 4004dfc:	e0bffb17 	ldw	r2,-20(fp)
 4004e00:	10800c03 	ldbu	r2,48(r2)
 4004e04:	10803fcc 	andi	r2,r2,255
 4004e08:	1080020c 	andi	r2,r2,8
 4004e0c:	1004c03a 	cmpne	r2,r2,zero
 4004e10:	1000111e 	bne	r2,zero,4004e58 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 4004e14:	e0bffb17 	ldw	r2,-20(fp)
 4004e18:	10c00d83 	ldbu	r3,54(r2)
 4004e1c:	d0a04903 	ldbu	r2,-32476(gp)
 4004e20:	1884b03a 	or	r2,r3,r2
 4004e24:	d0a04905 	stb	r2,-32476(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 4004e28:	e13ffa83 	ldbu	r4,-22(fp)
 4004e2c:	e0fffa83 	ldbu	r3,-22(fp)
 4004e30:	d0a04944 	addi	r2,gp,-32475
 4004e34:	1885883a 	add	r2,r3,r2
 4004e38:	10c00003 	ldbu	r3,0(r2)
 4004e3c:	e0bffb17 	ldw	r2,-20(fp)
 4004e40:	10800d43 	ldbu	r2,53(r2)
 4004e44:	1884b03a 	or	r2,r3,r2
 4004e48:	1007883a 	mov	r3,r2
 4004e4c:	d0a04944 	addi	r2,gp,-32475
 4004e50:	2085883a 	add	r2,r4,r2
 4004e54:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 4004e58:	e13ffb17 	ldw	r4,-20(fp)
 4004e5c:	e17ffc17 	ldw	r5,-16(fp)
 4004e60:	400510c0 	call	400510c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 4004e64:	e0bffb17 	ldw	r2,-20(fp)
 4004e68:	10800817 	ldw	r2,32(r2)
 4004e6c:	1005003a 	cmpeq	r2,r2,zero
 4004e70:	1000071e 	bne	r2,zero,4004e90 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 4004e74:	e0bffb17 	ldw	r2,-20(fp)
 4004e78:	11400817 	ldw	r5,32(r2)
 4004e7c:	e13ffb17 	ldw	r4,-20(fp)
 4004e80:	40051c40 	call	40051c4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 4004e84:	e0fffb17 	ldw	r3,-20(fp)
 4004e88:	e0bffc17 	ldw	r2,-16(fp)
 4004e8c:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 4004e90:	e0bffa03 	ldbu	r2,-24(fp)
}
 4004e94:	e037883a 	mov	sp,fp
 4004e98:	dfc00117 	ldw	ra,4(sp)
 4004e9c:	df000017 	ldw	fp,0(sp)
 4004ea0:	dec00204 	addi	sp,sp,8
 4004ea4:	f800283a 	ret

04004ea8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 4004ea8:	defffd04 	addi	sp,sp,-12
 4004eac:	df000215 	stw	fp,8(sp)
 4004eb0:	df000204 	addi	fp,sp,8
 4004eb4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 4004eb8:	d0e04e17 	ldw	r3,-32456(gp)
 4004ebc:	e0bfff17 	ldw	r2,-4(fp)
 4004ec0:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 4004ec4:	d0a04e17 	ldw	r2,-32456(gp)
 4004ec8:	10800d03 	ldbu	r2,52(r2)
 4004ecc:	11003fcc 	andi	r4,r2,255
 4004ed0:	d0a04e17 	ldw	r2,-32456(gp)
 4004ed4:	10800d03 	ldbu	r2,52(r2)
 4004ed8:	10c03fcc 	andi	r3,r2,255
 4004edc:	e0bfff17 	ldw	r2,-4(fp)
 4004ee0:	1885883a 	add	r2,r3,r2
 4004ee4:	10800204 	addi	r2,r2,8
 4004ee8:	10c000c3 	ldbu	r3,3(r2)
 4004eec:	d0a04e17 	ldw	r2,-32456(gp)
 4004ef0:	10800d43 	ldbu	r2,53(r2)
 4004ef4:	1884b03a 	or	r2,r3,r2
 4004ef8:	1007883a 	mov	r3,r2
 4004efc:	e0bfff17 	ldw	r2,-4(fp)
 4004f00:	2085883a 	add	r2,r4,r2
 4004f04:	10800204 	addi	r2,r2,8
 4004f08:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 4004f0c:	e0bfff17 	ldw	r2,-4(fp)
 4004f10:	10c00283 	ldbu	r3,10(r2)
 4004f14:	d0a04e17 	ldw	r2,-32456(gp)
 4004f18:	10800d83 	ldbu	r2,54(r2)
 4004f1c:	1884b03a 	or	r2,r3,r2
 4004f20:	1007883a 	mov	r3,r2
 4004f24:	e0bfff17 	ldw	r2,-4(fp)
 4004f28:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 4004f2c:	d0a04e17 	ldw	r2,-32456(gp)
 4004f30:	10800d03 	ldbu	r2,52(r2)
 4004f34:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 4004f38:	e13ffe03 	ldbu	r4,-8(fp)
 4004f3c:	e0fffe03 	ldbu	r3,-8(fp)
 4004f40:	d0a04944 	addi	r2,gp,-32475
 4004f44:	1885883a 	add	r2,r3,r2
 4004f48:	10800003 	ldbu	r2,0(r2)
 4004f4c:	1007883a 	mov	r3,r2
 4004f50:	d0a04e17 	ldw	r2,-32456(gp)
 4004f54:	10800d43 	ldbu	r2,53(r2)
 4004f58:	0084303a 	nor	r2,zero,r2
 4004f5c:	1884703a 	and	r2,r3,r2
 4004f60:	1007883a 	mov	r3,r2
 4004f64:	d0a04944 	addi	r2,gp,-32475
 4004f68:	2085883a 	add	r2,r4,r2
 4004f6c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 4004f70:	e0fffe03 	ldbu	r3,-8(fp)
 4004f74:	d0a04944 	addi	r2,gp,-32475
 4004f78:	1885883a 	add	r2,r3,r2
 4004f7c:	10800003 	ldbu	r2,0(r2)
 4004f80:	10803fcc 	andi	r2,r2,255
 4004f84:	1004c03a 	cmpne	r2,r2,zero
 4004f88:	1000071e 	bne	r2,zero,4004fa8 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4004f8c:	d0a04e17 	ldw	r2,-32456(gp)
 4004f90:	10800d83 	ldbu	r2,54(r2)
 4004f94:	0084303a 	nor	r2,zero,r2
 4004f98:	1007883a 	mov	r3,r2
 4004f9c:	d0a04903 	ldbu	r2,-32476(gp)
 4004fa0:	1884703a 	and	r2,r3,r2
 4004fa4:	d0a04905 	stb	r2,-32476(gp)
    }
}
 4004fa8:	e037883a 	mov	sp,fp
 4004fac:	df000017 	ldw	fp,0(sp)
 4004fb0:	dec00104 	addi	sp,sp,4
 4004fb4:	f800283a 	ret

04004fb8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 4004fb8:	defffb04 	addi	sp,sp,-20
 4004fbc:	df000415 	stw	fp,16(sp)
 4004fc0:	df000404 	addi	fp,sp,16
 4004fc4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 4004fc8:	d0a04e17 	ldw	r2,-32456(gp)
 4004fcc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 4004fd0:	d0e04e17 	ldw	r3,-32456(gp)
 4004fd4:	e0bfff17 	ldw	r2,-4(fp)
 4004fd8:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 4004fdc:	e0bfff17 	ldw	r2,-4(fp)
 4004fe0:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 4004fe4:	e0bffe17 	ldw	r2,-8(fp)
 4004fe8:	10800017 	ldw	r2,0(r2)
 4004fec:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4004ff0:	00002006 	br	4005074 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 4004ff4:	d0a04e17 	ldw	r2,-32456(gp)
 4004ff8:	10800d03 	ldbu	r2,52(r2)
 4004ffc:	11003fcc 	andi	r4,r2,255
 4005000:	d0a04e17 	ldw	r2,-32456(gp)
 4005004:	10800d03 	ldbu	r2,52(r2)
 4005008:	10c03fcc 	andi	r3,r2,255
 400500c:	e0bffd17 	ldw	r2,-12(fp)
 4005010:	1885883a 	add	r2,r3,r2
 4005014:	10800204 	addi	r2,r2,8
 4005018:	10c000c3 	ldbu	r3,3(r2)
 400501c:	d0a04e17 	ldw	r2,-32456(gp)
 4005020:	10800d43 	ldbu	r2,53(r2)
 4005024:	1884b03a 	or	r2,r3,r2
 4005028:	1007883a 	mov	r3,r2
 400502c:	e0bffd17 	ldw	r2,-12(fp)
 4005030:	2085883a 	add	r2,r4,r2
 4005034:	10800204 	addi	r2,r2,8
 4005038:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400503c:	e0bffd17 	ldw	r2,-12(fp)
 4005040:	10c00283 	ldbu	r3,10(r2)
 4005044:	d0a04e17 	ldw	r2,-32456(gp)
 4005048:	10800d83 	ldbu	r2,54(r2)
 400504c:	1884b03a 	or	r2,r3,r2
 4005050:	1007883a 	mov	r3,r2
 4005054:	e0bffd17 	ldw	r2,-12(fp)
 4005058:	10c00285 	stb	r3,10(r2)
        pevents++;
 400505c:	e0bffe17 	ldw	r2,-8(fp)
 4005060:	10800104 	addi	r2,r2,4
 4005064:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 4005068:	e0bffe17 	ldw	r2,-8(fp)
 400506c:	10800017 	ldw	r2,0(r2)
 4005070:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4005074:	e0bffd17 	ldw	r2,-12(fp)
 4005078:	1004c03a 	cmpne	r2,r2,zero
 400507c:	103fdd1e 	bne	r2,zero,4004ff4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 4005080:	d0a04e17 	ldw	r2,-32456(gp)
 4005084:	10800d03 	ldbu	r2,52(r2)
 4005088:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400508c:	e13ffc03 	ldbu	r4,-16(fp)
 4005090:	e0fffc03 	ldbu	r3,-16(fp)
 4005094:	d0a04944 	addi	r2,gp,-32475
 4005098:	1885883a 	add	r2,r3,r2
 400509c:	10800003 	ldbu	r2,0(r2)
 40050a0:	1007883a 	mov	r3,r2
 40050a4:	d0a04e17 	ldw	r2,-32456(gp)
 40050a8:	10800d43 	ldbu	r2,53(r2)
 40050ac:	0084303a 	nor	r2,zero,r2
 40050b0:	1884703a 	and	r2,r3,r2
 40050b4:	1007883a 	mov	r3,r2
 40050b8:	d0a04944 	addi	r2,gp,-32475
 40050bc:	2085883a 	add	r2,r4,r2
 40050c0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 40050c4:	e0fffc03 	ldbu	r3,-16(fp)
 40050c8:	d0a04944 	addi	r2,gp,-32475
 40050cc:	1885883a 	add	r2,r3,r2
 40050d0:	10800003 	ldbu	r2,0(r2)
 40050d4:	10803fcc 	andi	r2,r2,255
 40050d8:	1004c03a 	cmpne	r2,r2,zero
 40050dc:	1000071e 	bne	r2,zero,40050fc <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 40050e0:	d0a04e17 	ldw	r2,-32456(gp)
 40050e4:	10800d83 	ldbu	r2,54(r2)
 40050e8:	0084303a 	nor	r2,zero,r2
 40050ec:	1007883a 	mov	r3,r2
 40050f0:	d0a04903 	ldbu	r2,-32476(gp)
 40050f4:	1884703a 	and	r2,r3,r2
 40050f8:	d0a04905 	stb	r2,-32476(gp)
    }
}
 40050fc:	e037883a 	mov	sp,fp
 4005100:	df000017 	ldw	fp,0(sp)
 4005104:	dec00104 	addi	sp,sp,4
 4005108:	f800283a 	ret

0400510c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 400510c:	defffc04 	addi	sp,sp,-16
 4005110:	df000315 	stw	fp,12(sp)
 4005114:	df000304 	addi	fp,sp,12
 4005118:	e13ffe15 	stw	r4,-8(fp)
 400511c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 4005120:	e0bffe17 	ldw	r2,-8(fp)
 4005124:	10800d03 	ldbu	r2,52(r2)
 4005128:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 400512c:	e13ffd03 	ldbu	r4,-12(fp)
 4005130:	e0fffd03 	ldbu	r3,-12(fp)
 4005134:	e0bfff17 	ldw	r2,-4(fp)
 4005138:	1885883a 	add	r2,r3,r2
 400513c:	10800204 	addi	r2,r2,8
 4005140:	108000c3 	ldbu	r2,3(r2)
 4005144:	1007883a 	mov	r3,r2
 4005148:	e0bffe17 	ldw	r2,-8(fp)
 400514c:	10800d43 	ldbu	r2,53(r2)
 4005150:	0084303a 	nor	r2,zero,r2
 4005154:	1884703a 	and	r2,r3,r2
 4005158:	1007883a 	mov	r3,r2
 400515c:	e0bfff17 	ldw	r2,-4(fp)
 4005160:	2085883a 	add	r2,r4,r2
 4005164:	10800204 	addi	r2,r2,8
 4005168:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 400516c:	e0fffd03 	ldbu	r3,-12(fp)
 4005170:	e0bfff17 	ldw	r2,-4(fp)
 4005174:	1885883a 	add	r2,r3,r2
 4005178:	10800204 	addi	r2,r2,8
 400517c:	108000c3 	ldbu	r2,3(r2)
 4005180:	10803fcc 	andi	r2,r2,255
 4005184:	1004c03a 	cmpne	r2,r2,zero
 4005188:	10000a1e 	bne	r2,zero,40051b4 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 400518c:	e0bfff17 	ldw	r2,-4(fp)
 4005190:	10800283 	ldbu	r2,10(r2)
 4005194:	1007883a 	mov	r3,r2
 4005198:	e0bffe17 	ldw	r2,-8(fp)
 400519c:	10800d83 	ldbu	r2,54(r2)
 40051a0:	0084303a 	nor	r2,zero,r2
 40051a4:	1884703a 	and	r2,r3,r2
 40051a8:	1007883a 	mov	r3,r2
 40051ac:	e0bfff17 	ldw	r2,-4(fp)
 40051b0:	10c00285 	stb	r3,10(r2)
    }
}
 40051b4:	e037883a 	mov	sp,fp
 40051b8:	df000017 	ldw	fp,0(sp)
 40051bc:	dec00104 	addi	sp,sp,4
 40051c0:	f800283a 	ret

040051c4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 40051c4:	defffa04 	addi	sp,sp,-24
 40051c8:	df000515 	stw	fp,20(sp)
 40051cc:	df000504 	addi	fp,sp,20
 40051d0:	e13ffe15 	stw	r4,-8(fp)
 40051d4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 40051d8:	e0bffe17 	ldw	r2,-8(fp)
 40051dc:	10800d03 	ldbu	r2,52(r2)
 40051e0:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 40051e4:	e0bffe17 	ldw	r2,-8(fp)
 40051e8:	10800d83 	ldbu	r2,54(r2)
 40051ec:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 40051f0:	e0bffe17 	ldw	r2,-8(fp)
 40051f4:	10800d43 	ldbu	r2,53(r2)
 40051f8:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 40051fc:	e0bfff17 	ldw	r2,-4(fp)
 4005200:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 4005204:	e0bffd17 	ldw	r2,-12(fp)
 4005208:	10800017 	ldw	r2,0(r2)
 400520c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 4005210:	00002606 	br	40052ac <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 4005214:	e13ffb83 	ldbu	r4,-18(fp)
 4005218:	e0fffb83 	ldbu	r3,-18(fp)
 400521c:	e0bffc17 	ldw	r2,-16(fp)
 4005220:	1885883a 	add	r2,r3,r2
 4005224:	10800204 	addi	r2,r2,8
 4005228:	108000c3 	ldbu	r2,3(r2)
 400522c:	1007883a 	mov	r3,r2
 4005230:	e0bffb03 	ldbu	r2,-20(fp)
 4005234:	0084303a 	nor	r2,zero,r2
 4005238:	1884703a 	and	r2,r3,r2
 400523c:	1007883a 	mov	r3,r2
 4005240:	e0bffc17 	ldw	r2,-16(fp)
 4005244:	2085883a 	add	r2,r4,r2
 4005248:	10800204 	addi	r2,r2,8
 400524c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 4005250:	e0fffb83 	ldbu	r3,-18(fp)
 4005254:	e0bffc17 	ldw	r2,-16(fp)
 4005258:	1885883a 	add	r2,r3,r2
 400525c:	10800204 	addi	r2,r2,8
 4005260:	108000c3 	ldbu	r2,3(r2)
 4005264:	10803fcc 	andi	r2,r2,255
 4005268:	1004c03a 	cmpne	r2,r2,zero
 400526c:	1000091e 	bne	r2,zero,4005294 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 4005270:	e0bffc17 	ldw	r2,-16(fp)
 4005274:	10800283 	ldbu	r2,10(r2)
 4005278:	1007883a 	mov	r3,r2
 400527c:	e0bffb43 	ldbu	r2,-19(fp)
 4005280:	0084303a 	nor	r2,zero,r2
 4005284:	1884703a 	and	r2,r3,r2
 4005288:	1007883a 	mov	r3,r2
 400528c:	e0bffc17 	ldw	r2,-16(fp)
 4005290:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 4005294:	e0bffd17 	ldw	r2,-12(fp)
 4005298:	10800104 	addi	r2,r2,4
 400529c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 40052a0:	e0bffd17 	ldw	r2,-12(fp)
 40052a4:	10800017 	ldw	r2,0(r2)
 40052a8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 40052ac:	e0bffc17 	ldw	r2,-16(fp)
 40052b0:	1004c03a 	cmpne	r2,r2,zero
 40052b4:	103fd71e 	bne	r2,zero,4005214 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 40052b8:	e037883a 	mov	sp,fp
 40052bc:	df000017 	ldw	fp,0(sp)
 40052c0:	dec00104 	addi	sp,sp,4
 40052c4:	f800283a 	ret

040052c8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 40052c8:	defffc04 	addi	sp,sp,-16
 40052cc:	df000315 	stw	fp,12(sp)
 40052d0:	df000304 	addi	fp,sp,12
 40052d4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 40052d8:	e0bfff17 	ldw	r2,-4(fp)
 40052dc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 40052e0:	e0bfff17 	ldw	r2,-4(fp)
 40052e4:	108002c4 	addi	r2,r2,11
 40052e8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40052ec:	e03ffd05 	stb	zero,-12(fp)
 40052f0:	00000806 	br	4005314 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 40052f4:	e0bffe17 	ldw	r2,-8(fp)
 40052f8:	10000005 	stb	zero,0(r2)
 40052fc:	e0bffe17 	ldw	r2,-8(fp)
 4005300:	10800044 	addi	r2,r2,1
 4005304:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4005308:	e0bffd03 	ldbu	r2,-12(fp)
 400530c:	10800044 	addi	r2,r2,1
 4005310:	e0bffd05 	stb	r2,-12(fp)
 4005314:	e0bffd03 	ldbu	r2,-12(fp)
 4005318:	10800230 	cmpltui	r2,r2,8
 400531c:	103ff51e 	bne	r2,zero,40052f4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 4005320:	e037883a 	mov	sp,fp
 4005324:	df000017 	ldw	fp,0(sp)
 4005328:	dec00104 	addi	sp,sp,4
 400532c:	f800283a 	ret

04005330 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 4005330:	defffb04 	addi	sp,sp,-20
 4005334:	dfc00415 	stw	ra,16(sp)
 4005338:	df000315 	stw	fp,12(sp)
 400533c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 4005340:	010100b4 	movhi	r4,1026
 4005344:	210a8704 	addi	r4,r4,10780
 4005348:	01430c04 	movi	r5,3120
 400534c:	40056940 	call	4005694 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 4005350:	008100b4 	movhi	r2,1026
 4005354:	108a8704 	addi	r2,r2,10780
 4005358:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 400535c:	008100b4 	movhi	r2,1026
 4005360:	108a9404 	addi	r2,r2,10832
 4005364:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4005368:	e03fff0d 	sth	zero,-4(fp)
 400536c:	00001306 	br	40053bc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4005370:	e0bffe17 	ldw	r2,-8(fp)
 4005374:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 4005378:	e0fffe17 	ldw	r3,-8(fp)
 400537c:	e0bffd17 	ldw	r2,-12(fp)
 4005380:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 4005384:	e0fffe17 	ldw	r3,-8(fp)
 4005388:	00800fc4 	movi	r2,63
 400538c:	188004c5 	stb	r2,19(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 4005390:	e0bffe17 	ldw	r2,-8(fp)
 4005394:	10000505 	stb	zero,20(r2)
#endif
        pevent1++;
 4005398:	e0bffe17 	ldw	r2,-8(fp)
 400539c:	10800d04 	addi	r2,r2,52
 40053a0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 40053a4:	e0bffd17 	ldw	r2,-12(fp)
 40053a8:	10800d04 	addi	r2,r2,52
 40053ac:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 40053b0:	e0bfff0b 	ldhu	r2,-4(fp)
 40053b4:	10800044 	addi	r2,r2,1
 40053b8:	e0bfff0d 	sth	r2,-4(fp)
 40053bc:	e0bfff0b 	ldhu	r2,-4(fp)
 40053c0:	10800ef0 	cmpltui	r2,r2,59
 40053c4:	103fea1e 	bne	r2,zero,4005370 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 40053c8:	e0bffe17 	ldw	r2,-8(fp)
 40053cc:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 40053d0:	e0bffe17 	ldw	r2,-8(fp)
 40053d4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 40053d8:	e0fffe17 	ldw	r3,-8(fp)
 40053dc:	00800fc4 	movi	r2,63
 40053e0:	188004c5 	stb	r2,19(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 40053e4:	e0bffe17 	ldw	r2,-8(fp)
 40053e8:	10000505 	stb	zero,20(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 40053ec:	008100b4 	movhi	r2,1026
 40053f0:	108a8704 	addi	r2,r2,10780
 40053f4:	d0a04c15 	stw	r2,-32464(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 40053f8:	e037883a 	mov	sp,fp
 40053fc:	dfc00117 	ldw	ra,4(sp)
 4005400:	df000017 	ldw	fp,0(sp)
 4005404:	dec00204 	addi	sp,sp,8
 4005408:	f800283a 	ret

0400540c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 400540c:	deffff04 	addi	sp,sp,-4
 4005410:	df000015 	stw	fp,0(sp)
 4005414:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 4005418:	d0204f15 	stw	zero,-32452(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 400541c:	d0204d05 	stb	zero,-32460(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 4005420:	d0203d05 	stb	zero,-32524(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 4005424:	d0204545 	stb	zero,-32491(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 4005428:	d0203d45 	stb	zero,-32523(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 400542c:	d0204215 	stw	zero,-32504(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 4005430:	d0203e15 	stw	zero,-32520(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 4005434:	d0205215 	stw	zero,-32440(gp)
    OSIdleCtrMax  = 0L;
 4005438:	d0204315 	stw	zero,-32500(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 400543c:	d0205105 	stb	zero,-32444(gp)
#endif
}
 4005440:	e037883a 	mov	sp,fp
 4005444:	df000017 	ldw	fp,0(sp)
 4005448:	dec00104 	addi	sp,sp,4
 400544c:	f800283a 	ret

04005450 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 4005450:	defffd04 	addi	sp,sp,-12
 4005454:	df000215 	stw	fp,8(sp)
 4005458:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 400545c:	d0204905 	stb	zero,-32476(gp)
    prdytbl       = &OSRdyTbl[0];
 4005460:	d0a04944 	addi	r2,gp,-32475
 4005464:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 4005468:	e03fff05 	stb	zero,-4(fp)
 400546c:	00000806 	br	4005490 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 4005470:	e0bffe17 	ldw	r2,-8(fp)
 4005474:	10000005 	stb	zero,0(r2)
 4005478:	e0bffe17 	ldw	r2,-8(fp)
 400547c:	10800044 	addi	r2,r2,1
 4005480:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 4005484:	e0bfff03 	ldbu	r2,-4(fp)
 4005488:	10800044 	addi	r2,r2,1
 400548c:	e0bfff05 	stb	r2,-4(fp)
 4005490:	e0bfff03 	ldbu	r2,-4(fp)
 4005494:	10800230 	cmpltui	r2,r2,8
 4005498:	103ff51e 	bne	r2,zero,4005470 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 400549c:	d0203f45 	stb	zero,-32515(gp)
    OSPrioHighRdy = 0;
 40054a0:	d0203f05 	stb	zero,-32516(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 40054a4:	d0204715 	stw	zero,-32484(gp)
    OSTCBCur      = (OS_TCB *)0;
 40054a8:	d0204e15 	stw	zero,-32456(gp)
}
 40054ac:	e037883a 	mov	sp,fp
 40054b0:	df000017 	ldw	fp,0(sp)
 40054b4:	dec00104 	addi	sp,sp,4
 40054b8:	f800283a 	ret

040054bc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 40054bc:	defff804 	addi	sp,sp,-32
 40054c0:	dfc00715 	stw	ra,28(sp)
 40054c4:	df000615 	stw	fp,24(sp)
 40054c8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 40054cc:	018100b4 	movhi	r6,1026
 40054d0:	318a8604 	addi	r6,r6,10776
 40054d4:	00bfffd4 	movui	r2,65535
 40054d8:	d8800015 	stw	r2,0(sp)
 40054dc:	008100b4 	movhi	r2,1026
 40054e0:	10888704 	addi	r2,r2,8732
 40054e4:	d8800115 	stw	r2,4(sp)
 40054e8:	00808004 	movi	r2,512
 40054ec:	d8800215 	stw	r2,8(sp)
 40054f0:	d8000315 	stw	zero,12(sp)
 40054f4:	008000c4 	movi	r2,3
 40054f8:	d8800415 	stw	r2,16(sp)
 40054fc:	01010034 	movhi	r4,1024
 4005500:	21169304 	addi	r4,r4,23116
 4005504:	000b883a 	mov	r5,zero
 4005508:	01c00fc4 	movi	r7,63
 400550c:	400a86c0 	call	400a86c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 4005510:	01410074 	movhi	r5,1025
 4005514:	295a1d04 	addi	r5,r5,26740
 4005518:	01000fc4 	movi	r4,63
 400551c:	e1bfff04 	addi	r6,fp,-4
 4005520:	400b1a00 	call	400b1a0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 4005524:	e037883a 	mov	sp,fp
 4005528:	dfc00117 	ldw	ra,4(sp)
 400552c:	df000017 	ldw	fp,0(sp)
 4005530:	dec00204 	addi	sp,sp,8
 4005534:	f800283a 	ret

04005538 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 4005538:	defff804 	addi	sp,sp,-32
 400553c:	dfc00715 	stw	ra,28(sp)
 4005540:	df000615 	stw	fp,24(sp)
 4005544:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 4005548:	018100b4 	movhi	r6,1026
 400554c:	31880104 	addi	r6,r6,8196
 4005550:	00bfff94 	movui	r2,65534
 4005554:	d8800015 	stw	r2,0(sp)
 4005558:	008100b4 	movhi	r2,1026
 400555c:	10860204 	addi	r2,r2,6152
 4005560:	d8800115 	stw	r2,4(sp)
 4005564:	00808004 	movi	r2,512
 4005568:	d8800215 	stw	r2,8(sp)
 400556c:	d8000315 	stw	zero,12(sp)
 4005570:	008000c4 	movi	r2,3
 4005574:	d8800415 	stw	r2,16(sp)
 4005578:	01010034 	movhi	r4,1024
 400557c:	2116aa04 	addi	r4,r4,23208
 4005580:	000b883a 	mov	r5,zero
 4005584:	01c00f84 	movi	r7,62
 4005588:	400a86c0 	call	400a86c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 400558c:	01410074 	movhi	r5,1025
 4005590:	295a2104 	addi	r5,r5,26756
 4005594:	01000f84 	movi	r4,62
 4005598:	e1bfff04 	addi	r6,fp,-4
 400559c:	400b1a00 	call	400b1a0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 40055a0:	e037883a 	mov	sp,fp
 40055a4:	dfc00117 	ldw	ra,4(sp)
 40055a8:	df000017 	ldw	fp,0(sp)
 40055ac:	dec00204 	addi	sp,sp,8
 40055b0:	f800283a 	ret

040055b4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 40055b4:	defffb04 	addi	sp,sp,-20
 40055b8:	dfc00415 	stw	ra,16(sp)
 40055bc:	df000315 	stw	fp,12(sp)
 40055c0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 40055c4:	010100b4 	movhi	r4,1026
 40055c8:	210d9304 	addi	r4,r4,13900
 40055cc:	01415c04 	movi	r5,1392
 40055d0:	40056940 	call	4005694 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 40055d4:	010100b4 	movhi	r4,1026
 40055d8:	210eef04 	addi	r4,r4,15292
 40055dc:	01404004 	movi	r5,256
 40055e0:	40056940 	call	4005694 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 40055e4:	008100b4 	movhi	r2,1026
 40055e8:	108d9304 	addi	r2,r2,13900
 40055ec:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 40055f0:	008100b4 	movhi	r2,1026
 40055f4:	108db004 	addi	r2,r2,14016
 40055f8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 40055fc:	e03fff05 	stb	zero,-4(fp)
 4005600:	00001106 	br	4005648 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 4005604:	e0fffe17 	ldw	r3,-8(fp)
 4005608:	e0bffd17 	ldw	r2,-12(fp)
 400560c:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 4005610:	e0fffe17 	ldw	r3,-8(fp)
 4005614:	00800fc4 	movi	r2,63
 4005618:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400561c:	e0bffe17 	ldw	r2,-8(fp)
 4005620:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 4005624:	e0bffe17 	ldw	r2,-8(fp)
 4005628:	10801d04 	addi	r2,r2,116
 400562c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 4005630:	e0bffd17 	ldw	r2,-12(fp)
 4005634:	10801d04 	addi	r2,r2,116
 4005638:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400563c:	e0bfff03 	ldbu	r2,-4(fp)
 4005640:	10800044 	addi	r2,r2,1
 4005644:	e0bfff05 	stb	r2,-4(fp)
 4005648:	e0bfff03 	ldbu	r2,-4(fp)
 400564c:	108002f0 	cmpltui	r2,r2,11
 4005650:	103fec1e 	bne	r2,zero,4005604 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 4005654:	e0bffe17 	ldw	r2,-8(fp)
 4005658:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 400565c:	e0fffe17 	ldw	r3,-8(fp)
 4005660:	00800fc4 	movi	r2,63
 4005664:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4005668:	e0bffe17 	ldw	r2,-8(fp)
 400566c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 4005670:	d0204015 	stw	zero,-32512(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 4005674:	008100b4 	movhi	r2,1026
 4005678:	108d9304 	addi	r2,r2,13900
 400567c:	d0a04415 	stw	r2,-32496(gp)
}
 4005680:	e037883a 	mov	sp,fp
 4005684:	dfc00117 	ldw	ra,4(sp)
 4005688:	df000017 	ldw	fp,0(sp)
 400568c:	dec00204 	addi	sp,sp,8
 4005690:	f800283a 	ret

04005694 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 4005694:	defffd04 	addi	sp,sp,-12
 4005698:	df000215 	stw	fp,8(sp)
 400569c:	df000204 	addi	fp,sp,8
 40056a0:	e13ffe15 	stw	r4,-8(fp)
 40056a4:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 40056a8:	00000806 	br	40056cc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 40056ac:	e0bffe17 	ldw	r2,-8(fp)
 40056b0:	10000005 	stb	zero,0(r2)
 40056b4:	e0bffe17 	ldw	r2,-8(fp)
 40056b8:	10800044 	addi	r2,r2,1
 40056bc:	e0bffe15 	stw	r2,-8(fp)
        size--;
 40056c0:	e0bfff0b 	ldhu	r2,-4(fp)
 40056c4:	10bfffc4 	addi	r2,r2,-1
 40056c8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 40056cc:	e0bfff0b 	ldhu	r2,-4(fp)
 40056d0:	1004c03a 	cmpne	r2,r2,zero
 40056d4:	103ff51e 	bne	r2,zero,40056ac <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 40056d8:	e037883a 	mov	sp,fp
 40056dc:	df000017 	ldw	fp,0(sp)
 40056e0:	dec00104 	addi	sp,sp,4
 40056e4:	f800283a 	ret

040056e8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 40056e8:	defffc04 	addi	sp,sp,-16
 40056ec:	df000315 	stw	fp,12(sp)
 40056f0:	df000304 	addi	fp,sp,12
 40056f4:	e13ffd15 	stw	r4,-12(fp)
 40056f8:	e17ffe15 	stw	r5,-8(fp)
 40056fc:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 4005700:	00000d06 	br	4005738 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 4005704:	e0bffe17 	ldw	r2,-8(fp)
 4005708:	10c00003 	ldbu	r3,0(r2)
 400570c:	e0bffd17 	ldw	r2,-12(fp)
 4005710:	10c00005 	stb	r3,0(r2)
 4005714:	e0bffd17 	ldw	r2,-12(fp)
 4005718:	10800044 	addi	r2,r2,1
 400571c:	e0bffd15 	stw	r2,-12(fp)
 4005720:	e0bffe17 	ldw	r2,-8(fp)
 4005724:	10800044 	addi	r2,r2,1
 4005728:	e0bffe15 	stw	r2,-8(fp)
        size--;
 400572c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005730:	10bfffc4 	addi	r2,r2,-1
 4005734:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 4005738:	e0bfff0b 	ldhu	r2,-4(fp)
 400573c:	1004c03a 	cmpne	r2,r2,zero
 4005740:	103ff01e 	bne	r2,zero,4005704 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 4005744:	e037883a 	mov	sp,fp
 4005748:	df000017 	ldw	fp,0(sp)
 400574c:	dec00104 	addi	sp,sp,4
 4005750:	f800283a 	ret

04005754 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 4005754:	defffa04 	addi	sp,sp,-24
 4005758:	dfc00515 	stw	ra,20(sp)
 400575c:	df000415 	stw	fp,16(sp)
 4005760:	df000404 	addi	fp,sp,16
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005764:	0005303a 	rdctl	r2,status
 4005768:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400576c:	e0fffd17 	ldw	r3,-12(fp)
 4005770:	00bfff84 	movi	r2,-2
 4005774:	1884703a 	and	r2,r3,r2
 4005778:	1001703a 	wrctl	status,r2
  
  return context;
 400577c:	e0bffd17 	ldw	r2,-12(fp)
    OS_CPU_SR  cpu_sr;
#endif
    INT8U      y;


    OS_ENTER_CRITICAL();
 4005780:	e0bfff15 	stw	r2,-4(fp)
    if ((OSIntNesting == 0) && (OSLockNesting == 0)) { /* Sched. only if all ISRs done & not locked    */
 4005784:	d0a04d03 	ldbu	r2,-32460(gp)
 4005788:	10803fcc 	andi	r2,r2,255
 400578c:	1004c03a 	cmpne	r2,r2,zero
 4005790:	1000201e 	bne	r2,zero,4005814 <OS_Sched+0xc0>
 4005794:	d0a03d03 	ldbu	r2,-32524(gp)
 4005798:	10803fcc 	andi	r2,r2,255
 400579c:	1004c03a 	cmpne	r2,r2,zero
 40057a0:	10001c1e 	bne	r2,zero,4005814 <OS_Sched+0xc0>

        // *** Daniel Modified ***
        // y             = OSUnMapTbl[OSRdyGrp];          /* Get pointer to HPT ready to run              */
        // OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
        OSNextTask();
 40057a4:	40058380 	call	4005838 <OSNextTask>
        // ** End modification ***
        if (OSPrioHighRdy != OSPrioCur) {              /* No Ctx Sw if current task is highest rdy     */
 40057a8:	d0a03f03 	ldbu	r2,-32516(gp)
 40057ac:	d0e03f43 	ldbu	r3,-32515(gp)
 40057b0:	11003fcc 	andi	r4,r2,255
 40057b4:	18803fcc 	andi	r2,r3,255
 40057b8:	20801626 	beq	r4,r2,4005814 <OS_Sched+0xc0>
            printf("%lu complete %u %u\n", OSTimeGet(), OSPrioCur, OSPrioHighRdy);
 40057bc:	400c0380 	call	400c038 <OSTimeGet>
 40057c0:	100b883a 	mov	r5,r2
 40057c4:	d0a03f43 	ldbu	r2,-32515(gp)
 40057c8:	11803fcc 	andi	r6,r2,255
 40057cc:	d0a03f03 	ldbu	r2,-32516(gp)
 40057d0:	11c03fcc 	andi	r7,r2,255
 40057d4:	01010074 	movhi	r4,1025
 40057d8:	211a2504 	addi	r4,r4,26772
 40057dc:	400f4dc0 	call	400f4dc <printf>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 40057e0:	d0a03f03 	ldbu	r2,-32516(gp)
 40057e4:	10803fcc 	andi	r2,r2,255
 40057e8:	00c100b4 	movhi	r3,1026
 40057ec:	18ceef04 	addi	r3,r3,15292
 40057f0:	1085883a 	add	r2,r2,r2
 40057f4:	1085883a 	add	r2,r2,r2
 40057f8:	10c5883a 	add	r2,r2,r3
 40057fc:	10800017 	ldw	r2,0(r2)
 4005800:	d0a04715 	stw	r2,-32484(gp)
            OSCtxSwCtr++;                              /* Increment context switch counter             */
 4005804:	d0a04217 	ldw	r2,-32504(gp)
 4005808:	10800044 	addi	r2,r2,1
 400580c:	d0a04215 	stw	r2,-32504(gp)
            OS_TASK_SW();                              /* Perform a context switch                     */
 4005810:	400ea540 	call	400ea54 <OSCtxSw>
 4005814:	e0bfff17 	ldw	r2,-4(fp)
 4005818:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400581c:	e0bffc17 	ldw	r2,-16(fp)
 4005820:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 4005824:	e037883a 	mov	sp,fp
 4005828:	dfc00117 	ldw	ra,4(sp)
 400582c:	df000017 	ldw	fp,0(sp)
 4005830:	dec00204 	addi	sp,sp,8
 4005834:	f800283a 	ret

04005838 <OSNextTask>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/
// Modified
void OSNextTask(void)
{
 4005838:	defffa04 	addi	sp,sp,-24
 400583c:	df000515 	stw	fp,20(sp)
 4005840:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4005844:	e03fff15 	stw	zero,-4(fp)
#endif
    OS_TCB    *ptcb;
    INT32U earliestDDL = 0x7fffffff;
 4005848:	00a00034 	movhi	r2,32768
 400584c:	10bfffc4 	addi	r2,r2,-1
 4005850:	e0bffd15 	stw	r2,-12(fp)

    OSPrioHighRdy = OS_TASK_IDLE_PRIO;
 4005854:	00800fc4 	movi	r2,63
 4005858:	d0a03f05 	stb	r2,-32516(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400585c:	0005303a 	rdctl	r2,status
 4005860:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005864:	e0fffc17 	ldw	r3,-16(fp)
 4005868:	00bfff84 	movi	r2,-2
 400586c:	1884703a 	and	r2,r3,r2
 4005870:	1001703a 	wrctl	status,r2
  
  return context;
 4005874:	e0bffc17 	ldw	r2,-16(fp)

    OS_ENTER_CRITICAL();
 4005878:	e0bfff15 	stw	r2,-4(fp)
    	ptcb = OSTCBList;                                  /* Point at first TCB in TCB list           */
 400587c:	d0a04017 	ldw	r2,-32512(gp)
 4005880:	e0bffe15 	stw	r2,-8(fp)
    	while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {          /* Go through all TCBs in TCB list          */
 4005884:	00001206 	br	40058d0 <OSNextTask+0x98>
    		if (!ptcb->OSTCBDly)
 4005888:	e0bffe17 	ldw	r2,-8(fp)
 400588c:	10800b8b 	ldhu	r2,46(r2)
 4005890:	10bfffcc 	andi	r2,r2,65535
 4005894:	1004c03a 	cmpne	r2,r2,zero
 4005898:	10000a1e 	bne	r2,zero,40058c4 <OSNextTask+0x8c>
    		{
    			if (ptcb->deadline < earliestDDL)
 400589c:	e0bffe17 	ldw	r2,-8(fp)
 40058a0:	10c01c17 	ldw	r3,112(r2)
 40058a4:	e0bffd17 	ldw	r2,-12(fp)
 40058a8:	1880062e 	bgeu	r3,r2,40058c4 <OSNextTask+0x8c>
    			{

    				OSPrioHighRdy = ptcb->OSTCBPrio;
 40058ac:	e0bffe17 	ldw	r2,-8(fp)
 40058b0:	10800c83 	ldbu	r2,50(r2)
 40058b4:	d0a03f05 	stb	r2,-32516(gp)
    				earliestDDL = ptcb->deadline;
 40058b8:	e0bffe17 	ldw	r2,-8(fp)
 40058bc:	10801c17 	ldw	r2,112(r2)
 40058c0:	e0bffd15 	stw	r2,-12(fp)
    			}
    		}
    		ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list            */
 40058c4:	e0bffe17 	ldw	r2,-8(fp)
 40058c8:	10800517 	ldw	r2,20(r2)
 40058cc:	e0bffe15 	stw	r2,-8(fp)

    OSPrioHighRdy = OS_TASK_IDLE_PRIO;

    OS_ENTER_CRITICAL();
    	ptcb = OSTCBList;                                  /* Point at first TCB in TCB list           */
    	while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {          /* Go through all TCBs in TCB list          */
 40058d0:	e0bffe17 	ldw	r2,-8(fp)
 40058d4:	10800c83 	ldbu	r2,50(r2)
 40058d8:	10803fcc 	andi	r2,r2,255
 40058dc:	10800fd8 	cmpnei	r2,r2,63
 40058e0:	103fe91e 	bne	r2,zero,4005888 <OSNextTask+0x50>
 40058e4:	e0bfff17 	ldw	r2,-4(fp)
 40058e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40058ec:	e0bffb17 	ldw	r2,-20(fp)
 40058f0:	1001703a 	wrctl	status,r2
    			}
    		}
    		ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list            */
    	}
    	OS_EXIT_CRITICAL();
}
 40058f4:	e037883a 	mov	sp,fp
 40058f8:	df000017 	ldw	fp,0(sp)
 40058fc:	dec00104 	addi	sp,sp,4
 4005900:	f800283a 	ret

04005904 <OS_SchedNew>:
static  void  OS_SchedNew (void)
{
 4005904:	defffe04 	addi	sp,sp,-8
 4005908:	df000115 	stw	fp,4(sp)
 400590c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 4005910:	d0a04903 	ldbu	r2,-32476(gp)
 4005914:	10c03fcc 	andi	r3,r2,255
 4005918:	00810074 	movhi	r2,1025
 400591c:	1099d804 	addi	r2,r2,26464
 4005920:	10c5883a 	add	r2,r2,r3
 4005924:	10800003 	ldbu	r2,0(r2)
 4005928:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 400592c:	e0bfff03 	ldbu	r2,-4(fp)
 4005930:	100490fa 	slli	r2,r2,3
 4005934:	1009883a 	mov	r4,r2
 4005938:	e0ffff03 	ldbu	r3,-4(fp)
 400593c:	d0a04944 	addi	r2,gp,-32475
 4005940:	1885883a 	add	r2,r3,r2
 4005944:	10800003 	ldbu	r2,0(r2)
 4005948:	10c03fcc 	andi	r3,r2,255
 400594c:	00810074 	movhi	r2,1025
 4005950:	1099d804 	addi	r2,r2,26464
 4005954:	10c5883a 	add	r2,r2,r3
 4005958:	10800003 	ldbu	r2,0(r2)
 400595c:	2085883a 	add	r2,r4,r2
 4005960:	d0a03f05 	stb	r2,-32516(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 4005964:	e037883a 	mov	sp,fp
 4005968:	df000017 	ldw	fp,0(sp)
 400596c:	dec00104 	addi	sp,sp,4
 4005970:	f800283a 	ret

04005974 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 4005974:	defffc04 	addi	sp,sp,-16
 4005978:	df000315 	stw	fp,12(sp)
 400597c:	df000304 	addi	fp,sp,12
 4005980:	e13ffe15 	stw	r4,-8(fp)
 4005984:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 4005988:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 400598c:	00000d06 	br	40059c4 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 4005990:	e0bfff17 	ldw	r2,-4(fp)
 4005994:	10c00003 	ldbu	r3,0(r2)
 4005998:	e0bffe17 	ldw	r2,-8(fp)
 400599c:	10c00005 	stb	r3,0(r2)
 40059a0:	e0bffe17 	ldw	r2,-8(fp)
 40059a4:	10800044 	addi	r2,r2,1
 40059a8:	e0bffe15 	stw	r2,-8(fp)
 40059ac:	e0bfff17 	ldw	r2,-4(fp)
 40059b0:	10800044 	addi	r2,r2,1
 40059b4:	e0bfff15 	stw	r2,-4(fp)
        len++;
 40059b8:	e0bffd03 	ldbu	r2,-12(fp)
 40059bc:	10800044 	addi	r2,r2,1
 40059c0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 40059c4:	e0bfff17 	ldw	r2,-4(fp)
 40059c8:	10800003 	ldbu	r2,0(r2)
 40059cc:	10803fcc 	andi	r2,r2,255
 40059d0:	1004c03a 	cmpne	r2,r2,zero
 40059d4:	103fee1e 	bne	r2,zero,4005990 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 40059d8:	e0bffe17 	ldw	r2,-8(fp)
 40059dc:	10000005 	stb	zero,0(r2)
    return (len);
 40059e0:	e0bffd03 	ldbu	r2,-12(fp)
}
 40059e4:	e037883a 	mov	sp,fp
 40059e8:	df000017 	ldw	fp,0(sp)
 40059ec:	dec00104 	addi	sp,sp,4
 40059f0:	f800283a 	ret

040059f4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 40059f4:	defffd04 	addi	sp,sp,-12
 40059f8:	df000215 	stw	fp,8(sp)
 40059fc:	df000204 	addi	fp,sp,8
 4005a00:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 4005a04:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 4005a08:	00000606 	br	4005a24 <OS_StrLen+0x30>
        psrc++;
 4005a0c:	e0bfff17 	ldw	r2,-4(fp)
 4005a10:	10800044 	addi	r2,r2,1
 4005a14:	e0bfff15 	stw	r2,-4(fp)
        len++;
 4005a18:	e0bffe03 	ldbu	r2,-8(fp)
 4005a1c:	10800044 	addi	r2,r2,1
 4005a20:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 4005a24:	e0bfff17 	ldw	r2,-4(fp)
 4005a28:	10800003 	ldbu	r2,0(r2)
 4005a2c:	10803fcc 	andi	r2,r2,255
 4005a30:	1004c03a 	cmpne	r2,r2,zero
 4005a34:	103ff51e 	bne	r2,zero,4005a0c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 4005a38:	e0bffe03 	ldbu	r2,-8(fp)
}
 4005a3c:	e037883a 	mov	sp,fp
 4005a40:	df000017 	ldw	fp,0(sp)
 4005a44:	dec00104 	addi	sp,sp,4
 4005a48:	f800283a 	ret

04005a4c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 4005a4c:	defffa04 	addi	sp,sp,-24
 4005a50:	dfc00515 	stw	ra,20(sp)
 4005a54:	df000415 	stw	fp,16(sp)
 4005a58:	df000404 	addi	fp,sp,16
 4005a5c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4005a60:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005a64:	0005303a 	rdctl	r2,status
 4005a68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005a6c:	e0fffd17 	ldw	r3,-12(fp)
 4005a70:	00bfff84 	movi	r2,-2
 4005a74:	1884703a 	and	r2,r3,r2
 4005a78:	1001703a 	wrctl	status,r2
  
  return context;
 4005a7c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 4005a80:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 4005a84:	d0a03e17 	ldw	r2,-32520(gp)
 4005a88:	10800044 	addi	r2,r2,1
 4005a8c:	d0a03e15 	stw	r2,-32520(gp)
 4005a90:	e0bffe17 	ldw	r2,-8(fp)
 4005a94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005a98:	e0bffc17 	ldw	r2,-16(fp)
 4005a9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 4005aa0:	400ef000 	call	400ef00 <OSTaskIdleHook>
    }
 4005aa4:	003fef06 	br	4005a64 <OS_TaskIdle+0x18>

04005aa8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 4005aa8:	defffa04 	addi	sp,sp,-24
 4005aac:	dfc00515 	stw	ra,20(sp)
 4005ab0:	df000415 	stw	fp,16(sp)
 4005ab4:	df000404 	addi	fp,sp,16
 4005ab8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4005abc:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 4005ac0:	00000206 	br	4005acc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 4005ac4:	01000504 	movi	r4,20
 4005ac8:	400bb640 	call	400bb64 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 4005acc:	d0a05103 	ldbu	r2,-32444(gp)
 4005ad0:	10803fcc 	andi	r2,r2,255
 4005ad4:	1005003a 	cmpeq	r2,r2,zero
 4005ad8:	103ffa1e 	bne	r2,zero,4005ac4 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 4005adc:	d1204317 	ldw	r4,-32500(gp)
 4005ae0:	01401904 	movi	r5,100
 4005ae4:	4015fbc0 	call	4015fbc <__udivsi3>
 4005ae8:	d0a04315 	stw	r2,-32500(gp)
    if (OSIdleCtrMax == 0L) {
 4005aec:	d0a04317 	ldw	r2,-32500(gp)
 4005af0:	1004c03a 	cmpne	r2,r2,zero
 4005af4:	1000031e 	bne	r2,zero,4005b04 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 4005af8:	d0204505 	stb	zero,-32492(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 4005afc:	01003fc4 	movi	r4,255
 4005b00:	400b7780 	call	400b778 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005b04:	0005303a 	rdctl	r2,status
 4005b08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005b0c:	e0fffd17 	ldw	r3,-12(fp)
 4005b10:	00bfff84 	movi	r2,-2
 4005b14:	1884703a 	and	r2,r3,r2
 4005b18:	1001703a 	wrctl	status,r2
  
  return context;
 4005b1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 4005b20:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 4005b24:	d0a03e17 	ldw	r2,-32520(gp)
 4005b28:	d0a05215 	stw	r2,-32440(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 4005b2c:	d0203e15 	stw	zero,-32520(gp)
 4005b30:	e0bffe17 	ldw	r2,-8(fp)
 4005b34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005b38:	e0bffc17 	ldw	r2,-16(fp)
 4005b3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 4005b40:	d1205217 	ldw	r4,-32440(gp)
 4005b44:	d1604317 	ldw	r5,-32500(gp)
 4005b48:	4015fbc0 	call	4015fbc <__udivsi3>
 4005b4c:	1007883a 	mov	r3,r2
 4005b50:	00801904 	movi	r2,100
 4005b54:	10c5c83a 	sub	r2,r2,r3
 4005b58:	d0a04505 	stb	r2,-32492(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 4005b5c:	400ee900 	call	400ee90 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 4005b60:	4005b700 	call	4005b70 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 4005b64:	01000284 	movi	r4,10
 4005b68:	400bb640 	call	400bb64 <OSTimeDly>
    }
 4005b6c:	003fe506 	br	4005b04 <OS_TaskStat+0x5c>

04005b70 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 4005b70:	defffa04 	addi	sp,sp,-24
 4005b74:	dfc00515 	stw	ra,20(sp)
 4005b78:	df000415 	stw	fp,16(sp)
 4005b7c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4005b80:	e03ffc05 	stb	zero,-16(fp)
 4005b84:	00002406 	br	4005c18 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 4005b88:	e13ffc03 	ldbu	r4,-16(fp)
 4005b8c:	e17ffe04 	addi	r5,fp,-8
 4005b90:	400b57c0 	call	400b57c <OSTaskStkChk>
 4005b94:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 4005b98:	e0bffc43 	ldbu	r2,-15(fp)
 4005b9c:	1004c03a 	cmpne	r2,r2,zero
 4005ba0:	10001a1e 	bne	r2,zero,4005c0c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 4005ba4:	e0bffc03 	ldbu	r2,-16(fp)
 4005ba8:	00c100b4 	movhi	r3,1026
 4005bac:	18ceef04 	addi	r3,r3,15292
 4005bb0:	1085883a 	add	r2,r2,r2
 4005bb4:	1085883a 	add	r2,r2,r2
 4005bb8:	10c5883a 	add	r2,r2,r3
 4005bbc:	10800017 	ldw	r2,0(r2)
 4005bc0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 4005bc4:	e0bffd17 	ldw	r2,-12(fp)
 4005bc8:	1005003a 	cmpeq	r2,r2,zero
 4005bcc:	10000f1e 	bne	r2,zero,4005c0c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 4005bd0:	e0bffd17 	ldw	r2,-12(fp)
 4005bd4:	10800060 	cmpeqi	r2,r2,1
 4005bd8:	10000c1e 	bne	r2,zero,4005c0c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 4005bdc:	e0bffd17 	ldw	r2,-12(fp)
 4005be0:	10c00217 	ldw	r3,8(r2)
 4005be4:	e0bffd17 	ldw	r2,-12(fp)
 4005be8:	10800317 	ldw	r2,12(r2)
 4005bec:	1085883a 	add	r2,r2,r2
 4005bf0:	1085883a 	add	r2,r2,r2
 4005bf4:	1887883a 	add	r3,r3,r2
 4005bf8:	e0bffd17 	ldw	r2,-12(fp)
 4005bfc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 4005c00:	e0ffff17 	ldw	r3,-4(fp)
 4005c04:	e0bffd17 	ldw	r2,-12(fp)
 4005c08:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4005c0c:	e0bffc03 	ldbu	r2,-16(fp)
 4005c10:	10800044 	addi	r2,r2,1
 4005c14:	e0bffc05 	stb	r2,-16(fp)
 4005c18:	e0bffc03 	ldbu	r2,-16(fp)
 4005c1c:	10801030 	cmpltui	r2,r2,64
 4005c20:	103fd91e 	bne	r2,zero,4005b88 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 4005c24:	e037883a 	mov	sp,fp
 4005c28:	dfc00117 	ldw	ra,4(sp)
 4005c2c:	df000017 	ldw	fp,0(sp)
 4005c30:	dec00204 	addi	sp,sp,8
 4005c34:	f800283a 	ret

04005c38 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 4005c38:	defff104 	addi	sp,sp,-60
 4005c3c:	dfc00e15 	stw	ra,56(sp)
 4005c40:	df000d15 	stw	fp,52(sp)
 4005c44:	df000d04 	addi	fp,sp,52
 4005c48:	e17ffb15 	stw	r5,-20(fp)
 4005c4c:	e1bffc15 	stw	r6,-16(fp)
 4005c50:	e0800417 	ldw	r2,16(fp)
 4005c54:	e13ffa05 	stb	r4,-24(fp)
 4005c58:	e1fffd0d 	sth	r7,-12(fp)
 4005c5c:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4005c60:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005c64:	0005303a 	rdctl	r2,status
 4005c68:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005c6c:	e0fff717 	ldw	r3,-36(fp)
 4005c70:	00bfff84 	movi	r2,-2
 4005c74:	1884703a 	and	r2,r3,r2
 4005c78:	1001703a 	wrctl	status,r2
  
  return context;
 4005c7c:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 4005c80:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 4005c84:	d0a04417 	ldw	r2,-32496(gp)
 4005c88:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 4005c8c:	e0bff917 	ldw	r2,-28(fp)
 4005c90:	1005003a 	cmpeq	r2,r2,zero
 4005c94:	1000a41e 	bne	r2,zero,4005f28 <OS_TCBInit+0x2f0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 4005c98:	e0bff917 	ldw	r2,-28(fp)
 4005c9c:	10800517 	ldw	r2,20(r2)
 4005ca0:	d0a04415 	stw	r2,-32496(gp)
 4005ca4:	e0bff817 	ldw	r2,-32(fp)
 4005ca8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005cac:	e0bff617 	ldw	r2,-40(fp)
 4005cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 4005cb4:	e0fff917 	ldw	r3,-28(fp)
 4005cb8:	e0bffb17 	ldw	r2,-20(fp)
 4005cbc:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 4005cc0:	e0fff917 	ldw	r3,-28(fp)
 4005cc4:	e0bffa03 	ldbu	r2,-24(fp)
 4005cc8:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 4005ccc:	e0bff917 	ldw	r2,-28(fp)
 4005cd0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 4005cd4:	e0bff917 	ldw	r2,-28(fp)
 4005cd8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 4005cdc:	e0bff917 	ldw	r2,-28(fp)
 4005ce0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 4005ce4:	e0fff917 	ldw	r3,-28(fp)
 4005ce8:	e0800317 	ldw	r2,12(fp)
 4005cec:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 4005cf0:	e0fff917 	ldw	r3,-28(fp)
 4005cf4:	e0800217 	ldw	r2,8(fp)
 4005cf8:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 4005cfc:	e0fff917 	ldw	r3,-28(fp)
 4005d00:	e0bffc17 	ldw	r2,-16(fp)
 4005d04:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 4005d08:	e0fff917 	ldw	r3,-28(fp)
 4005d0c:	e0bffe0b 	ldhu	r2,-8(fp)
 4005d10:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 4005d14:	e0fff917 	ldw	r3,-28(fp)
 4005d18:	e0bffd0b 	ldhu	r2,-12(fp)
 4005d1c:	1880048d 	sth	r2,18(r3)

        // Modified
		ptcb->compTime = ((INT32U *)pext)[0];
 4005d20:	e0800317 	ldw	r2,12(fp)
 4005d24:	10800017 	ldw	r2,0(r2)
 4005d28:	1007883a 	mov	r3,r2
 4005d2c:	e0bff917 	ldw	r2,-28(fp)
 4005d30:	10c01b05 	stb	r3,108(r2)
		ptcb->period = ((INT32U *)pext)[1];
 4005d34:	e0800317 	ldw	r2,12(fp)
 4005d38:	10800104 	addi	r2,r2,4
 4005d3c:	10800017 	ldw	r2,0(r2)
 4005d40:	1007883a 	mov	r3,r2
 4005d44:	e0bff917 	ldw	r2,-28(fp)
 4005d48:	10c01b45 	stb	r3,109(r2)
		ptcb->deadline = ((INT32U *)pext)[1];
 4005d4c:	e0800317 	ldw	r2,12(fp)
 4005d50:	10800104 	addi	r2,r2,4
 4005d54:	10c00017 	ldw	r3,0(r2)
 4005d58:	e0bff917 	ldw	r2,-28(fp)
 4005d5c:	10c01c15 	stw	r3,112(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 4005d60:	e0bff917 	ldw	r2,-28(fp)
 4005d64:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 4005d68:	e0bffa03 	ldbu	r2,-24(fp)
 4005d6c:	1004d0fa 	srli	r2,r2,3
 4005d70:	1007883a 	mov	r3,r2
 4005d74:	e0bff917 	ldw	r2,-28(fp)
 4005d78:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 4005d7c:	e0bffa03 	ldbu	r2,-24(fp)
 4005d80:	108001cc 	andi	r2,r2,7
 4005d84:	1007883a 	mov	r3,r2
 4005d88:	e0bff917 	ldw	r2,-28(fp)
 4005d8c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 4005d90:	e0bff917 	ldw	r2,-28(fp)
 4005d94:	10800d03 	ldbu	r2,52(r2)
 4005d98:	10c03fcc 	andi	r3,r2,255
 4005d9c:	00800044 	movi	r2,1
 4005da0:	10c4983a 	sll	r2,r2,r3
 4005da4:	1007883a 	mov	r3,r2
 4005da8:	e0bff917 	ldw	r2,-28(fp)
 4005dac:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 4005db0:	e0bff917 	ldw	r2,-28(fp)
 4005db4:	10800cc3 	ldbu	r2,51(r2)
 4005db8:	10c03fcc 	andi	r3,r2,255
 4005dbc:	00800044 	movi	r2,1
 4005dc0:	10c4983a 	sll	r2,r2,r3
 4005dc4:	1007883a 	mov	r3,r2
 4005dc8:	e0bff917 	ldw	r2,-28(fp)
 4005dcc:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 4005dd0:	e0bff917 	ldw	r2,-28(fp)
 4005dd4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 4005dd8:	e0bff917 	ldw	r2,-28(fp)
 4005ddc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 4005de0:	e0bff917 	ldw	r2,-28(fp)
 4005de4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 4005de8:	e0bff917 	ldw	r2,-28(fp)
 4005dec:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 4005df0:	e0bff917 	ldw	r2,-28(fp)
 4005df4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 4005df8:	e0bff917 	ldw	r2,-28(fp)
 4005dfc:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 4005e00:	e0bff917 	ldw	r2,-28(fp)
 4005e04:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 4005e08:	e0bff917 	ldw	r2,-28(fp)
 4005e0c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 4005e10:	e0bff917 	ldw	r2,-28(fp)
 4005e14:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 4005e18:	e0fff917 	ldw	r3,-28(fp)
 4005e1c:	00800fc4 	movi	r2,63
 4005e20:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4005e24:	e0bff917 	ldw	r2,-28(fp)
 4005e28:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 4005e2c:	e13ff917 	ldw	r4,-28(fp)
 4005e30:	400ef1c0 	call	400ef1c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 4005e34:	e13ff917 	ldw	r4,-28(fp)
 4005e38:	400ee340 	call	400ee34 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005e3c:	0005303a 	rdctl	r2,status
 4005e40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005e44:	e0fff517 	ldw	r3,-44(fp)
 4005e48:	00bfff84 	movi	r2,-2
 4005e4c:	1884703a 	and	r2,r3,r2
 4005e50:	1001703a 	wrctl	status,r2
  
  return context;
 4005e54:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 4005e58:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 4005e5c:	e0bffa03 	ldbu	r2,-24(fp)
 4005e60:	00c100b4 	movhi	r3,1026
 4005e64:	18ceef04 	addi	r3,r3,15292
 4005e68:	1085883a 	add	r2,r2,r2
 4005e6c:	1085883a 	add	r2,r2,r2
 4005e70:	10c7883a 	add	r3,r2,r3
 4005e74:	e0bff917 	ldw	r2,-28(fp)
 4005e78:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 4005e7c:	d0e04017 	ldw	r3,-32512(gp)
 4005e80:	e0bff917 	ldw	r2,-28(fp)
 4005e84:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 4005e88:	e0bff917 	ldw	r2,-28(fp)
 4005e8c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 4005e90:	d0a04017 	ldw	r2,-32512(gp)
 4005e94:	1005003a 	cmpeq	r2,r2,zero
 4005e98:	1000031e 	bne	r2,zero,4005ea8 <OS_TCBInit+0x270>
            OSTCBList->OSTCBPrev = ptcb;
 4005e9c:	d0e04017 	ldw	r3,-32512(gp)
 4005ea0:	e0bff917 	ldw	r2,-28(fp)
 4005ea4:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 4005ea8:	e0bff917 	ldw	r2,-28(fp)
 4005eac:	d0a04015 	stw	r2,-32512(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 4005eb0:	e0bff917 	ldw	r2,-28(fp)
 4005eb4:	10c00d83 	ldbu	r3,54(r2)
 4005eb8:	d0a04903 	ldbu	r2,-32476(gp)
 4005ebc:	1884b03a 	or	r2,r3,r2
 4005ec0:	d0a04905 	stb	r2,-32476(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4005ec4:	e0bff917 	ldw	r2,-28(fp)
 4005ec8:	10800d03 	ldbu	r2,52(r2)
 4005ecc:	11003fcc 	andi	r4,r2,255
 4005ed0:	e0bff917 	ldw	r2,-28(fp)
 4005ed4:	10800d03 	ldbu	r2,52(r2)
 4005ed8:	10c03fcc 	andi	r3,r2,255
 4005edc:	d0a04944 	addi	r2,gp,-32475
 4005ee0:	1885883a 	add	r2,r3,r2
 4005ee4:	10c00003 	ldbu	r3,0(r2)
 4005ee8:	e0bff917 	ldw	r2,-28(fp)
 4005eec:	10800d43 	ldbu	r2,53(r2)
 4005ef0:	1884b03a 	or	r2,r3,r2
 4005ef4:	1007883a 	mov	r3,r2
 4005ef8:	d0a04944 	addi	r2,gp,-32475
 4005efc:	2085883a 	add	r2,r4,r2
 4005f00:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 4005f04:	d0a04543 	ldbu	r2,-32491(gp)
 4005f08:	10800044 	addi	r2,r2,1
 4005f0c:	d0a04545 	stb	r2,-32491(gp)
 4005f10:	e0bff817 	ldw	r2,-32(fp)
 4005f14:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005f18:	e0bff417 	ldw	r2,-48(fp)
 4005f1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4005f20:	e03fff15 	stw	zero,-4(fp)
 4005f24:	00000606 	br	4005f40 <OS_TCBInit+0x308>
 4005f28:	e0bff817 	ldw	r2,-32(fp)
 4005f2c:	e0bff315 	stw	r2,-52(fp)
 4005f30:	e0bff317 	ldw	r2,-52(fp)
 4005f34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 4005f38:	00801084 	movi	r2,66
 4005f3c:	e0bfff15 	stw	r2,-4(fp)
 4005f40:	e0bfff17 	ldw	r2,-4(fp)
}
 4005f44:	e037883a 	mov	sp,fp
 4005f48:	dfc00117 	ldw	ra,4(sp)
 4005f4c:	df000017 	ldw	fp,0(sp)
 4005f50:	dec00204 	addi	sp,sp,8
 4005f54:	f800283a 	ret

04005f58 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 4005f58:	defffe04 	addi	sp,sp,-8
 4005f5c:	df000115 	stw	fp,4(sp)
 4005f60:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 4005f64:	d0a00d04 	addi	r2,gp,-32716
 4005f68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 4005f6c:	d0a00e04 	addi	r2,gp,-32712
 4005f70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 4005f74:	d0a00f84 	addi	r2,gp,-32706
 4005f78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 4005f7c:	d0a01004 	addi	r2,gp,-32704
 4005f80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 4005f84:	d0a00f04 	addi	r2,gp,-32708
 4005f88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 4005f8c:	d0a01084 	addi	r2,gp,-32702
 4005f90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 4005f94:	d0a01104 	addi	r2,gp,-32700
 4005f98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 4005f9c:	d0a01184 	addi	r2,gp,-32698
 4005fa0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 4005fa4:	d0a01204 	addi	r2,gp,-32696
 4005fa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 4005fac:	d0a01284 	addi	r2,gp,-32694
 4005fb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 4005fb4:	d0a01304 	addi	r2,gp,-32692
 4005fb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 4005fbc:	d0a01384 	addi	r2,gp,-32690
 4005fc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 4005fc4:	d0a01404 	addi	r2,gp,-32688
 4005fc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 4005fcc:	d0a01484 	addi	r2,gp,-32686
 4005fd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 4005fd4:	d0a01504 	addi	r2,gp,-32684
 4005fd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 4005fdc:	d0a01584 	addi	r2,gp,-32682
 4005fe0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 4005fe4:	d0a01604 	addi	r2,gp,-32680
 4005fe8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 4005fec:	d0a01684 	addi	r2,gp,-32678
 4005ff0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 4005ff4:	d0a01704 	addi	r2,gp,-32676
 4005ff8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 4005ffc:	d0a01784 	addi	r2,gp,-32674
 4006000:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 4006004:	d0a01804 	addi	r2,gp,-32672
 4006008:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 400600c:	d0a01884 	addi	r2,gp,-32670
 4006010:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 4006014:	d0a01904 	addi	r2,gp,-32668
 4006018:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 400601c:	d0a01984 	addi	r2,gp,-32666
 4006020:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 4006024:	d0a01a04 	addi	r2,gp,-32664
 4006028:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 400602c:	d0a01a84 	addi	r2,gp,-32662
 4006030:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 4006034:	d0a01b04 	addi	r2,gp,-32660
 4006038:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 400603c:	d0a01b84 	addi	r2,gp,-32658
 4006040:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 4006044:	d0a01c04 	addi	r2,gp,-32656
 4006048:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 400604c:	d0a01c84 	addi	r2,gp,-32654
 4006050:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 4006054:	d0a01d04 	addi	r2,gp,-32652
 4006058:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 400605c:	d0a01d84 	addi	r2,gp,-32650
 4006060:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 4006064:	d0a01e04 	addi	r2,gp,-32648
 4006068:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 400606c:	d0a01e84 	addi	r2,gp,-32646
 4006070:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 4006074:	d0a01f04 	addi	r2,gp,-32644
 4006078:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 400607c:	d0a01f84 	addi	r2,gp,-32642
 4006080:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 4006084:	d0a02004 	addi	r2,gp,-32640
 4006088:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 400608c:	d0a02084 	addi	r2,gp,-32638
 4006090:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 4006094:	d0a02104 	addi	r2,gp,-32636
 4006098:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 400609c:	d0a02184 	addi	r2,gp,-32634
 40060a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 40060a4:	d0a02204 	addi	r2,gp,-32632
 40060a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 40060ac:	d0a02284 	addi	r2,gp,-32630
 40060b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 40060b4:	d0a02304 	addi	r2,gp,-32628
 40060b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 40060bc:	d0a02384 	addi	r2,gp,-32626
 40060c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 40060c4:	d0a02404 	addi	r2,gp,-32624
 40060c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 40060cc:	d0a02904 	addi	r2,gp,-32604
 40060d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 40060d4:	e037883a 	mov	sp,fp
 40060d8:	df000017 	ldw	fp,0(sp)
 40060dc:	dec00104 	addi	sp,sp,4
 40060e0:	f800283a 	ret

040060e4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 40060e4:	defff104 	addi	sp,sp,-60
 40060e8:	df000e15 	stw	fp,56(sp)
 40060ec:	df000e04 	addi	fp,sp,56
 40060f0:	e13ffa15 	stw	r4,-24(fp)
 40060f4:	e1fffd15 	stw	r7,-12(fp)
 40060f8:	e17ffb0d 	sth	r5,-20(fp)
 40060fc:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4006100:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4006104:	e0bffd17 	ldw	r2,-12(fp)
 4006108:	1004c03a 	cmpne	r2,r2,zero
 400610c:	1000021e 	bne	r2,zero,4006118 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 4006110:	e03fff15 	stw	zero,-4(fp)
 4006114:	0000bb06 	br	4006404 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4006118:	e0bffa17 	ldw	r2,-24(fp)
 400611c:	1004c03a 	cmpne	r2,r2,zero
 4006120:	1000051e 	bne	r2,zero,4006138 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4006124:	e0fffd17 	ldw	r3,-12(fp)
 4006128:	00801b84 	movi	r2,110
 400612c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 4006130:	e03fff15 	stw	zero,-4(fp)
 4006134:	0000b306 	br	4006404 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 4006138:	e0bffa17 	ldw	r2,-24(fp)
 400613c:	10800003 	ldbu	r2,0(r2)
 4006140:	10803fcc 	andi	r2,r2,255
 4006144:	10800160 	cmpeqi	r2,r2,5
 4006148:	1000051e 	bne	r2,zero,4006160 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 400614c:	e0fffd17 	ldw	r3,-12(fp)
 4006150:	00800044 	movi	r2,1
 4006154:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 4006158:	e03fff15 	stw	zero,-4(fp)
 400615c:	0000a906 	br	4006404 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4006160:	e0fffc03 	ldbu	r3,-16(fp)
 4006164:	00bfe004 	movi	r2,-128
 4006168:	1884703a 	and	r2,r3,r2
 400616c:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 4006170:	e0bff943 	ldbu	r2,-27(fp)
 4006174:	1005003a 	cmpeq	r2,r2,zero
 4006178:	1000061e 	bne	r2,zero,4006194 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 400617c:	e0bffc03 	ldbu	r2,-16(fp)
 4006180:	10801fcc 	andi	r2,r2,127
 4006184:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 4006188:	00800044 	movi	r2,1
 400618c:	e0bff905 	stb	r2,-28(fp)
 4006190:	00000106 	br	4006198 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 4006194:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 4006198:	e0bffd17 	ldw	r2,-12(fp)
 400619c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40061a0:	0005303a 	rdctl	r2,status
 40061a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40061a8:	e0fff717 	ldw	r3,-36(fp)
 40061ac:	00bfff84 	movi	r2,-2
 40061b0:	1884703a 	and	r2,r3,r2
 40061b4:	1001703a 	wrctl	status,r2
  
  return context;
 40061b8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 40061bc:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 40061c0:	e0bffc03 	ldbu	r2,-16(fp)
 40061c4:	e0bffe15 	stw	r2,-8(fp)
 40061c8:	e0fffe17 	ldw	r3,-8(fp)
 40061cc:	18800060 	cmpeqi	r2,r3,1
 40061d0:	1000651e 	bne	r2,zero,4006368 <OSFlagAccept+0x284>
 40061d4:	e0fffe17 	ldw	r3,-8(fp)
 40061d8:	18800088 	cmpgei	r2,r3,2
 40061dc:	1000041e 	bne	r2,zero,40061f0 <OSFlagAccept+0x10c>
 40061e0:	e0fffe17 	ldw	r3,-8(fp)
 40061e4:	1805003a 	cmpeq	r2,r3,zero
 40061e8:	1000421e 	bne	r2,zero,40062f4 <OSFlagAccept+0x210>
 40061ec:	00007b06 	br	40063dc <OSFlagAccept+0x2f8>
 40061f0:	e0fffe17 	ldw	r3,-8(fp)
 40061f4:	188000a0 	cmpeqi	r2,r3,2
 40061f8:	1000041e 	bne	r2,zero,400620c <OSFlagAccept+0x128>
 40061fc:	e0fffe17 	ldw	r3,-8(fp)
 4006200:	188000e0 	cmpeqi	r2,r3,3
 4006204:	10001e1e 	bne	r2,zero,4006280 <OSFlagAccept+0x19c>
 4006208:	00007406 	br	40063dc <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400620c:	e0bffa17 	ldw	r2,-24(fp)
 4006210:	10c0020b 	ldhu	r3,8(r2)
 4006214:	e0bffb0b 	ldhu	r2,-20(fp)
 4006218:	1884703a 	and	r2,r3,r2
 400621c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4006220:	e0fff98b 	ldhu	r3,-26(fp)
 4006224:	e0bffb0b 	ldhu	r2,-20(fp)
 4006228:	18800d1e 	bne	r3,r2,4006260 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400622c:	e0bff903 	ldbu	r2,-28(fp)
 4006230:	10800058 	cmpnei	r2,r2,1
 4006234:	10000d1e 	bne	r2,zero,400626c <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 4006238:	e0bffa17 	ldw	r2,-24(fp)
 400623c:	1080020b 	ldhu	r2,8(r2)
 4006240:	1007883a 	mov	r3,r2
 4006244:	e0bff98b 	ldhu	r2,-26(fp)
 4006248:	0084303a 	nor	r2,zero,r2
 400624c:	1884703a 	and	r2,r3,r2
 4006250:	1007883a 	mov	r3,r2
 4006254:	e0bffa17 	ldw	r2,-24(fp)
 4006258:	10c0020d 	sth	r3,8(r2)
 400625c:	00000306 	br	400626c <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4006260:	e0fffd17 	ldw	r3,-12(fp)
 4006264:	00801c04 	movi	r2,112
 4006268:	18800005 	stb	r2,0(r3)
 400626c:	e0bff817 	ldw	r2,-32(fp)
 4006270:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006274:	e0bff617 	ldw	r2,-40(fp)
 4006278:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400627c:	00005f06 	br	40063fc <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 4006280:	e0bffa17 	ldw	r2,-24(fp)
 4006284:	10c0020b 	ldhu	r3,8(r2)
 4006288:	e0bffb0b 	ldhu	r2,-20(fp)
 400628c:	1884703a 	and	r2,r3,r2
 4006290:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4006294:	e0bff98b 	ldhu	r2,-26(fp)
 4006298:	1005003a 	cmpeq	r2,r2,zero
 400629c:	10000d1e 	bne	r2,zero,40062d4 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40062a0:	e0bff903 	ldbu	r2,-28(fp)
 40062a4:	10800058 	cmpnei	r2,r2,1
 40062a8:	10000d1e 	bne	r2,zero,40062e0 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 40062ac:	e0bffa17 	ldw	r2,-24(fp)
 40062b0:	1080020b 	ldhu	r2,8(r2)
 40062b4:	1007883a 	mov	r3,r2
 40062b8:	e0bff98b 	ldhu	r2,-26(fp)
 40062bc:	0084303a 	nor	r2,zero,r2
 40062c0:	1884703a 	and	r2,r3,r2
 40062c4:	1007883a 	mov	r3,r2
 40062c8:	e0bffa17 	ldw	r2,-24(fp)
 40062cc:	10c0020d 	sth	r3,8(r2)
 40062d0:	00000306 	br	40062e0 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 40062d4:	e0fffd17 	ldw	r3,-12(fp)
 40062d8:	00801c04 	movi	r2,112
 40062dc:	18800005 	stb	r2,0(r3)
 40062e0:	e0bff817 	ldw	r2,-32(fp)
 40062e4:	e0bff515 	stw	r2,-44(fp)
 40062e8:	e0bff517 	ldw	r2,-44(fp)
 40062ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 40062f0:	00004206 	br	40063fc <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 40062f4:	e0bffa17 	ldw	r2,-24(fp)
 40062f8:	1080020b 	ldhu	r2,8(r2)
 40062fc:	0084303a 	nor	r2,zero,r2
 4006300:	1007883a 	mov	r3,r2
 4006304:	e0bffb0b 	ldhu	r2,-20(fp)
 4006308:	1884703a 	and	r2,r3,r2
 400630c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4006310:	e0fff98b 	ldhu	r3,-26(fp)
 4006314:	e0bffb0b 	ldhu	r2,-20(fp)
 4006318:	18800b1e 	bne	r3,r2,4006348 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400631c:	e0bff903 	ldbu	r2,-28(fp)
 4006320:	10800058 	cmpnei	r2,r2,1
 4006324:	10000b1e 	bne	r2,zero,4006354 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4006328:	e0bffa17 	ldw	r2,-24(fp)
 400632c:	10c0020b 	ldhu	r3,8(r2)
 4006330:	e0bff98b 	ldhu	r2,-26(fp)
 4006334:	1884b03a 	or	r2,r3,r2
 4006338:	1007883a 	mov	r3,r2
 400633c:	e0bffa17 	ldw	r2,-24(fp)
 4006340:	10c0020d 	sth	r3,8(r2)
 4006344:	00000306 	br	4006354 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4006348:	e0fffd17 	ldw	r3,-12(fp)
 400634c:	00801c04 	movi	r2,112
 4006350:	18800005 	stb	r2,0(r3)
 4006354:	e0bff817 	ldw	r2,-32(fp)
 4006358:	e0bff415 	stw	r2,-48(fp)
 400635c:	e0bff417 	ldw	r2,-48(fp)
 4006360:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4006364:	00002506 	br	40063fc <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4006368:	e0bffa17 	ldw	r2,-24(fp)
 400636c:	1080020b 	ldhu	r2,8(r2)
 4006370:	0084303a 	nor	r2,zero,r2
 4006374:	1007883a 	mov	r3,r2
 4006378:	e0bffb0b 	ldhu	r2,-20(fp)
 400637c:	1884703a 	and	r2,r3,r2
 4006380:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4006384:	e0bff98b 	ldhu	r2,-26(fp)
 4006388:	1005003a 	cmpeq	r2,r2,zero
 400638c:	10000b1e 	bne	r2,zero,40063bc <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006390:	e0bff903 	ldbu	r2,-28(fp)
 4006394:	10800058 	cmpnei	r2,r2,1
 4006398:	10000b1e 	bne	r2,zero,40063c8 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 400639c:	e0bffa17 	ldw	r2,-24(fp)
 40063a0:	10c0020b 	ldhu	r3,8(r2)
 40063a4:	e0bff98b 	ldhu	r2,-26(fp)
 40063a8:	1884b03a 	or	r2,r3,r2
 40063ac:	1007883a 	mov	r3,r2
 40063b0:	e0bffa17 	ldw	r2,-24(fp)
 40063b4:	10c0020d 	sth	r3,8(r2)
 40063b8:	00000306 	br	40063c8 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 40063bc:	e0fffd17 	ldw	r3,-12(fp)
 40063c0:	00801c04 	movi	r2,112
 40063c4:	18800005 	stb	r2,0(r3)
 40063c8:	e0bff817 	ldw	r2,-32(fp)
 40063cc:	e0bff315 	stw	r2,-52(fp)
 40063d0:	e0bff317 	ldw	r2,-52(fp)
 40063d4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 40063d8:	00000806 	br	40063fc <OSFlagAccept+0x318>
 40063dc:	e0bff817 	ldw	r2,-32(fp)
 40063e0:	e0bff215 	stw	r2,-56(fp)
 40063e4:	e0bff217 	ldw	r2,-56(fp)
 40063e8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 40063ec:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 40063f0:	e0fffd17 	ldw	r3,-12(fp)
 40063f4:	00801bc4 	movi	r2,111
 40063f8:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 40063fc:	e0bff98b 	ldhu	r2,-26(fp)
 4006400:	e0bfff15 	stw	r2,-4(fp)
 4006404:	e0bfff17 	ldw	r2,-4(fp)
}
 4006408:	e037883a 	mov	sp,fp
 400640c:	df000017 	ldw	fp,0(sp)
 4006410:	dec00104 	addi	sp,sp,4
 4006414:	f800283a 	ret

04006418 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 4006418:	defff704 	addi	sp,sp,-36
 400641c:	df000815 	stw	fp,32(sp)
 4006420:	df000804 	addi	fp,sp,32
 4006424:	e17ffe15 	stw	r5,-8(fp)
 4006428:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 400642c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 4006430:	e0bffe17 	ldw	r2,-8(fp)
 4006434:	1004c03a 	cmpne	r2,r2,zero
 4006438:	1000021e 	bne	r2,zero,4006444 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 400643c:	e03fff15 	stw	zero,-4(fp)
 4006440:	00003f06 	br	4006540 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 4006444:	008100b4 	movhi	r2,1026
 4006448:	10a20404 	addi	r2,r2,-30704
 400644c:	10800003 	ldbu	r2,0(r2)
 4006450:	10803fcc 	andi	r2,r2,255
 4006454:	1005003a 	cmpeq	r2,r2,zero
 4006458:	1000051e 	bne	r2,zero,4006470 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 400645c:	e0fffe17 	ldw	r3,-8(fp)
 4006460:	00800404 	movi	r2,16
 4006464:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 4006468:	e03fff15 	stw	zero,-4(fp)
 400646c:	00003406 	br	4006540 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006470:	0005303a 	rdctl	r2,status
 4006474:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006478:	e0fffa17 	ldw	r3,-24(fp)
 400647c:	00bfff84 	movi	r2,-2
 4006480:	1884703a 	and	r2,r3,r2
 4006484:	1001703a 	wrctl	status,r2
  
  return context;
 4006488:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400648c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 4006490:	008100b4 	movhi	r2,1026
 4006494:	10a20704 	addi	r2,r2,-30692
 4006498:	10800017 	ldw	r2,0(r2)
 400649c:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 40064a0:	e0bffc17 	ldw	r2,-16(fp)
 40064a4:	1005003a 	cmpeq	r2,r2,zero
 40064a8:	10001c1e 	bne	r2,zero,400651c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 40064ac:	008100b4 	movhi	r2,1026
 40064b0:	10a20704 	addi	r2,r2,-30692
 40064b4:	10800017 	ldw	r2,0(r2)
 40064b8:	10800117 	ldw	r2,4(r2)
 40064bc:	1007883a 	mov	r3,r2
 40064c0:	008100b4 	movhi	r2,1026
 40064c4:	10a20704 	addi	r2,r2,-30692
 40064c8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 40064cc:	e0fffc17 	ldw	r3,-16(fp)
 40064d0:	00800144 	movi	r2,5
 40064d4:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 40064d8:	e0fffc17 	ldw	r3,-16(fp)
 40064dc:	e0bffd0b 	ldhu	r2,-12(fp)
 40064e0:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 40064e4:	e0bffc17 	ldw	r2,-16(fp)
 40064e8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 40064ec:	e0fffc17 	ldw	r3,-16(fp)
 40064f0:	00800fc4 	movi	r2,63
 40064f4:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 40064f8:	e0bffc17 	ldw	r2,-16(fp)
 40064fc:	100002c5 	stb	zero,11(r2)
 4006500:	e0bffb17 	ldw	r2,-20(fp)
 4006504:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006508:	e0bff917 	ldw	r2,-28(fp)
 400650c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 4006510:	e0bffe17 	ldw	r2,-8(fp)
 4006514:	10000005 	stb	zero,0(r2)
 4006518:	00000706 	br	4006538 <OSFlagCreate+0x120>
 400651c:	e0bffb17 	ldw	r2,-20(fp)
 4006520:	e0bff815 	stw	r2,-32(fp)
 4006524:	e0bff817 	ldw	r2,-32(fp)
 4006528:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 400652c:	e0fffe17 	ldw	r3,-8(fp)
 4006530:	00801c84 	movi	r2,114
 4006534:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 4006538:	e0bffc17 	ldw	r2,-16(fp)
 400653c:	e0bfff15 	stw	r2,-4(fp)
 4006540:	e0bfff17 	ldw	r2,-4(fp)
}
 4006544:	e037883a 	mov	sp,fp
 4006548:	df000017 	ldw	fp,0(sp)
 400654c:	dec00104 	addi	sp,sp,4
 4006550:	f800283a 	ret

04006554 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 4006554:	defff004 	addi	sp,sp,-64
 4006558:	dfc00f15 	stw	ra,60(sp)
 400655c:	df000e15 	stw	fp,56(sp)
 4006560:	df000e04 	addi	fp,sp,56
 4006564:	e13ffb15 	stw	r4,-20(fp)
 4006568:	e1bffd15 	stw	r6,-12(fp)
 400656c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4006570:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4006574:	e0bffd17 	ldw	r2,-12(fp)
 4006578:	1004c03a 	cmpne	r2,r2,zero
 400657c:	1000031e 	bne	r2,zero,400658c <OSFlagDel+0x38>
        return (pgrp);
 4006580:	e0bffb17 	ldw	r2,-20(fp)
 4006584:	e0bfff15 	stw	r2,-4(fp)
 4006588:	00009606 	br	40067e4 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400658c:	e0bffb17 	ldw	r2,-20(fp)
 4006590:	1004c03a 	cmpne	r2,r2,zero
 4006594:	1000061e 	bne	r2,zero,40065b0 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4006598:	e0fffd17 	ldw	r3,-12(fp)
 400659c:	00801b84 	movi	r2,110
 40065a0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 40065a4:	e0fffb17 	ldw	r3,-20(fp)
 40065a8:	e0ffff15 	stw	r3,-4(fp)
 40065ac:	00008d06 	br	40067e4 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40065b0:	008100b4 	movhi	r2,1026
 40065b4:	10a20404 	addi	r2,r2,-30704
 40065b8:	10800003 	ldbu	r2,0(r2)
 40065bc:	10803fcc 	andi	r2,r2,255
 40065c0:	1005003a 	cmpeq	r2,r2,zero
 40065c4:	1000061e 	bne	r2,zero,40065e0 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 40065c8:	e0fffd17 	ldw	r3,-12(fp)
 40065cc:	008003c4 	movi	r2,15
 40065d0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 40065d4:	e0bffb17 	ldw	r2,-20(fp)
 40065d8:	e0bfff15 	stw	r2,-4(fp)
 40065dc:	00008106 	br	40067e4 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 40065e0:	e0bffb17 	ldw	r2,-20(fp)
 40065e4:	10800003 	ldbu	r2,0(r2)
 40065e8:	10803fcc 	andi	r2,r2,255
 40065ec:	10800160 	cmpeqi	r2,r2,5
 40065f0:	1000061e 	bne	r2,zero,400660c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 40065f4:	e0fffd17 	ldw	r3,-12(fp)
 40065f8:	00800044 	movi	r2,1
 40065fc:	18800005 	stb	r2,0(r3)
        return (pgrp);
 4006600:	e0fffb17 	ldw	r3,-20(fp)
 4006604:	e0ffff15 	stw	r3,-4(fp)
 4006608:	00007606 	br	40067e4 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400660c:	0005303a 	rdctl	r2,status
 4006610:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006614:	e0fff617 	ldw	r3,-40(fp)
 4006618:	00bfff84 	movi	r2,-2
 400661c:	1884703a 	and	r2,r3,r2
 4006620:	1001703a 	wrctl	status,r2
  
  return context;
 4006624:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 4006628:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 400662c:	e0bffb17 	ldw	r2,-20(fp)
 4006630:	10800117 	ldw	r2,4(r2)
 4006634:	1005003a 	cmpeq	r2,r2,zero
 4006638:	1000031e 	bne	r2,zero,4006648 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 400663c:	00800044 	movi	r2,1
 4006640:	e0bffa05 	stb	r2,-24(fp)
 4006644:	00000106 	br	400664c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4006648:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 400664c:	e0bffc03 	ldbu	r2,-16(fp)
 4006650:	e0bffe15 	stw	r2,-8(fp)
 4006654:	e0fffe17 	ldw	r3,-8(fp)
 4006658:	1805003a 	cmpeq	r2,r3,zero
 400665c:	1000041e 	bne	r2,zero,4006670 <OSFlagDel+0x11c>
 4006660:	e0fffe17 	ldw	r3,-8(fp)
 4006664:	18800060 	cmpeqi	r2,r3,1
 4006668:	1000281e 	bne	r2,zero,400670c <OSFlagDel+0x1b8>
 400666c:	00005206 	br	40067b8 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 4006670:	e0bffa03 	ldbu	r2,-24(fp)
 4006674:	1004c03a 	cmpne	r2,r2,zero
 4006678:	10001a1e 	bne	r2,zero,40066e4 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 400667c:	e0fffb17 	ldw	r3,-20(fp)
 4006680:	00800fc4 	movi	r2,63
 4006684:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4006688:	e0bffb17 	ldw	r2,-20(fp)
 400668c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4006690:	e0bffb17 	ldw	r2,-20(fp)
 4006694:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 4006698:	008100b4 	movhi	r2,1026
 400669c:	10a20704 	addi	r2,r2,-30692
 40066a0:	10c00017 	ldw	r3,0(r2)
 40066a4:	e0bffb17 	ldw	r2,-20(fp)
 40066a8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 40066ac:	e0bffb17 	ldw	r2,-20(fp)
 40066b0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 40066b4:	00c100b4 	movhi	r3,1026
 40066b8:	18e20704 	addi	r3,r3,-30692
 40066bc:	e0bffb17 	ldw	r2,-20(fp)
 40066c0:	18800015 	stw	r2,0(r3)
 40066c4:	e0bff717 	ldw	r2,-36(fp)
 40066c8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40066cc:	e0bff517 	ldw	r2,-44(fp)
 40066d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 40066d4:	e0bffd17 	ldw	r2,-12(fp)
 40066d8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 40066dc:	e03ff815 	stw	zero,-32(fp)
 40066e0:	00003e06 	br	40067dc <OSFlagDel+0x288>
 40066e4:	e0bff717 	ldw	r2,-36(fp)
 40066e8:	e0bff415 	stw	r2,-48(fp)
 40066ec:	e0bff417 	ldw	r2,-48(fp)
 40066f0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 40066f4:	e0fffd17 	ldw	r3,-12(fp)
 40066f8:	00801244 	movi	r2,73
 40066fc:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 4006700:	e0bffb17 	ldw	r2,-20(fp)
 4006704:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 4006708:	00003406 	br	40067dc <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400670c:	e0bffb17 	ldw	r2,-20(fp)
 4006710:	10800117 	ldw	r2,4(r2)
 4006714:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 4006718:	00000606 	br	4006734 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 400671c:	e13ff917 	ldw	r4,-28(fp)
 4006720:	000b883a 	mov	r5,zero
 4006724:	40078640 	call	4007864 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4006728:	e0bff917 	ldw	r2,-28(fp)
 400672c:	10800017 	ldw	r2,0(r2)
 4006730:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 4006734:	e0bff917 	ldw	r2,-28(fp)
 4006738:	1004c03a 	cmpne	r2,r2,zero
 400673c:	103ff71e 	bne	r2,zero,400671c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 4006740:	e0fffb17 	ldw	r3,-20(fp)
 4006744:	00800fc4 	movi	r2,63
 4006748:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400674c:	e0bffb17 	ldw	r2,-20(fp)
 4006750:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4006754:	e0bffb17 	ldw	r2,-20(fp)
 4006758:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 400675c:	008100b4 	movhi	r2,1026
 4006760:	10a20704 	addi	r2,r2,-30692
 4006764:	10c00017 	ldw	r3,0(r2)
 4006768:	e0bffb17 	ldw	r2,-20(fp)
 400676c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 4006770:	e0bffb17 	ldw	r2,-20(fp)
 4006774:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 4006778:	00c100b4 	movhi	r3,1026
 400677c:	18e20704 	addi	r3,r3,-30692
 4006780:	e0bffb17 	ldw	r2,-20(fp)
 4006784:	18800015 	stw	r2,0(r3)
 4006788:	e0bff717 	ldw	r2,-36(fp)
 400678c:	e0bff315 	stw	r2,-52(fp)
 4006790:	e0bff317 	ldw	r2,-52(fp)
 4006794:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4006798:	e0bffa03 	ldbu	r2,-24(fp)
 400679c:	10800058 	cmpnei	r2,r2,1
 40067a0:	1000011e 	bne	r2,zero,40067a8 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 40067a4:	40057540 	call	4005754 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 40067a8:	e0bffd17 	ldw	r2,-12(fp)
 40067ac:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 40067b0:	e03ff815 	stw	zero,-32(fp)
             break;
 40067b4:	00000906 	br	40067dc <OSFlagDel+0x288>
 40067b8:	e0bff717 	ldw	r2,-36(fp)
 40067bc:	e0bff215 	stw	r2,-56(fp)
 40067c0:	e0bff217 	ldw	r2,-56(fp)
 40067c4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 40067c8:	e0fffd17 	ldw	r3,-12(fp)
 40067cc:	008001c4 	movi	r2,7
 40067d0:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 40067d4:	e0bffb17 	ldw	r2,-20(fp)
 40067d8:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 40067dc:	e0bff817 	ldw	r2,-32(fp)
 40067e0:	e0bfff15 	stw	r2,-4(fp)
 40067e4:	e0bfff17 	ldw	r2,-4(fp)
}
 40067e8:	e037883a 	mov	sp,fp
 40067ec:	dfc00117 	ldw	ra,4(sp)
 40067f0:	df000017 	ldw	fp,0(sp)
 40067f4:	dec00204 	addi	sp,sp,8
 40067f8:	f800283a 	ret

040067fc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 40067fc:	defff504 	addi	sp,sp,-44
 4006800:	dfc00a15 	stw	ra,40(sp)
 4006804:	df000915 	stw	fp,36(sp)
 4006808:	df000904 	addi	fp,sp,36
 400680c:	e13ffc15 	stw	r4,-16(fp)
 4006810:	e17ffd15 	stw	r5,-12(fp)
 4006814:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4006818:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400681c:	e0bffe17 	ldw	r2,-8(fp)
 4006820:	1004c03a 	cmpne	r2,r2,zero
 4006824:	1000021e 	bne	r2,zero,4006830 <OSFlagNameGet+0x34>
        return (0);
 4006828:	e03fff15 	stw	zero,-4(fp)
 400682c:	00003e06 	br	4006928 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 4006830:	e0bffc17 	ldw	r2,-16(fp)
 4006834:	1004c03a 	cmpne	r2,r2,zero
 4006838:	1000051e 	bne	r2,zero,4006850 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400683c:	e0fffe17 	ldw	r3,-8(fp)
 4006840:	00801b84 	movi	r2,110
 4006844:	18800005 	stb	r2,0(r3)
        return (0);
 4006848:	e03fff15 	stw	zero,-4(fp)
 400684c:	00003606 	br	4006928 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4006850:	e0bffd17 	ldw	r2,-12(fp)
 4006854:	1004c03a 	cmpne	r2,r2,zero
 4006858:	1000051e 	bne	r2,zero,4006870 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 400685c:	e0fffe17 	ldw	r3,-8(fp)
 4006860:	00800304 	movi	r2,12
 4006864:	18800005 	stb	r2,0(r3)
        return (0);
 4006868:	e03fff15 	stw	zero,-4(fp)
 400686c:	00002e06 	br	4006928 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4006870:	008100b4 	movhi	r2,1026
 4006874:	10a20404 	addi	r2,r2,-30704
 4006878:	10800003 	ldbu	r2,0(r2)
 400687c:	10803fcc 	andi	r2,r2,255
 4006880:	1005003a 	cmpeq	r2,r2,zero
 4006884:	1000051e 	bne	r2,zero,400689c <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 4006888:	e0fffe17 	ldw	r3,-8(fp)
 400688c:	00800444 	movi	r2,17
 4006890:	18800005 	stb	r2,0(r3)
        return (0);
 4006894:	e03fff15 	stw	zero,-4(fp)
 4006898:	00002306 	br	4006928 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400689c:	0005303a 	rdctl	r2,status
 40068a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40068a4:	e0fff917 	ldw	r3,-28(fp)
 40068a8:	00bfff84 	movi	r2,-2
 40068ac:	1884703a 	and	r2,r3,r2
 40068b0:	1001703a 	wrctl	status,r2
  
  return context;
 40068b4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 40068b8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 40068bc:	e0bffc17 	ldw	r2,-16(fp)
 40068c0:	10800003 	ldbu	r2,0(r2)
 40068c4:	10803fcc 	andi	r2,r2,255
 40068c8:	10800160 	cmpeqi	r2,r2,5
 40068cc:	1000091e 	bne	r2,zero,40068f4 <OSFlagNameGet+0xf8>
 40068d0:	e0bffa17 	ldw	r2,-24(fp)
 40068d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40068d8:	e0bff817 	ldw	r2,-32(fp)
 40068dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 40068e0:	e0fffe17 	ldw	r3,-8(fp)
 40068e4:	00800044 	movi	r2,1
 40068e8:	18800005 	stb	r2,0(r3)
        return (0);
 40068ec:	e03fff15 	stw	zero,-4(fp)
 40068f0:	00000d06 	br	4006928 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 40068f4:	e0bffc17 	ldw	r2,-16(fp)
 40068f8:	11400284 	addi	r5,r2,10
 40068fc:	e13ffd17 	ldw	r4,-12(fp)
 4006900:	40059740 	call	4005974 <OS_StrCopy>
 4006904:	e0bffb05 	stb	r2,-20(fp)
 4006908:	e0bffa17 	ldw	r2,-24(fp)
 400690c:	e0bff715 	stw	r2,-36(fp)
 4006910:	e0bff717 	ldw	r2,-36(fp)
 4006914:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4006918:	e0bffe17 	ldw	r2,-8(fp)
 400691c:	10000005 	stb	zero,0(r2)
    return (len);
 4006920:	e0bffb03 	ldbu	r2,-20(fp)
 4006924:	e0bfff15 	stw	r2,-4(fp)
 4006928:	e0bfff17 	ldw	r2,-4(fp)
}
 400692c:	e037883a 	mov	sp,fp
 4006930:	dfc00117 	ldw	ra,4(sp)
 4006934:	df000017 	ldw	fp,0(sp)
 4006938:	dec00204 	addi	sp,sp,8
 400693c:	f800283a 	ret

04006940 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 4006940:	defff504 	addi	sp,sp,-44
 4006944:	dfc00a15 	stw	ra,40(sp)
 4006948:	df000915 	stw	fp,36(sp)
 400694c:	df000904 	addi	fp,sp,36
 4006950:	e13ffd15 	stw	r4,-12(fp)
 4006954:	e17ffe15 	stw	r5,-8(fp)
 4006958:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400695c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4006960:	e0bfff17 	ldw	r2,-4(fp)
 4006964:	1005003a 	cmpeq	r2,r2,zero
 4006968:	1000451e 	bne	r2,zero,4006a80 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 400696c:	e0bffd17 	ldw	r2,-12(fp)
 4006970:	1004c03a 	cmpne	r2,r2,zero
 4006974:	1000041e 	bne	r2,zero,4006988 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4006978:	e0ffff17 	ldw	r3,-4(fp)
 400697c:	00801b84 	movi	r2,110
 4006980:	18800005 	stb	r2,0(r3)
        return;
 4006984:	00003e06 	br	4006a80 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4006988:	e0bffe17 	ldw	r2,-8(fp)
 400698c:	1004c03a 	cmpne	r2,r2,zero
 4006990:	1000041e 	bne	r2,zero,40069a4 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 4006994:	e0ffff17 	ldw	r3,-4(fp)
 4006998:	00800304 	movi	r2,12
 400699c:	18800005 	stb	r2,0(r3)
        return;
 40069a0:	00003706 	br	4006a80 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40069a4:	008100b4 	movhi	r2,1026
 40069a8:	10a20404 	addi	r2,r2,-30704
 40069ac:	10800003 	ldbu	r2,0(r2)
 40069b0:	10803fcc 	andi	r2,r2,255
 40069b4:	1005003a 	cmpeq	r2,r2,zero
 40069b8:	1000041e 	bne	r2,zero,40069cc <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 40069bc:	e0ffff17 	ldw	r3,-4(fp)
 40069c0:	00800484 	movi	r2,18
 40069c4:	18800005 	stb	r2,0(r3)
        return;
 40069c8:	00002d06 	br	4006a80 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40069cc:	0005303a 	rdctl	r2,status
 40069d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40069d4:	e0fffa17 	ldw	r3,-24(fp)
 40069d8:	00bfff84 	movi	r2,-2
 40069dc:	1884703a 	and	r2,r3,r2
 40069e0:	1001703a 	wrctl	status,r2
  
  return context;
 40069e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 40069e8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 40069ec:	e0bffd17 	ldw	r2,-12(fp)
 40069f0:	10800003 	ldbu	r2,0(r2)
 40069f4:	10803fcc 	andi	r2,r2,255
 40069f8:	10800160 	cmpeqi	r2,r2,5
 40069fc:	1000081e 	bne	r2,zero,4006a20 <OSFlagNameSet+0xe0>
 4006a00:	e0bffb17 	ldw	r2,-20(fp)
 4006a04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006a08:	e0bff917 	ldw	r2,-28(fp)
 4006a0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 4006a10:	e0ffff17 	ldw	r3,-4(fp)
 4006a14:	00800044 	movi	r2,1
 4006a18:	18800005 	stb	r2,0(r3)
        return;
 4006a1c:	00001806 	br	4006a80 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 4006a20:	e13ffe17 	ldw	r4,-8(fp)
 4006a24:	40059f40 	call	40059f4 <OS_StrLen>
 4006a28:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 4006a2c:	e0bffc03 	ldbu	r2,-16(fp)
 4006a30:	10800830 	cmpltui	r2,r2,32
 4006a34:	1000081e 	bne	r2,zero,4006a58 <OSFlagNameSet+0x118>
 4006a38:	e0bffb17 	ldw	r2,-20(fp)
 4006a3c:	e0bff815 	stw	r2,-32(fp)
 4006a40:	e0bff817 	ldw	r2,-32(fp)
 4006a44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 4006a48:	e0ffff17 	ldw	r3,-4(fp)
 4006a4c:	00801cc4 	movi	r2,115
 4006a50:	18800005 	stb	r2,0(r3)
        return;
 4006a54:	00000a06 	br	4006a80 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 4006a58:	e0bffd17 	ldw	r2,-12(fp)
 4006a5c:	11000284 	addi	r4,r2,10
 4006a60:	e17ffe17 	ldw	r5,-8(fp)
 4006a64:	40059740 	call	4005974 <OS_StrCopy>
 4006a68:	e0bffb17 	ldw	r2,-20(fp)
 4006a6c:	e0bff715 	stw	r2,-36(fp)
 4006a70:	e0bff717 	ldw	r2,-36(fp)
 4006a74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4006a78:	e0bfff17 	ldw	r2,-4(fp)
 4006a7c:	10000005 	stb	zero,0(r2)
    return;
}
 4006a80:	e037883a 	mov	sp,fp
 4006a84:	dfc00117 	ldw	ra,4(sp)
 4006a88:	df000017 	ldw	fp,0(sp)
 4006a8c:	dec00204 	addi	sp,sp,8
 4006a90:	f800283a 	ret

04006a94 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 4006a94:	deffe004 	addi	sp,sp,-128
 4006a98:	dfc01f15 	stw	ra,124(sp)
 4006a9c:	df001e15 	stw	fp,120(sp)
 4006aa0:	df001e04 	addi	fp,sp,120
 4006aa4:	e13ff915 	stw	r4,-28(fp)
 4006aa8:	e17ffa0d 	sth	r5,-24(fp)
 4006aac:	e1bffb05 	stb	r6,-20(fp)
 4006ab0:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4006ab4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4006ab8:	e0800217 	ldw	r2,8(fp)
 4006abc:	1004c03a 	cmpne	r2,r2,zero
 4006ac0:	1000021e 	bne	r2,zero,4006acc <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 4006ac4:	e03fff15 	stw	zero,-4(fp)
 4006ac8:	00017d06 	br	40070c0 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4006acc:	e0bff917 	ldw	r2,-28(fp)
 4006ad0:	1004c03a 	cmpne	r2,r2,zero
 4006ad4:	1000051e 	bne	r2,zero,4006aec <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4006ad8:	e0c00217 	ldw	r3,8(fp)
 4006adc:	00801b84 	movi	r2,110
 4006ae0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 4006ae4:	e03fff15 	stw	zero,-4(fp)
 4006ae8:	00017506 	br	40070c0 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4006aec:	008100b4 	movhi	r2,1026
 4006af0:	10a20404 	addi	r2,r2,-30704
 4006af4:	10800003 	ldbu	r2,0(r2)
 4006af8:	10803fcc 	andi	r2,r2,255
 4006afc:	1005003a 	cmpeq	r2,r2,zero
 4006b00:	1000051e 	bne	r2,zero,4006b18 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 4006b04:	e0c00217 	ldw	r3,8(fp)
 4006b08:	00800084 	movi	r2,2
 4006b0c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 4006b10:	e03fff15 	stw	zero,-4(fp)
 4006b14:	00016a06 	br	40070c0 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 4006b18:	008100b4 	movhi	r2,1026
 4006b1c:	10a1f404 	addi	r2,r2,-30768
 4006b20:	10800003 	ldbu	r2,0(r2)
 4006b24:	10803fcc 	andi	r2,r2,255
 4006b28:	1005003a 	cmpeq	r2,r2,zero
 4006b2c:	1000051e 	bne	r2,zero,4006b44 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 4006b30:	e0c00217 	ldw	r3,8(fp)
 4006b34:	00800344 	movi	r2,13
 4006b38:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 4006b3c:	e03fff15 	stw	zero,-4(fp)
 4006b40:	00015f06 	br	40070c0 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 4006b44:	e0bff917 	ldw	r2,-28(fp)
 4006b48:	10800003 	ldbu	r2,0(r2)
 4006b4c:	10803fcc 	andi	r2,r2,255
 4006b50:	10800160 	cmpeqi	r2,r2,5
 4006b54:	1000051e 	bne	r2,zero,4006b6c <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 4006b58:	e0c00217 	ldw	r3,8(fp)
 4006b5c:	00800044 	movi	r2,1
 4006b60:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 4006b64:	e03fff15 	stw	zero,-4(fp)
 4006b68:	00015506 	br	40070c0 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4006b6c:	e0fffb03 	ldbu	r3,-20(fp)
 4006b70:	00bfe004 	movi	r2,-128
 4006b74:	1884703a 	and	r2,r3,r2
 4006b78:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 4006b7c:	e0bff283 	ldbu	r2,-54(fp)
 4006b80:	1005003a 	cmpeq	r2,r2,zero
 4006b84:	1000071e 	bne	r2,zero,4006ba4 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 4006b88:	00c01fc4 	movi	r3,127
 4006b8c:	e0bffb03 	ldbu	r2,-20(fp)
 4006b90:	10c4703a 	and	r2,r2,r3
 4006b94:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 4006b98:	00800044 	movi	r2,1
 4006b9c:	e0bff205 	stb	r2,-56(fp)
 4006ba0:	00000106 	br	4006ba8 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 4006ba4:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006ba8:	0005303a 	rdctl	r2,status
 4006bac:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006bb0:	e0fff017 	ldw	r3,-64(fp)
 4006bb4:	00bfff84 	movi	r2,-2
 4006bb8:	1884703a 	and	r2,r3,r2
 4006bbc:	1001703a 	wrctl	status,r2
  
  return context;
 4006bc0:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4006bc4:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 4006bc8:	e0bffb03 	ldbu	r2,-20(fp)
 4006bcc:	e0bffe15 	stw	r2,-8(fp)
 4006bd0:	e0fffe17 	ldw	r3,-8(fp)
 4006bd4:	18800060 	cmpeqi	r2,r3,1
 4006bd8:	1000981e 	bne	r2,zero,4006e3c <OSFlagPend+0x3a8>
 4006bdc:	e0fffe17 	ldw	r3,-8(fp)
 4006be0:	18800088 	cmpgei	r2,r3,2
 4006be4:	1000041e 	bne	r2,zero,4006bf8 <OSFlagPend+0x164>
 4006be8:	e0fffe17 	ldw	r3,-8(fp)
 4006bec:	1805003a 	cmpeq	r2,r3,zero
 4006bf0:	1000641e 	bne	r2,zero,4006d84 <OSFlagPend+0x2f0>
 4006bf4:	0000bf06 	br	4006ef4 <OSFlagPend+0x460>
 4006bf8:	e0fffe17 	ldw	r3,-8(fp)
 4006bfc:	188000a0 	cmpeqi	r2,r3,2
 4006c00:	1000041e 	bne	r2,zero,4006c14 <OSFlagPend+0x180>
 4006c04:	e0fffe17 	ldw	r3,-8(fp)
 4006c08:	188000e0 	cmpeqi	r2,r3,3
 4006c0c:	10002f1e 	bne	r2,zero,4006ccc <OSFlagPend+0x238>
 4006c10:	0000b806 	br	4006ef4 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 4006c14:	e0bff917 	ldw	r2,-28(fp)
 4006c18:	10c0020b 	ldhu	r3,8(r2)
 4006c1c:	e0bffa0b 	ldhu	r2,-24(fp)
 4006c20:	1884703a 	and	r2,r3,r2
 4006c24:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4006c28:	e0fff30b 	ldhu	r3,-52(fp)
 4006c2c:	e0bffa0b 	ldhu	r2,-24(fp)
 4006c30:	18801a1e 	bne	r3,r2,4006c9c <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006c34:	e0bff203 	ldbu	r2,-56(fp)
 4006c38:	10800058 	cmpnei	r2,r2,1
 4006c3c:	1000091e 	bne	r2,zero,4006c64 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 4006c40:	e0bff917 	ldw	r2,-28(fp)
 4006c44:	1080020b 	ldhu	r2,8(r2)
 4006c48:	1007883a 	mov	r3,r2
 4006c4c:	e0bff30b 	ldhu	r2,-52(fp)
 4006c50:	0084303a 	nor	r2,zero,r2
 4006c54:	1884703a 	and	r2,r3,r2
 4006c58:	1007883a 	mov	r3,r2
 4006c5c:	e0bff917 	ldw	r2,-28(fp)
 4006c60:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4006c64:	008100b4 	movhi	r2,1026
 4006c68:	10a20504 	addi	r2,r2,-30700
 4006c6c:	10c00017 	ldw	r3,0(r2)
 4006c70:	e0bff30b 	ldhu	r2,-52(fp)
 4006c74:	18800b0d 	sth	r2,44(r3)
 4006c78:	e0bff117 	ldw	r2,-60(fp)
 4006c7c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006c80:	e0bfef17 	ldw	r2,-68(fp)
 4006c84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4006c88:	e0800217 	ldw	r2,8(fp)
 4006c8c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4006c90:	e0bff30b 	ldhu	r2,-52(fp)
 4006c94:	e0bfff15 	stw	r2,-4(fp)
 4006c98:	00010906 	br	40070c0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4006c9c:	e1bffa0b 	ldhu	r6,-24(fp)
 4006ca0:	e1fffb03 	ldbu	r7,-20(fp)
 4006ca4:	e0bffc0b 	ldhu	r2,-16(fp)
 4006ca8:	e17ff404 	addi	r5,fp,-48
 4006cac:	d8800015 	stw	r2,0(sp)
 4006cb0:	e13ff917 	ldw	r4,-28(fp)
 4006cb4:	40075bc0 	call	40075bc <OS_FlagBlock>
 4006cb8:	e0bff117 	ldw	r2,-60(fp)
 4006cbc:	e0bfee15 	stw	r2,-72(fp)
 4006cc0:	e0bfee17 	ldw	r2,-72(fp)
 4006cc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4006cc8:	00009506 	br	4006f20 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 4006ccc:	e0bff917 	ldw	r2,-28(fp)
 4006cd0:	10c0020b 	ldhu	r3,8(r2)
 4006cd4:	e0bffa0b 	ldhu	r2,-24(fp)
 4006cd8:	1884703a 	and	r2,r3,r2
 4006cdc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4006ce0:	e0bff30b 	ldhu	r2,-52(fp)
 4006ce4:	1005003a 	cmpeq	r2,r2,zero
 4006ce8:	10001a1e 	bne	r2,zero,4006d54 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006cec:	e0bff203 	ldbu	r2,-56(fp)
 4006cf0:	10800058 	cmpnei	r2,r2,1
 4006cf4:	1000091e 	bne	r2,zero,4006d1c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4006cf8:	e0bff917 	ldw	r2,-28(fp)
 4006cfc:	1080020b 	ldhu	r2,8(r2)
 4006d00:	1007883a 	mov	r3,r2
 4006d04:	e0bff30b 	ldhu	r2,-52(fp)
 4006d08:	0084303a 	nor	r2,zero,r2
 4006d0c:	1884703a 	and	r2,r3,r2
 4006d10:	1007883a 	mov	r3,r2
 4006d14:	e0bff917 	ldw	r2,-28(fp)
 4006d18:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4006d1c:	008100b4 	movhi	r2,1026
 4006d20:	10a20504 	addi	r2,r2,-30700
 4006d24:	10c00017 	ldw	r3,0(r2)
 4006d28:	e0bff30b 	ldhu	r2,-52(fp)
 4006d2c:	18800b0d 	sth	r2,44(r3)
 4006d30:	e0bff117 	ldw	r2,-60(fp)
 4006d34:	e0bfed15 	stw	r2,-76(fp)
 4006d38:	e0bfed17 	ldw	r2,-76(fp)
 4006d3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4006d40:	e0800217 	ldw	r2,8(fp)
 4006d44:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4006d48:	e0fff30b 	ldhu	r3,-52(fp)
 4006d4c:	e0ffff15 	stw	r3,-4(fp)
 4006d50:	0000db06 	br	40070c0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4006d54:	e1bffa0b 	ldhu	r6,-24(fp)
 4006d58:	e1fffb03 	ldbu	r7,-20(fp)
 4006d5c:	e0bffc0b 	ldhu	r2,-16(fp)
 4006d60:	e17ff404 	addi	r5,fp,-48
 4006d64:	d8800015 	stw	r2,0(sp)
 4006d68:	e13ff917 	ldw	r4,-28(fp)
 4006d6c:	40075bc0 	call	40075bc <OS_FlagBlock>
 4006d70:	e0bff117 	ldw	r2,-60(fp)
 4006d74:	e0bfec15 	stw	r2,-80(fp)
 4006d78:	e0bfec17 	ldw	r2,-80(fp)
 4006d7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4006d80:	00006706 	br	4006f20 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4006d84:	e0bff917 	ldw	r2,-28(fp)
 4006d88:	1080020b 	ldhu	r2,8(r2)
 4006d8c:	0084303a 	nor	r2,zero,r2
 4006d90:	1007883a 	mov	r3,r2
 4006d94:	e0bffa0b 	ldhu	r2,-24(fp)
 4006d98:	1884703a 	and	r2,r3,r2
 4006d9c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4006da0:	e0fff30b 	ldhu	r3,-52(fp)
 4006da4:	e0bffa0b 	ldhu	r2,-24(fp)
 4006da8:	1880181e 	bne	r3,r2,4006e0c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006dac:	e0bff203 	ldbu	r2,-56(fp)
 4006db0:	10800058 	cmpnei	r2,r2,1
 4006db4:	1000071e 	bne	r2,zero,4006dd4 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4006db8:	e0bff917 	ldw	r2,-28(fp)
 4006dbc:	10c0020b 	ldhu	r3,8(r2)
 4006dc0:	e0bff30b 	ldhu	r2,-52(fp)
 4006dc4:	1884b03a 	or	r2,r3,r2
 4006dc8:	1007883a 	mov	r3,r2
 4006dcc:	e0bff917 	ldw	r2,-28(fp)
 4006dd0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4006dd4:	008100b4 	movhi	r2,1026
 4006dd8:	10a20504 	addi	r2,r2,-30700
 4006ddc:	10c00017 	ldw	r3,0(r2)
 4006de0:	e0bff30b 	ldhu	r2,-52(fp)
 4006de4:	18800b0d 	sth	r2,44(r3)
 4006de8:	e0bff117 	ldw	r2,-60(fp)
 4006dec:	e0bfeb15 	stw	r2,-84(fp)
 4006df0:	e0bfeb17 	ldw	r2,-84(fp)
 4006df4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4006df8:	e0800217 	ldw	r2,8(fp)
 4006dfc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4006e00:	e0bff30b 	ldhu	r2,-52(fp)
 4006e04:	e0bfff15 	stw	r2,-4(fp)
 4006e08:	0000ad06 	br	40070c0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4006e0c:	e1bffa0b 	ldhu	r6,-24(fp)
 4006e10:	e1fffb03 	ldbu	r7,-20(fp)
 4006e14:	e0bffc0b 	ldhu	r2,-16(fp)
 4006e18:	e17ff404 	addi	r5,fp,-48
 4006e1c:	d8800015 	stw	r2,0(sp)
 4006e20:	e13ff917 	ldw	r4,-28(fp)
 4006e24:	40075bc0 	call	40075bc <OS_FlagBlock>
 4006e28:	e0bff117 	ldw	r2,-60(fp)
 4006e2c:	e0bfea15 	stw	r2,-88(fp)
 4006e30:	e0bfea17 	ldw	r2,-88(fp)
 4006e34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4006e38:	00003906 	br	4006f20 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4006e3c:	e0bff917 	ldw	r2,-28(fp)
 4006e40:	1080020b 	ldhu	r2,8(r2)
 4006e44:	0084303a 	nor	r2,zero,r2
 4006e48:	1007883a 	mov	r3,r2
 4006e4c:	e0bffa0b 	ldhu	r2,-24(fp)
 4006e50:	1884703a 	and	r2,r3,r2
 4006e54:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4006e58:	e0bff30b 	ldhu	r2,-52(fp)
 4006e5c:	1005003a 	cmpeq	r2,r2,zero
 4006e60:	1000181e 	bne	r2,zero,4006ec4 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006e64:	e0bff203 	ldbu	r2,-56(fp)
 4006e68:	10800058 	cmpnei	r2,r2,1
 4006e6c:	1000071e 	bne	r2,zero,4006e8c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 4006e70:	e0bff917 	ldw	r2,-28(fp)
 4006e74:	10c0020b 	ldhu	r3,8(r2)
 4006e78:	e0bff30b 	ldhu	r2,-52(fp)
 4006e7c:	1884b03a 	or	r2,r3,r2
 4006e80:	1007883a 	mov	r3,r2
 4006e84:	e0bff917 	ldw	r2,-28(fp)
 4006e88:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4006e8c:	008100b4 	movhi	r2,1026
 4006e90:	10a20504 	addi	r2,r2,-30700
 4006e94:	10c00017 	ldw	r3,0(r2)
 4006e98:	e0bff30b 	ldhu	r2,-52(fp)
 4006e9c:	18800b0d 	sth	r2,44(r3)
 4006ea0:	e0bff117 	ldw	r2,-60(fp)
 4006ea4:	e0bfe915 	stw	r2,-92(fp)
 4006ea8:	e0bfe917 	ldw	r2,-92(fp)
 4006eac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4006eb0:	e0800217 	ldw	r2,8(fp)
 4006eb4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4006eb8:	e0fff30b 	ldhu	r3,-52(fp)
 4006ebc:	e0ffff15 	stw	r3,-4(fp)
 4006ec0:	00007f06 	br	40070c0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4006ec4:	e1bffa0b 	ldhu	r6,-24(fp)
 4006ec8:	e1fffb03 	ldbu	r7,-20(fp)
 4006ecc:	e0bffc0b 	ldhu	r2,-16(fp)
 4006ed0:	e17ff404 	addi	r5,fp,-48
 4006ed4:	d8800015 	stw	r2,0(sp)
 4006ed8:	e13ff917 	ldw	r4,-28(fp)
 4006edc:	40075bc0 	call	40075bc <OS_FlagBlock>
 4006ee0:	e0bff117 	ldw	r2,-60(fp)
 4006ee4:	e0bfe815 	stw	r2,-96(fp)
 4006ee8:	e0bfe817 	ldw	r2,-96(fp)
 4006eec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4006ef0:	00000b06 	br	4006f20 <OSFlagPend+0x48c>
 4006ef4:	e0bff117 	ldw	r2,-60(fp)
 4006ef8:	e0bfe715 	stw	r2,-100(fp)
 4006efc:	e0bfe717 	ldw	r2,-100(fp)
 4006f00:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 4006f04:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 4006f08:	e0c00217 	ldw	r3,8(fp)
 4006f0c:	00801bc4 	movi	r2,111
 4006f10:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 4006f14:	e0bff30b 	ldhu	r2,-52(fp)
 4006f18:	e0bfff15 	stw	r2,-4(fp)
 4006f1c:	00006806 	br	40070c0 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 4006f20:	40057540 	call	4005754 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006f24:	0005303a 	rdctl	r2,status
 4006f28:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006f2c:	e0ffe617 	ldw	r3,-104(fp)
 4006f30:	00bfff84 	movi	r2,-2
 4006f34:	1884703a 	and	r2,r3,r2
 4006f38:	1001703a 	wrctl	status,r2
  
  return context;
 4006f3c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 4006f40:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 4006f44:	008100b4 	movhi	r2,1026
 4006f48:	10a20504 	addi	r2,r2,-30700
 4006f4c:	10800017 	ldw	r2,0(r2)
 4006f50:	10800c43 	ldbu	r2,49(r2)
 4006f54:	10803fcc 	andi	r2,r2,255
 4006f58:	1005003a 	cmpeq	r2,r2,zero
 4006f5c:	1000221e 	bne	r2,zero,4006fe8 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 4006f60:	008100b4 	movhi	r2,1026
 4006f64:	10a20504 	addi	r2,r2,-30700
 4006f68:	10800017 	ldw	r2,0(r2)
 4006f6c:	10800c43 	ldbu	r2,49(r2)
 4006f70:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4006f74:	008100b4 	movhi	r2,1026
 4006f78:	10a20504 	addi	r2,r2,-30700
 4006f7c:	10800017 	ldw	r2,0(r2)
 4006f80:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 4006f84:	e13ff404 	addi	r4,fp,-48
 4006f88:	40079740 	call	4007974 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 4006f8c:	008100b4 	movhi	r2,1026
 4006f90:	10a20504 	addi	r2,r2,-30700
 4006f94:	10800017 	ldw	r2,0(r2)
 4006f98:	10000c05 	stb	zero,48(r2)
 4006f9c:	e0bff117 	ldw	r2,-60(fp)
 4006fa0:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006fa4:	e0bfe517 	ldw	r2,-108(fp)
 4006fa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 4006fac:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 4006fb0:	e0bff243 	ldbu	r2,-55(fp)
 4006fb4:	108000a0 	cmpeqi	r2,r2,2
 4006fb8:	1000011e 	bne	r2,zero,4006fc0 <OSFlagPend+0x52c>
 4006fbc:	00000406 	br	4006fd0 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 4006fc0:	e0c00217 	ldw	r3,8(fp)
 4006fc4:	00800384 	movi	r2,14
 4006fc8:	18800005 	stb	r2,0(r3)
                 break;
 4006fcc:	00000306 	br	4006fdc <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 4006fd0:	e0c00217 	ldw	r3,8(fp)
 4006fd4:	00800284 	movi	r2,10
 4006fd8:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 4006fdc:	e0fff30b 	ldhu	r3,-52(fp)
 4006fe0:	e0ffff15 	stw	r3,-4(fp)
 4006fe4:	00003606 	br	40070c0 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 4006fe8:	008100b4 	movhi	r2,1026
 4006fec:	10a20504 	addi	r2,r2,-30700
 4006ff0:	10800017 	ldw	r2,0(r2)
 4006ff4:	10800b0b 	ldhu	r2,44(r2)
 4006ff8:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 4006ffc:	e0bff203 	ldbu	r2,-56(fp)
 4007000:	10800058 	cmpnei	r2,r2,1
 4007004:	1000261e 	bne	r2,zero,40070a0 <OSFlagPend+0x60c>
        switch (wait_type) {
 4007008:	e0bffb03 	ldbu	r2,-20(fp)
 400700c:	e0bffd15 	stw	r2,-12(fp)
 4007010:	e0fffd17 	ldw	r3,-12(fp)
 4007014:	1804803a 	cmplt	r2,r3,zero
 4007018:	1000181e 	bne	r2,zero,400707c <OSFlagPend+0x5e8>
 400701c:	e0fffd17 	ldw	r3,-12(fp)
 4007020:	18800090 	cmplti	r2,r3,2
 4007024:	10000d1e 	bne	r2,zero,400705c <OSFlagPend+0x5c8>
 4007028:	e0fffd17 	ldw	r3,-12(fp)
 400702c:	18800108 	cmpgei	r2,r3,4
 4007030:	1000121e 	bne	r2,zero,400707c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 4007034:	e0bff917 	ldw	r2,-28(fp)
 4007038:	1080020b 	ldhu	r2,8(r2)
 400703c:	1007883a 	mov	r3,r2
 4007040:	e0bff30b 	ldhu	r2,-52(fp)
 4007044:	0084303a 	nor	r2,zero,r2
 4007048:	1884703a 	and	r2,r3,r2
 400704c:	1007883a 	mov	r3,r2
 4007050:	e0bff917 	ldw	r2,-28(fp)
 4007054:	10c0020d 	sth	r3,8(r2)
                 break;
 4007058:	00001106 	br	40070a0 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 400705c:	e0bff917 	ldw	r2,-28(fp)
 4007060:	10c0020b 	ldhu	r3,8(r2)
 4007064:	e0bff30b 	ldhu	r2,-52(fp)
 4007068:	1884b03a 	or	r2,r3,r2
 400706c:	1007883a 	mov	r3,r2
 4007070:	e0bff917 	ldw	r2,-28(fp)
 4007074:	10c0020d 	sth	r3,8(r2)
                 break;
 4007078:	00000906 	br	40070a0 <OSFlagPend+0x60c>
 400707c:	e0bff117 	ldw	r2,-60(fp)
 4007080:	e0bfe415 	stw	r2,-112(fp)
 4007084:	e0bfe417 	ldw	r2,-112(fp)
 4007088:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 400708c:	e0c00217 	ldw	r3,8(fp)
 4007090:	00801bc4 	movi	r2,111
 4007094:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 4007098:	e03fff15 	stw	zero,-4(fp)
 400709c:	00000806 	br	40070c0 <OSFlagPend+0x62c>
 40070a0:	e0bff117 	ldw	r2,-60(fp)
 40070a4:	e0bfe315 	stw	r2,-116(fp)
 40070a8:	e0bfe317 	ldw	r2,-116(fp)
 40070ac:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 40070b0:	e0800217 	ldw	r2,8(fp)
 40070b4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 40070b8:	e0bff30b 	ldhu	r2,-52(fp)
 40070bc:	e0bfff15 	stw	r2,-4(fp)
 40070c0:	e0bfff17 	ldw	r2,-4(fp)
}
 40070c4:	e037883a 	mov	sp,fp
 40070c8:	dfc00117 	ldw	ra,4(sp)
 40070cc:	df000017 	ldw	fp,0(sp)
 40070d0:	dec00204 	addi	sp,sp,8
 40070d4:	f800283a 	ret

040070d8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 40070d8:	defffb04 	addi	sp,sp,-20
 40070dc:	df000415 	stw	fp,16(sp)
 40070e0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 40070e4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40070e8:	0005303a 	rdctl	r2,status
 40070ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40070f0:	e0fffd17 	ldw	r3,-12(fp)
 40070f4:	00bfff84 	movi	r2,-2
 40070f8:	1884703a 	and	r2,r3,r2
 40070fc:	1001703a 	wrctl	status,r2
  
  return context;
 4007100:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 4007104:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 4007108:	008100b4 	movhi	r2,1026
 400710c:	10a20504 	addi	r2,r2,-30700
 4007110:	10800017 	ldw	r2,0(r2)
 4007114:	10800b0b 	ldhu	r2,44(r2)
 4007118:	e0bfff0d 	sth	r2,-4(fp)
 400711c:	e0bffe17 	ldw	r2,-8(fp)
 4007120:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007124:	e0bffc17 	ldw	r2,-16(fp)
 4007128:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 400712c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 4007130:	e037883a 	mov	sp,fp
 4007134:	df000017 	ldw	fp,0(sp)
 4007138:	dec00104 	addi	sp,sp,4
 400713c:	f800283a 	ret

04007140 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 4007140:	deffed04 	addi	sp,sp,-76
 4007144:	dfc01215 	stw	ra,72(sp)
 4007148:	df001115 	stw	fp,68(sp)
 400714c:	df001104 	addi	fp,sp,68
 4007150:	e13ff915 	stw	r4,-28(fp)
 4007154:	e1fffc15 	stw	r7,-16(fp)
 4007158:	e17ffa0d 	sth	r5,-24(fp)
 400715c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 4007160:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4007164:	e0bffc17 	ldw	r2,-16(fp)
 4007168:	1004c03a 	cmpne	r2,r2,zero
 400716c:	1000021e 	bne	r2,zero,4007178 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 4007170:	e03fff15 	stw	zero,-4(fp)
 4007174:	0000d606 	br	40074d0 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 4007178:	e0bff917 	ldw	r2,-28(fp)
 400717c:	1004c03a 	cmpne	r2,r2,zero
 4007180:	1000051e 	bne	r2,zero,4007198 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4007184:	e0fffc17 	ldw	r3,-16(fp)
 4007188:	00801b84 	movi	r2,110
 400718c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 4007190:	e03fff15 	stw	zero,-4(fp)
 4007194:	0000ce06 	br	40074d0 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 4007198:	e0bff917 	ldw	r2,-28(fp)
 400719c:	10800003 	ldbu	r2,0(r2)
 40071a0:	10803fcc 	andi	r2,r2,255
 40071a4:	10800160 	cmpeqi	r2,r2,5
 40071a8:	1000051e 	bne	r2,zero,40071c0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 40071ac:	e0fffc17 	ldw	r3,-16(fp)
 40071b0:	00800044 	movi	r2,1
 40071b4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 40071b8:	e03fff15 	stw	zero,-4(fp)
 40071bc:	0000c406 	br	40074d0 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40071c0:	0005303a 	rdctl	r2,status
 40071c4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40071c8:	e0fff417 	ldw	r3,-48(fp)
 40071cc:	00bfff84 	movi	r2,-2
 40071d0:	1884703a 	and	r2,r3,r2
 40071d4:	1001703a 	wrctl	status,r2
  
  return context;
 40071d8:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 40071dc:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 40071e0:	e0bffb03 	ldbu	r2,-20(fp)
 40071e4:	e0bffe15 	stw	r2,-8(fp)
 40071e8:	e0fffe17 	ldw	r3,-8(fp)
 40071ec:	1805003a 	cmpeq	r2,r3,zero
 40071f0:	1000041e 	bne	r2,zero,4007204 <OSFlagPost+0xc4>
 40071f4:	e0fffe17 	ldw	r3,-8(fp)
 40071f8:	18800060 	cmpeqi	r2,r3,1
 40071fc:	10000b1e 	bne	r2,zero,400722c <OSFlagPost+0xec>
 4007200:	00001206 	br	400724c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 4007204:	e0bff917 	ldw	r2,-28(fp)
 4007208:	1080020b 	ldhu	r2,8(r2)
 400720c:	1007883a 	mov	r3,r2
 4007210:	e0bffa0b 	ldhu	r2,-24(fp)
 4007214:	0084303a 	nor	r2,zero,r2
 4007218:	1884703a 	and	r2,r3,r2
 400721c:	1007883a 	mov	r3,r2
 4007220:	e0bff917 	ldw	r2,-28(fp)
 4007224:	10c0020d 	sth	r3,8(r2)
             break;
 4007228:	00001106 	br	4007270 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 400722c:	e0bff917 	ldw	r2,-28(fp)
 4007230:	10c0020b 	ldhu	r3,8(r2)
 4007234:	e0bffa0b 	ldhu	r2,-24(fp)
 4007238:	1884b03a 	or	r2,r3,r2
 400723c:	1007883a 	mov	r3,r2
 4007240:	e0bff917 	ldw	r2,-28(fp)
 4007244:	10c0020d 	sth	r3,8(r2)
             break;
 4007248:	00000906 	br	4007270 <OSFlagPost+0x130>
 400724c:	e0bff517 	ldw	r2,-44(fp)
 4007250:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007254:	e0bff317 	ldw	r2,-52(fp)
 4007258:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 400725c:	e0fffc17 	ldw	r3,-16(fp)
 4007260:	00801c44 	movi	r2,113
 4007264:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 4007268:	e03fff15 	stw	zero,-4(fp)
 400726c:	00009806 	br	40074d0 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 4007270:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4007274:	e0bff917 	ldw	r2,-28(fp)
 4007278:	10800117 	ldw	r2,4(r2)
 400727c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4007280:	00007506 	br	4007458 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 4007284:	e0bff817 	ldw	r2,-32(fp)
 4007288:	10800483 	ldbu	r2,18(r2)
 400728c:	10803fcc 	andi	r2,r2,255
 4007290:	e0bffd15 	stw	r2,-12(fp)
 4007294:	e0fffd17 	ldw	r3,-12(fp)
 4007298:	18800060 	cmpeqi	r2,r3,1
 400729c:	10004d1e 	bne	r2,zero,40073d4 <OSFlagPost+0x294>
 40072a0:	e0fffd17 	ldw	r3,-12(fp)
 40072a4:	18800088 	cmpgei	r2,r3,2
 40072a8:	1000041e 	bne	r2,zero,40072bc <OSFlagPost+0x17c>
 40072ac:	e0fffd17 	ldw	r3,-12(fp)
 40072b0:	1805003a 	cmpeq	r2,r3,zero
 40072b4:	1000301e 	bne	r2,zero,4007378 <OSFlagPost+0x238>
 40072b8:	00005b06 	br	4007428 <OSFlagPost+0x2e8>
 40072bc:	e0fffd17 	ldw	r3,-12(fp)
 40072c0:	188000a0 	cmpeqi	r2,r3,2
 40072c4:	1000041e 	bne	r2,zero,40072d8 <OSFlagPost+0x198>
 40072c8:	e0fffd17 	ldw	r3,-12(fp)
 40072cc:	188000e0 	cmpeqi	r2,r3,3
 40072d0:	1000161e 	bne	r2,zero,400732c <OSFlagPost+0x1ec>
 40072d4:	00005406 	br	4007428 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40072d8:	e0bff917 	ldw	r2,-28(fp)
 40072dc:	10c0020b 	ldhu	r3,8(r2)
 40072e0:	e0bff817 	ldw	r2,-32(fp)
 40072e4:	1080040b 	ldhu	r2,16(r2)
 40072e8:	1884703a 	and	r2,r3,r2
 40072ec:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 40072f0:	e0bff817 	ldw	r2,-32(fp)
 40072f4:	1080040b 	ldhu	r2,16(r2)
 40072f8:	10ffffcc 	andi	r3,r2,65535
 40072fc:	e0bff68b 	ldhu	r2,-38(fp)
 4007300:	1880521e 	bne	r3,r2,400744c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4007304:	e17ff68b 	ldhu	r5,-38(fp)
 4007308:	e13ff817 	ldw	r4,-32(fp)
 400730c:	40078640 	call	4007864 <OS_FlagTaskRdy>
 4007310:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 4007314:	e0bff603 	ldbu	r2,-40(fp)
 4007318:	10800058 	cmpnei	r2,r2,1
 400731c:	10004b1e 	bne	r2,zero,400744c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4007320:	00800044 	movi	r2,1
 4007324:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 4007328:	00004806 	br	400744c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400732c:	e0bff917 	ldw	r2,-28(fp)
 4007330:	10c0020b 	ldhu	r3,8(r2)
 4007334:	e0bff817 	ldw	r2,-32(fp)
 4007338:	1080040b 	ldhu	r2,16(r2)
 400733c:	1884703a 	and	r2,r3,r2
 4007340:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4007344:	e0bff68b 	ldhu	r2,-38(fp)
 4007348:	1005003a 	cmpeq	r2,r2,zero
 400734c:	10003f1e 	bne	r2,zero,400744c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4007350:	e17ff68b 	ldhu	r5,-38(fp)
 4007354:	e13ff817 	ldw	r4,-32(fp)
 4007358:	40078640 	call	4007864 <OS_FlagTaskRdy>
 400735c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 4007360:	e0bff603 	ldbu	r2,-40(fp)
 4007364:	10800058 	cmpnei	r2,r2,1
 4007368:	1000381e 	bne	r2,zero,400744c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400736c:	00800044 	movi	r2,1
 4007370:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 4007374:	00003506 	br	400744c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4007378:	e0bff917 	ldw	r2,-28(fp)
 400737c:	1080020b 	ldhu	r2,8(r2)
 4007380:	0084303a 	nor	r2,zero,r2
 4007384:	1007883a 	mov	r3,r2
 4007388:	e0bff817 	ldw	r2,-32(fp)
 400738c:	1080040b 	ldhu	r2,16(r2)
 4007390:	1884703a 	and	r2,r3,r2
 4007394:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 4007398:	e0bff817 	ldw	r2,-32(fp)
 400739c:	1080040b 	ldhu	r2,16(r2)
 40073a0:	10ffffcc 	andi	r3,r2,65535
 40073a4:	e0bff68b 	ldhu	r2,-38(fp)
 40073a8:	1880281e 	bne	r3,r2,400744c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 40073ac:	e17ff68b 	ldhu	r5,-38(fp)
 40073b0:	e13ff817 	ldw	r4,-32(fp)
 40073b4:	40078640 	call	4007864 <OS_FlagTaskRdy>
 40073b8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 40073bc:	e0bff603 	ldbu	r2,-40(fp)
 40073c0:	10800058 	cmpnei	r2,r2,1
 40073c4:	1000211e 	bne	r2,zero,400744c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 40073c8:	00800044 	movi	r2,1
 40073cc:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 40073d0:	00001e06 	br	400744c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40073d4:	e0bff917 	ldw	r2,-28(fp)
 40073d8:	1080020b 	ldhu	r2,8(r2)
 40073dc:	0084303a 	nor	r2,zero,r2
 40073e0:	1007883a 	mov	r3,r2
 40073e4:	e0bff817 	ldw	r2,-32(fp)
 40073e8:	1080040b 	ldhu	r2,16(r2)
 40073ec:	1884703a 	and	r2,r3,r2
 40073f0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 40073f4:	e0bff68b 	ldhu	r2,-38(fp)
 40073f8:	1005003a 	cmpeq	r2,r2,zero
 40073fc:	1000131e 	bne	r2,zero,400744c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4007400:	e17ff68b 	ldhu	r5,-38(fp)
 4007404:	e13ff817 	ldw	r4,-32(fp)
 4007408:	40078640 	call	4007864 <OS_FlagTaskRdy>
 400740c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 4007410:	e0bff603 	ldbu	r2,-40(fp)
 4007414:	10800058 	cmpnei	r2,r2,1
 4007418:	10000c1e 	bne	r2,zero,400744c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400741c:	00800044 	movi	r2,1
 4007420:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 4007424:	00000906 	br	400744c <OSFlagPost+0x30c>
 4007428:	e0bff517 	ldw	r2,-44(fp)
 400742c:	e0bff215 	stw	r2,-56(fp)
 4007430:	e0bff217 	ldw	r2,-56(fp)
 4007434:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4007438:	e0fffc17 	ldw	r3,-16(fp)
 400743c:	00801bc4 	movi	r2,111
 4007440:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 4007444:	e03fff15 	stw	zero,-4(fp)
 4007448:	00002106 	br	40074d0 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 400744c:	e0bff817 	ldw	r2,-32(fp)
 4007450:	10800017 	ldw	r2,0(r2)
 4007454:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4007458:	e0bff817 	ldw	r2,-32(fp)
 400745c:	1004c03a 	cmpne	r2,r2,zero
 4007460:	103f881e 	bne	r2,zero,4007284 <OSFlagPost+0x144>
 4007464:	e0bff517 	ldw	r2,-44(fp)
 4007468:	e0bff115 	stw	r2,-60(fp)
 400746c:	e0bff117 	ldw	r2,-60(fp)
 4007470:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 4007474:	e0bff783 	ldbu	r2,-34(fp)
 4007478:	10800058 	cmpnei	r2,r2,1
 400747c:	1000011e 	bne	r2,zero,4007484 <OSFlagPost+0x344>
        OS_Sched();
 4007480:	40057540 	call	4005754 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007484:	0005303a 	rdctl	r2,status
 4007488:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400748c:	e0fff017 	ldw	r3,-64(fp)
 4007490:	00bfff84 	movi	r2,-2
 4007494:	1884703a 	and	r2,r3,r2
 4007498:	1001703a 	wrctl	status,r2
  
  return context;
 400749c:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 40074a0:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 40074a4:	e0bff917 	ldw	r2,-28(fp)
 40074a8:	1080020b 	ldhu	r2,8(r2)
 40074ac:	e0bff70d 	sth	r2,-36(fp)
 40074b0:	e0bff517 	ldw	r2,-44(fp)
 40074b4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40074b8:	e0bfef17 	ldw	r2,-68(fp)
 40074bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 40074c0:	e0bffc17 	ldw	r2,-16(fp)
 40074c4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 40074c8:	e0bff70b 	ldhu	r2,-36(fp)
 40074cc:	e0bfff15 	stw	r2,-4(fp)
 40074d0:	e0bfff17 	ldw	r2,-4(fp)
}
 40074d4:	e037883a 	mov	sp,fp
 40074d8:	dfc00117 	ldw	ra,4(sp)
 40074dc:	df000017 	ldw	fp,0(sp)
 40074e0:	dec00204 	addi	sp,sp,8
 40074e4:	f800283a 	ret

040074e8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 40074e8:	defff804 	addi	sp,sp,-32
 40074ec:	df000715 	stw	fp,28(sp)
 40074f0:	df000704 	addi	fp,sp,28
 40074f4:	e13ffd15 	stw	r4,-12(fp)
 40074f8:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 40074fc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 4007500:	e0bffe17 	ldw	r2,-8(fp)
 4007504:	1004c03a 	cmpne	r2,r2,zero
 4007508:	1000021e 	bne	r2,zero,4007514 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 400750c:	e03fff15 	stw	zero,-4(fp)
 4007510:	00002506 	br	40075a8 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 4007514:	e0bffd17 	ldw	r2,-12(fp)
 4007518:	1004c03a 	cmpne	r2,r2,zero
 400751c:	1000051e 	bne	r2,zero,4007534 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4007520:	e0fffe17 	ldw	r3,-8(fp)
 4007524:	00801b84 	movi	r2,110
 4007528:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400752c:	e03fff15 	stw	zero,-4(fp)
 4007530:	00001d06 	br	40075a8 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 4007534:	e0bffd17 	ldw	r2,-12(fp)
 4007538:	10800003 	ldbu	r2,0(r2)
 400753c:	10803fcc 	andi	r2,r2,255
 4007540:	10800160 	cmpeqi	r2,r2,5
 4007544:	1000051e 	bne	r2,zero,400755c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 4007548:	e0fffe17 	ldw	r3,-8(fp)
 400754c:	00800044 	movi	r2,1
 4007550:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 4007554:	e03fff15 	stw	zero,-4(fp)
 4007558:	00001306 	br	40075a8 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400755c:	0005303a 	rdctl	r2,status
 4007560:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007564:	e0fffa17 	ldw	r3,-24(fp)
 4007568:	00bfff84 	movi	r2,-2
 400756c:	1884703a 	and	r2,r3,r2
 4007570:	1001703a 	wrctl	status,r2
  
  return context;
 4007574:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4007578:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 400757c:	e0bffd17 	ldw	r2,-12(fp)
 4007580:	1080020b 	ldhu	r2,8(r2)
 4007584:	e0bffc0d 	sth	r2,-16(fp)
 4007588:	e0bffb17 	ldw	r2,-20(fp)
 400758c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007590:	e0bff917 	ldw	r2,-28(fp)
 4007594:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4007598:	e0bffe17 	ldw	r2,-8(fp)
 400759c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 40075a0:	e0bffc0b 	ldhu	r2,-16(fp)
 40075a4:	e0bfff15 	stw	r2,-4(fp)
 40075a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40075ac:	e037883a 	mov	sp,fp
 40075b0:	df000017 	ldw	fp,0(sp)
 40075b4:	dec00104 	addi	sp,sp,4
 40075b8:	f800283a 	ret

040075bc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 40075bc:	defff804 	addi	sp,sp,-32
 40075c0:	df000715 	stw	fp,28(sp)
 40075c4:	df000704 	addi	fp,sp,28
 40075c8:	e13ffb15 	stw	r4,-20(fp)
 40075cc:	e17ffc15 	stw	r5,-16(fp)
 40075d0:	e0800117 	ldw	r2,4(fp)
 40075d4:	e1bffd0d 	sth	r6,-12(fp)
 40075d8:	e1fffe05 	stb	r7,-8(fp)
 40075dc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 40075e0:	008100b4 	movhi	r2,1026
 40075e4:	10a20504 	addi	r2,r2,-30700
 40075e8:	10c00017 	ldw	r3,0(r2)
 40075ec:	008100b4 	movhi	r2,1026
 40075f0:	10a20504 	addi	r2,r2,-30700
 40075f4:	10800017 	ldw	r2,0(r2)
 40075f8:	10800c03 	ldbu	r2,48(r2)
 40075fc:	10800814 	ori	r2,r2,32
 4007600:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 4007604:	008100b4 	movhi	r2,1026
 4007608:	10a20504 	addi	r2,r2,-30700
 400760c:	10800017 	ldw	r2,0(r2)
 4007610:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 4007614:	008100b4 	movhi	r2,1026
 4007618:	10a20504 	addi	r2,r2,-30700
 400761c:	10c00017 	ldw	r3,0(r2)
 4007620:	e0bfff0b 	ldhu	r2,-4(fp)
 4007624:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 4007628:	008100b4 	movhi	r2,1026
 400762c:	10a20504 	addi	r2,r2,-30700
 4007630:	10c00017 	ldw	r3,0(r2)
 4007634:	e0bffc17 	ldw	r2,-16(fp)
 4007638:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 400763c:	e0fffc17 	ldw	r3,-16(fp)
 4007640:	e0bffd0b 	ldhu	r2,-12(fp)
 4007644:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 4007648:	e0fffc17 	ldw	r3,-16(fp)
 400764c:	e0bffe03 	ldbu	r2,-8(fp)
 4007650:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 4007654:	008100b4 	movhi	r2,1026
 4007658:	10a20504 	addi	r2,r2,-30700
 400765c:	10c00017 	ldw	r3,0(r2)
 4007660:	e0bffc17 	ldw	r2,-16(fp)
 4007664:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 4007668:	e0bffb17 	ldw	r2,-20(fp)
 400766c:	10c00117 	ldw	r3,4(r2)
 4007670:	e0bffc17 	ldw	r2,-16(fp)
 4007674:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 4007678:	e0bffc17 	ldw	r2,-16(fp)
 400767c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 4007680:	e0fffc17 	ldw	r3,-16(fp)
 4007684:	e0bffb17 	ldw	r2,-20(fp)
 4007688:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400768c:	e0bffb17 	ldw	r2,-20(fp)
 4007690:	10800117 	ldw	r2,4(r2)
 4007694:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 4007698:	e0bffa17 	ldw	r2,-24(fp)
 400769c:	1005003a 	cmpeq	r2,r2,zero
 40076a0:	1000031e 	bne	r2,zero,40076b0 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 40076a4:	e0fffa17 	ldw	r3,-24(fp)
 40076a8:	e0bffc17 	ldw	r2,-16(fp)
 40076ac:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 40076b0:	e0fffb17 	ldw	r3,-20(fp)
 40076b4:	e0bffc17 	ldw	r2,-16(fp)
 40076b8:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 40076bc:	008100b4 	movhi	r2,1026
 40076c0:	10a20504 	addi	r2,r2,-30700
 40076c4:	10800017 	ldw	r2,0(r2)
 40076c8:	10800d03 	ldbu	r2,52(r2)
 40076cc:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 40076d0:	e13ff903 	ldbu	r4,-28(fp)
 40076d4:	e0fff903 	ldbu	r3,-28(fp)
 40076d8:	008100b4 	movhi	r2,1026
 40076dc:	10a20044 	addi	r2,r2,-30719
 40076e0:	10c5883a 	add	r2,r2,r3
 40076e4:	10800003 	ldbu	r2,0(r2)
 40076e8:	1007883a 	mov	r3,r2
 40076ec:	008100b4 	movhi	r2,1026
 40076f0:	10a20504 	addi	r2,r2,-30700
 40076f4:	10800017 	ldw	r2,0(r2)
 40076f8:	10800d43 	ldbu	r2,53(r2)
 40076fc:	0084303a 	nor	r2,zero,r2
 4007700:	1884703a 	and	r2,r3,r2
 4007704:	1007883a 	mov	r3,r2
 4007708:	008100b4 	movhi	r2,1026
 400770c:	10a20044 	addi	r2,r2,-30719
 4007710:	1105883a 	add	r2,r2,r4
 4007714:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 4007718:	e0fff903 	ldbu	r3,-28(fp)
 400771c:	008100b4 	movhi	r2,1026
 4007720:	10a20044 	addi	r2,r2,-30719
 4007724:	10c5883a 	add	r2,r2,r3
 4007728:	10800003 	ldbu	r2,0(r2)
 400772c:	10803fcc 	andi	r2,r2,255
 4007730:	1004c03a 	cmpne	r2,r2,zero
 4007734:	10000e1e 	bne	r2,zero,4007770 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4007738:	008100b4 	movhi	r2,1026
 400773c:	10a20504 	addi	r2,r2,-30700
 4007740:	10800017 	ldw	r2,0(r2)
 4007744:	10800d83 	ldbu	r2,54(r2)
 4007748:	0084303a 	nor	r2,zero,r2
 400774c:	1007883a 	mov	r3,r2
 4007750:	008100b4 	movhi	r2,1026
 4007754:	10a20004 	addi	r2,r2,-30720
 4007758:	10800003 	ldbu	r2,0(r2)
 400775c:	1884703a 	and	r2,r3,r2
 4007760:	1007883a 	mov	r3,r2
 4007764:	008100b4 	movhi	r2,1026
 4007768:	10a20004 	addi	r2,r2,-30720
 400776c:	10c00005 	stb	r3,0(r2)
    }
}
 4007770:	e037883a 	mov	sp,fp
 4007774:	df000017 	ldw	fp,0(sp)
 4007778:	dec00104 	addi	sp,sp,4
 400777c:	f800283a 	ret

04007780 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 4007780:	defffb04 	addi	sp,sp,-20
 4007784:	dfc00415 	stw	ra,16(sp)
 4007788:	df000315 	stw	fp,12(sp)
 400778c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 4007790:	010100b4 	movhi	r4,1026
 4007794:	21021a04 	addi	r4,r4,2152
 4007798:	0140dc04 	movi	r5,880
 400779c:	40056940 	call	4005694 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 40077a0:	008100b4 	movhi	r2,1026
 40077a4:	10821a04 	addi	r2,r2,2152
 40077a8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 40077ac:	008100b4 	movhi	r2,1026
 40077b0:	10822504 	addi	r2,r2,2196
 40077b4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 40077b8:	e03fff0d 	sth	zero,-4(fp)
 40077bc:	00001306 	br	400780c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 40077c0:	e0bffe17 	ldw	r2,-8(fp)
 40077c4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 40077c8:	e0fffe17 	ldw	r3,-8(fp)
 40077cc:	e0bffd17 	ldw	r2,-12(fp)
 40077d0:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 40077d4:	e0fffe17 	ldw	r3,-8(fp)
 40077d8:	00800fc4 	movi	r2,63
 40077dc:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 40077e0:	e0bffe17 	ldw	r2,-8(fp)
 40077e4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 40077e8:	e0bffe17 	ldw	r2,-8(fp)
 40077ec:	10800b04 	addi	r2,r2,44
 40077f0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 40077f4:	e0bffd17 	ldw	r2,-12(fp)
 40077f8:	10800b04 	addi	r2,r2,44
 40077fc:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 4007800:	e0bfff0b 	ldhu	r2,-4(fp)
 4007804:	10800044 	addi	r2,r2,1
 4007808:	e0bfff0d 	sth	r2,-4(fp)
 400780c:	e0bfff0b 	ldhu	r2,-4(fp)
 4007810:	108004f0 	cmpltui	r2,r2,19
 4007814:	103fea1e 	bne	r2,zero,40077c0 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4007818:	e0bffe17 	ldw	r2,-8(fp)
 400781c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 4007820:	e0bffe17 	ldw	r2,-8(fp)
 4007824:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 4007828:	e0fffe17 	ldw	r3,-8(fp)
 400782c:	00800fc4 	movi	r2,63
 4007830:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4007834:	e0bffe17 	ldw	r2,-8(fp)
 4007838:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 400783c:	00c100b4 	movhi	r3,1026
 4007840:	18e20704 	addi	r3,r3,-30692
 4007844:	008100b4 	movhi	r2,1026
 4007848:	10821a04 	addi	r2,r2,2152
 400784c:	18800015 	stw	r2,0(r3)
#endif
}
 4007850:	e037883a 	mov	sp,fp
 4007854:	dfc00117 	ldw	ra,4(sp)
 4007858:	df000017 	ldw	fp,0(sp)
 400785c:	dec00204 	addi	sp,sp,8
 4007860:	f800283a 	ret

04007864 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 4007864:	defffa04 	addi	sp,sp,-24
 4007868:	dfc00515 	stw	ra,20(sp)
 400786c:	df000415 	stw	fp,16(sp)
 4007870:	df000404 	addi	fp,sp,16
 4007874:	e13ffe15 	stw	r4,-8(fp)
 4007878:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 400787c:	e0bffe17 	ldw	r2,-8(fp)
 4007880:	10800217 	ldw	r2,8(r2)
 4007884:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 4007888:	e0bffd17 	ldw	r2,-12(fp)
 400788c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 4007890:	e0fffd17 	ldw	r3,-12(fp)
 4007894:	e0bfff0b 	ldhu	r2,-4(fp)
 4007898:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 400789c:	e0bffd17 	ldw	r2,-12(fp)
 40078a0:	10c00c03 	ldbu	r3,48(r2)
 40078a4:	00bff7c4 	movi	r2,-33
 40078a8:	1884703a 	and	r2,r3,r2
 40078ac:	1007883a 	mov	r3,r2
 40078b0:	e0bffd17 	ldw	r2,-12(fp)
 40078b4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 40078b8:	e0bffd17 	ldw	r2,-12(fp)
 40078bc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 40078c0:	e0bffd17 	ldw	r2,-12(fp)
 40078c4:	10800c03 	ldbu	r2,48(r2)
 40078c8:	10803fcc 	andi	r2,r2,255
 40078cc:	1004c03a 	cmpne	r2,r2,zero
 40078d0:	10001f1e 	bne	r2,zero,4007950 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 40078d4:	e0bffd17 	ldw	r2,-12(fp)
 40078d8:	10c00d83 	ldbu	r3,54(r2)
 40078dc:	008100b4 	movhi	r2,1026
 40078e0:	10a20004 	addi	r2,r2,-30720
 40078e4:	10800003 	ldbu	r2,0(r2)
 40078e8:	1884b03a 	or	r2,r3,r2
 40078ec:	1007883a 	mov	r3,r2
 40078f0:	008100b4 	movhi	r2,1026
 40078f4:	10a20004 	addi	r2,r2,-30720
 40078f8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 40078fc:	e0bffd17 	ldw	r2,-12(fp)
 4007900:	10800d03 	ldbu	r2,52(r2)
 4007904:	11003fcc 	andi	r4,r2,255
 4007908:	e0bffd17 	ldw	r2,-12(fp)
 400790c:	10800d03 	ldbu	r2,52(r2)
 4007910:	10c03fcc 	andi	r3,r2,255
 4007914:	008100b4 	movhi	r2,1026
 4007918:	10a20044 	addi	r2,r2,-30719
 400791c:	10c5883a 	add	r2,r2,r3
 4007920:	10c00003 	ldbu	r3,0(r2)
 4007924:	e0bffd17 	ldw	r2,-12(fp)
 4007928:	10800d43 	ldbu	r2,53(r2)
 400792c:	1884b03a 	or	r2,r3,r2
 4007930:	1007883a 	mov	r3,r2
 4007934:	008100b4 	movhi	r2,1026
 4007938:	10a20044 	addi	r2,r2,-30719
 400793c:	1105883a 	add	r2,r2,r4
 4007940:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 4007944:	00800044 	movi	r2,1
 4007948:	e0bffc05 	stb	r2,-16(fp)
 400794c:	00000106 	br	4007954 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 4007950:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 4007954:	e13ffe17 	ldw	r4,-8(fp)
 4007958:	40079740 	call	4007974 <OS_FlagUnlink>
    return (sched);
 400795c:	e0bffc03 	ldbu	r2,-16(fp)
}
 4007960:	e037883a 	mov	sp,fp
 4007964:	dfc00117 	ldw	ra,4(sp)
 4007968:	df000017 	ldw	fp,0(sp)
 400796c:	dec00204 	addi	sp,sp,8
 4007970:	f800283a 	ret

04007974 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 4007974:	defffa04 	addi	sp,sp,-24
 4007978:	df000515 	stw	fp,20(sp)
 400797c:	df000504 	addi	fp,sp,20
 4007980:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 4007984:	e0bfff17 	ldw	r2,-4(fp)
 4007988:	10800117 	ldw	r2,4(r2)
 400798c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4007990:	e0bfff17 	ldw	r2,-4(fp)
 4007994:	10800017 	ldw	r2,0(r2)
 4007998:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 400799c:	e0bffc17 	ldw	r2,-16(fp)
 40079a0:	1004c03a 	cmpne	r2,r2,zero
 40079a4:	10000c1e 	bne	r2,zero,40079d8 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 40079a8:	e0bfff17 	ldw	r2,-4(fp)
 40079ac:	10800317 	ldw	r2,12(r2)
 40079b0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 40079b4:	e0fffd17 	ldw	r3,-12(fp)
 40079b8:	e0bffb17 	ldw	r2,-20(fp)
 40079bc:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 40079c0:	e0bffb17 	ldw	r2,-20(fp)
 40079c4:	1005003a 	cmpeq	r2,r2,zero
 40079c8:	10000c1e 	bne	r2,zero,40079fc <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 40079cc:	e0bffb17 	ldw	r2,-20(fp)
 40079d0:	10000115 	stw	zero,4(r2)
 40079d4:	00000906 	br	40079fc <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 40079d8:	e0fffc17 	ldw	r3,-16(fp)
 40079dc:	e0bffb17 	ldw	r2,-20(fp)
 40079e0:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 40079e4:	e0bffb17 	ldw	r2,-20(fp)
 40079e8:	1005003a 	cmpeq	r2,r2,zero
 40079ec:	1000031e 	bne	r2,zero,40079fc <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 40079f0:	e0fffb17 	ldw	r3,-20(fp)
 40079f4:	e0bffc17 	ldw	r2,-16(fp)
 40079f8:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 40079fc:	e0bfff17 	ldw	r2,-4(fp)
 4007a00:	10800217 	ldw	r2,8(r2)
 4007a04:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 4007a08:	e0bffe17 	ldw	r2,-8(fp)
 4007a0c:	10000a15 	stw	zero,40(r2)
#endif
}
 4007a10:	e037883a 	mov	sp,fp
 4007a14:	df000017 	ldw	fp,0(sp)
 4007a18:	dec00104 	addi	sp,sp,4
 4007a1c:	f800283a 	ret

04007a20 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 4007a20:	defff304 	addi	sp,sp,-52
 4007a24:	df000c15 	stw	fp,48(sp)
 4007a28:	df000c04 	addi	fp,sp,48
 4007a2c:	e13ffb15 	stw	r4,-20(fp)
 4007a30:	e17ffc15 	stw	r5,-16(fp)
 4007a34:	e1bffd15 	stw	r6,-12(fp)
 4007a38:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4007a3c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4007a40:	e0bffe17 	ldw	r2,-8(fp)
 4007a44:	1004c03a 	cmpne	r2,r2,zero
 4007a48:	1000021e 	bne	r2,zero,4007a54 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 4007a4c:	e03fff15 	stw	zero,-4(fp)
 4007a50:	00007506 	br	4007c28 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 4007a54:	e0bffb17 	ldw	r2,-20(fp)
 4007a58:	1004c03a 	cmpne	r2,r2,zero
 4007a5c:	1000051e 	bne	r2,zero,4007a74 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 4007a60:	e0fffe17 	ldw	r3,-8(fp)
 4007a64:	00801884 	movi	r2,98
 4007a68:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 4007a6c:	e03fff15 	stw	zero,-4(fp)
 4007a70:	00006d06 	br	4007c28 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 4007a74:	e0bffb17 	ldw	r2,-20(fp)
 4007a78:	108000cc 	andi	r2,r2,3
 4007a7c:	1005003a 	cmpeq	r2,r2,zero
 4007a80:	1000051e 	bne	r2,zero,4007a98 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 4007a84:	e0fffe17 	ldw	r3,-8(fp)
 4007a88:	00801884 	movi	r2,98
 4007a8c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 4007a90:	e03fff15 	stw	zero,-4(fp)
 4007a94:	00006406 	br	4007c28 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 4007a98:	e0bffc17 	ldw	r2,-16(fp)
 4007a9c:	108000a8 	cmpgeui	r2,r2,2
 4007aa0:	1000051e 	bne	r2,zero,4007ab8 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 4007aa4:	e0fffe17 	ldw	r3,-8(fp)
 4007aa8:	008016c4 	movi	r2,91
 4007aac:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 4007ab0:	e03fff15 	stw	zero,-4(fp)
 4007ab4:	00005c06 	br	4007c28 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 4007ab8:	e0bffd17 	ldw	r2,-12(fp)
 4007abc:	10800128 	cmpgeui	r2,r2,4
 4007ac0:	1000051e 	bne	r2,zero,4007ad8 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 4007ac4:	e0fffe17 	ldw	r3,-8(fp)
 4007ac8:	00801704 	movi	r2,92
 4007acc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 4007ad0:	e03fff15 	stw	zero,-4(fp)
 4007ad4:	00005406 	br	4007c28 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007ad8:	0005303a 	rdctl	r2,status
 4007adc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007ae0:	e0fff517 	ldw	r3,-44(fp)
 4007ae4:	00bfff84 	movi	r2,-2
 4007ae8:	1884703a 	and	r2,r3,r2
 4007aec:	1001703a 	wrctl	status,r2
  
  return context;
 4007af0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4007af4:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 4007af8:	008100b4 	movhi	r2,1026
 4007afc:	10a1fd04 	addi	r2,r2,-30732
 4007b00:	10800017 	ldw	r2,0(r2)
 4007b04:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 4007b08:	008100b4 	movhi	r2,1026
 4007b0c:	10a1fd04 	addi	r2,r2,-30732
 4007b10:	10800017 	ldw	r2,0(r2)
 4007b14:	1005003a 	cmpeq	r2,r2,zero
 4007b18:	1000081e 	bne	r2,zero,4007b3c <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 4007b1c:	008100b4 	movhi	r2,1026
 4007b20:	10a1fd04 	addi	r2,r2,-30732
 4007b24:	10800017 	ldw	r2,0(r2)
 4007b28:	10800117 	ldw	r2,4(r2)
 4007b2c:	1007883a 	mov	r3,r2
 4007b30:	008100b4 	movhi	r2,1026
 4007b34:	10a1fd04 	addi	r2,r2,-30732
 4007b38:	10c00015 	stw	r3,0(r2)
 4007b3c:	e0bff617 	ldw	r2,-40(fp)
 4007b40:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007b44:	e0bff417 	ldw	r2,-48(fp)
 4007b48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 4007b4c:	e0bffa17 	ldw	r2,-24(fp)
 4007b50:	1004c03a 	cmpne	r2,r2,zero
 4007b54:	1000051e 	bne	r2,zero,4007b6c <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 4007b58:	e0fffe17 	ldw	r3,-8(fp)
 4007b5c:	00801684 	movi	r2,90
 4007b60:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 4007b64:	e03fff15 	stw	zero,-4(fp)
 4007b68:	00002f06 	br	4007c28 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 4007b6c:	e0bffb17 	ldw	r2,-20(fp)
 4007b70:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 4007b74:	e0bffb17 	ldw	r2,-20(fp)
 4007b78:	1007883a 	mov	r3,r2
 4007b7c:	e0bffd17 	ldw	r2,-12(fp)
 4007b80:	1885883a 	add	r2,r3,r2
 4007b84:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 4007b88:	e03ff715 	stw	zero,-36(fp)
 4007b8c:	00000d06 	br	4007bc4 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 4007b90:	e0fff817 	ldw	r3,-32(fp)
 4007b94:	e0bff917 	ldw	r2,-28(fp)
 4007b98:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 4007b9c:	e0bff917 	ldw	r2,-28(fp)
 4007ba0:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 4007ba4:	e0bff917 	ldw	r2,-28(fp)
 4007ba8:	1007883a 	mov	r3,r2
 4007bac:	e0bffd17 	ldw	r2,-12(fp)
 4007bb0:	1885883a 	add	r2,r3,r2
 4007bb4:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 4007bb8:	e0bff717 	ldw	r2,-36(fp)
 4007bbc:	10800044 	addi	r2,r2,1
 4007bc0:	e0bff715 	stw	r2,-36(fp)
 4007bc4:	e0bffc17 	ldw	r2,-16(fp)
 4007bc8:	10ffffc4 	addi	r3,r2,-1
 4007bcc:	e0bff717 	ldw	r2,-36(fp)
 4007bd0:	10ffef36 	bltu	r2,r3,4007b90 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 4007bd4:	e0bff817 	ldw	r2,-32(fp)
 4007bd8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 4007bdc:	e0fffa17 	ldw	r3,-24(fp)
 4007be0:	e0bffb17 	ldw	r2,-20(fp)
 4007be4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 4007be8:	e0fffa17 	ldw	r3,-24(fp)
 4007bec:	e0bffb17 	ldw	r2,-20(fp)
 4007bf0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 4007bf4:	e0fffa17 	ldw	r3,-24(fp)
 4007bf8:	e0bffc17 	ldw	r2,-16(fp)
 4007bfc:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 4007c00:	e0fffa17 	ldw	r3,-24(fp)
 4007c04:	e0bffc17 	ldw	r2,-16(fp)
 4007c08:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 4007c0c:	e0fffa17 	ldw	r3,-24(fp)
 4007c10:	e0bffd17 	ldw	r2,-12(fp)
 4007c14:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 4007c18:	e0bffe17 	ldw	r2,-8(fp)
 4007c1c:	10000005 	stb	zero,0(r2)
    return (pmem);
 4007c20:	e0bffa17 	ldw	r2,-24(fp)
 4007c24:	e0bfff15 	stw	r2,-4(fp)
 4007c28:	e0bfff17 	ldw	r2,-4(fp)
}
 4007c2c:	e037883a 	mov	sp,fp
 4007c30:	df000017 	ldw	fp,0(sp)
 4007c34:	dec00104 	addi	sp,sp,4
 4007c38:	f800283a 	ret

04007c3c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 4007c3c:	defff704 	addi	sp,sp,-36
 4007c40:	df000815 	stw	fp,32(sp)
 4007c44:	df000804 	addi	fp,sp,32
 4007c48:	e13ffd15 	stw	r4,-12(fp)
 4007c4c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4007c50:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4007c54:	e0bffe17 	ldw	r2,-8(fp)
 4007c58:	1004c03a 	cmpne	r2,r2,zero
 4007c5c:	1000021e 	bne	r2,zero,4007c68 <OSMemGet+0x2c>
        return ((void *)0);
 4007c60:	e03fff15 	stw	zero,-4(fp)
 4007c64:	00003106 	br	4007d2c <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 4007c68:	e0bffd17 	ldw	r2,-12(fp)
 4007c6c:	1004c03a 	cmpne	r2,r2,zero
 4007c70:	1000051e 	bne	r2,zero,4007c88 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4007c74:	e0fffe17 	ldw	r3,-8(fp)
 4007c78:	00801804 	movi	r2,96
 4007c7c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 4007c80:	e03fff15 	stw	zero,-4(fp)
 4007c84:	00002906 	br	4007d2c <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007c88:	0005303a 	rdctl	r2,status
 4007c8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007c90:	e0fffa17 	ldw	r3,-24(fp)
 4007c94:	00bfff84 	movi	r2,-2
 4007c98:	1884703a 	and	r2,r3,r2
 4007c9c:	1001703a 	wrctl	status,r2
  
  return context;
 4007ca0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4007ca4:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 4007ca8:	e0bffd17 	ldw	r2,-12(fp)
 4007cac:	10800417 	ldw	r2,16(r2)
 4007cb0:	1005003a 	cmpeq	r2,r2,zero
 4007cb4:	1000151e 	bne	r2,zero,4007d0c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 4007cb8:	e0bffd17 	ldw	r2,-12(fp)
 4007cbc:	10800117 	ldw	r2,4(r2)
 4007cc0:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 4007cc4:	e0bffc17 	ldw	r2,-16(fp)
 4007cc8:	10c00017 	ldw	r3,0(r2)
 4007ccc:	e0bffd17 	ldw	r2,-12(fp)
 4007cd0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 4007cd4:	e0bffd17 	ldw	r2,-12(fp)
 4007cd8:	10800417 	ldw	r2,16(r2)
 4007cdc:	10ffffc4 	addi	r3,r2,-1
 4007ce0:	e0bffd17 	ldw	r2,-12(fp)
 4007ce4:	10c00415 	stw	r3,16(r2)
 4007ce8:	e0bffb17 	ldw	r2,-20(fp)
 4007cec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007cf0:	e0bff917 	ldw	r2,-28(fp)
 4007cf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 4007cf8:	e0bffe17 	ldw	r2,-8(fp)
 4007cfc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 4007d00:	e0bffc17 	ldw	r2,-16(fp)
 4007d04:	e0bfff15 	stw	r2,-4(fp)
 4007d08:	00000806 	br	4007d2c <OSMemGet+0xf0>
 4007d0c:	e0bffb17 	ldw	r2,-20(fp)
 4007d10:	e0bff815 	stw	r2,-32(fp)
 4007d14:	e0bff817 	ldw	r2,-32(fp)
 4007d18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 4007d1c:	e0fffe17 	ldw	r3,-8(fp)
 4007d20:	00801744 	movi	r2,93
 4007d24:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 4007d28:	e03fff15 	stw	zero,-4(fp)
 4007d2c:	e0bfff17 	ldw	r2,-4(fp)
}
 4007d30:	e037883a 	mov	sp,fp
 4007d34:	df000017 	ldw	fp,0(sp)
 4007d38:	dec00104 	addi	sp,sp,4
 4007d3c:	f800283a 	ret

04007d40 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4007d40:	defff604 	addi	sp,sp,-40
 4007d44:	dfc00915 	stw	ra,36(sp)
 4007d48:	df000815 	stw	fp,32(sp)
 4007d4c:	df000804 	addi	fp,sp,32
 4007d50:	e13ffc15 	stw	r4,-16(fp)
 4007d54:	e17ffd15 	stw	r5,-12(fp)
 4007d58:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4007d5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4007d60:	e0bffe17 	ldw	r2,-8(fp)
 4007d64:	1004c03a 	cmpne	r2,r2,zero
 4007d68:	1000021e 	bne	r2,zero,4007d74 <OSMemNameGet+0x34>
        return (0);
 4007d6c:	e03fff15 	stw	zero,-4(fp)
 4007d70:	00003006 	br	4007e34 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4007d74:	e0bffc17 	ldw	r2,-16(fp)
 4007d78:	1004c03a 	cmpne	r2,r2,zero
 4007d7c:	1000051e 	bne	r2,zero,4007d94 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4007d80:	e0fffe17 	ldw	r3,-8(fp)
 4007d84:	00801804 	movi	r2,96
 4007d88:	18800005 	stb	r2,0(r3)
        return (0);
 4007d8c:	e03fff15 	stw	zero,-4(fp)
 4007d90:	00002806 	br	4007e34 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4007d94:	e0bffd17 	ldw	r2,-12(fp)
 4007d98:	1004c03a 	cmpne	r2,r2,zero
 4007d9c:	1000051e 	bne	r2,zero,4007db4 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 4007da0:	e0fffe17 	ldw	r3,-8(fp)
 4007da4:	00800304 	movi	r2,12
 4007da8:	18800005 	stb	r2,0(r3)
        return (0);
 4007dac:	e03fff15 	stw	zero,-4(fp)
 4007db0:	00002006 	br	4007e34 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4007db4:	008100b4 	movhi	r2,1026
 4007db8:	10a20404 	addi	r2,r2,-30704
 4007dbc:	10800003 	ldbu	r2,0(r2)
 4007dc0:	10803fcc 	andi	r2,r2,255
 4007dc4:	1005003a 	cmpeq	r2,r2,zero
 4007dc8:	1000051e 	bne	r2,zero,4007de0 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 4007dcc:	e0fffe17 	ldw	r3,-8(fp)
 4007dd0:	00800444 	movi	r2,17
 4007dd4:	18800005 	stb	r2,0(r3)
        return (0);
 4007dd8:	e03fff15 	stw	zero,-4(fp)
 4007ddc:	00001506 	br	4007e34 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007de0:	0005303a 	rdctl	r2,status
 4007de4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007de8:	e0fff917 	ldw	r3,-28(fp)
 4007dec:	00bfff84 	movi	r2,-2
 4007df0:	1884703a 	and	r2,r3,r2
 4007df4:	1001703a 	wrctl	status,r2
  
  return context;
 4007df8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4007dfc:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 4007e00:	e0bffc17 	ldw	r2,-16(fp)
 4007e04:	11400504 	addi	r5,r2,20
 4007e08:	e13ffd17 	ldw	r4,-12(fp)
 4007e0c:	40059740 	call	4005974 <OS_StrCopy>
 4007e10:	e0bffb05 	stb	r2,-20(fp)
 4007e14:	e0bffa17 	ldw	r2,-24(fp)
 4007e18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007e1c:	e0bff817 	ldw	r2,-32(fp)
 4007e20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4007e24:	e0bffe17 	ldw	r2,-8(fp)
 4007e28:	10000005 	stb	zero,0(r2)
    return (len);
 4007e2c:	e0bffb03 	ldbu	r2,-20(fp)
 4007e30:	e0bfff15 	stw	r2,-4(fp)
 4007e34:	e0bfff17 	ldw	r2,-4(fp)
}
 4007e38:	e037883a 	mov	sp,fp
 4007e3c:	dfc00117 	ldw	ra,4(sp)
 4007e40:	df000017 	ldw	fp,0(sp)
 4007e44:	dec00204 	addi	sp,sp,8
 4007e48:	f800283a 	ret

04007e4c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4007e4c:	defff604 	addi	sp,sp,-40
 4007e50:	dfc00915 	stw	ra,36(sp)
 4007e54:	df000815 	stw	fp,32(sp)
 4007e58:	df000804 	addi	fp,sp,32
 4007e5c:	e13ffd15 	stw	r4,-12(fp)
 4007e60:	e17ffe15 	stw	r5,-8(fp)
 4007e64:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4007e68:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4007e6c:	e0bfff17 	ldw	r2,-4(fp)
 4007e70:	1005003a 	cmpeq	r2,r2,zero
 4007e74:	1000381e 	bne	r2,zero,4007f58 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4007e78:	e0bffd17 	ldw	r2,-12(fp)
 4007e7c:	1004c03a 	cmpne	r2,r2,zero
 4007e80:	1000041e 	bne	r2,zero,4007e94 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4007e84:	e0ffff17 	ldw	r3,-4(fp)
 4007e88:	00801804 	movi	r2,96
 4007e8c:	18800005 	stb	r2,0(r3)
        return;
 4007e90:	00003106 	br	4007f58 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4007e94:	e0bffe17 	ldw	r2,-8(fp)
 4007e98:	1004c03a 	cmpne	r2,r2,zero
 4007e9c:	1000041e 	bne	r2,zero,4007eb0 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 4007ea0:	e0ffff17 	ldw	r3,-4(fp)
 4007ea4:	00800304 	movi	r2,12
 4007ea8:	18800005 	stb	r2,0(r3)
        return;
 4007eac:	00002a06 	br	4007f58 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4007eb0:	008100b4 	movhi	r2,1026
 4007eb4:	10a20404 	addi	r2,r2,-30704
 4007eb8:	10800003 	ldbu	r2,0(r2)
 4007ebc:	10803fcc 	andi	r2,r2,255
 4007ec0:	1005003a 	cmpeq	r2,r2,zero
 4007ec4:	1000041e 	bne	r2,zero,4007ed8 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 4007ec8:	e0ffff17 	ldw	r3,-4(fp)
 4007ecc:	00800484 	movi	r2,18
 4007ed0:	18800005 	stb	r2,0(r3)
        return;
 4007ed4:	00002006 	br	4007f58 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007ed8:	0005303a 	rdctl	r2,status
 4007edc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007ee0:	e0fffa17 	ldw	r3,-24(fp)
 4007ee4:	00bfff84 	movi	r2,-2
 4007ee8:	1884703a 	and	r2,r3,r2
 4007eec:	1001703a 	wrctl	status,r2
  
  return context;
 4007ef0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4007ef4:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 4007ef8:	e13ffe17 	ldw	r4,-8(fp)
 4007efc:	40059f40 	call	40059f4 <OS_StrLen>
 4007f00:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 4007f04:	e0bffc03 	ldbu	r2,-16(fp)
 4007f08:	10800830 	cmpltui	r2,r2,32
 4007f0c:	1000081e 	bne	r2,zero,4007f30 <OSMemNameSet+0xe4>
 4007f10:	e0bffb17 	ldw	r2,-20(fp)
 4007f14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007f18:	e0bff917 	ldw	r2,-28(fp)
 4007f1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 4007f20:	e0ffff17 	ldw	r3,-4(fp)
 4007f24:	008018c4 	movi	r2,99
 4007f28:	18800005 	stb	r2,0(r3)
        return;
 4007f2c:	00000a06 	br	4007f58 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 4007f30:	e0bffd17 	ldw	r2,-12(fp)
 4007f34:	11000504 	addi	r4,r2,20
 4007f38:	e17ffe17 	ldw	r5,-8(fp)
 4007f3c:	40059740 	call	4005974 <OS_StrCopy>
 4007f40:	e0bffb17 	ldw	r2,-20(fp)
 4007f44:	e0bff815 	stw	r2,-32(fp)
 4007f48:	e0bff817 	ldw	r2,-32(fp)
 4007f4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4007f50:	e0bfff17 	ldw	r2,-4(fp)
 4007f54:	10000005 	stb	zero,0(r2)
}
 4007f58:	e037883a 	mov	sp,fp
 4007f5c:	dfc00117 	ldw	ra,4(sp)
 4007f60:	df000017 	ldw	fp,0(sp)
 4007f64:	dec00204 	addi	sp,sp,8
 4007f68:	f800283a 	ret

04007f6c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 4007f6c:	defff804 	addi	sp,sp,-32
 4007f70:	df000715 	stw	fp,28(sp)
 4007f74:	df000704 	addi	fp,sp,28
 4007f78:	e13ffd15 	stw	r4,-12(fp)
 4007f7c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4007f80:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4007f84:	e0bffd17 	ldw	r2,-12(fp)
 4007f88:	1004c03a 	cmpne	r2,r2,zero
 4007f8c:	1000031e 	bne	r2,zero,4007f9c <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 4007f90:	00801804 	movi	r2,96
 4007f94:	e0bfff15 	stw	r2,-4(fp)
 4007f98:	00002b06 	br	4008048 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 4007f9c:	e0bffe17 	ldw	r2,-8(fp)
 4007fa0:	1004c03a 	cmpne	r2,r2,zero
 4007fa4:	1000031e 	bne	r2,zero,4007fb4 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 4007fa8:	008017c4 	movi	r2,95
 4007fac:	e0bfff15 	stw	r2,-4(fp)
 4007fb0:	00002506 	br	4008048 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007fb4:	0005303a 	rdctl	r2,status
 4007fb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007fbc:	e0fffb17 	ldw	r3,-20(fp)
 4007fc0:	00bfff84 	movi	r2,-2
 4007fc4:	1884703a 	and	r2,r3,r2
 4007fc8:	1001703a 	wrctl	status,r2
  
  return context;
 4007fcc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4007fd0:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 4007fd4:	e0bffd17 	ldw	r2,-12(fp)
 4007fd8:	10c00417 	ldw	r3,16(r2)
 4007fdc:	e0bffd17 	ldw	r2,-12(fp)
 4007fe0:	10800317 	ldw	r2,12(r2)
 4007fe4:	18800736 	bltu	r3,r2,4008004 <OSMemPut+0x98>
 4007fe8:	e0bffc17 	ldw	r2,-16(fp)
 4007fec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007ff0:	e0bffa17 	ldw	r2,-24(fp)
 4007ff4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 4007ff8:	00801784 	movi	r2,94
 4007ffc:	e0bfff15 	stw	r2,-4(fp)
 4008000:	00001106 	br	4008048 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 4008004:	e0fffe17 	ldw	r3,-8(fp)
 4008008:	e0bffd17 	ldw	r2,-12(fp)
 400800c:	10800117 	ldw	r2,4(r2)
 4008010:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 4008014:	e0fffd17 	ldw	r3,-12(fp)
 4008018:	e0bffe17 	ldw	r2,-8(fp)
 400801c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 4008020:	e0bffd17 	ldw	r2,-12(fp)
 4008024:	10800417 	ldw	r2,16(r2)
 4008028:	10c00044 	addi	r3,r2,1
 400802c:	e0bffd17 	ldw	r2,-12(fp)
 4008030:	10c00415 	stw	r3,16(r2)
 4008034:	e0bffc17 	ldw	r2,-16(fp)
 4008038:	e0bff915 	stw	r2,-28(fp)
 400803c:	e0bff917 	ldw	r2,-28(fp)
 4008040:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 4008044:	e03fff15 	stw	zero,-4(fp)
 4008048:	e0bfff17 	ldw	r2,-4(fp)
}
 400804c:	e037883a 	mov	sp,fp
 4008050:	df000017 	ldw	fp,0(sp)
 4008054:	dec00104 	addi	sp,sp,4
 4008058:	f800283a 	ret

0400805c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 400805c:	defff904 	addi	sp,sp,-28
 4008060:	df000615 	stw	fp,24(sp)
 4008064:	df000604 	addi	fp,sp,24
 4008068:	e13ffd15 	stw	r4,-12(fp)
 400806c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4008070:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4008074:	e0bffd17 	ldw	r2,-12(fp)
 4008078:	1004c03a 	cmpne	r2,r2,zero
 400807c:	1000031e 	bne	r2,zero,400808c <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 4008080:	00801804 	movi	r2,96
 4008084:	e0bfff15 	stw	r2,-4(fp)
 4008088:	00002e06 	br	4008144 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 400808c:	e0bffe17 	ldw	r2,-8(fp)
 4008090:	1004c03a 	cmpne	r2,r2,zero
 4008094:	1000031e 	bne	r2,zero,40080a4 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 4008098:	00801844 	movi	r2,97
 400809c:	e0bfff15 	stw	r2,-4(fp)
 40080a0:	00002806 	br	4008144 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40080a4:	0005303a 	rdctl	r2,status
 40080a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40080ac:	e0fffb17 	ldw	r3,-20(fp)
 40080b0:	00bfff84 	movi	r2,-2
 40080b4:	1884703a 	and	r2,r3,r2
 40080b8:	1001703a 	wrctl	status,r2
  
  return context;
 40080bc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40080c0:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 40080c4:	e0bffd17 	ldw	r2,-12(fp)
 40080c8:	10c00017 	ldw	r3,0(r2)
 40080cc:	e0bffe17 	ldw	r2,-8(fp)
 40080d0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 40080d4:	e0bffd17 	ldw	r2,-12(fp)
 40080d8:	10c00117 	ldw	r3,4(r2)
 40080dc:	e0bffe17 	ldw	r2,-8(fp)
 40080e0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 40080e4:	e0bffd17 	ldw	r2,-12(fp)
 40080e8:	10c00217 	ldw	r3,8(r2)
 40080ec:	e0bffe17 	ldw	r2,-8(fp)
 40080f0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 40080f4:	e0bffd17 	ldw	r2,-12(fp)
 40080f8:	10c00317 	ldw	r3,12(r2)
 40080fc:	e0bffe17 	ldw	r2,-8(fp)
 4008100:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 4008104:	e0bffd17 	ldw	r2,-12(fp)
 4008108:	10c00417 	ldw	r3,16(r2)
 400810c:	e0bffe17 	ldw	r2,-8(fp)
 4008110:	10c00415 	stw	r3,16(r2)
 4008114:	e0bffc17 	ldw	r2,-16(fp)
 4008118:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400811c:	e0bffa17 	ldw	r2,-24(fp)
 4008120:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 4008124:	e0bffe17 	ldw	r2,-8(fp)
 4008128:	10c00317 	ldw	r3,12(r2)
 400812c:	e0bffe17 	ldw	r2,-8(fp)
 4008130:	10800417 	ldw	r2,16(r2)
 4008134:	1887c83a 	sub	r3,r3,r2
 4008138:	e0bffe17 	ldw	r2,-8(fp)
 400813c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 4008140:	e03fff15 	stw	zero,-4(fp)
 4008144:	e0bfff17 	ldw	r2,-4(fp)
}
 4008148:	e037883a 	mov	sp,fp
 400814c:	df000017 	ldw	fp,0(sp)
 4008150:	dec00104 	addi	sp,sp,4
 4008154:	f800283a 	ret

04008158 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 4008158:	defffc04 	addi	sp,sp,-16
 400815c:	dfc00315 	stw	ra,12(sp)
 4008160:	df000215 	stw	fp,8(sp)
 4008164:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 4008168:	010100b4 	movhi	r4,1026
 400816c:	2102f604 	addi	r4,r4,3032
 4008170:	01430c04 	movi	r5,3120
 4008174:	40056940 	call	4005694 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 4008178:	008100b4 	movhi	r2,1026
 400817c:	1082f604 	addi	r2,r2,3032
 4008180:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4008184:	e03ffe0d 	sth	zero,-8(fp)
 4008188:	00001306 	br	40081d8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 400818c:	e0bffe0b 	ldhu	r2,-8(fp)
 4008190:	10800d24 	muli	r2,r2,52
 4008194:	1007883a 	mov	r3,r2
 4008198:	008100b4 	movhi	r2,1026
 400819c:	10830304 	addi	r2,r2,3084
 40081a0:	1887883a 	add	r3,r3,r2
 40081a4:	e0bfff17 	ldw	r2,-4(fp)
 40081a8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 40081ac:	e0ffff17 	ldw	r3,-4(fp)
 40081b0:	00800fc4 	movi	r2,63
 40081b4:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 40081b8:	e0bfff17 	ldw	r2,-4(fp)
 40081bc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 40081c0:	e0bfff17 	ldw	r2,-4(fp)
 40081c4:	10800d04 	addi	r2,r2,52
 40081c8:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 40081cc:	e0bffe0b 	ldhu	r2,-8(fp)
 40081d0:	10800044 	addi	r2,r2,1
 40081d4:	e0bffe0d 	sth	r2,-8(fp)
 40081d8:	e0bffe0b 	ldhu	r2,-8(fp)
 40081dc:	10800ef0 	cmpltui	r2,r2,59
 40081e0:	103fea1e 	bne	r2,zero,400818c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 40081e4:	e0bfff17 	ldw	r2,-4(fp)
 40081e8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 40081ec:	e0ffff17 	ldw	r3,-4(fp)
 40081f0:	00800fc4 	movi	r2,63
 40081f4:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 40081f8:	e0bfff17 	ldw	r2,-4(fp)
 40081fc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 4008200:	00c100b4 	movhi	r3,1026
 4008204:	18e1fd04 	addi	r3,r3,-30732
 4008208:	008100b4 	movhi	r2,1026
 400820c:	1082f604 	addi	r2,r2,3032
 4008210:	18800015 	stw	r2,0(r3)
#endif
}
 4008214:	e037883a 	mov	sp,fp
 4008218:	dfc00117 	ldw	ra,4(sp)
 400821c:	df000017 	ldw	fp,0(sp)
 4008220:	dec00204 	addi	sp,sp,8
 4008224:	f800283a 	ret

04008228 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 4008228:	defff704 	addi	sp,sp,-36
 400822c:	df000815 	stw	fp,32(sp)
 4008230:	df000804 	addi	fp,sp,32
 4008234:	e13ffd15 	stw	r4,-12(fp)
 4008238:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400823c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4008240:	e0bffe17 	ldw	r2,-8(fp)
 4008244:	1004c03a 	cmpne	r2,r2,zero
 4008248:	1000021e 	bne	r2,zero,4008254 <OSQAccept+0x2c>
        return ((void *)0);
 400824c:	e03fff15 	stw	zero,-4(fp)
 4008250:	00004506 	br	4008368 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4008254:	e0bffd17 	ldw	r2,-12(fp)
 4008258:	1004c03a 	cmpne	r2,r2,zero
 400825c:	1000051e 	bne	r2,zero,4008274 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 4008260:	e0fffe17 	ldw	r3,-8(fp)
 4008264:	00800104 	movi	r2,4
 4008268:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400826c:	e03fff15 	stw	zero,-4(fp)
 4008270:	00003d06 	br	4008368 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4008274:	e0bffd17 	ldw	r2,-12(fp)
 4008278:	10800003 	ldbu	r2,0(r2)
 400827c:	10803fcc 	andi	r2,r2,255
 4008280:	108000a0 	cmpeqi	r2,r2,2
 4008284:	1000051e 	bne	r2,zero,400829c <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 4008288:	e0fffe17 	ldw	r3,-8(fp)
 400828c:	00800044 	movi	r2,1
 4008290:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 4008294:	e03fff15 	stw	zero,-4(fp)
 4008298:	00003306 	br	4008368 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400829c:	0005303a 	rdctl	r2,status
 40082a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40082a4:	e0fff917 	ldw	r3,-28(fp)
 40082a8:	00bfff84 	movi	r2,-2
 40082ac:	1884703a 	and	r2,r3,r2
 40082b0:	1001703a 	wrctl	status,r2
  
  return context;
 40082b4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 40082b8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 40082bc:	e0bffd17 	ldw	r2,-12(fp)
 40082c0:	10800117 	ldw	r2,4(r2)
 40082c4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 40082c8:	e0bffb17 	ldw	r2,-20(fp)
 40082cc:	1080058b 	ldhu	r2,22(r2)
 40082d0:	10bfffcc 	andi	r2,r2,65535
 40082d4:	1005003a 	cmpeq	r2,r2,zero
 40082d8:	1000191e 	bne	r2,zero,4008340 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 40082dc:	e0bffb17 	ldw	r2,-20(fp)
 40082e0:	10c00417 	ldw	r3,16(r2)
 40082e4:	18800017 	ldw	r2,0(r3)
 40082e8:	e0bffc15 	stw	r2,-16(fp)
 40082ec:	18c00104 	addi	r3,r3,4
 40082f0:	e0bffb17 	ldw	r2,-20(fp)
 40082f4:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 40082f8:	e0bffb17 	ldw	r2,-20(fp)
 40082fc:	1080058b 	ldhu	r2,22(r2)
 4008300:	10bfffc4 	addi	r2,r2,-1
 4008304:	1007883a 	mov	r3,r2
 4008308:	e0bffb17 	ldw	r2,-20(fp)
 400830c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4008310:	e0bffb17 	ldw	r2,-20(fp)
 4008314:	10c00417 	ldw	r3,16(r2)
 4008318:	e0bffb17 	ldw	r2,-20(fp)
 400831c:	10800217 	ldw	r2,8(r2)
 4008320:	1880041e 	bne	r3,r2,4008334 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 4008324:	e0bffb17 	ldw	r2,-20(fp)
 4008328:	10c00117 	ldw	r3,4(r2)
 400832c:	e0bffb17 	ldw	r2,-20(fp)
 4008330:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 4008334:	e0bffe17 	ldw	r2,-8(fp)
 4008338:	10000005 	stb	zero,0(r2)
 400833c:	00000406 	br	4008350 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 4008340:	e0fffe17 	ldw	r3,-8(fp)
 4008344:	008007c4 	movi	r2,31
 4008348:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 400834c:	e03ffc15 	stw	zero,-16(fp)
 4008350:	e0bffa17 	ldw	r2,-24(fp)
 4008354:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008358:	e0bff817 	ldw	r2,-32(fp)
 400835c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 4008360:	e0bffc17 	ldw	r2,-16(fp)
 4008364:	e0bfff15 	stw	r2,-4(fp)
 4008368:	e0bfff17 	ldw	r2,-4(fp)
}
 400836c:	e037883a 	mov	sp,fp
 4008370:	df000017 	ldw	fp,0(sp)
 4008374:	dec00104 	addi	sp,sp,4
 4008378:	f800283a 	ret

0400837c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 400837c:	defff304 	addi	sp,sp,-52
 4008380:	dfc00c15 	stw	ra,48(sp)
 4008384:	df000b15 	stw	fp,44(sp)
 4008388:	df000b04 	addi	fp,sp,44
 400838c:	e13ffd15 	stw	r4,-12(fp)
 4008390:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4008394:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4008398:	008100b4 	movhi	r2,1026
 400839c:	10a20404 	addi	r2,r2,-30704
 40083a0:	10800003 	ldbu	r2,0(r2)
 40083a4:	10803fcc 	andi	r2,r2,255
 40083a8:	1005003a 	cmpeq	r2,r2,zero
 40083ac:	1000021e 	bne	r2,zero,40083b8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 40083b0:	e03fff15 	stw	zero,-4(fp)
 40083b4:	00007006 	br	4008578 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40083b8:	0005303a 	rdctl	r2,status
 40083bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40083c0:	e0fff917 	ldw	r3,-28(fp)
 40083c4:	00bfff84 	movi	r2,-2
 40083c8:	1884703a 	and	r2,r3,r2
 40083cc:	1001703a 	wrctl	status,r2
  
  return context;
 40083d0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 40083d4:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 40083d8:	008100b4 	movhi	r2,1026
 40083dc:	10a20304 	addi	r2,r2,-30708
 40083e0:	10800017 	ldw	r2,0(r2)
 40083e4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 40083e8:	008100b4 	movhi	r2,1026
 40083ec:	10a20304 	addi	r2,r2,-30708
 40083f0:	10800017 	ldw	r2,0(r2)
 40083f4:	1005003a 	cmpeq	r2,r2,zero
 40083f8:	1000081e 	bne	r2,zero,400841c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 40083fc:	008100b4 	movhi	r2,1026
 4008400:	10a20304 	addi	r2,r2,-30708
 4008404:	10800017 	ldw	r2,0(r2)
 4008408:	10800117 	ldw	r2,4(r2)
 400840c:	1007883a 	mov	r3,r2
 4008410:	008100b4 	movhi	r2,1026
 4008414:	10a20304 	addi	r2,r2,-30708
 4008418:	10c00015 	stw	r3,0(r2)
 400841c:	e0bffa17 	ldw	r2,-24(fp)
 4008420:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008424:	e0bff817 	ldw	r2,-32(fp)
 4008428:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 400842c:	e0bffc17 	ldw	r2,-16(fp)
 4008430:	1005003a 	cmpeq	r2,r2,zero
 4008434:	10004e1e 	bne	r2,zero,4008570 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008438:	0005303a 	rdctl	r2,status
 400843c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008440:	e0fff717 	ldw	r3,-36(fp)
 4008444:	00bfff84 	movi	r2,-2
 4008448:	1884703a 	and	r2,r3,r2
 400844c:	1001703a 	wrctl	status,r2
  
  return context;
 4008450:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 4008454:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 4008458:	008100b4 	movhi	r2,1026
 400845c:	10a1ff04 	addi	r2,r2,-30724
 4008460:	10800017 	ldw	r2,0(r2)
 4008464:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 4008468:	e0bffb17 	ldw	r2,-20(fp)
 400846c:	1005003a 	cmpeq	r2,r2,zero
 4008470:	1000311e 	bne	r2,zero,4008538 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 4008474:	008100b4 	movhi	r2,1026
 4008478:	10a1ff04 	addi	r2,r2,-30724
 400847c:	10800017 	ldw	r2,0(r2)
 4008480:	10c00017 	ldw	r3,0(r2)
 4008484:	008100b4 	movhi	r2,1026
 4008488:	10a1ff04 	addi	r2,r2,-30724
 400848c:	10c00015 	stw	r3,0(r2)
 4008490:	e0bffa17 	ldw	r2,-24(fp)
 4008494:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008498:	e0bff617 	ldw	r2,-40(fp)
 400849c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 40084a0:	e0fffb17 	ldw	r3,-20(fp)
 40084a4:	e0bffd17 	ldw	r2,-12(fp)
 40084a8:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 40084ac:	e0bffe0b 	ldhu	r2,-8(fp)
 40084b0:	1085883a 	add	r2,r2,r2
 40084b4:	1085883a 	add	r2,r2,r2
 40084b8:	1007883a 	mov	r3,r2
 40084bc:	e0bffd17 	ldw	r2,-12(fp)
 40084c0:	1887883a 	add	r3,r3,r2
 40084c4:	e0bffb17 	ldw	r2,-20(fp)
 40084c8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 40084cc:	e0fffb17 	ldw	r3,-20(fp)
 40084d0:	e0bffd17 	ldw	r2,-12(fp)
 40084d4:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 40084d8:	e0fffb17 	ldw	r3,-20(fp)
 40084dc:	e0bffd17 	ldw	r2,-12(fp)
 40084e0:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 40084e4:	e0fffb17 	ldw	r3,-20(fp)
 40084e8:	e0bffe0b 	ldhu	r2,-8(fp)
 40084ec:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 40084f0:	e0bffb17 	ldw	r2,-20(fp)
 40084f4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 40084f8:	e0fffc17 	ldw	r3,-16(fp)
 40084fc:	00800084 	movi	r2,2
 4008500:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 4008504:	e0bffc17 	ldw	r2,-16(fp)
 4008508:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 400850c:	e0fffc17 	ldw	r3,-16(fp)
 4008510:	e0bffb17 	ldw	r2,-20(fp)
 4008514:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 4008518:	e0fffc17 	ldw	r3,-16(fp)
 400851c:	00800fc4 	movi	r2,63
 4008520:	188004c5 	stb	r2,19(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 4008524:	e0bffc17 	ldw	r2,-16(fp)
 4008528:	10000505 	stb	zero,20(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 400852c:	e13ffc17 	ldw	r4,-16(fp)
 4008530:	40052c80 	call	40052c8 <OS_EventWaitListInit>
 4008534:	00000e06 	br	4008570 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 4008538:	008100b4 	movhi	r2,1026
 400853c:	10a20304 	addi	r2,r2,-30708
 4008540:	10c00017 	ldw	r3,0(r2)
 4008544:	e0bffc17 	ldw	r2,-16(fp)
 4008548:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 400854c:	00c100b4 	movhi	r3,1026
 4008550:	18e20304 	addi	r3,r3,-30708
 4008554:	e0bffc17 	ldw	r2,-16(fp)
 4008558:	18800015 	stw	r2,0(r3)
 400855c:	e0bffa17 	ldw	r2,-24(fp)
 4008560:	e0bff515 	stw	r2,-44(fp)
 4008564:	e0bff517 	ldw	r2,-44(fp)
 4008568:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 400856c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 4008570:	e0bffc17 	ldw	r2,-16(fp)
 4008574:	e0bfff15 	stw	r2,-4(fp)
 4008578:	e0bfff17 	ldw	r2,-4(fp)
}
 400857c:	e037883a 	mov	sp,fp
 4008580:	dfc00117 	ldw	ra,4(sp)
 4008584:	df000017 	ldw	fp,0(sp)
 4008588:	dec00204 	addi	sp,sp,8
 400858c:	f800283a 	ret

04008590 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4008590:	defff004 	addi	sp,sp,-64
 4008594:	dfc00f15 	stw	ra,60(sp)
 4008598:	df000e15 	stw	fp,56(sp)
 400859c:	df000e04 	addi	fp,sp,56
 40085a0:	e13ffb15 	stw	r4,-20(fp)
 40085a4:	e1bffd15 	stw	r6,-12(fp)
 40085a8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40085ac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40085b0:	e0bffd17 	ldw	r2,-12(fp)
 40085b4:	1004c03a 	cmpne	r2,r2,zero
 40085b8:	1000031e 	bne	r2,zero,40085c8 <OSQDel+0x38>
        return (pevent);
 40085bc:	e0bffb17 	ldw	r2,-20(fp)
 40085c0:	e0bfff15 	stw	r2,-4(fp)
 40085c4:	0000ac06 	br	4008878 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40085c8:	e0bffb17 	ldw	r2,-20(fp)
 40085cc:	1004c03a 	cmpne	r2,r2,zero
 40085d0:	1000061e 	bne	r2,zero,40085ec <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 40085d4:	e0fffd17 	ldw	r3,-12(fp)
 40085d8:	00800104 	movi	r2,4
 40085dc:	18800005 	stb	r2,0(r3)
        return (pevent);
 40085e0:	e0fffb17 	ldw	r3,-20(fp)
 40085e4:	e0ffff15 	stw	r3,-4(fp)
 40085e8:	0000a306 	br	4008878 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 40085ec:	e0bffb17 	ldw	r2,-20(fp)
 40085f0:	10800003 	ldbu	r2,0(r2)
 40085f4:	10803fcc 	andi	r2,r2,255
 40085f8:	108000a0 	cmpeqi	r2,r2,2
 40085fc:	1000061e 	bne	r2,zero,4008618 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 4008600:	e0fffd17 	ldw	r3,-12(fp)
 4008604:	00800044 	movi	r2,1
 4008608:	18800005 	stb	r2,0(r3)
        return (pevent);
 400860c:	e0bffb17 	ldw	r2,-20(fp)
 4008610:	e0bfff15 	stw	r2,-4(fp)
 4008614:	00009806 	br	4008878 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4008618:	008100b4 	movhi	r2,1026
 400861c:	10a20404 	addi	r2,r2,-30704
 4008620:	10800003 	ldbu	r2,0(r2)
 4008624:	10803fcc 	andi	r2,r2,255
 4008628:	1005003a 	cmpeq	r2,r2,zero
 400862c:	1000061e 	bne	r2,zero,4008648 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4008630:	e0fffd17 	ldw	r3,-12(fp)
 4008634:	008003c4 	movi	r2,15
 4008638:	18800005 	stb	r2,0(r3)
        return (pevent);
 400863c:	e0fffb17 	ldw	r3,-20(fp)
 4008640:	e0ffff15 	stw	r3,-4(fp)
 4008644:	00008c06 	br	4008878 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008648:	0005303a 	rdctl	r2,status
 400864c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008650:	e0fff617 	ldw	r3,-40(fp)
 4008654:	00bfff84 	movi	r2,-2
 4008658:	1884703a 	and	r2,r3,r2
 400865c:	1001703a 	wrctl	status,r2
  
  return context;
 4008660:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 4008664:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 4008668:	e0bffb17 	ldw	r2,-20(fp)
 400866c:	10800283 	ldbu	r2,10(r2)
 4008670:	10803fcc 	andi	r2,r2,255
 4008674:	1005003a 	cmpeq	r2,r2,zero
 4008678:	1000031e 	bne	r2,zero,4008688 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 400867c:	00800044 	movi	r2,1
 4008680:	e0bffa05 	stb	r2,-24(fp)
 4008684:	00000106 	br	400868c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4008688:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 400868c:	e0bffc03 	ldbu	r2,-16(fp)
 4008690:	e0bffe15 	stw	r2,-8(fp)
 4008694:	e0fffe17 	ldw	r3,-8(fp)
 4008698:	1805003a 	cmpeq	r2,r3,zero
 400869c:	1000041e 	bne	r2,zero,40086b0 <OSQDel+0x120>
 40086a0:	e0fffe17 	ldw	r3,-8(fp)
 40086a4:	18800060 	cmpeqi	r2,r3,1
 40086a8:	1000391e 	bne	r2,zero,4008790 <OSQDel+0x200>
 40086ac:	00006706 	br	400884c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 40086b0:	e0bffa03 	ldbu	r2,-24(fp)
 40086b4:	1004c03a 	cmpne	r2,r2,zero
 40086b8:	1000261e 	bne	r2,zero,4008754 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 40086bc:	e0fffb17 	ldw	r3,-20(fp)
 40086c0:	00800fc4 	movi	r2,63
 40086c4:	188004c5 	stb	r2,19(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 40086c8:	e0bffb17 	ldw	r2,-20(fp)
 40086cc:	10000505 	stb	zero,20(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 40086d0:	e0bffb17 	ldw	r2,-20(fp)
 40086d4:	10800117 	ldw	r2,4(r2)
 40086d8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 40086dc:	008100b4 	movhi	r2,1026
 40086e0:	10a1ff04 	addi	r2,r2,-30724
 40086e4:	10c00017 	ldw	r3,0(r2)
 40086e8:	e0bff817 	ldw	r2,-32(fp)
 40086ec:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 40086f0:	00c100b4 	movhi	r3,1026
 40086f4:	18e1ff04 	addi	r3,r3,-30724
 40086f8:	e0bff817 	ldw	r2,-32(fp)
 40086fc:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4008700:	e0bffb17 	ldw	r2,-20(fp)
 4008704:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4008708:	008100b4 	movhi	r2,1026
 400870c:	10a20304 	addi	r2,r2,-30708
 4008710:	10c00017 	ldw	r3,0(r2)
 4008714:	e0bffb17 	ldw	r2,-20(fp)
 4008718:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 400871c:	e0bffb17 	ldw	r2,-20(fp)
 4008720:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4008724:	00c100b4 	movhi	r3,1026
 4008728:	18e20304 	addi	r3,r3,-30708
 400872c:	e0bffb17 	ldw	r2,-20(fp)
 4008730:	18800015 	stw	r2,0(r3)
 4008734:	e0bff717 	ldw	r2,-36(fp)
 4008738:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400873c:	e0bff517 	ldw	r2,-44(fp)
 4008740:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4008744:	e0bffd17 	ldw	r2,-12(fp)
 4008748:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 400874c:	e03ff915 	stw	zero,-28(fp)
 4008750:	00004706 	br	4008870 <OSQDel+0x2e0>
 4008754:	e0bff717 	ldw	r2,-36(fp)
 4008758:	e0bff415 	stw	r2,-48(fp)
 400875c:	e0bff417 	ldw	r2,-48(fp)
 4008760:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4008764:	e0fffd17 	ldw	r3,-12(fp)
 4008768:	00801244 	movi	r2,73
 400876c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 4008770:	e0bffb17 	ldw	r2,-20(fp)
 4008774:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 4008778:	00003d06 	br	4008870 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 400877c:	e13ffb17 	ldw	r4,-20(fp)
 4008780:	000b883a 	mov	r5,zero
 4008784:	01800104 	movi	r6,4
 4008788:	000f883a 	mov	r7,zero
 400878c:	4004d140 	call	4004d14 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 4008790:	e0bffb17 	ldw	r2,-20(fp)
 4008794:	10800283 	ldbu	r2,10(r2)
 4008798:	10803fcc 	andi	r2,r2,255
 400879c:	1004c03a 	cmpne	r2,r2,zero
 40087a0:	103ff61e 	bne	r2,zero,400877c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 40087a4:	e0fffb17 	ldw	r3,-20(fp)
 40087a8:	00800fc4 	movi	r2,63
 40087ac:	188004c5 	stb	r2,19(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 40087b0:	e0bffb17 	ldw	r2,-20(fp)
 40087b4:	10000505 	stb	zero,20(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 40087b8:	e0bffb17 	ldw	r2,-20(fp)
 40087bc:	10800117 	ldw	r2,4(r2)
 40087c0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 40087c4:	008100b4 	movhi	r2,1026
 40087c8:	10a1ff04 	addi	r2,r2,-30724
 40087cc:	10c00017 	ldw	r3,0(r2)
 40087d0:	e0bff817 	ldw	r2,-32(fp)
 40087d4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 40087d8:	00c100b4 	movhi	r3,1026
 40087dc:	18e1ff04 	addi	r3,r3,-30724
 40087e0:	e0bff817 	ldw	r2,-32(fp)
 40087e4:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 40087e8:	e0bffb17 	ldw	r2,-20(fp)
 40087ec:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 40087f0:	008100b4 	movhi	r2,1026
 40087f4:	10a20304 	addi	r2,r2,-30708
 40087f8:	10c00017 	ldw	r3,0(r2)
 40087fc:	e0bffb17 	ldw	r2,-20(fp)
 4008800:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4008804:	e0bffb17 	ldw	r2,-20(fp)
 4008808:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 400880c:	00c100b4 	movhi	r3,1026
 4008810:	18e20304 	addi	r3,r3,-30708
 4008814:	e0bffb17 	ldw	r2,-20(fp)
 4008818:	18800015 	stw	r2,0(r3)
 400881c:	e0bff717 	ldw	r2,-36(fp)
 4008820:	e0bff315 	stw	r2,-52(fp)
 4008824:	e0bff317 	ldw	r2,-52(fp)
 4008828:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 400882c:	e0bffa03 	ldbu	r2,-24(fp)
 4008830:	10800058 	cmpnei	r2,r2,1
 4008834:	1000011e 	bne	r2,zero,400883c <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4008838:	40057540 	call	4005754 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 400883c:	e0bffd17 	ldw	r2,-12(fp)
 4008840:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 4008844:	e03ff915 	stw	zero,-28(fp)
             break;
 4008848:	00000906 	br	4008870 <OSQDel+0x2e0>
 400884c:	e0bff717 	ldw	r2,-36(fp)
 4008850:	e0bff215 	stw	r2,-56(fp)
 4008854:	e0bff217 	ldw	r2,-56(fp)
 4008858:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 400885c:	e0fffd17 	ldw	r3,-12(fp)
 4008860:	008001c4 	movi	r2,7
 4008864:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 4008868:	e0bffb17 	ldw	r2,-20(fp)
 400886c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 4008870:	e0bff917 	ldw	r2,-28(fp)
 4008874:	e0bfff15 	stw	r2,-4(fp)
 4008878:	e0bfff17 	ldw	r2,-4(fp)
}
 400887c:	e037883a 	mov	sp,fp
 4008880:	dfc00117 	ldw	ra,4(sp)
 4008884:	df000017 	ldw	fp,0(sp)
 4008888:	dec00204 	addi	sp,sp,8
 400888c:	f800283a 	ret

04008890 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 4008890:	defff904 	addi	sp,sp,-28
 4008894:	df000615 	stw	fp,24(sp)
 4008898:	df000604 	addi	fp,sp,24
 400889c:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40088a0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40088a4:	e0bffe17 	ldw	r2,-8(fp)
 40088a8:	1004c03a 	cmpne	r2,r2,zero
 40088ac:	1000031e 	bne	r2,zero,40088bc <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 40088b0:	00800104 	movi	r2,4
 40088b4:	e0bfff15 	stw	r2,-4(fp)
 40088b8:	00002206 	br	4008944 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 40088bc:	e0bffe17 	ldw	r2,-8(fp)
 40088c0:	10800003 	ldbu	r2,0(r2)
 40088c4:	10803fcc 	andi	r2,r2,255
 40088c8:	108000a0 	cmpeqi	r2,r2,2
 40088cc:	1000031e 	bne	r2,zero,40088dc <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 40088d0:	00800044 	movi	r2,1
 40088d4:	e0bfff15 	stw	r2,-4(fp)
 40088d8:	00001a06 	br	4008944 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40088dc:	0005303a 	rdctl	r2,status
 40088e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40088e4:	e0fffb17 	ldw	r3,-20(fp)
 40088e8:	00bfff84 	movi	r2,-2
 40088ec:	1884703a 	and	r2,r3,r2
 40088f0:	1001703a 	wrctl	status,r2
  
  return context;
 40088f4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40088f8:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 40088fc:	e0bffe17 	ldw	r2,-8(fp)
 4008900:	10800117 	ldw	r2,4(r2)
 4008904:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 4008908:	e0bffd17 	ldw	r2,-12(fp)
 400890c:	10c00117 	ldw	r3,4(r2)
 4008910:	e0bffd17 	ldw	r2,-12(fp)
 4008914:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 4008918:	e0bffd17 	ldw	r2,-12(fp)
 400891c:	10c00117 	ldw	r3,4(r2)
 4008920:	e0bffd17 	ldw	r2,-12(fp)
 4008924:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 4008928:	e0bffd17 	ldw	r2,-12(fp)
 400892c:	1000058d 	sth	zero,22(r2)
 4008930:	e0bffc17 	ldw	r2,-16(fp)
 4008934:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008938:	e0bffa17 	ldw	r2,-24(fp)
 400893c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4008940:	e03fff15 	stw	zero,-4(fp)
 4008944:	e0bfff17 	ldw	r2,-4(fp)
}
 4008948:	e037883a 	mov	sp,fp
 400894c:	df000017 	ldw	fp,0(sp)
 4008950:	dec00104 	addi	sp,sp,4
 4008954:	f800283a 	ret

04008958 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4008958:	defff104 	addi	sp,sp,-60
 400895c:	dfc00e15 	stw	ra,56(sp)
 4008960:	df000d15 	stw	fp,52(sp)
 4008964:	df000d04 	addi	fp,sp,52
 4008968:	e13ffb15 	stw	r4,-20(fp)
 400896c:	e1bffd15 	stw	r6,-12(fp)
 4008970:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4008974:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4008978:	e0bffd17 	ldw	r2,-12(fp)
 400897c:	1004c03a 	cmpne	r2,r2,zero
 4008980:	1000021e 	bne	r2,zero,400898c <OSQPend+0x34>
        return ((void *)0);
 4008984:	e03fff15 	stw	zero,-4(fp)
 4008988:	0000b506 	br	4008c60 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 400898c:	e0bffb17 	ldw	r2,-20(fp)
 4008990:	1004c03a 	cmpne	r2,r2,zero
 4008994:	1000051e 	bne	r2,zero,40089ac <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 4008998:	e0fffd17 	ldw	r3,-12(fp)
 400899c:	00800104 	movi	r2,4
 40089a0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 40089a4:	e03fff15 	stw	zero,-4(fp)
 40089a8:	0000ad06 	br	4008c60 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 40089ac:	e0bffb17 	ldw	r2,-20(fp)
 40089b0:	10800003 	ldbu	r2,0(r2)
 40089b4:	10803fcc 	andi	r2,r2,255
 40089b8:	108000a0 	cmpeqi	r2,r2,2
 40089bc:	1000051e 	bne	r2,zero,40089d4 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 40089c0:	e0fffd17 	ldw	r3,-12(fp)
 40089c4:	00800044 	movi	r2,1
 40089c8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 40089cc:	e03fff15 	stw	zero,-4(fp)
 40089d0:	0000a306 	br	4008c60 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 40089d4:	008100b4 	movhi	r2,1026
 40089d8:	10a20404 	addi	r2,r2,-30704
 40089dc:	10800003 	ldbu	r2,0(r2)
 40089e0:	10803fcc 	andi	r2,r2,255
 40089e4:	1005003a 	cmpeq	r2,r2,zero
 40089e8:	1000051e 	bne	r2,zero,4008a00 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 40089ec:	e0fffd17 	ldw	r3,-12(fp)
 40089f0:	00800084 	movi	r2,2
 40089f4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 40089f8:	e03fff15 	stw	zero,-4(fp)
 40089fc:	00009806 	br	4008c60 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 4008a00:	008100b4 	movhi	r2,1026
 4008a04:	10a1f404 	addi	r2,r2,-30768
 4008a08:	10800003 	ldbu	r2,0(r2)
 4008a0c:	10803fcc 	andi	r2,r2,255
 4008a10:	1005003a 	cmpeq	r2,r2,zero
 4008a14:	1000051e 	bne	r2,zero,4008a2c <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 4008a18:	e0fffd17 	ldw	r3,-12(fp)
 4008a1c:	00800344 	movi	r2,13
 4008a20:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 4008a24:	e03fff15 	stw	zero,-4(fp)
 4008a28:	00008d06 	br	4008c60 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008a2c:	0005303a 	rdctl	r2,status
 4008a30:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008a34:	e0fff717 	ldw	r3,-36(fp)
 4008a38:	00bfff84 	movi	r2,-2
 4008a3c:	1884703a 	and	r2,r3,r2
 4008a40:	1001703a 	wrctl	status,r2
  
  return context;
 4008a44:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 4008a48:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4008a4c:	e0bffb17 	ldw	r2,-20(fp)
 4008a50:	10800117 	ldw	r2,4(r2)
 4008a54:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4008a58:	e0bff917 	ldw	r2,-28(fp)
 4008a5c:	1080058b 	ldhu	r2,22(r2)
 4008a60:	10bfffcc 	andi	r2,r2,65535
 4008a64:	1005003a 	cmpeq	r2,r2,zero
 4008a68:	10001f1e 	bne	r2,zero,4008ae8 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4008a6c:	e0bff917 	ldw	r2,-28(fp)
 4008a70:	10c00417 	ldw	r3,16(r2)
 4008a74:	18800017 	ldw	r2,0(r3)
 4008a78:	e0bffa15 	stw	r2,-24(fp)
 4008a7c:	18c00104 	addi	r3,r3,4
 4008a80:	e0bff917 	ldw	r2,-28(fp)
 4008a84:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4008a88:	e0bff917 	ldw	r2,-28(fp)
 4008a8c:	1080058b 	ldhu	r2,22(r2)
 4008a90:	10bfffc4 	addi	r2,r2,-1
 4008a94:	1007883a 	mov	r3,r2
 4008a98:	e0bff917 	ldw	r2,-28(fp)
 4008a9c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4008aa0:	e0bff917 	ldw	r2,-28(fp)
 4008aa4:	10c00417 	ldw	r3,16(r2)
 4008aa8:	e0bff917 	ldw	r2,-28(fp)
 4008aac:	10800217 	ldw	r2,8(r2)
 4008ab0:	1880041e 	bne	r3,r2,4008ac4 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 4008ab4:	e0bff917 	ldw	r2,-28(fp)
 4008ab8:	10c00117 	ldw	r3,4(r2)
 4008abc:	e0bff917 	ldw	r2,-28(fp)
 4008ac0:	10c00415 	stw	r3,16(r2)
 4008ac4:	e0bff817 	ldw	r2,-32(fp)
 4008ac8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008acc:	e0bff617 	ldw	r2,-40(fp)
 4008ad0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4008ad4:	e0bffd17 	ldw	r2,-12(fp)
 4008ad8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 4008adc:	e0bffa17 	ldw	r2,-24(fp)
 4008ae0:	e0bfff15 	stw	r2,-4(fp)
 4008ae4:	00005e06 	br	4008c60 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 4008ae8:	008100b4 	movhi	r2,1026
 4008aec:	10a20504 	addi	r2,r2,-30700
 4008af0:	10c00017 	ldw	r3,0(r2)
 4008af4:	008100b4 	movhi	r2,1026
 4008af8:	10a20504 	addi	r2,r2,-30700
 4008afc:	10800017 	ldw	r2,0(r2)
 4008b00:	10800c03 	ldbu	r2,48(r2)
 4008b04:	10800114 	ori	r2,r2,4
 4008b08:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4008b0c:	008100b4 	movhi	r2,1026
 4008b10:	10a20504 	addi	r2,r2,-30700
 4008b14:	10800017 	ldw	r2,0(r2)
 4008b18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 4008b1c:	008100b4 	movhi	r2,1026
 4008b20:	10a20504 	addi	r2,r2,-30700
 4008b24:	10c00017 	ldw	r3,0(r2)
 4008b28:	e0bffc0b 	ldhu	r2,-16(fp)
 4008b2c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 4008b30:	e13ffb17 	ldw	r4,-20(fp)
 4008b34:	4004ea80 	call	4004ea8 <OS_EventTaskWait>
 4008b38:	e0bff817 	ldw	r2,-32(fp)
 4008b3c:	e0bff515 	stw	r2,-44(fp)
 4008b40:	e0bff517 	ldw	r2,-44(fp)
 4008b44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 4008b48:	40057540 	call	4005754 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008b4c:	0005303a 	rdctl	r2,status
 4008b50:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008b54:	e0fff417 	ldw	r3,-48(fp)
 4008b58:	00bfff84 	movi	r2,-2
 4008b5c:	1884703a 	and	r2,r3,r2
 4008b60:	1001703a 	wrctl	status,r2
  
  return context;
 4008b64:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 4008b68:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4008b6c:	008100b4 	movhi	r2,1026
 4008b70:	10a20504 	addi	r2,r2,-30700
 4008b74:	10800017 	ldw	r2,0(r2)
 4008b78:	10800c43 	ldbu	r2,49(r2)
 4008b7c:	10803fcc 	andi	r2,r2,255
 4008b80:	e0bffe15 	stw	r2,-8(fp)
 4008b84:	e0fffe17 	ldw	r3,-8(fp)
 4008b88:	1805003a 	cmpeq	r2,r3,zero
 4008b8c:	1000041e 	bne	r2,zero,4008ba0 <OSQPend+0x248>
 4008b90:	e0fffe17 	ldw	r3,-8(fp)
 4008b94:	188000a0 	cmpeqi	r2,r3,2
 4008b98:	1000091e 	bne	r2,zero,4008bc0 <OSQPend+0x268>
 4008b9c:	00000d06 	br	4008bd4 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 4008ba0:	008100b4 	movhi	r2,1026
 4008ba4:	10a20504 	addi	r2,r2,-30700
 4008ba8:	10800017 	ldw	r2,0(r2)
 4008bac:	10800917 	ldw	r2,36(r2)
 4008bb0:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 4008bb4:	e0bffd17 	ldw	r2,-12(fp)
 4008bb8:	10000005 	stb	zero,0(r2)
             break;
 4008bbc:	00000e06 	br	4008bf8 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 4008bc0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4008bc4:	e0fffd17 	ldw	r3,-12(fp)
 4008bc8:	00800384 	movi	r2,14
 4008bcc:	18800005 	stb	r2,0(r3)
             break;
 4008bd0:	00000906 	br	4008bf8 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 4008bd4:	008100b4 	movhi	r2,1026
 4008bd8:	10a20504 	addi	r2,r2,-30700
 4008bdc:	11000017 	ldw	r4,0(r2)
 4008be0:	e17ffb17 	ldw	r5,-20(fp)
 4008be4:	400510c0 	call	400510c <OS_EventTaskRemove>
             pmsg = (void *)0;
 4008be8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4008bec:	e0fffd17 	ldw	r3,-12(fp)
 4008bf0:	00800284 	movi	r2,10
 4008bf4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4008bf8:	008100b4 	movhi	r2,1026
 4008bfc:	10a20504 	addi	r2,r2,-30700
 4008c00:	10800017 	ldw	r2,0(r2)
 4008c04:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4008c08:	008100b4 	movhi	r2,1026
 4008c0c:	10a20504 	addi	r2,r2,-30700
 4008c10:	10800017 	ldw	r2,0(r2)
 4008c14:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4008c18:	008100b4 	movhi	r2,1026
 4008c1c:	10a20504 	addi	r2,r2,-30700
 4008c20:	10800017 	ldw	r2,0(r2)
 4008c24:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4008c28:	008100b4 	movhi	r2,1026
 4008c2c:	10a20504 	addi	r2,r2,-30700
 4008c30:	10800017 	ldw	r2,0(r2)
 4008c34:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 4008c38:	008100b4 	movhi	r2,1026
 4008c3c:	10a20504 	addi	r2,r2,-30700
 4008c40:	10800017 	ldw	r2,0(r2)
 4008c44:	10000915 	stw	zero,36(r2)
 4008c48:	e0bff817 	ldw	r2,-32(fp)
 4008c4c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008c50:	e0bff317 	ldw	r2,-52(fp)
 4008c54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 4008c58:	e0bffa17 	ldw	r2,-24(fp)
 4008c5c:	e0bfff15 	stw	r2,-4(fp)
 4008c60:	e0bfff17 	ldw	r2,-4(fp)
}
 4008c64:	e037883a 	mov	sp,fp
 4008c68:	dfc00117 	ldw	ra,4(sp)
 4008c6c:	df000017 	ldw	fp,0(sp)
 4008c70:	dec00204 	addi	sp,sp,8
 4008c74:	f800283a 	ret

04008c78 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4008c78:	defff504 	addi	sp,sp,-44
 4008c7c:	dfc00a15 	stw	ra,40(sp)
 4008c80:	df000915 	stw	fp,36(sp)
 4008c84:	df000904 	addi	fp,sp,36
 4008c88:	e13ffc15 	stw	r4,-16(fp)
 4008c8c:	e1bffe15 	stw	r6,-8(fp)
 4008c90:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4008c94:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4008c98:	e0bffe17 	ldw	r2,-8(fp)
 4008c9c:	1004c03a 	cmpne	r2,r2,zero
 4008ca0:	1000021e 	bne	r2,zero,4008cac <OSQPendAbort+0x34>
        return (0);
 4008ca4:	e03fff15 	stw	zero,-4(fp)
 4008ca8:	00004c06 	br	4008ddc <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4008cac:	e0bffc17 	ldw	r2,-16(fp)
 4008cb0:	1004c03a 	cmpne	r2,r2,zero
 4008cb4:	1000051e 	bne	r2,zero,4008ccc <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 4008cb8:	e0fffe17 	ldw	r3,-8(fp)
 4008cbc:	00800104 	movi	r2,4
 4008cc0:	18800005 	stb	r2,0(r3)
        return (0);
 4008cc4:	e03fff15 	stw	zero,-4(fp)
 4008cc8:	00004406 	br	4008ddc <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4008ccc:	e0bffc17 	ldw	r2,-16(fp)
 4008cd0:	10800003 	ldbu	r2,0(r2)
 4008cd4:	10803fcc 	andi	r2,r2,255
 4008cd8:	108000a0 	cmpeqi	r2,r2,2
 4008cdc:	1000051e 	bne	r2,zero,4008cf4 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 4008ce0:	e0fffe17 	ldw	r3,-8(fp)
 4008ce4:	00800044 	movi	r2,1
 4008ce8:	18800005 	stb	r2,0(r3)
        return (0);
 4008cec:	e03fff15 	stw	zero,-4(fp)
 4008cf0:	00003a06 	br	4008ddc <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008cf4:	0005303a 	rdctl	r2,status
 4008cf8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008cfc:	e0fff917 	ldw	r3,-28(fp)
 4008d00:	00bfff84 	movi	r2,-2
 4008d04:	1884703a 	and	r2,r3,r2
 4008d08:	1001703a 	wrctl	status,r2
  
  return context;
 4008d0c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4008d10:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 4008d14:	e0bffc17 	ldw	r2,-16(fp)
 4008d18:	10800283 	ldbu	r2,10(r2)
 4008d1c:	10803fcc 	andi	r2,r2,255
 4008d20:	1005003a 	cmpeq	r2,r2,zero
 4008d24:	1000261e 	bne	r2,zero,4008dc0 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 4008d28:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 4008d2c:	e0bffd03 	ldbu	r2,-12(fp)
 4008d30:	10800060 	cmpeqi	r2,r2,1
 4008d34:	1000091e 	bne	r2,zero,4008d5c <OSQPendAbort+0xe4>
 4008d38:	00000e06 	br	4008d74 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4008d3c:	e13ffc17 	ldw	r4,-16(fp)
 4008d40:	000b883a 	mov	r5,zero
 4008d44:	01800104 	movi	r6,4
 4008d48:	01c00084 	movi	r7,2
 4008d4c:	4004d140 	call	4004d14 <OS_EventTaskRdy>
                     nbr_tasks++;
 4008d50:	e0bffb03 	ldbu	r2,-20(fp)
 4008d54:	10800044 	addi	r2,r2,1
 4008d58:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4008d5c:	e0bffc17 	ldw	r2,-16(fp)
 4008d60:	10800283 	ldbu	r2,10(r2)
 4008d64:	10803fcc 	andi	r2,r2,255
 4008d68:	1004c03a 	cmpne	r2,r2,zero
 4008d6c:	103ff31e 	bne	r2,zero,4008d3c <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4008d70:	00000806 	br	4008d94 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4008d74:	e13ffc17 	ldw	r4,-16(fp)
 4008d78:	000b883a 	mov	r5,zero
 4008d7c:	01800104 	movi	r6,4
 4008d80:	01c00084 	movi	r7,2
 4008d84:	4004d140 	call	4004d14 <OS_EventTaskRdy>
                 nbr_tasks++;
 4008d88:	e0bffb03 	ldbu	r2,-20(fp)
 4008d8c:	10800044 	addi	r2,r2,1
 4008d90:	e0bffb05 	stb	r2,-20(fp)
 4008d94:	e0bffa17 	ldw	r2,-24(fp)
 4008d98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008d9c:	e0bff817 	ldw	r2,-32(fp)
 4008da0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 4008da4:	40057540 	call	4005754 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4008da8:	e0fffe17 	ldw	r3,-8(fp)
 4008dac:	00800384 	movi	r2,14
 4008db0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 4008db4:	e0bffb03 	ldbu	r2,-20(fp)
 4008db8:	e0bfff15 	stw	r2,-4(fp)
 4008dbc:	00000706 	br	4008ddc <OSQPendAbort+0x164>
 4008dc0:	e0bffa17 	ldw	r2,-24(fp)
 4008dc4:	e0bff715 	stw	r2,-36(fp)
 4008dc8:	e0bff717 	ldw	r2,-36(fp)
 4008dcc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4008dd0:	e0bffe17 	ldw	r2,-8(fp)
 4008dd4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 4008dd8:	e03fff15 	stw	zero,-4(fp)
 4008ddc:	e0bfff17 	ldw	r2,-4(fp)
}
 4008de0:	e037883a 	mov	sp,fp
 4008de4:	dfc00117 	ldw	ra,4(sp)
 4008de8:	df000017 	ldw	fp,0(sp)
 4008dec:	dec00204 	addi	sp,sp,8
 4008df0:	f800283a 	ret

04008df4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 4008df4:	defff504 	addi	sp,sp,-44
 4008df8:	dfc00a15 	stw	ra,40(sp)
 4008dfc:	df000915 	stw	fp,36(sp)
 4008e00:	df000904 	addi	fp,sp,36
 4008e04:	e13ffd15 	stw	r4,-12(fp)
 4008e08:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4008e0c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4008e10:	e0bffd17 	ldw	r2,-12(fp)
 4008e14:	1004c03a 	cmpne	r2,r2,zero
 4008e18:	1000031e 	bne	r2,zero,4008e28 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 4008e1c:	00800104 	movi	r2,4
 4008e20:	e0bfff15 	stw	r2,-4(fp)
 4008e24:	00004d06 	br	4008f5c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4008e28:	e0bffd17 	ldw	r2,-12(fp)
 4008e2c:	10800003 	ldbu	r2,0(r2)
 4008e30:	10803fcc 	andi	r2,r2,255
 4008e34:	108000a0 	cmpeqi	r2,r2,2
 4008e38:	1000031e 	bne	r2,zero,4008e48 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 4008e3c:	00800044 	movi	r2,1
 4008e40:	e0bfff15 	stw	r2,-4(fp)
 4008e44:	00004506 	br	4008f5c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008e48:	0005303a 	rdctl	r2,status
 4008e4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008e50:	e0fffa17 	ldw	r3,-24(fp)
 4008e54:	00bfff84 	movi	r2,-2
 4008e58:	1884703a 	and	r2,r3,r2
 4008e5c:	1001703a 	wrctl	status,r2
  
  return context;
 4008e60:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4008e64:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 4008e68:	e0bffd17 	ldw	r2,-12(fp)
 4008e6c:	10800283 	ldbu	r2,10(r2)
 4008e70:	10803fcc 	andi	r2,r2,255
 4008e74:	1005003a 	cmpeq	r2,r2,zero
 4008e78:	10000c1e 	bne	r2,zero,4008eac <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4008e7c:	e13ffd17 	ldw	r4,-12(fp)
 4008e80:	e17ffe17 	ldw	r5,-8(fp)
 4008e84:	01800104 	movi	r6,4
 4008e88:	000f883a 	mov	r7,zero
 4008e8c:	4004d140 	call	4004d14 <OS_EventTaskRdy>
 4008e90:	e0bffb17 	ldw	r2,-20(fp)
 4008e94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008e98:	e0bff917 	ldw	r2,-28(fp)
 4008e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 4008ea0:	40057540 	call	4005754 <OS_Sched>
        return (OS_ERR_NONE);
 4008ea4:	e03fff15 	stw	zero,-4(fp)
 4008ea8:	00002c06 	br	4008f5c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 4008eac:	e0bffd17 	ldw	r2,-12(fp)
 4008eb0:	10800117 	ldw	r2,4(r2)
 4008eb4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 4008eb8:	e0bffc17 	ldw	r2,-16(fp)
 4008ebc:	10c0058b 	ldhu	r3,22(r2)
 4008ec0:	e0bffc17 	ldw	r2,-16(fp)
 4008ec4:	1080050b 	ldhu	r2,20(r2)
 4008ec8:	18ffffcc 	andi	r3,r3,65535
 4008ecc:	10bfffcc 	andi	r2,r2,65535
 4008ed0:	18800736 	bltu	r3,r2,4008ef0 <OSQPost+0xfc>
 4008ed4:	e0bffb17 	ldw	r2,-20(fp)
 4008ed8:	e0bff815 	stw	r2,-32(fp)
 4008edc:	e0bff817 	ldw	r2,-32(fp)
 4008ee0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4008ee4:	00800784 	movi	r2,30
 4008ee8:	e0bfff15 	stw	r2,-4(fp)
 4008eec:	00001b06 	br	4008f5c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 4008ef0:	e0bffc17 	ldw	r2,-16(fp)
 4008ef4:	10c00317 	ldw	r3,12(r2)
 4008ef8:	e0bffe17 	ldw	r2,-8(fp)
 4008efc:	18800015 	stw	r2,0(r3)
 4008f00:	18c00104 	addi	r3,r3,4
 4008f04:	e0bffc17 	ldw	r2,-16(fp)
 4008f08:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 4008f0c:	e0bffc17 	ldw	r2,-16(fp)
 4008f10:	1080058b 	ldhu	r2,22(r2)
 4008f14:	10800044 	addi	r2,r2,1
 4008f18:	1007883a 	mov	r3,r2
 4008f1c:	e0bffc17 	ldw	r2,-16(fp)
 4008f20:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 4008f24:	e0bffc17 	ldw	r2,-16(fp)
 4008f28:	10c00317 	ldw	r3,12(r2)
 4008f2c:	e0bffc17 	ldw	r2,-16(fp)
 4008f30:	10800217 	ldw	r2,8(r2)
 4008f34:	1880041e 	bne	r3,r2,4008f48 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 4008f38:	e0bffc17 	ldw	r2,-16(fp)
 4008f3c:	10c00117 	ldw	r3,4(r2)
 4008f40:	e0bffc17 	ldw	r2,-16(fp)
 4008f44:	10c00315 	stw	r3,12(r2)
 4008f48:	e0bffb17 	ldw	r2,-20(fp)
 4008f4c:	e0bff715 	stw	r2,-36(fp)
 4008f50:	e0bff717 	ldw	r2,-36(fp)
 4008f54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4008f58:	e03fff15 	stw	zero,-4(fp)
 4008f5c:	e0bfff17 	ldw	r2,-4(fp)
}
 4008f60:	e037883a 	mov	sp,fp
 4008f64:	dfc00117 	ldw	ra,4(sp)
 4008f68:	df000017 	ldw	fp,0(sp)
 4008f6c:	dec00204 	addi	sp,sp,8
 4008f70:	f800283a 	ret

04008f74 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 4008f74:	defff504 	addi	sp,sp,-44
 4008f78:	dfc00a15 	stw	ra,40(sp)
 4008f7c:	df000915 	stw	fp,36(sp)
 4008f80:	df000904 	addi	fp,sp,36
 4008f84:	e13ffd15 	stw	r4,-12(fp)
 4008f88:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4008f8c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4008f90:	e0bffd17 	ldw	r2,-12(fp)
 4008f94:	1004c03a 	cmpne	r2,r2,zero
 4008f98:	1000031e 	bne	r2,zero,4008fa8 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 4008f9c:	00800104 	movi	r2,4
 4008fa0:	e0bfff15 	stw	r2,-4(fp)
 4008fa4:	00004f06 	br	40090e4 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4008fa8:	e0bffd17 	ldw	r2,-12(fp)
 4008fac:	10800003 	ldbu	r2,0(r2)
 4008fb0:	10803fcc 	andi	r2,r2,255
 4008fb4:	108000a0 	cmpeqi	r2,r2,2
 4008fb8:	1000031e 	bne	r2,zero,4008fc8 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 4008fbc:	00800044 	movi	r2,1
 4008fc0:	e0bfff15 	stw	r2,-4(fp)
 4008fc4:	00004706 	br	40090e4 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008fc8:	0005303a 	rdctl	r2,status
 4008fcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008fd0:	e0fffa17 	ldw	r3,-24(fp)
 4008fd4:	00bfff84 	movi	r2,-2
 4008fd8:	1884703a 	and	r2,r3,r2
 4008fdc:	1001703a 	wrctl	status,r2
  
  return context;
 4008fe0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4008fe4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 4008fe8:	e0bffd17 	ldw	r2,-12(fp)
 4008fec:	10800283 	ldbu	r2,10(r2)
 4008ff0:	10803fcc 	andi	r2,r2,255
 4008ff4:	1005003a 	cmpeq	r2,r2,zero
 4008ff8:	10000c1e 	bne	r2,zero,400902c <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4008ffc:	e13ffd17 	ldw	r4,-12(fp)
 4009000:	e17ffe17 	ldw	r5,-8(fp)
 4009004:	01800104 	movi	r6,4
 4009008:	000f883a 	mov	r7,zero
 400900c:	4004d140 	call	4004d14 <OS_EventTaskRdy>
 4009010:	e0bffb17 	ldw	r2,-20(fp)
 4009014:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009018:	e0bff917 	ldw	r2,-28(fp)
 400901c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 4009020:	40057540 	call	4005754 <OS_Sched>
        return (OS_ERR_NONE);
 4009024:	e03fff15 	stw	zero,-4(fp)
 4009028:	00002e06 	br	40090e4 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 400902c:	e0bffd17 	ldw	r2,-12(fp)
 4009030:	10800117 	ldw	r2,4(r2)
 4009034:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4009038:	e0bffc17 	ldw	r2,-16(fp)
 400903c:	10c0058b 	ldhu	r3,22(r2)
 4009040:	e0bffc17 	ldw	r2,-16(fp)
 4009044:	1080050b 	ldhu	r2,20(r2)
 4009048:	18ffffcc 	andi	r3,r3,65535
 400904c:	10bfffcc 	andi	r2,r2,65535
 4009050:	18800736 	bltu	r3,r2,4009070 <OSQPostFront+0xfc>
 4009054:	e0bffb17 	ldw	r2,-20(fp)
 4009058:	e0bff815 	stw	r2,-32(fp)
 400905c:	e0bff817 	ldw	r2,-32(fp)
 4009060:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4009064:	00800784 	movi	r2,30
 4009068:	e0bfff15 	stw	r2,-4(fp)
 400906c:	00001d06 	br	40090e4 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 4009070:	e0bffc17 	ldw	r2,-16(fp)
 4009074:	10c00417 	ldw	r3,16(r2)
 4009078:	e0bffc17 	ldw	r2,-16(fp)
 400907c:	10800117 	ldw	r2,4(r2)
 4009080:	1880041e 	bne	r3,r2,4009094 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 4009084:	e0bffc17 	ldw	r2,-16(fp)
 4009088:	10c00217 	ldw	r3,8(r2)
 400908c:	e0bffc17 	ldw	r2,-16(fp)
 4009090:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 4009094:	e0bffc17 	ldw	r2,-16(fp)
 4009098:	10800417 	ldw	r2,16(r2)
 400909c:	10ffff04 	addi	r3,r2,-4
 40090a0:	e0bffc17 	ldw	r2,-16(fp)
 40090a4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 40090a8:	e0bffc17 	ldw	r2,-16(fp)
 40090ac:	10c00417 	ldw	r3,16(r2)
 40090b0:	e0bffe17 	ldw	r2,-8(fp)
 40090b4:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 40090b8:	e0bffc17 	ldw	r2,-16(fp)
 40090bc:	1080058b 	ldhu	r2,22(r2)
 40090c0:	10800044 	addi	r2,r2,1
 40090c4:	1007883a 	mov	r3,r2
 40090c8:	e0bffc17 	ldw	r2,-16(fp)
 40090cc:	10c0058d 	sth	r3,22(r2)
 40090d0:	e0bffb17 	ldw	r2,-20(fp)
 40090d4:	e0bff715 	stw	r2,-36(fp)
 40090d8:	e0bff717 	ldw	r2,-36(fp)
 40090dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40090e0:	e03fff15 	stw	zero,-4(fp)
 40090e4:	e0bfff17 	ldw	r2,-4(fp)
}
 40090e8:	e037883a 	mov	sp,fp
 40090ec:	dfc00117 	ldw	ra,4(sp)
 40090f0:	df000017 	ldw	fp,0(sp)
 40090f4:	dec00204 	addi	sp,sp,8
 40090f8:	f800283a 	ret

040090fc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 40090fc:	defff404 	addi	sp,sp,-48
 4009100:	dfc00b15 	stw	ra,44(sp)
 4009104:	df000a15 	stw	fp,40(sp)
 4009108:	df000a04 	addi	fp,sp,40
 400910c:	e13ffc15 	stw	r4,-16(fp)
 4009110:	e17ffd15 	stw	r5,-12(fp)
 4009114:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4009118:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 400911c:	e0bffc17 	ldw	r2,-16(fp)
 4009120:	1004c03a 	cmpne	r2,r2,zero
 4009124:	1000031e 	bne	r2,zero,4009134 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 4009128:	00800104 	movi	r2,4
 400912c:	e0bfff15 	stw	r2,-4(fp)
 4009130:	00007906 	br	4009318 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4009134:	e0bffc17 	ldw	r2,-16(fp)
 4009138:	10800003 	ldbu	r2,0(r2)
 400913c:	10803fcc 	andi	r2,r2,255
 4009140:	108000a0 	cmpeqi	r2,r2,2
 4009144:	1000031e 	bne	r2,zero,4009154 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 4009148:	00800044 	movi	r2,1
 400914c:	e0bfff15 	stw	r2,-4(fp)
 4009150:	00007106 	br	4009318 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009154:	0005303a 	rdctl	r2,status
 4009158:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400915c:	e0fff917 	ldw	r3,-28(fp)
 4009160:	00bfff84 	movi	r2,-2
 4009164:	1884703a 	and	r2,r3,r2
 4009168:	1001703a 	wrctl	status,r2
  
  return context;
 400916c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4009170:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 4009174:	e0bffc17 	ldw	r2,-16(fp)
 4009178:	10800283 	ldbu	r2,10(r2)
 400917c:	10803fcc 	andi	r2,r2,255
 4009180:	1005003a 	cmpeq	r2,r2,zero
 4009184:	1000211e 	bne	r2,zero,400920c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 4009188:	e0bffe03 	ldbu	r2,-8(fp)
 400918c:	1080004c 	andi	r2,r2,1
 4009190:	10803fcc 	andi	r2,r2,255
 4009194:	1005003a 	cmpeq	r2,r2,zero
 4009198:	10000c1e 	bne	r2,zero,40091cc <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 400919c:	00000506 	br	40091b4 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40091a0:	e13ffc17 	ldw	r4,-16(fp)
 40091a4:	e17ffd17 	ldw	r5,-12(fp)
 40091a8:	01800104 	movi	r6,4
 40091ac:	000f883a 	mov	r7,zero
 40091b0:	4004d140 	call	4004d14 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 40091b4:	e0bffc17 	ldw	r2,-16(fp)
 40091b8:	10800283 	ldbu	r2,10(r2)
 40091bc:	10803fcc 	andi	r2,r2,255
 40091c0:	1004c03a 	cmpne	r2,r2,zero
 40091c4:	103ff61e 	bne	r2,zero,40091a0 <OSQPostOpt+0xa4>
 40091c8:	00000506 	br	40091e0 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40091cc:	e13ffc17 	ldw	r4,-16(fp)
 40091d0:	e17ffd17 	ldw	r5,-12(fp)
 40091d4:	01800104 	movi	r6,4
 40091d8:	000f883a 	mov	r7,zero
 40091dc:	4004d140 	call	4004d14 <OS_EventTaskRdy>
 40091e0:	e0bffa17 	ldw	r2,-24(fp)
 40091e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40091e8:	e0bff817 	ldw	r2,-32(fp)
 40091ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 40091f0:	e0bffe03 	ldbu	r2,-8(fp)
 40091f4:	1080010c 	andi	r2,r2,4
 40091f8:	1004c03a 	cmpne	r2,r2,zero
 40091fc:	1000011e 	bne	r2,zero,4009204 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 4009200:	40057540 	call	4005754 <OS_Sched>
        }
        return (OS_ERR_NONE);
 4009204:	e03fff15 	stw	zero,-4(fp)
 4009208:	00004306 	br	4009318 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 400920c:	e0bffc17 	ldw	r2,-16(fp)
 4009210:	10800117 	ldw	r2,4(r2)
 4009214:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4009218:	e0bffb17 	ldw	r2,-20(fp)
 400921c:	10c0058b 	ldhu	r3,22(r2)
 4009220:	e0bffb17 	ldw	r2,-20(fp)
 4009224:	1080050b 	ldhu	r2,20(r2)
 4009228:	18ffffcc 	andi	r3,r3,65535
 400922c:	10bfffcc 	andi	r2,r2,65535
 4009230:	18800736 	bltu	r3,r2,4009250 <OSQPostOpt+0x154>
 4009234:	e0bffa17 	ldw	r2,-24(fp)
 4009238:	e0bff715 	stw	r2,-36(fp)
 400923c:	e0bff717 	ldw	r2,-36(fp)
 4009240:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4009244:	00800784 	movi	r2,30
 4009248:	e0bfff15 	stw	r2,-4(fp)
 400924c:	00003206 	br	4009318 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4009250:	e0bffe03 	ldbu	r2,-8(fp)
 4009254:	1080008c 	andi	r2,r2,2
 4009258:	1005003a 	cmpeq	r2,r2,zero
 400925c:	1000131e 	bne	r2,zero,40092ac <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 4009260:	e0bffb17 	ldw	r2,-20(fp)
 4009264:	10c00417 	ldw	r3,16(r2)
 4009268:	e0bffb17 	ldw	r2,-20(fp)
 400926c:	10800117 	ldw	r2,4(r2)
 4009270:	1880041e 	bne	r3,r2,4009284 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 4009274:	e0bffb17 	ldw	r2,-20(fp)
 4009278:	10c00217 	ldw	r3,8(r2)
 400927c:	e0bffb17 	ldw	r2,-20(fp)
 4009280:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 4009284:	e0bffb17 	ldw	r2,-20(fp)
 4009288:	10800417 	ldw	r2,16(r2)
 400928c:	10ffff04 	addi	r3,r2,-4
 4009290:	e0bffb17 	ldw	r2,-20(fp)
 4009294:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 4009298:	e0bffb17 	ldw	r2,-20(fp)
 400929c:	10c00417 	ldw	r3,16(r2)
 40092a0:	e0bffd17 	ldw	r2,-12(fp)
 40092a4:	18800015 	stw	r2,0(r3)
 40092a8:	00001006 	br	40092ec <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 40092ac:	e0bffb17 	ldw	r2,-20(fp)
 40092b0:	10c00317 	ldw	r3,12(r2)
 40092b4:	e0bffd17 	ldw	r2,-12(fp)
 40092b8:	18800015 	stw	r2,0(r3)
 40092bc:	18c00104 	addi	r3,r3,4
 40092c0:	e0bffb17 	ldw	r2,-20(fp)
 40092c4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 40092c8:	e0bffb17 	ldw	r2,-20(fp)
 40092cc:	10c00317 	ldw	r3,12(r2)
 40092d0:	e0bffb17 	ldw	r2,-20(fp)
 40092d4:	10800217 	ldw	r2,8(r2)
 40092d8:	1880041e 	bne	r3,r2,40092ec <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 40092dc:	e0bffb17 	ldw	r2,-20(fp)
 40092e0:	10c00117 	ldw	r3,4(r2)
 40092e4:	e0bffb17 	ldw	r2,-20(fp)
 40092e8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 40092ec:	e0bffb17 	ldw	r2,-20(fp)
 40092f0:	1080058b 	ldhu	r2,22(r2)
 40092f4:	10800044 	addi	r2,r2,1
 40092f8:	1007883a 	mov	r3,r2
 40092fc:	e0bffb17 	ldw	r2,-20(fp)
 4009300:	10c0058d 	sth	r3,22(r2)
 4009304:	e0bffa17 	ldw	r2,-24(fp)
 4009308:	e0bff615 	stw	r2,-40(fp)
 400930c:	e0bff617 	ldw	r2,-40(fp)
 4009310:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4009314:	e03fff15 	stw	zero,-4(fp)
 4009318:	e0bfff17 	ldw	r2,-4(fp)
}
 400931c:	e037883a 	mov	sp,fp
 4009320:	dfc00117 	ldw	ra,4(sp)
 4009324:	df000017 	ldw	fp,0(sp)
 4009328:	dec00204 	addi	sp,sp,8
 400932c:	f800283a 	ret

04009330 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 4009330:	defff504 	addi	sp,sp,-44
 4009334:	df000a15 	stw	fp,40(sp)
 4009338:	df000a04 	addi	fp,sp,40
 400933c:	e13ffd15 	stw	r4,-12(fp)
 4009340:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4009344:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4009348:	e0bffd17 	ldw	r2,-12(fp)
 400934c:	1004c03a 	cmpne	r2,r2,zero
 4009350:	1000031e 	bne	r2,zero,4009360 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 4009354:	00800104 	movi	r2,4
 4009358:	e0bfff15 	stw	r2,-4(fp)
 400935c:	00004f06 	br	400949c <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4009360:	e0bffe17 	ldw	r2,-8(fp)
 4009364:	1004c03a 	cmpne	r2,r2,zero
 4009368:	1000031e 	bne	r2,zero,4009378 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 400936c:	00800244 	movi	r2,9
 4009370:	e0bfff15 	stw	r2,-4(fp)
 4009374:	00004906 	br	400949c <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4009378:	e0bffd17 	ldw	r2,-12(fp)
 400937c:	10800003 	ldbu	r2,0(r2)
 4009380:	10803fcc 	andi	r2,r2,255
 4009384:	108000a0 	cmpeqi	r2,r2,2
 4009388:	1000031e 	bne	r2,zero,4009398 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 400938c:	00800044 	movi	r2,1
 4009390:	e0bfff15 	stw	r2,-4(fp)
 4009394:	00004106 	br	400949c <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009398:	0005303a 	rdctl	r2,status
 400939c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40093a0:	e0fff717 	ldw	r3,-36(fp)
 40093a4:	00bfff84 	movi	r2,-2
 40093a8:	1884703a 	and	r2,r3,r2
 40093ac:	1001703a 	wrctl	status,r2
  
  return context;
 40093b0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 40093b4:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 40093b8:	e0bffd17 	ldw	r2,-12(fp)
 40093bc:	10c00283 	ldbu	r3,10(r2)
 40093c0:	e0bffe17 	ldw	r2,-8(fp)
 40093c4:	10c00405 	stb	r3,16(r2)
    psrc                 = &pevent->OSEventTbl[0];
 40093c8:	e0bffd17 	ldw	r2,-12(fp)
 40093cc:	108002c4 	addi	r2,r2,11
 40093d0:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 40093d4:	e0bffe17 	ldw	r2,-8(fp)
 40093d8:	10800204 	addi	r2,r2,8
 40093dc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40093e0:	e03ffb05 	stb	zero,-20(fp)
 40093e4:	00000d06 	br	400941c <OSQQuery+0xec>
        *pdest++ = *psrc++;
 40093e8:	e0bffa17 	ldw	r2,-24(fp)
 40093ec:	10c00003 	ldbu	r3,0(r2)
 40093f0:	e0bff917 	ldw	r2,-28(fp)
 40093f4:	10c00005 	stb	r3,0(r2)
 40093f8:	e0bff917 	ldw	r2,-28(fp)
 40093fc:	10800044 	addi	r2,r2,1
 4009400:	e0bff915 	stw	r2,-28(fp)
 4009404:	e0bffa17 	ldw	r2,-24(fp)
 4009408:	10800044 	addi	r2,r2,1
 400940c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4009410:	e0bffb03 	ldbu	r2,-20(fp)
 4009414:	10800044 	addi	r2,r2,1
 4009418:	e0bffb05 	stb	r2,-20(fp)
 400941c:	e0bffb03 	ldbu	r2,-20(fp)
 4009420:	10800230 	cmpltui	r2,r2,8
 4009424:	103ff01e 	bne	r2,zero,40093e8 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4009428:	e0bffd17 	ldw	r2,-12(fp)
 400942c:	10800117 	ldw	r2,4(r2)
 4009430:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 4009434:	e0bffc17 	ldw	r2,-16(fp)
 4009438:	1080058b 	ldhu	r2,22(r2)
 400943c:	10bfffcc 	andi	r2,r2,65535
 4009440:	1005003a 	cmpeq	r2,r2,zero
 4009444:	1000061e 	bne	r2,zero,4009460 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4009448:	e0bffc17 	ldw	r2,-16(fp)
 400944c:	10800417 	ldw	r2,16(r2)
 4009450:	10c00017 	ldw	r3,0(r2)
 4009454:	e0bffe17 	ldw	r2,-8(fp)
 4009458:	10c00015 	stw	r3,0(r2)
 400945c:	00000206 	br	4009468 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 4009460:	e0bffe17 	ldw	r2,-8(fp)
 4009464:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4009468:	e0bffc17 	ldw	r2,-16(fp)
 400946c:	10c0058b 	ldhu	r3,22(r2)
 4009470:	e0bffe17 	ldw	r2,-8(fp)
 4009474:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4009478:	e0bffc17 	ldw	r2,-16(fp)
 400947c:	10c0050b 	ldhu	r3,20(r2)
 4009480:	e0bffe17 	ldw	r2,-8(fp)
 4009484:	10c0018d 	sth	r3,6(r2)
 4009488:	e0bff817 	ldw	r2,-32(fp)
 400948c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009490:	e0bff617 	ldw	r2,-40(fp)
 4009494:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4009498:	e03fff15 	stw	zero,-4(fp)
 400949c:	e0bfff17 	ldw	r2,-4(fp)
}
 40094a0:	e037883a 	mov	sp,fp
 40094a4:	df000017 	ldw	fp,0(sp)
 40094a8:	dec00104 	addi	sp,sp,4
 40094ac:	f800283a 	ret

040094b0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 40094b0:	defffb04 	addi	sp,sp,-20
 40094b4:	dfc00415 	stw	ra,16(sp)
 40094b8:	df000315 	stw	fp,12(sp)
 40094bc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 40094c0:	010100b4 	movhi	r4,1026
 40094c4:	21080f04 	addi	r4,r4,8252
 40094c8:	01407804 	movi	r5,480
 40094cc:	40056940 	call	4005694 <OS_MemClr>
    pq1 = &OSQTbl[0];
 40094d0:	008100b4 	movhi	r2,1026
 40094d4:	10880f04 	addi	r2,r2,8252
 40094d8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 40094dc:	008100b4 	movhi	r2,1026
 40094e0:	10881504 	addi	r2,r2,8276
 40094e4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 40094e8:	e03fff0d 	sth	zero,-4(fp)
 40094ec:	00000c06 	br	4009520 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 40094f0:	e0fffe17 	ldw	r3,-8(fp)
 40094f4:	e0bffd17 	ldw	r2,-12(fp)
 40094f8:	18800015 	stw	r2,0(r3)
        pq1++;
 40094fc:	e0bffe17 	ldw	r2,-8(fp)
 4009500:	10800604 	addi	r2,r2,24
 4009504:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 4009508:	e0bffd17 	ldw	r2,-12(fp)
 400950c:	10800604 	addi	r2,r2,24
 4009510:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4009514:	e0bfff0b 	ldhu	r2,-4(fp)
 4009518:	10800044 	addi	r2,r2,1
 400951c:	e0bfff0d 	sth	r2,-4(fp)
 4009520:	e0bfff0b 	ldhu	r2,-4(fp)
 4009524:	108004f0 	cmpltui	r2,r2,19
 4009528:	103ff11e 	bne	r2,zero,40094f0 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 400952c:	e0bffe17 	ldw	r2,-8(fp)
 4009530:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 4009534:	00c100b4 	movhi	r3,1026
 4009538:	18e1ff04 	addi	r3,r3,-30724
 400953c:	008100b4 	movhi	r2,1026
 4009540:	10880f04 	addi	r2,r2,8252
 4009544:	18800015 	stw	r2,0(r3)
#endif
}
 4009548:	e037883a 	mov	sp,fp
 400954c:	dfc00117 	ldw	ra,4(sp)
 4009550:	df000017 	ldw	fp,0(sp)
 4009554:	dec00204 	addi	sp,sp,8
 4009558:	f800283a 	ret

0400955c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 400955c:	defff904 	addi	sp,sp,-28
 4009560:	df000615 	stw	fp,24(sp)
 4009564:	df000604 	addi	fp,sp,24
 4009568:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400956c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4009570:	e0bffe17 	ldw	r2,-8(fp)
 4009574:	1004c03a 	cmpne	r2,r2,zero
 4009578:	1000021e 	bne	r2,zero,4009584 <OSSemAccept+0x28>
        return (0);
 400957c:	e03fff15 	stw	zero,-4(fp)
 4009580:	00002106 	br	4009608 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4009584:	e0bffe17 	ldw	r2,-8(fp)
 4009588:	10800003 	ldbu	r2,0(r2)
 400958c:	10803fcc 	andi	r2,r2,255
 4009590:	108000e0 	cmpeqi	r2,r2,3
 4009594:	1000021e 	bne	r2,zero,40095a0 <OSSemAccept+0x44>
        return (0);
 4009598:	e03fff15 	stw	zero,-4(fp)
 400959c:	00001a06 	br	4009608 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40095a0:	0005303a 	rdctl	r2,status
 40095a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40095a8:	e0fffb17 	ldw	r3,-20(fp)
 40095ac:	00bfff84 	movi	r2,-2
 40095b0:	1884703a 	and	r2,r3,r2
 40095b4:	1001703a 	wrctl	status,r2
  
  return context;
 40095b8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 40095bc:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 40095c0:	e0bffe17 	ldw	r2,-8(fp)
 40095c4:	1080020b 	ldhu	r2,8(r2)
 40095c8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 40095cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40095d0:	1005003a 	cmpeq	r2,r2,zero
 40095d4:	1000061e 	bne	r2,zero,40095f0 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 40095d8:	e0bffe17 	ldw	r2,-8(fp)
 40095dc:	1080020b 	ldhu	r2,8(r2)
 40095e0:	10bfffc4 	addi	r2,r2,-1
 40095e4:	1007883a 	mov	r3,r2
 40095e8:	e0bffe17 	ldw	r2,-8(fp)
 40095ec:	10c0020d 	sth	r3,8(r2)
 40095f0:	e0bffc17 	ldw	r2,-16(fp)
 40095f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40095f8:	e0bffa17 	ldw	r2,-24(fp)
 40095fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4009600:	e0bffd0b 	ldhu	r2,-12(fp)
 4009604:	e0bfff15 	stw	r2,-4(fp)
 4009608:	e0bfff17 	ldw	r2,-4(fp)
}
 400960c:	e037883a 	mov	sp,fp
 4009610:	df000017 	ldw	fp,0(sp)
 4009614:	dec00104 	addi	sp,sp,4
 4009618:	f800283a 	ret

0400961c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 400961c:	defff804 	addi	sp,sp,-32
 4009620:	dfc00715 	stw	ra,28(sp)
 4009624:	df000615 	stw	fp,24(sp)
 4009628:	df000604 	addi	fp,sp,24
 400962c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4009630:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4009634:	008100b4 	movhi	r2,1026
 4009638:	10a20404 	addi	r2,r2,-30704
 400963c:	10800003 	ldbu	r2,0(r2)
 4009640:	10803fcc 	andi	r2,r2,255
 4009644:	1005003a 	cmpeq	r2,r2,zero
 4009648:	1000021e 	bne	r2,zero,4009654 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 400964c:	e03fff15 	stw	zero,-4(fp)
 4009650:	00003106 	br	4009718 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009654:	0005303a 	rdctl	r2,status
 4009658:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400965c:	e0fffb17 	ldw	r3,-20(fp)
 4009660:	00bfff84 	movi	r2,-2
 4009664:	1884703a 	and	r2,r3,r2
 4009668:	1001703a 	wrctl	status,r2
  
  return context;
 400966c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4009670:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 4009674:	008100b4 	movhi	r2,1026
 4009678:	10a20304 	addi	r2,r2,-30708
 400967c:	10800017 	ldw	r2,0(r2)
 4009680:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 4009684:	008100b4 	movhi	r2,1026
 4009688:	10a20304 	addi	r2,r2,-30708
 400968c:	10800017 	ldw	r2,0(r2)
 4009690:	1005003a 	cmpeq	r2,r2,zero
 4009694:	1000081e 	bne	r2,zero,40096b8 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4009698:	008100b4 	movhi	r2,1026
 400969c:	10a20304 	addi	r2,r2,-30708
 40096a0:	10800017 	ldw	r2,0(r2)
 40096a4:	10800117 	ldw	r2,4(r2)
 40096a8:	1007883a 	mov	r3,r2
 40096ac:	008100b4 	movhi	r2,1026
 40096b0:	10a20304 	addi	r2,r2,-30708
 40096b4:	10c00015 	stw	r3,0(r2)
 40096b8:	e0bffc17 	ldw	r2,-16(fp)
 40096bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40096c0:	e0bffa17 	ldw	r2,-24(fp)
 40096c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 40096c8:	e0bffd17 	ldw	r2,-12(fp)
 40096cc:	1005003a 	cmpeq	r2,r2,zero
 40096d0:	10000f1e 	bne	r2,zero,4009710 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 40096d4:	e0fffd17 	ldw	r3,-12(fp)
 40096d8:	008000c4 	movi	r2,3
 40096dc:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 40096e0:	e0fffd17 	ldw	r3,-12(fp)
 40096e4:	e0bffe0b 	ldhu	r2,-8(fp)
 40096e8:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 40096ec:	e0bffd17 	ldw	r2,-12(fp)
 40096f0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 40096f4:	e0fffd17 	ldw	r3,-12(fp)
 40096f8:	00800fc4 	movi	r2,63
 40096fc:	188004c5 	stb	r2,19(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4009700:	e0bffd17 	ldw	r2,-12(fp)
 4009704:	10000505 	stb	zero,20(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 4009708:	e13ffd17 	ldw	r4,-12(fp)
 400970c:	40052c80 	call	40052c8 <OS_EventWaitListInit>
    }
    return (pevent);
 4009710:	e0bffd17 	ldw	r2,-12(fp)
 4009714:	e0bfff15 	stw	r2,-4(fp)
 4009718:	e0bfff17 	ldw	r2,-4(fp)
}
 400971c:	e037883a 	mov	sp,fp
 4009720:	dfc00117 	ldw	ra,4(sp)
 4009724:	df000017 	ldw	fp,0(sp)
 4009728:	dec00204 	addi	sp,sp,8
 400972c:	f800283a 	ret

04009730 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4009730:	defff104 	addi	sp,sp,-60
 4009734:	dfc00e15 	stw	ra,56(sp)
 4009738:	df000d15 	stw	fp,52(sp)
 400973c:	df000d04 	addi	fp,sp,52
 4009740:	e13ffb15 	stw	r4,-20(fp)
 4009744:	e1bffd15 	stw	r6,-12(fp)
 4009748:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400974c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4009750:	e0bffd17 	ldw	r2,-12(fp)
 4009754:	1004c03a 	cmpne	r2,r2,zero
 4009758:	1000031e 	bne	r2,zero,4009768 <OSSemDel+0x38>
        return (pevent);
 400975c:	e0bffb17 	ldw	r2,-20(fp)
 4009760:	e0bfff15 	stw	r2,-4(fp)
 4009764:	00009406 	br	40099b8 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4009768:	e0bffb17 	ldw	r2,-20(fp)
 400976c:	1004c03a 	cmpne	r2,r2,zero
 4009770:	1000061e 	bne	r2,zero,400978c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 4009774:	e0fffd17 	ldw	r3,-12(fp)
 4009778:	00800104 	movi	r2,4
 400977c:	18800005 	stb	r2,0(r3)
        return (pevent);
 4009780:	e0fffb17 	ldw	r3,-20(fp)
 4009784:	e0ffff15 	stw	r3,-4(fp)
 4009788:	00008b06 	br	40099b8 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 400978c:	e0bffb17 	ldw	r2,-20(fp)
 4009790:	10800003 	ldbu	r2,0(r2)
 4009794:	10803fcc 	andi	r2,r2,255
 4009798:	108000e0 	cmpeqi	r2,r2,3
 400979c:	1000061e 	bne	r2,zero,40097b8 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 40097a0:	e0fffd17 	ldw	r3,-12(fp)
 40097a4:	00800044 	movi	r2,1
 40097a8:	18800005 	stb	r2,0(r3)
        return (pevent);
 40097ac:	e0bffb17 	ldw	r2,-20(fp)
 40097b0:	e0bfff15 	stw	r2,-4(fp)
 40097b4:	00008006 	br	40099b8 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40097b8:	008100b4 	movhi	r2,1026
 40097bc:	10a20404 	addi	r2,r2,-30704
 40097c0:	10800003 	ldbu	r2,0(r2)
 40097c4:	10803fcc 	andi	r2,r2,255
 40097c8:	1005003a 	cmpeq	r2,r2,zero
 40097cc:	1000061e 	bne	r2,zero,40097e8 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 40097d0:	e0fffd17 	ldw	r3,-12(fp)
 40097d4:	008003c4 	movi	r2,15
 40097d8:	18800005 	stb	r2,0(r3)
        return (pevent);
 40097dc:	e0fffb17 	ldw	r3,-20(fp)
 40097e0:	e0ffff15 	stw	r3,-4(fp)
 40097e4:	00007406 	br	40099b8 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40097e8:	0005303a 	rdctl	r2,status
 40097ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40097f0:	e0fff717 	ldw	r3,-36(fp)
 40097f4:	00bfff84 	movi	r2,-2
 40097f8:	1884703a 	and	r2,r3,r2
 40097fc:	1001703a 	wrctl	status,r2
  
  return context;
 4009800:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 4009804:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 4009808:	e0bffb17 	ldw	r2,-20(fp)
 400980c:	10800283 	ldbu	r2,10(r2)
 4009810:	10803fcc 	andi	r2,r2,255
 4009814:	1005003a 	cmpeq	r2,r2,zero
 4009818:	1000031e 	bne	r2,zero,4009828 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 400981c:	00800044 	movi	r2,1
 4009820:	e0bffa05 	stb	r2,-24(fp)
 4009824:	00000106 	br	400982c <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4009828:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 400982c:	e0bffc03 	ldbu	r2,-16(fp)
 4009830:	e0bffe15 	stw	r2,-8(fp)
 4009834:	e0fffe17 	ldw	r3,-8(fp)
 4009838:	1805003a 	cmpeq	r2,r3,zero
 400983c:	1000041e 	bne	r2,zero,4009850 <OSSemDel+0x120>
 4009840:	e0fffe17 	ldw	r3,-8(fp)
 4009844:	18800060 	cmpeqi	r2,r3,1
 4009848:	10002d1e 	bne	r2,zero,4009900 <OSSemDel+0x1d0>
 400984c:	00004f06 	br	400998c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4009850:	e0bffa03 	ldbu	r2,-24(fp)
 4009854:	1004c03a 	cmpne	r2,r2,zero
 4009858:	10001a1e 	bne	r2,zero,40098c4 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 400985c:	e0fffb17 	ldw	r3,-20(fp)
 4009860:	00800fc4 	movi	r2,63
 4009864:	188004c5 	stb	r2,19(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4009868:	e0bffb17 	ldw	r2,-20(fp)
 400986c:	10000505 	stb	zero,20(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4009870:	e0bffb17 	ldw	r2,-20(fp)
 4009874:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4009878:	008100b4 	movhi	r2,1026
 400987c:	10a20304 	addi	r2,r2,-30708
 4009880:	10c00017 	ldw	r3,0(r2)
 4009884:	e0bffb17 	ldw	r2,-20(fp)
 4009888:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 400988c:	e0bffb17 	ldw	r2,-20(fp)
 4009890:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4009894:	00c100b4 	movhi	r3,1026
 4009898:	18e20304 	addi	r3,r3,-30708
 400989c:	e0bffb17 	ldw	r2,-20(fp)
 40098a0:	18800015 	stw	r2,0(r3)
 40098a4:	e0bff817 	ldw	r2,-32(fp)
 40098a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40098ac:	e0bff617 	ldw	r2,-40(fp)
 40098b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 40098b4:	e0bffd17 	ldw	r2,-12(fp)
 40098b8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 40098bc:	e03ff915 	stw	zero,-28(fp)
 40098c0:	00003b06 	br	40099b0 <OSSemDel+0x280>
 40098c4:	e0bff817 	ldw	r2,-32(fp)
 40098c8:	e0bff515 	stw	r2,-44(fp)
 40098cc:	e0bff517 	ldw	r2,-44(fp)
 40098d0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 40098d4:	e0fffd17 	ldw	r3,-12(fp)
 40098d8:	00801244 	movi	r2,73
 40098dc:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 40098e0:	e0bffb17 	ldw	r2,-20(fp)
 40098e4:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 40098e8:	00003106 	br	40099b0 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 40098ec:	e13ffb17 	ldw	r4,-20(fp)
 40098f0:	000b883a 	mov	r5,zero
 40098f4:	01800044 	movi	r6,1
 40098f8:	000f883a 	mov	r7,zero
 40098fc:	4004d140 	call	4004d14 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 4009900:	e0bffb17 	ldw	r2,-20(fp)
 4009904:	10800283 	ldbu	r2,10(r2)
 4009908:	10803fcc 	andi	r2,r2,255
 400990c:	1004c03a 	cmpne	r2,r2,zero
 4009910:	103ff61e 	bne	r2,zero,40098ec <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4009914:	e0fffb17 	ldw	r3,-20(fp)
 4009918:	00800fc4 	movi	r2,63
 400991c:	188004c5 	stb	r2,19(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4009920:	e0bffb17 	ldw	r2,-20(fp)
 4009924:	10000505 	stb	zero,20(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4009928:	e0bffb17 	ldw	r2,-20(fp)
 400992c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4009930:	008100b4 	movhi	r2,1026
 4009934:	10a20304 	addi	r2,r2,-30708
 4009938:	10c00017 	ldw	r3,0(r2)
 400993c:	e0bffb17 	ldw	r2,-20(fp)
 4009940:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4009944:	e0bffb17 	ldw	r2,-20(fp)
 4009948:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 400994c:	00c100b4 	movhi	r3,1026
 4009950:	18e20304 	addi	r3,r3,-30708
 4009954:	e0bffb17 	ldw	r2,-20(fp)
 4009958:	18800015 	stw	r2,0(r3)
 400995c:	e0bff817 	ldw	r2,-32(fp)
 4009960:	e0bff415 	stw	r2,-48(fp)
 4009964:	e0bff417 	ldw	r2,-48(fp)
 4009968:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 400996c:	e0bffa03 	ldbu	r2,-24(fp)
 4009970:	10800058 	cmpnei	r2,r2,1
 4009974:	1000011e 	bne	r2,zero,400997c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4009978:	40057540 	call	4005754 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 400997c:	e0bffd17 	ldw	r2,-12(fp)
 4009980:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 4009984:	e03ff915 	stw	zero,-28(fp)
             break;
 4009988:	00000906 	br	40099b0 <OSSemDel+0x280>
 400998c:	e0bff817 	ldw	r2,-32(fp)
 4009990:	e0bff315 	stw	r2,-52(fp)
 4009994:	e0bff317 	ldw	r2,-52(fp)
 4009998:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 400999c:	e0fffd17 	ldw	r3,-12(fp)
 40099a0:	008001c4 	movi	r2,7
 40099a4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 40099a8:	e0bffb17 	ldw	r2,-20(fp)
 40099ac:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 40099b0:	e0bff917 	ldw	r2,-28(fp)
 40099b4:	e0bfff15 	stw	r2,-4(fp)
 40099b8:	e0bfff17 	ldw	r2,-4(fp)
}
 40099bc:	e037883a 	mov	sp,fp
 40099c0:	dfc00117 	ldw	ra,4(sp)
 40099c4:	df000017 	ldw	fp,0(sp)
 40099c8:	dec00204 	addi	sp,sp,8
 40099cc:	f800283a 	ret

040099d0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 40099d0:	defff404 	addi	sp,sp,-48
 40099d4:	dfc00b15 	stw	ra,44(sp)
 40099d8:	df000a15 	stw	fp,40(sp)
 40099dc:	df000a04 	addi	fp,sp,40
 40099e0:	e13ffc15 	stw	r4,-16(fp)
 40099e4:	e1bffe15 	stw	r6,-8(fp)
 40099e8:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40099ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40099f0:	e0bffe17 	ldw	r2,-8(fp)
 40099f4:	1005003a 	cmpeq	r2,r2,zero
 40099f8:	10008f1e 	bne	r2,zero,4009c38 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40099fc:	e0bffc17 	ldw	r2,-16(fp)
 4009a00:	1004c03a 	cmpne	r2,r2,zero
 4009a04:	1000041e 	bne	r2,zero,4009a18 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 4009a08:	e0fffe17 	ldw	r3,-8(fp)
 4009a0c:	00800104 	movi	r2,4
 4009a10:	18800005 	stb	r2,0(r3)
        return;
 4009a14:	00008806 	br	4009c38 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4009a18:	e0bffc17 	ldw	r2,-16(fp)
 4009a1c:	10800003 	ldbu	r2,0(r2)
 4009a20:	10803fcc 	andi	r2,r2,255
 4009a24:	108000e0 	cmpeqi	r2,r2,3
 4009a28:	1000041e 	bne	r2,zero,4009a3c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4009a2c:	e0fffe17 	ldw	r3,-8(fp)
 4009a30:	00800044 	movi	r2,1
 4009a34:	18800005 	stb	r2,0(r3)
        return;
 4009a38:	00007f06 	br	4009c38 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 4009a3c:	008100b4 	movhi	r2,1026
 4009a40:	10a20404 	addi	r2,r2,-30704
 4009a44:	10800003 	ldbu	r2,0(r2)
 4009a48:	10803fcc 	andi	r2,r2,255
 4009a4c:	1005003a 	cmpeq	r2,r2,zero
 4009a50:	1000041e 	bne	r2,zero,4009a64 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 4009a54:	e0fffe17 	ldw	r3,-8(fp)
 4009a58:	00800084 	movi	r2,2
 4009a5c:	18800005 	stb	r2,0(r3)
        return;
 4009a60:	00007506 	br	4009c38 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 4009a64:	008100b4 	movhi	r2,1026
 4009a68:	10a1f404 	addi	r2,r2,-30768
 4009a6c:	10800003 	ldbu	r2,0(r2)
 4009a70:	10803fcc 	andi	r2,r2,255
 4009a74:	1005003a 	cmpeq	r2,r2,zero
 4009a78:	1000041e 	bne	r2,zero,4009a8c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 4009a7c:	e0fffe17 	ldw	r3,-8(fp)
 4009a80:	00800344 	movi	r2,13
 4009a84:	18800005 	stb	r2,0(r3)
        return;
 4009a88:	00006b06 	br	4009c38 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009a8c:	0005303a 	rdctl	r2,status
 4009a90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009a94:	e0fffa17 	ldw	r3,-24(fp)
 4009a98:	00bfff84 	movi	r2,-2
 4009a9c:	1884703a 	and	r2,r3,r2
 4009aa0:	1001703a 	wrctl	status,r2
  
  return context;
 4009aa4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4009aa8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 4009aac:	e0bffc17 	ldw	r2,-16(fp)
 4009ab0:	1080020b 	ldhu	r2,8(r2)
 4009ab4:	10bfffcc 	andi	r2,r2,65535
 4009ab8:	1005003a 	cmpeq	r2,r2,zero
 4009abc:	10000d1e 	bne	r2,zero,4009af4 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 4009ac0:	e0bffc17 	ldw	r2,-16(fp)
 4009ac4:	1080020b 	ldhu	r2,8(r2)
 4009ac8:	10bfffc4 	addi	r2,r2,-1
 4009acc:	1007883a 	mov	r3,r2
 4009ad0:	e0bffc17 	ldw	r2,-16(fp)
 4009ad4:	10c0020d 	sth	r3,8(r2)
 4009ad8:	e0bffb17 	ldw	r2,-20(fp)
 4009adc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009ae0:	e0bff917 	ldw	r2,-28(fp)
 4009ae4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4009ae8:	e0bffe17 	ldw	r2,-8(fp)
 4009aec:	10000005 	stb	zero,0(r2)
        return;
 4009af0:	00005106 	br	4009c38 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 4009af4:	008100b4 	movhi	r2,1026
 4009af8:	10a20504 	addi	r2,r2,-30700
 4009afc:	10c00017 	ldw	r3,0(r2)
 4009b00:	008100b4 	movhi	r2,1026
 4009b04:	10a20504 	addi	r2,r2,-30700
 4009b08:	10800017 	ldw	r2,0(r2)
 4009b0c:	10800c03 	ldbu	r2,48(r2)
 4009b10:	10800054 	ori	r2,r2,1
 4009b14:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4009b18:	008100b4 	movhi	r2,1026
 4009b1c:	10a20504 	addi	r2,r2,-30700
 4009b20:	10800017 	ldw	r2,0(r2)
 4009b24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 4009b28:	008100b4 	movhi	r2,1026
 4009b2c:	10a20504 	addi	r2,r2,-30700
 4009b30:	10c00017 	ldw	r3,0(r2)
 4009b34:	e0bffd0b 	ldhu	r2,-12(fp)
 4009b38:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 4009b3c:	e13ffc17 	ldw	r4,-16(fp)
 4009b40:	4004ea80 	call	4004ea8 <OS_EventTaskWait>
 4009b44:	e0bffb17 	ldw	r2,-20(fp)
 4009b48:	e0bff815 	stw	r2,-32(fp)
 4009b4c:	e0bff817 	ldw	r2,-32(fp)
 4009b50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 4009b54:	40057540 	call	4005754 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009b58:	0005303a 	rdctl	r2,status
 4009b5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009b60:	e0fff717 	ldw	r3,-36(fp)
 4009b64:	00bfff84 	movi	r2,-2
 4009b68:	1884703a 	and	r2,r3,r2
 4009b6c:	1001703a 	wrctl	status,r2
  
  return context;
 4009b70:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 4009b74:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4009b78:	008100b4 	movhi	r2,1026
 4009b7c:	10a20504 	addi	r2,r2,-30700
 4009b80:	10800017 	ldw	r2,0(r2)
 4009b84:	10800c43 	ldbu	r2,49(r2)
 4009b88:	10803fcc 	andi	r2,r2,255
 4009b8c:	e0bfff15 	stw	r2,-4(fp)
 4009b90:	e0ffff17 	ldw	r3,-4(fp)
 4009b94:	1805003a 	cmpeq	r2,r3,zero
 4009b98:	1000041e 	bne	r2,zero,4009bac <OSSemPend+0x1dc>
 4009b9c:	e0ffff17 	ldw	r3,-4(fp)
 4009ba0:	188000a0 	cmpeqi	r2,r3,2
 4009ba4:	1000041e 	bne	r2,zero,4009bb8 <OSSemPend+0x1e8>
 4009ba8:	00000706 	br	4009bc8 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 4009bac:	e0bffe17 	ldw	r2,-8(fp)
 4009bb0:	10000005 	stb	zero,0(r2)
             break;
 4009bb4:	00000c06 	br	4009be8 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4009bb8:	e0fffe17 	ldw	r3,-8(fp)
 4009bbc:	00800384 	movi	r2,14
 4009bc0:	18800005 	stb	r2,0(r3)
             break;
 4009bc4:	00000806 	br	4009be8 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 4009bc8:	008100b4 	movhi	r2,1026
 4009bcc:	10a20504 	addi	r2,r2,-30700
 4009bd0:	11000017 	ldw	r4,0(r2)
 4009bd4:	e17ffc17 	ldw	r5,-16(fp)
 4009bd8:	400510c0 	call	400510c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4009bdc:	e0fffe17 	ldw	r3,-8(fp)
 4009be0:	00800284 	movi	r2,10
 4009be4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4009be8:	008100b4 	movhi	r2,1026
 4009bec:	10a20504 	addi	r2,r2,-30700
 4009bf0:	10800017 	ldw	r2,0(r2)
 4009bf4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4009bf8:	008100b4 	movhi	r2,1026
 4009bfc:	10a20504 	addi	r2,r2,-30700
 4009c00:	10800017 	ldw	r2,0(r2)
 4009c04:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4009c08:	008100b4 	movhi	r2,1026
 4009c0c:	10a20504 	addi	r2,r2,-30700
 4009c10:	10800017 	ldw	r2,0(r2)
 4009c14:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4009c18:	008100b4 	movhi	r2,1026
 4009c1c:	10a20504 	addi	r2,r2,-30700
 4009c20:	10800017 	ldw	r2,0(r2)
 4009c24:	10000815 	stw	zero,32(r2)
 4009c28:	e0bffb17 	ldw	r2,-20(fp)
 4009c2c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009c30:	e0bff617 	ldw	r2,-40(fp)
 4009c34:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 4009c38:	e037883a 	mov	sp,fp
 4009c3c:	dfc00117 	ldw	ra,4(sp)
 4009c40:	df000017 	ldw	fp,0(sp)
 4009c44:	dec00204 	addi	sp,sp,8
 4009c48:	f800283a 	ret

04009c4c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4009c4c:	defff504 	addi	sp,sp,-44
 4009c50:	dfc00a15 	stw	ra,40(sp)
 4009c54:	df000915 	stw	fp,36(sp)
 4009c58:	df000904 	addi	fp,sp,36
 4009c5c:	e13ffc15 	stw	r4,-16(fp)
 4009c60:	e1bffe15 	stw	r6,-8(fp)
 4009c64:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4009c68:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4009c6c:	e0bffe17 	ldw	r2,-8(fp)
 4009c70:	1004c03a 	cmpne	r2,r2,zero
 4009c74:	1000021e 	bne	r2,zero,4009c80 <OSSemPendAbort+0x34>
        return (0);
 4009c78:	e03fff15 	stw	zero,-4(fp)
 4009c7c:	00004c06 	br	4009db0 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4009c80:	e0bffc17 	ldw	r2,-16(fp)
 4009c84:	1004c03a 	cmpne	r2,r2,zero
 4009c88:	1000051e 	bne	r2,zero,4009ca0 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 4009c8c:	e0fffe17 	ldw	r3,-8(fp)
 4009c90:	00800104 	movi	r2,4
 4009c94:	18800005 	stb	r2,0(r3)
        return (0);
 4009c98:	e03fff15 	stw	zero,-4(fp)
 4009c9c:	00004406 	br	4009db0 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4009ca0:	e0bffc17 	ldw	r2,-16(fp)
 4009ca4:	10800003 	ldbu	r2,0(r2)
 4009ca8:	10803fcc 	andi	r2,r2,255
 4009cac:	108000e0 	cmpeqi	r2,r2,3
 4009cb0:	1000051e 	bne	r2,zero,4009cc8 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 4009cb4:	e0fffe17 	ldw	r3,-8(fp)
 4009cb8:	00800044 	movi	r2,1
 4009cbc:	18800005 	stb	r2,0(r3)
        return (0);
 4009cc0:	e03fff15 	stw	zero,-4(fp)
 4009cc4:	00003a06 	br	4009db0 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009cc8:	0005303a 	rdctl	r2,status
 4009ccc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009cd0:	e0fff917 	ldw	r3,-28(fp)
 4009cd4:	00bfff84 	movi	r2,-2
 4009cd8:	1884703a 	and	r2,r3,r2
 4009cdc:	1001703a 	wrctl	status,r2
  
  return context;
 4009ce0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4009ce4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 4009ce8:	e0bffc17 	ldw	r2,-16(fp)
 4009cec:	10800283 	ldbu	r2,10(r2)
 4009cf0:	10803fcc 	andi	r2,r2,255
 4009cf4:	1005003a 	cmpeq	r2,r2,zero
 4009cf8:	1000261e 	bne	r2,zero,4009d94 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 4009cfc:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 4009d00:	e0bffd03 	ldbu	r2,-12(fp)
 4009d04:	10800060 	cmpeqi	r2,r2,1
 4009d08:	1000091e 	bne	r2,zero,4009d30 <OSSemPendAbort+0xe4>
 4009d0c:	00000e06 	br	4009d48 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4009d10:	e13ffc17 	ldw	r4,-16(fp)
 4009d14:	000b883a 	mov	r5,zero
 4009d18:	01800044 	movi	r6,1
 4009d1c:	01c00084 	movi	r7,2
 4009d20:	4004d140 	call	4004d14 <OS_EventTaskRdy>
                     nbr_tasks++;
 4009d24:	e0bffb03 	ldbu	r2,-20(fp)
 4009d28:	10800044 	addi	r2,r2,1
 4009d2c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 4009d30:	e0bffc17 	ldw	r2,-16(fp)
 4009d34:	10800283 	ldbu	r2,10(r2)
 4009d38:	10803fcc 	andi	r2,r2,255
 4009d3c:	1004c03a 	cmpne	r2,r2,zero
 4009d40:	103ff31e 	bne	r2,zero,4009d10 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4009d44:	00000806 	br	4009d68 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4009d48:	e13ffc17 	ldw	r4,-16(fp)
 4009d4c:	000b883a 	mov	r5,zero
 4009d50:	01800044 	movi	r6,1
 4009d54:	01c00084 	movi	r7,2
 4009d58:	4004d140 	call	4004d14 <OS_EventTaskRdy>
                 nbr_tasks++;
 4009d5c:	e0bffb03 	ldbu	r2,-20(fp)
 4009d60:	10800044 	addi	r2,r2,1
 4009d64:	e0bffb05 	stb	r2,-20(fp)
 4009d68:	e0bffa17 	ldw	r2,-24(fp)
 4009d6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009d70:	e0bff817 	ldw	r2,-32(fp)
 4009d74:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4009d78:	40057540 	call	4005754 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4009d7c:	e0fffe17 	ldw	r3,-8(fp)
 4009d80:	00800384 	movi	r2,14
 4009d84:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 4009d88:	e0bffb03 	ldbu	r2,-20(fp)
 4009d8c:	e0bfff15 	stw	r2,-4(fp)
 4009d90:	00000706 	br	4009db0 <OSSemPendAbort+0x164>
 4009d94:	e0bffa17 	ldw	r2,-24(fp)
 4009d98:	e0bff715 	stw	r2,-36(fp)
 4009d9c:	e0bff717 	ldw	r2,-36(fp)
 4009da0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4009da4:	e0bffe17 	ldw	r2,-8(fp)
 4009da8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 4009dac:	e03fff15 	stw	zero,-4(fp)
 4009db0:	e0bfff17 	ldw	r2,-4(fp)
}
 4009db4:	e037883a 	mov	sp,fp
 4009db8:	dfc00117 	ldw	ra,4(sp)
 4009dbc:	df000017 	ldw	fp,0(sp)
 4009dc0:	dec00204 	addi	sp,sp,8
 4009dc4:	f800283a 	ret

04009dc8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 4009dc8:	defff704 	addi	sp,sp,-36
 4009dcc:	dfc00815 	stw	ra,32(sp)
 4009dd0:	df000715 	stw	fp,28(sp)
 4009dd4:	df000704 	addi	fp,sp,28
 4009dd8:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4009ddc:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4009de0:	e0bffe17 	ldw	r2,-8(fp)
 4009de4:	1004c03a 	cmpne	r2,r2,zero
 4009de8:	1000031e 	bne	r2,zero,4009df8 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 4009dec:	00800104 	movi	r2,4
 4009df0:	e0bfff15 	stw	r2,-4(fp)
 4009df4:	00003806 	br	4009ed8 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4009df8:	e0bffe17 	ldw	r2,-8(fp)
 4009dfc:	10800003 	ldbu	r2,0(r2)
 4009e00:	10803fcc 	andi	r2,r2,255
 4009e04:	108000e0 	cmpeqi	r2,r2,3
 4009e08:	1000031e 	bne	r2,zero,4009e18 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 4009e0c:	00800044 	movi	r2,1
 4009e10:	e0bfff15 	stw	r2,-4(fp)
 4009e14:	00003006 	br	4009ed8 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009e18:	0005303a 	rdctl	r2,status
 4009e1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009e20:	e0fffc17 	ldw	r3,-16(fp)
 4009e24:	00bfff84 	movi	r2,-2
 4009e28:	1884703a 	and	r2,r3,r2
 4009e2c:	1001703a 	wrctl	status,r2
  
  return context;
 4009e30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4009e34:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4009e38:	e0bffe17 	ldw	r2,-8(fp)
 4009e3c:	10800283 	ldbu	r2,10(r2)
 4009e40:	10803fcc 	andi	r2,r2,255
 4009e44:	1005003a 	cmpeq	r2,r2,zero
 4009e48:	10000c1e 	bne	r2,zero,4009e7c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4009e4c:	e13ffe17 	ldw	r4,-8(fp)
 4009e50:	000b883a 	mov	r5,zero
 4009e54:	01800044 	movi	r6,1
 4009e58:	000f883a 	mov	r7,zero
 4009e5c:	4004d140 	call	4004d14 <OS_EventTaskRdy>
 4009e60:	e0bffd17 	ldw	r2,-12(fp)
 4009e64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009e68:	e0bffb17 	ldw	r2,-20(fp)
 4009e6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4009e70:	40057540 	call	4005754 <OS_Sched>
        return (OS_ERR_NONE);
 4009e74:	e03fff15 	stw	zero,-4(fp)
 4009e78:	00001706 	br	4009ed8 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 4009e7c:	e0bffe17 	ldw	r2,-8(fp)
 4009e80:	1080020b 	ldhu	r2,8(r2)
 4009e84:	10ffffcc 	andi	r3,r2,65535
 4009e88:	00bfffd4 	movui	r2,65535
 4009e8c:	18800c26 	beq	r3,r2,4009ec0 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 4009e90:	e0bffe17 	ldw	r2,-8(fp)
 4009e94:	1080020b 	ldhu	r2,8(r2)
 4009e98:	10800044 	addi	r2,r2,1
 4009e9c:	1007883a 	mov	r3,r2
 4009ea0:	e0bffe17 	ldw	r2,-8(fp)
 4009ea4:	10c0020d 	sth	r3,8(r2)
 4009ea8:	e0bffd17 	ldw	r2,-12(fp)
 4009eac:	e0bffa15 	stw	r2,-24(fp)
 4009eb0:	e0bffa17 	ldw	r2,-24(fp)
 4009eb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4009eb8:	e03fff15 	stw	zero,-4(fp)
 4009ebc:	00000606 	br	4009ed8 <OSSemPost+0x110>
 4009ec0:	e0bffd17 	ldw	r2,-12(fp)
 4009ec4:	e0bff915 	stw	r2,-28(fp)
 4009ec8:	e0bff917 	ldw	r2,-28(fp)
 4009ecc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 4009ed0:	00800c84 	movi	r2,50
 4009ed4:	e0bfff15 	stw	r2,-4(fp)
 4009ed8:	e0bfff17 	ldw	r2,-4(fp)
}
 4009edc:	e037883a 	mov	sp,fp
 4009ee0:	dfc00117 	ldw	ra,4(sp)
 4009ee4:	df000017 	ldw	fp,0(sp)
 4009ee8:	dec00204 	addi	sp,sp,8
 4009eec:	f800283a 	ret

04009ef0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 4009ef0:	defff604 	addi	sp,sp,-40
 4009ef4:	df000915 	stw	fp,36(sp)
 4009ef8:	df000904 	addi	fp,sp,36
 4009efc:	e13ffd15 	stw	r4,-12(fp)
 4009f00:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4009f04:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4009f08:	e0bffd17 	ldw	r2,-12(fp)
 4009f0c:	1004c03a 	cmpne	r2,r2,zero
 4009f10:	1000031e 	bne	r2,zero,4009f20 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 4009f14:	00800104 	movi	r2,4
 4009f18:	e0bfff15 	stw	r2,-4(fp)
 4009f1c:	00003b06 	br	400a00c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 4009f20:	e0bffe17 	ldw	r2,-8(fp)
 4009f24:	1004c03a 	cmpne	r2,r2,zero
 4009f28:	1000031e 	bne	r2,zero,4009f38 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 4009f2c:	00800244 	movi	r2,9
 4009f30:	e0bfff15 	stw	r2,-4(fp)
 4009f34:	00003506 	br	400a00c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4009f38:	e0bffd17 	ldw	r2,-12(fp)
 4009f3c:	10800003 	ldbu	r2,0(r2)
 4009f40:	10803fcc 	andi	r2,r2,255
 4009f44:	108000e0 	cmpeqi	r2,r2,3
 4009f48:	1000031e 	bne	r2,zero,4009f58 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 4009f4c:	00800044 	movi	r2,1
 4009f50:	e0bfff15 	stw	r2,-4(fp)
 4009f54:	00002d06 	br	400a00c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009f58:	0005303a 	rdctl	r2,status
 4009f5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009f60:	e0fff817 	ldw	r3,-32(fp)
 4009f64:	00bfff84 	movi	r2,-2
 4009f68:	1884703a 	and	r2,r3,r2
 4009f6c:	1001703a 	wrctl	status,r2
  
  return context;
 4009f70:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 4009f74:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 4009f78:	e0bffd17 	ldw	r2,-12(fp)
 4009f7c:	10c00283 	ldbu	r3,10(r2)
 4009f80:	e0bffe17 	ldw	r2,-8(fp)
 4009f84:	10c00285 	stb	r3,10(r2)
    psrc                   = &pevent->OSEventTbl[0];
 4009f88:	e0bffd17 	ldw	r2,-12(fp)
 4009f8c:	108002c4 	addi	r2,r2,11
 4009f90:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 4009f94:	e0bffe17 	ldw	r2,-8(fp)
 4009f98:	10800084 	addi	r2,r2,2
 4009f9c:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4009fa0:	e03ffa05 	stb	zero,-24(fp)
 4009fa4:	00000d06 	br	4009fdc <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 4009fa8:	e0bffc17 	ldw	r2,-16(fp)
 4009fac:	10c00003 	ldbu	r3,0(r2)
 4009fb0:	e0bffb17 	ldw	r2,-20(fp)
 4009fb4:	10c00005 	stb	r3,0(r2)
 4009fb8:	e0bffb17 	ldw	r2,-20(fp)
 4009fbc:	10800044 	addi	r2,r2,1
 4009fc0:	e0bffb15 	stw	r2,-20(fp)
 4009fc4:	e0bffc17 	ldw	r2,-16(fp)
 4009fc8:	10800044 	addi	r2,r2,1
 4009fcc:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4009fd0:	e0bffa03 	ldbu	r2,-24(fp)
 4009fd4:	10800044 	addi	r2,r2,1
 4009fd8:	e0bffa05 	stb	r2,-24(fp)
 4009fdc:	e0bffa03 	ldbu	r2,-24(fp)
 4009fe0:	10800230 	cmpltui	r2,r2,8
 4009fe4:	103ff01e 	bne	r2,zero,4009fa8 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 4009fe8:	e0bffd17 	ldw	r2,-12(fp)
 4009fec:	10c0020b 	ldhu	r3,8(r2)
 4009ff0:	e0bffe17 	ldw	r2,-8(fp)
 4009ff4:	10c0000d 	sth	r3,0(r2)
 4009ff8:	e0bff917 	ldw	r2,-28(fp)
 4009ffc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a000:	e0bff717 	ldw	r2,-36(fp)
 400a004:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400a008:	e03fff15 	stw	zero,-4(fp)
 400a00c:	e0bfff17 	ldw	r2,-4(fp)
}
 400a010:	e037883a 	mov	sp,fp
 400a014:	df000017 	ldw	fp,0(sp)
 400a018:	dec00104 	addi	sp,sp,4
 400a01c:	f800283a 	ret

0400a020 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 400a020:	defff904 	addi	sp,sp,-28
 400a024:	df000615 	stw	fp,24(sp)
 400a028:	df000604 	addi	fp,sp,24
 400a02c:	e13ffd15 	stw	r4,-12(fp)
 400a030:	e1bfff15 	stw	r6,-4(fp)
 400a034:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400a038:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 400a03c:	e0bfff17 	ldw	r2,-4(fp)
 400a040:	1005003a 	cmpeq	r2,r2,zero
 400a044:	1000331e 	bne	r2,zero,400a114 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 400a048:	e0bffd17 	ldw	r2,-12(fp)
 400a04c:	1004c03a 	cmpne	r2,r2,zero
 400a050:	1000041e 	bne	r2,zero,400a064 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 400a054:	e0ffff17 	ldw	r3,-4(fp)
 400a058:	00800104 	movi	r2,4
 400a05c:	18800005 	stb	r2,0(r3)
        return;
 400a060:	00002c06 	br	400a114 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 400a064:	e0bffd17 	ldw	r2,-12(fp)
 400a068:	10800003 	ldbu	r2,0(r2)
 400a06c:	10803fcc 	andi	r2,r2,255
 400a070:	108000e0 	cmpeqi	r2,r2,3
 400a074:	1000041e 	bne	r2,zero,400a088 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 400a078:	e0ffff17 	ldw	r3,-4(fp)
 400a07c:	00800044 	movi	r2,1
 400a080:	18800005 	stb	r2,0(r3)
        return;
 400a084:	00002306 	br	400a114 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a088:	0005303a 	rdctl	r2,status
 400a08c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a090:	e0fffb17 	ldw	r3,-20(fp)
 400a094:	00bfff84 	movi	r2,-2
 400a098:	1884703a 	and	r2,r3,r2
 400a09c:	1001703a 	wrctl	status,r2
  
  return context;
 400a0a0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 400a0a4:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 400a0a8:	e0bfff17 	ldw	r2,-4(fp)
 400a0ac:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 400a0b0:	e0bffd17 	ldw	r2,-12(fp)
 400a0b4:	1080020b 	ldhu	r2,8(r2)
 400a0b8:	10bfffcc 	andi	r2,r2,65535
 400a0bc:	1005003a 	cmpeq	r2,r2,zero
 400a0c0:	1000041e 	bne	r2,zero,400a0d4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 400a0c4:	e0fffd17 	ldw	r3,-12(fp)
 400a0c8:	e0bffe0b 	ldhu	r2,-8(fp)
 400a0cc:	1880020d 	sth	r2,8(r3)
 400a0d0:	00000c06 	br	400a104 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 400a0d4:	e0bffd17 	ldw	r2,-12(fp)
 400a0d8:	10800283 	ldbu	r2,10(r2)
 400a0dc:	10803fcc 	andi	r2,r2,255
 400a0e0:	1004c03a 	cmpne	r2,r2,zero
 400a0e4:	1000041e 	bne	r2,zero,400a0f8 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 400a0e8:	e0fffd17 	ldw	r3,-12(fp)
 400a0ec:	e0bffe0b 	ldhu	r2,-8(fp)
 400a0f0:	1880020d 	sth	r2,8(r3)
 400a0f4:	00000306 	br	400a104 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 400a0f8:	e0ffff17 	ldw	r3,-4(fp)
 400a0fc:	00801244 	movi	r2,73
 400a100:	18800005 	stb	r2,0(r3)
 400a104:	e0bffc17 	ldw	r2,-16(fp)
 400a108:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a10c:	e0bffa17 	ldw	r2,-24(fp)
 400a110:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 400a114:	e037883a 	mov	sp,fp
 400a118:	df000017 	ldw	fp,0(sp)
 400a11c:	dec00104 	addi	sp,sp,4
 400a120:	f800283a 	ret

0400a124 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 400a124:	defff004 	addi	sp,sp,-64
 400a128:	dfc00f15 	stw	ra,60(sp)
 400a12c:	df000e15 	stw	fp,56(sp)
 400a130:	df000e04 	addi	fp,sp,56
 400a134:	e13ffd05 	stb	r4,-12(fp)
 400a138:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 400a13c:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 400a140:	e0bffd03 	ldbu	r2,-12(fp)
 400a144:	10800ff0 	cmpltui	r2,r2,63
 400a148:	1000061e 	bne	r2,zero,400a164 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 400a14c:	e0bffd03 	ldbu	r2,-12(fp)
 400a150:	10803fe0 	cmpeqi	r2,r2,255
 400a154:	1000031e 	bne	r2,zero,400a164 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 400a158:	00800a84 	movi	r2,42
 400a15c:	e0bfff15 	stw	r2,-4(fp)
 400a160:	00014706 	br	400a680 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 400a164:	e0bffe03 	ldbu	r2,-8(fp)
 400a168:	10800ff0 	cmpltui	r2,r2,63
 400a16c:	1000031e 	bne	r2,zero,400a17c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 400a170:	00800a84 	movi	r2,42
 400a174:	e0bfff15 	stw	r2,-4(fp)
 400a178:	00014106 	br	400a680 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a17c:	0005303a 	rdctl	r2,status
 400a180:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a184:	e0fff617 	ldw	r3,-40(fp)
 400a188:	00bfff84 	movi	r2,-2
 400a18c:	1884703a 	and	r2,r3,r2
 400a190:	1001703a 	wrctl	status,r2
  
  return context;
 400a194:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400a198:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 400a19c:	e0bffe03 	ldbu	r2,-8(fp)
 400a1a0:	00c100b4 	movhi	r3,1026
 400a1a4:	18ceef04 	addi	r3,r3,15292
 400a1a8:	1085883a 	add	r2,r2,r2
 400a1ac:	1085883a 	add	r2,r2,r2
 400a1b0:	10c5883a 	add	r2,r2,r3
 400a1b4:	10800017 	ldw	r2,0(r2)
 400a1b8:	1005003a 	cmpeq	r2,r2,zero
 400a1bc:	1000071e 	bne	r2,zero,400a1dc <OSTaskChangePrio+0xb8>
 400a1c0:	e0bff717 	ldw	r2,-36(fp)
 400a1c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a1c8:	e0bff517 	ldw	r2,-44(fp)
 400a1cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 400a1d0:	00800a04 	movi	r2,40
 400a1d4:	e0bfff15 	stw	r2,-4(fp)
 400a1d8:	00012906 	br	400a680 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 400a1dc:	e0bffd03 	ldbu	r2,-12(fp)
 400a1e0:	10803fd8 	cmpnei	r2,r2,255
 400a1e4:	1000051e 	bne	r2,zero,400a1fc <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 400a1e8:	008100b4 	movhi	r2,1026
 400a1ec:	10a20504 	addi	r2,r2,-30700
 400a1f0:	10800017 	ldw	r2,0(r2)
 400a1f4:	10800c83 	ldbu	r2,50(r2)
 400a1f8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 400a1fc:	e0bffd03 	ldbu	r2,-12(fp)
 400a200:	00c100b4 	movhi	r3,1026
 400a204:	18ceef04 	addi	r3,r3,15292
 400a208:	1085883a 	add	r2,r2,r2
 400a20c:	1085883a 	add	r2,r2,r2
 400a210:	10c5883a 	add	r2,r2,r3
 400a214:	10800017 	ldw	r2,0(r2)
 400a218:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 400a21c:	e0bffa17 	ldw	r2,-24(fp)
 400a220:	1004c03a 	cmpne	r2,r2,zero
 400a224:	1000071e 	bne	r2,zero,400a244 <OSTaskChangePrio+0x120>
 400a228:	e0bff717 	ldw	r2,-36(fp)
 400a22c:	e0bff415 	stw	r2,-48(fp)
 400a230:	e0bff417 	ldw	r2,-48(fp)
 400a234:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 400a238:	00800a44 	movi	r2,41
 400a23c:	e0bfff15 	stw	r2,-4(fp)
 400a240:	00010f06 	br	400a680 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 400a244:	e0bffa17 	ldw	r2,-24(fp)
 400a248:	10800058 	cmpnei	r2,r2,1
 400a24c:	1000071e 	bne	r2,zero,400a26c <OSTaskChangePrio+0x148>
 400a250:	e0bff717 	ldw	r2,-36(fp)
 400a254:	e0bff315 	stw	r2,-52(fp)
 400a258:	e0bff317 	ldw	r2,-52(fp)
 400a25c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 400a260:	008010c4 	movi	r2,67
 400a264:	e0bfff15 	stw	r2,-4(fp)
 400a268:	00010506 	br	400a680 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 400a26c:	e0bffe03 	ldbu	r2,-8(fp)
 400a270:	1004d0fa 	srli	r2,r2,3
 400a274:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 400a278:	e0bffe03 	ldbu	r2,-8(fp)
 400a27c:	108001cc 	andi	r2,r2,7
 400a280:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 400a284:	e0fff983 	ldbu	r3,-26(fp)
 400a288:	00800044 	movi	r2,1
 400a28c:	10c4983a 	sll	r2,r2,r3
 400a290:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 400a294:	e0fff943 	ldbu	r3,-27(fp)
 400a298:	00800044 	movi	r2,1
 400a29c:	10c4983a 	sll	r2,r2,r3
 400a2a0:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 400a2a4:	e0bffd03 	ldbu	r2,-12(fp)
 400a2a8:	00c100b4 	movhi	r3,1026
 400a2ac:	18ceef04 	addi	r3,r3,15292
 400a2b0:	1085883a 	add	r2,r2,r2
 400a2b4:	1085883a 	add	r2,r2,r2
 400a2b8:	10c5883a 	add	r2,r2,r3
 400a2bc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 400a2c0:	e0bffe03 	ldbu	r2,-8(fp)
 400a2c4:	00c100b4 	movhi	r3,1026
 400a2c8:	18ceef04 	addi	r3,r3,15292
 400a2cc:	1085883a 	add	r2,r2,r2
 400a2d0:	1085883a 	add	r2,r2,r2
 400a2d4:	10c7883a 	add	r3,r2,r3
 400a2d8:	e0bffa17 	ldw	r2,-24(fp)
 400a2dc:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 400a2e0:	e0bffa17 	ldw	r2,-24(fp)
 400a2e4:	10800d03 	ldbu	r2,52(r2)
 400a2e8:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 400a2ec:	e0bffa17 	ldw	r2,-24(fp)
 400a2f0:	10800d83 	ldbu	r2,54(r2)
 400a2f4:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 400a2f8:	e0bffa17 	ldw	r2,-24(fp)
 400a2fc:	10800d43 	ldbu	r2,53(r2)
 400a300:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 400a304:	e0fff903 	ldbu	r3,-28(fp)
 400a308:	008100b4 	movhi	r2,1026
 400a30c:	10a20044 	addi	r2,r2,-30719
 400a310:	10c5883a 	add	r2,r2,r3
 400a314:	10c00003 	ldbu	r3,0(r2)
 400a318:	e0bff803 	ldbu	r2,-32(fp)
 400a31c:	1884703a 	and	r2,r3,r2
 400a320:	10803fcc 	andi	r2,r2,255
 400a324:	1005003a 	cmpeq	r2,r2,zero
 400a328:	1000381e 	bne	r2,zero,400a40c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 400a32c:	e13ff903 	ldbu	r4,-28(fp)
 400a330:	e0fff903 	ldbu	r3,-28(fp)
 400a334:	008100b4 	movhi	r2,1026
 400a338:	10a20044 	addi	r2,r2,-30719
 400a33c:	10c5883a 	add	r2,r2,r3
 400a340:	10800003 	ldbu	r2,0(r2)
 400a344:	1007883a 	mov	r3,r2
 400a348:	e0bff803 	ldbu	r2,-32(fp)
 400a34c:	0084303a 	nor	r2,zero,r2
 400a350:	1884703a 	and	r2,r3,r2
 400a354:	1007883a 	mov	r3,r2
 400a358:	008100b4 	movhi	r2,1026
 400a35c:	10a20044 	addi	r2,r2,-30719
 400a360:	1105883a 	add	r2,r2,r4
 400a364:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 400a368:	e0fff903 	ldbu	r3,-28(fp)
 400a36c:	008100b4 	movhi	r2,1026
 400a370:	10a20044 	addi	r2,r2,-30719
 400a374:	10c5883a 	add	r2,r2,r3
 400a378:	10800003 	ldbu	r2,0(r2)
 400a37c:	10803fcc 	andi	r2,r2,255
 400a380:	1004c03a 	cmpne	r2,r2,zero
 400a384:	10000b1e 	bne	r2,zero,400a3b4 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 400a388:	e0bff843 	ldbu	r2,-31(fp)
 400a38c:	0084303a 	nor	r2,zero,r2
 400a390:	1007883a 	mov	r3,r2
 400a394:	008100b4 	movhi	r2,1026
 400a398:	10a20004 	addi	r2,r2,-30720
 400a39c:	10800003 	ldbu	r2,0(r2)
 400a3a0:	1884703a 	and	r2,r3,r2
 400a3a4:	1007883a 	mov	r3,r2
 400a3a8:	008100b4 	movhi	r2,1026
 400a3ac:	10a20004 	addi	r2,r2,-30720
 400a3b0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 400a3b4:	008100b4 	movhi	r2,1026
 400a3b8:	10a20004 	addi	r2,r2,-30720
 400a3bc:	10c00003 	ldbu	r3,0(r2)
 400a3c0:	e0bff8c3 	ldbu	r2,-29(fp)
 400a3c4:	1884b03a 	or	r2,r3,r2
 400a3c8:	1007883a 	mov	r3,r2
 400a3cc:	008100b4 	movhi	r2,1026
 400a3d0:	10a20004 	addi	r2,r2,-30720
 400a3d4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 400a3d8:	e13ff983 	ldbu	r4,-26(fp)
 400a3dc:	e0fff983 	ldbu	r3,-26(fp)
 400a3e0:	008100b4 	movhi	r2,1026
 400a3e4:	10a20044 	addi	r2,r2,-30719
 400a3e8:	10c5883a 	add	r2,r2,r3
 400a3ec:	10c00003 	ldbu	r3,0(r2)
 400a3f0:	e0bff883 	ldbu	r2,-30(fp)
 400a3f4:	1884b03a 	or	r2,r3,r2
 400a3f8:	1007883a 	mov	r3,r2
 400a3fc:	008100b4 	movhi	r2,1026
 400a400:	10a20044 	addi	r2,r2,-30719
 400a404:	1105883a 	add	r2,r2,r4
 400a408:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 400a40c:	e0bffa17 	ldw	r2,-24(fp)
 400a410:	10800717 	ldw	r2,28(r2)
 400a414:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 400a418:	e0bffc17 	ldw	r2,-16(fp)
 400a41c:	1005003a 	cmpeq	r2,r2,zero
 400a420:	1000341e 	bne	r2,zero,400a4f4 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 400a424:	e13ff903 	ldbu	r4,-28(fp)
 400a428:	e0fff903 	ldbu	r3,-28(fp)
 400a42c:	e0bffc17 	ldw	r2,-16(fp)
 400a430:	1885883a 	add	r2,r3,r2
 400a434:	10800204 	addi	r2,r2,8
 400a438:	108000c3 	ldbu	r2,3(r2)
 400a43c:	1007883a 	mov	r3,r2
 400a440:	e0bff803 	ldbu	r2,-32(fp)
 400a444:	0084303a 	nor	r2,zero,r2
 400a448:	1884703a 	and	r2,r3,r2
 400a44c:	1007883a 	mov	r3,r2
 400a450:	e0bffc17 	ldw	r2,-16(fp)
 400a454:	2085883a 	add	r2,r4,r2
 400a458:	10800204 	addi	r2,r2,8
 400a45c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 400a460:	e0fff903 	ldbu	r3,-28(fp)
 400a464:	e0bffc17 	ldw	r2,-16(fp)
 400a468:	1885883a 	add	r2,r3,r2
 400a46c:	10800204 	addi	r2,r2,8
 400a470:	108000c3 	ldbu	r2,3(r2)
 400a474:	10803fcc 	andi	r2,r2,255
 400a478:	1004c03a 	cmpne	r2,r2,zero
 400a47c:	1000091e 	bne	r2,zero,400a4a4 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 400a480:	e0bffc17 	ldw	r2,-16(fp)
 400a484:	10800283 	ldbu	r2,10(r2)
 400a488:	1007883a 	mov	r3,r2
 400a48c:	e0bff843 	ldbu	r2,-31(fp)
 400a490:	0084303a 	nor	r2,zero,r2
 400a494:	1884703a 	and	r2,r3,r2
 400a498:	1007883a 	mov	r3,r2
 400a49c:	e0bffc17 	ldw	r2,-16(fp)
 400a4a0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 400a4a4:	e0bffc17 	ldw	r2,-16(fp)
 400a4a8:	10c00283 	ldbu	r3,10(r2)
 400a4ac:	e0bff8c3 	ldbu	r2,-29(fp)
 400a4b0:	1884b03a 	or	r2,r3,r2
 400a4b4:	1007883a 	mov	r3,r2
 400a4b8:	e0bffc17 	ldw	r2,-16(fp)
 400a4bc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 400a4c0:	e13ff983 	ldbu	r4,-26(fp)
 400a4c4:	e0fff983 	ldbu	r3,-26(fp)
 400a4c8:	e0bffc17 	ldw	r2,-16(fp)
 400a4cc:	1885883a 	add	r2,r3,r2
 400a4d0:	10800204 	addi	r2,r2,8
 400a4d4:	10c000c3 	ldbu	r3,3(r2)
 400a4d8:	e0bff883 	ldbu	r2,-30(fp)
 400a4dc:	1884b03a 	or	r2,r3,r2
 400a4e0:	1007883a 	mov	r3,r2
 400a4e4:	e0bffc17 	ldw	r2,-16(fp)
 400a4e8:	2085883a 	add	r2,r4,r2
 400a4ec:	10800204 	addi	r2,r2,8
 400a4f0:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 400a4f4:	e0bffa17 	ldw	r2,-24(fp)
 400a4f8:	10800817 	ldw	r2,32(r2)
 400a4fc:	1005003a 	cmpeq	r2,r2,zero
 400a500:	1000441e 	bne	r2,zero,400a614 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 400a504:	e0bffa17 	ldw	r2,-24(fp)
 400a508:	10800817 	ldw	r2,32(r2)
 400a50c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 400a510:	e0bffb17 	ldw	r2,-20(fp)
 400a514:	10800017 	ldw	r2,0(r2)
 400a518:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 400a51c:	00003a06 	br	400a608 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 400a520:	e13ff903 	ldbu	r4,-28(fp)
 400a524:	e0fff903 	ldbu	r3,-28(fp)
 400a528:	e0bffc17 	ldw	r2,-16(fp)
 400a52c:	1885883a 	add	r2,r3,r2
 400a530:	10800204 	addi	r2,r2,8
 400a534:	108000c3 	ldbu	r2,3(r2)
 400a538:	1007883a 	mov	r3,r2
 400a53c:	e0bff803 	ldbu	r2,-32(fp)
 400a540:	0084303a 	nor	r2,zero,r2
 400a544:	1884703a 	and	r2,r3,r2
 400a548:	1007883a 	mov	r3,r2
 400a54c:	e0bffc17 	ldw	r2,-16(fp)
 400a550:	2085883a 	add	r2,r4,r2
 400a554:	10800204 	addi	r2,r2,8
 400a558:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 400a55c:	e0fff903 	ldbu	r3,-28(fp)
 400a560:	e0bffc17 	ldw	r2,-16(fp)
 400a564:	1885883a 	add	r2,r3,r2
 400a568:	10800204 	addi	r2,r2,8
 400a56c:	108000c3 	ldbu	r2,3(r2)
 400a570:	10803fcc 	andi	r2,r2,255
 400a574:	1004c03a 	cmpne	r2,r2,zero
 400a578:	1000091e 	bne	r2,zero,400a5a0 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 400a57c:	e0bffc17 	ldw	r2,-16(fp)
 400a580:	10800283 	ldbu	r2,10(r2)
 400a584:	1007883a 	mov	r3,r2
 400a588:	e0bff843 	ldbu	r2,-31(fp)
 400a58c:	0084303a 	nor	r2,zero,r2
 400a590:	1884703a 	and	r2,r3,r2
 400a594:	1007883a 	mov	r3,r2
 400a598:	e0bffc17 	ldw	r2,-16(fp)
 400a59c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 400a5a0:	e0bffc17 	ldw	r2,-16(fp)
 400a5a4:	10c00283 	ldbu	r3,10(r2)
 400a5a8:	e0bff8c3 	ldbu	r2,-29(fp)
 400a5ac:	1884b03a 	or	r2,r3,r2
 400a5b0:	1007883a 	mov	r3,r2
 400a5b4:	e0bffc17 	ldw	r2,-16(fp)
 400a5b8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 400a5bc:	e13ff983 	ldbu	r4,-26(fp)
 400a5c0:	e0fff983 	ldbu	r3,-26(fp)
 400a5c4:	e0bffc17 	ldw	r2,-16(fp)
 400a5c8:	1885883a 	add	r2,r3,r2
 400a5cc:	10800204 	addi	r2,r2,8
 400a5d0:	10c000c3 	ldbu	r3,3(r2)
 400a5d4:	e0bff883 	ldbu	r2,-30(fp)
 400a5d8:	1884b03a 	or	r2,r3,r2
 400a5dc:	1007883a 	mov	r3,r2
 400a5e0:	e0bffc17 	ldw	r2,-16(fp)
 400a5e4:	2085883a 	add	r2,r4,r2
 400a5e8:	10800204 	addi	r2,r2,8
 400a5ec:	10c000c5 	stb	r3,3(r2)
            pevents++;
 400a5f0:	e0bffb17 	ldw	r2,-20(fp)
 400a5f4:	10800104 	addi	r2,r2,4
 400a5f8:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 400a5fc:	e0bffb17 	ldw	r2,-20(fp)
 400a600:	10800017 	ldw	r2,0(r2)
 400a604:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 400a608:	e0bffc17 	ldw	r2,-16(fp)
 400a60c:	1004c03a 	cmpne	r2,r2,zero
 400a610:	103fc31e 	bne	r2,zero,400a520 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 400a614:	e0fffa17 	ldw	r3,-24(fp)
 400a618:	e0bffe03 	ldbu	r2,-8(fp)
 400a61c:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 400a620:	e0fffa17 	ldw	r3,-24(fp)
 400a624:	e0bff983 	ldbu	r2,-26(fp)
 400a628:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 400a62c:	e0fffa17 	ldw	r3,-24(fp)
 400a630:	e0bff943 	ldbu	r2,-27(fp)
 400a634:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 400a638:	e0fffa17 	ldw	r3,-24(fp)
 400a63c:	e0bff8c3 	ldbu	r2,-29(fp)
 400a640:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 400a644:	e0fffa17 	ldw	r3,-24(fp)
 400a648:	e0bff883 	ldbu	r2,-30(fp)
 400a64c:	18800d45 	stb	r2,53(r3)
 400a650:	e0bff717 	ldw	r2,-36(fp)
 400a654:	e0bff215 	stw	r2,-56(fp)
 400a658:	e0bff217 	ldw	r2,-56(fp)
 400a65c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 400a660:	008100b4 	movhi	r2,1026
 400a664:	10a1f444 	addi	r2,r2,-30767
 400a668:	10800003 	ldbu	r2,0(r2)
 400a66c:	10803fcc 	andi	r2,r2,255
 400a670:	10800058 	cmpnei	r2,r2,1
 400a674:	1000011e 	bne	r2,zero,400a67c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 400a678:	40057540 	call	4005754 <OS_Sched>
    }
    return (OS_ERR_NONE);
 400a67c:	e03fff15 	stw	zero,-4(fp)
 400a680:	e0bfff17 	ldw	r2,-4(fp)
}
 400a684:	e037883a 	mov	sp,fp
 400a688:	dfc00117 	ldw	ra,4(sp)
 400a68c:	df000017 	ldw	fp,0(sp)
 400a690:	dec00204 	addi	sp,sp,8
 400a694:	f800283a 	ret

0400a698 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 400a698:	deffed04 	addi	sp,sp,-76
 400a69c:	dfc01215 	stw	ra,72(sp)
 400a6a0:	df001115 	stw	fp,68(sp)
 400a6a4:	df001104 	addi	fp,sp,68
 400a6a8:	e13ffb15 	stw	r4,-20(fp)
 400a6ac:	e17ffc15 	stw	r5,-16(fp)
 400a6b0:	e1bffd15 	stw	r6,-12(fp)
 400a6b4:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 400a6b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 400a6bc:	e0bffe03 	ldbu	r2,-8(fp)
 400a6c0:	10801030 	cmpltui	r2,r2,64
 400a6c4:	1000031e 	bne	r2,zero,400a6d4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 400a6c8:	00800a84 	movi	r2,42
 400a6cc:	e0bfff15 	stw	r2,-4(fp)
 400a6d0:	00006006 	br	400a854 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a6d4:	0005303a 	rdctl	r2,status
 400a6d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a6dc:	e0fff717 	ldw	r3,-36(fp)
 400a6e0:	00bfff84 	movi	r2,-2
 400a6e4:	1884703a 	and	r2,r3,r2
 400a6e8:	1001703a 	wrctl	status,r2
  
  return context;
 400a6ec:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400a6f0:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 400a6f4:	008100b4 	movhi	r2,1026
 400a6f8:	10a20404 	addi	r2,r2,-30704
 400a6fc:	10800003 	ldbu	r2,0(r2)
 400a700:	10803fcc 	andi	r2,r2,255
 400a704:	1005003a 	cmpeq	r2,r2,zero
 400a708:	1000071e 	bne	r2,zero,400a728 <OSTaskCreate+0x90>
 400a70c:	e0bff817 	ldw	r2,-32(fp)
 400a710:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a714:	e0bff617 	ldw	r2,-40(fp)
 400a718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 400a71c:	00800f04 	movi	r2,60
 400a720:	e0bfff15 	stw	r2,-4(fp)
 400a724:	00004b06 	br	400a854 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 400a728:	e0bffe03 	ldbu	r2,-8(fp)
 400a72c:	00c100b4 	movhi	r3,1026
 400a730:	18ceef04 	addi	r3,r3,15292
 400a734:	1085883a 	add	r2,r2,r2
 400a738:	1085883a 	add	r2,r2,r2
 400a73c:	10c5883a 	add	r2,r2,r3
 400a740:	10800017 	ldw	r2,0(r2)
 400a744:	1004c03a 	cmpne	r2,r2,zero
 400a748:	10003c1e 	bne	r2,zero,400a83c <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 400a74c:	e0bffe03 	ldbu	r2,-8(fp)
 400a750:	00c100b4 	movhi	r3,1026
 400a754:	18ceef04 	addi	r3,r3,15292
 400a758:	1085883a 	add	r2,r2,r2
 400a75c:	1085883a 	add	r2,r2,r2
 400a760:	10c7883a 	add	r3,r2,r3
 400a764:	00800044 	movi	r2,1
 400a768:	18800015 	stw	r2,0(r3)
 400a76c:	e0bff817 	ldw	r2,-32(fp)
 400a770:	e0bff515 	stw	r2,-44(fp)
 400a774:	e0bff517 	ldw	r2,-44(fp)
 400a778:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 400a77c:	e13ffb17 	ldw	r4,-20(fp)
 400a780:	e17ffc17 	ldw	r5,-16(fp)
 400a784:	e1bffd17 	ldw	r6,-12(fp)
 400a788:	000f883a 	mov	r7,zero
 400a78c:	400eb240 	call	400eb24 <OSTaskStkInit>
 400a790:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 400a794:	e13ffe03 	ldbu	r4,-8(fp)
 400a798:	d8000015 	stw	zero,0(sp)
 400a79c:	d8000115 	stw	zero,4(sp)
 400a7a0:	d8000215 	stw	zero,8(sp)
 400a7a4:	e17ffa17 	ldw	r5,-24(fp)
 400a7a8:	000d883a 	mov	r6,zero
 400a7ac:	000f883a 	mov	r7,zero
 400a7b0:	4005c380 	call	4005c38 <OS_TCBInit>
 400a7b4:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 400a7b8:	e0bff903 	ldbu	r2,-28(fp)
 400a7bc:	1004c03a 	cmpne	r2,r2,zero
 400a7c0:	1000081e 	bne	r2,zero,400a7e4 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 400a7c4:	008100b4 	movhi	r2,1026
 400a7c8:	10a1f444 	addi	r2,r2,-30767
 400a7cc:	10800003 	ldbu	r2,0(r2)
 400a7d0:	10803fcc 	andi	r2,r2,255
 400a7d4:	10800058 	cmpnei	r2,r2,1
 400a7d8:	1000151e 	bne	r2,zero,400a830 <OSTaskCreate+0x198>
                OS_Sched();
 400a7dc:	40057540 	call	4005754 <OS_Sched>
 400a7e0:	00001306 	br	400a830 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a7e4:	0005303a 	rdctl	r2,status
 400a7e8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a7ec:	e0fff417 	ldw	r3,-48(fp)
 400a7f0:	00bfff84 	movi	r2,-2
 400a7f4:	1884703a 	and	r2,r3,r2
 400a7f8:	1001703a 	wrctl	status,r2
  
  return context;
 400a7fc:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 400a800:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 400a804:	e0bffe03 	ldbu	r2,-8(fp)
 400a808:	00c100b4 	movhi	r3,1026
 400a80c:	18ceef04 	addi	r3,r3,15292
 400a810:	1085883a 	add	r2,r2,r2
 400a814:	1085883a 	add	r2,r2,r2
 400a818:	10c5883a 	add	r2,r2,r3
 400a81c:	10000015 	stw	zero,0(r2)
 400a820:	e0bff817 	ldw	r2,-32(fp)
 400a824:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a828:	e0bff317 	ldw	r2,-52(fp)
 400a82c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 400a830:	e0bff903 	ldbu	r2,-28(fp)
 400a834:	e0bfff15 	stw	r2,-4(fp)
 400a838:	00000606 	br	400a854 <OSTaskCreate+0x1bc>
 400a83c:	e0bff817 	ldw	r2,-32(fp)
 400a840:	e0bff215 	stw	r2,-56(fp)
 400a844:	e0bff217 	ldw	r2,-56(fp)
 400a848:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 400a84c:	00800a04 	movi	r2,40
 400a850:	e0bfff15 	stw	r2,-4(fp)
 400a854:	e0bfff17 	ldw	r2,-4(fp)
}
 400a858:	e037883a 	mov	sp,fp
 400a85c:	dfc00117 	ldw	ra,4(sp)
 400a860:	df000017 	ldw	fp,0(sp)
 400a864:	dec00204 	addi	sp,sp,8
 400a868:	f800283a 	ret

0400a86c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 400a86c:	deffeb04 	addi	sp,sp,-84
 400a870:	dfc01415 	stw	ra,80(sp)
 400a874:	df001315 	stw	fp,76(sp)
 400a878:	df001304 	addi	fp,sp,76
 400a87c:	e13ff915 	stw	r4,-28(fp)
 400a880:	e17ffa15 	stw	r5,-24(fp)
 400a884:	e1bffb15 	stw	r6,-20(fp)
 400a888:	e0800217 	ldw	r2,8(fp)
 400a88c:	e0c00617 	ldw	r3,24(fp)
 400a890:	e1fffc05 	stb	r7,-16(fp)
 400a894:	e0bffd0d 	sth	r2,-12(fp)
 400a898:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 400a89c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 400a8a0:	e0bffc03 	ldbu	r2,-16(fp)
 400a8a4:	10801030 	cmpltui	r2,r2,64
 400a8a8:	1000031e 	bne	r2,zero,400a8b8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 400a8ac:	00800a84 	movi	r2,42
 400a8b0:	e0bfff15 	stw	r2,-4(fp)
 400a8b4:	00006706 	br	400aa54 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a8b8:	0005303a 	rdctl	r2,status
 400a8bc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a8c0:	e0fff517 	ldw	r3,-44(fp)
 400a8c4:	00bfff84 	movi	r2,-2
 400a8c8:	1884703a 	and	r2,r3,r2
 400a8cc:	1001703a 	wrctl	status,r2
  
  return context;
 400a8d0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400a8d4:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 400a8d8:	008100b4 	movhi	r2,1026
 400a8dc:	10a20404 	addi	r2,r2,-30704
 400a8e0:	10800003 	ldbu	r2,0(r2)
 400a8e4:	10803fcc 	andi	r2,r2,255
 400a8e8:	1005003a 	cmpeq	r2,r2,zero
 400a8ec:	1000071e 	bne	r2,zero,400a90c <OSTaskCreateExt+0xa0>
 400a8f0:	e0bff617 	ldw	r2,-40(fp)
 400a8f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a8f8:	e0bff417 	ldw	r2,-48(fp)
 400a8fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 400a900:	00800f04 	movi	r2,60
 400a904:	e0bfff15 	stw	r2,-4(fp)
 400a908:	00005206 	br	400aa54 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 400a90c:	e0bffc03 	ldbu	r2,-16(fp)
 400a910:	00c100b4 	movhi	r3,1026
 400a914:	18ceef04 	addi	r3,r3,15292
 400a918:	1085883a 	add	r2,r2,r2
 400a91c:	1085883a 	add	r2,r2,r2
 400a920:	10c5883a 	add	r2,r2,r3
 400a924:	10800017 	ldw	r2,0(r2)
 400a928:	1004c03a 	cmpne	r2,r2,zero
 400a92c:	1000431e 	bne	r2,zero,400aa3c <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 400a930:	e0bffc03 	ldbu	r2,-16(fp)
 400a934:	00c100b4 	movhi	r3,1026
 400a938:	18ceef04 	addi	r3,r3,15292
 400a93c:	1085883a 	add	r2,r2,r2
 400a940:	1085883a 	add	r2,r2,r2
 400a944:	10c7883a 	add	r3,r2,r3
 400a948:	00800044 	movi	r2,1
 400a94c:	18800015 	stw	r2,0(r3)
 400a950:	e0bff617 	ldw	r2,-40(fp)
 400a954:	e0bff315 	stw	r2,-52(fp)
 400a958:	e0bff317 	ldw	r2,-52(fp)
 400a95c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 400a960:	e1bffe0b 	ldhu	r6,-8(fp)
 400a964:	e1000317 	ldw	r4,12(fp)
 400a968:	e1400417 	ldw	r5,16(fp)
 400a96c:	400bae80 	call	400bae8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 400a970:	e1fffe0b 	ldhu	r7,-8(fp)
 400a974:	e13ff917 	ldw	r4,-28(fp)
 400a978:	e17ffa17 	ldw	r5,-24(fp)
 400a97c:	e1bffb17 	ldw	r6,-20(fp)
 400a980:	400eb240 	call	400eb24 <OSTaskStkInit>
 400a984:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 400a988:	e13ffc03 	ldbu	r4,-16(fp)
 400a98c:	e1fffd0b 	ldhu	r7,-12(fp)
 400a990:	e0fffe0b 	ldhu	r3,-8(fp)
 400a994:	e0800417 	ldw	r2,16(fp)
 400a998:	d8800015 	stw	r2,0(sp)
 400a99c:	e0800517 	ldw	r2,20(fp)
 400a9a0:	d8800115 	stw	r2,4(sp)
 400a9a4:	d8c00215 	stw	r3,8(sp)
 400a9a8:	e17ff817 	ldw	r5,-32(fp)
 400a9ac:	e1800317 	ldw	r6,12(fp)
 400a9b0:	4005c380 	call	4005c38 <OS_TCBInit>
 400a9b4:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 400a9b8:	e0bff703 	ldbu	r2,-36(fp)
 400a9bc:	1004c03a 	cmpne	r2,r2,zero
 400a9c0:	1000081e 	bne	r2,zero,400a9e4 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 400a9c4:	008100b4 	movhi	r2,1026
 400a9c8:	10a1f444 	addi	r2,r2,-30767
 400a9cc:	10800003 	ldbu	r2,0(r2)
 400a9d0:	10803fcc 	andi	r2,r2,255
 400a9d4:	10800058 	cmpnei	r2,r2,1
 400a9d8:	1000151e 	bne	r2,zero,400aa30 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 400a9dc:	40057540 	call	4005754 <OS_Sched>
 400a9e0:	00001306 	br	400aa30 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a9e4:	0005303a 	rdctl	r2,status
 400a9e8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a9ec:	e0fff217 	ldw	r3,-56(fp)
 400a9f0:	00bfff84 	movi	r2,-2
 400a9f4:	1884703a 	and	r2,r3,r2
 400a9f8:	1001703a 	wrctl	status,r2
  
  return context;
 400a9fc:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 400aa00:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 400aa04:	e0bffc03 	ldbu	r2,-16(fp)
 400aa08:	00c100b4 	movhi	r3,1026
 400aa0c:	18ceef04 	addi	r3,r3,15292
 400aa10:	1085883a 	add	r2,r2,r2
 400aa14:	1085883a 	add	r2,r2,r2
 400aa18:	10c5883a 	add	r2,r2,r3
 400aa1c:	10000015 	stw	zero,0(r2)
 400aa20:	e0bff617 	ldw	r2,-40(fp)
 400aa24:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400aa28:	e0bff117 	ldw	r2,-60(fp)
 400aa2c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 400aa30:	e0bff703 	ldbu	r2,-36(fp)
 400aa34:	e0bfff15 	stw	r2,-4(fp)
 400aa38:	00000606 	br	400aa54 <OSTaskCreateExt+0x1e8>
 400aa3c:	e0bff617 	ldw	r2,-40(fp)
 400aa40:	e0bff015 	stw	r2,-64(fp)
 400aa44:	e0bff017 	ldw	r2,-64(fp)
 400aa48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 400aa4c:	00800a04 	movi	r2,40
 400aa50:	e0bfff15 	stw	r2,-4(fp)
 400aa54:	e0bfff17 	ldw	r2,-4(fp)
}
 400aa58:	e037883a 	mov	sp,fp
 400aa5c:	dfc00117 	ldw	ra,4(sp)
 400aa60:	df000017 	ldw	fp,0(sp)
 400aa64:	dec00204 	addi	sp,sp,8
 400aa68:	f800283a 	ret

0400aa6c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 400aa6c:	defff304 	addi	sp,sp,-52
 400aa70:	dfc00c15 	stw	ra,48(sp)
 400aa74:	df000b15 	stw	fp,44(sp)
 400aa78:	df000b04 	addi	fp,sp,44
 400aa7c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 400aa80:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 400aa84:	008100b4 	movhi	r2,1026
 400aa88:	10a20404 	addi	r2,r2,-30704
 400aa8c:	10800003 	ldbu	r2,0(r2)
 400aa90:	10803fcc 	andi	r2,r2,255
 400aa94:	1005003a 	cmpeq	r2,r2,zero
 400aa98:	1000031e 	bne	r2,zero,400aaa8 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 400aa9c:	00801004 	movi	r2,64
 400aaa0:	e0bfff15 	stw	r2,-4(fp)
 400aaa4:	0000ee06 	br	400ae60 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 400aaa8:	e0bffe03 	ldbu	r2,-8(fp)
 400aaac:	10800fd8 	cmpnei	r2,r2,63
 400aab0:	1000031e 	bne	r2,zero,400aac0 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 400aab4:	00800f84 	movi	r2,62
 400aab8:	e0bfff15 	stw	r2,-4(fp)
 400aabc:	0000e806 	br	400ae60 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 400aac0:	e0bffe03 	ldbu	r2,-8(fp)
 400aac4:	10800ff0 	cmpltui	r2,r2,63
 400aac8:	1000061e 	bne	r2,zero,400aae4 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 400aacc:	e0bffe03 	ldbu	r2,-8(fp)
 400aad0:	10803fe0 	cmpeqi	r2,r2,255
 400aad4:	1000031e 	bne	r2,zero,400aae4 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 400aad8:	00800a84 	movi	r2,42
 400aadc:	e0bfff15 	stw	r2,-4(fp)
 400aae0:	0000df06 	br	400ae60 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400aae4:	0005303a 	rdctl	r2,status
 400aae8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400aaec:	e0fffa17 	ldw	r3,-24(fp)
 400aaf0:	00bfff84 	movi	r2,-2
 400aaf4:	1884703a 	and	r2,r3,r2
 400aaf8:	1001703a 	wrctl	status,r2
  
  return context;
 400aafc:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 400ab00:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 400ab04:	e0bffe03 	ldbu	r2,-8(fp)
 400ab08:	10803fd8 	cmpnei	r2,r2,255
 400ab0c:	1000051e 	bne	r2,zero,400ab24 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 400ab10:	008100b4 	movhi	r2,1026
 400ab14:	10a20504 	addi	r2,r2,-30700
 400ab18:	10800017 	ldw	r2,0(r2)
 400ab1c:	10800c83 	ldbu	r2,50(r2)
 400ab20:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400ab24:	e0bffe03 	ldbu	r2,-8(fp)
 400ab28:	00c100b4 	movhi	r3,1026
 400ab2c:	18ceef04 	addi	r3,r3,15292
 400ab30:	1085883a 	add	r2,r2,r2
 400ab34:	1085883a 	add	r2,r2,r2
 400ab38:	10c5883a 	add	r2,r2,r3
 400ab3c:	10800017 	ldw	r2,0(r2)
 400ab40:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 400ab44:	e0bffc17 	ldw	r2,-16(fp)
 400ab48:	1004c03a 	cmpne	r2,r2,zero
 400ab4c:	1000071e 	bne	r2,zero,400ab6c <OSTaskDel+0x100>
 400ab50:	e0bffb17 	ldw	r2,-20(fp)
 400ab54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ab58:	e0bff917 	ldw	r2,-28(fp)
 400ab5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400ab60:	008010c4 	movi	r2,67
 400ab64:	e0bfff15 	stw	r2,-4(fp)
 400ab68:	0000bd06 	br	400ae60 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 400ab6c:	e0bffc17 	ldw	r2,-16(fp)
 400ab70:	10800058 	cmpnei	r2,r2,1
 400ab74:	1000071e 	bne	r2,zero,400ab94 <OSTaskDel+0x128>
 400ab78:	e0bffb17 	ldw	r2,-20(fp)
 400ab7c:	e0bff815 	stw	r2,-32(fp)
 400ab80:	e0bff817 	ldw	r2,-32(fp)
 400ab84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 400ab88:	00800f44 	movi	r2,61
 400ab8c:	e0bfff15 	stw	r2,-4(fp)
 400ab90:	0000b306 	br	400ae60 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 400ab94:	e0bffc17 	ldw	r2,-16(fp)
 400ab98:	10800d03 	ldbu	r2,52(r2)
 400ab9c:	11003fcc 	andi	r4,r2,255
 400aba0:	e0bffc17 	ldw	r2,-16(fp)
 400aba4:	10800d03 	ldbu	r2,52(r2)
 400aba8:	10c03fcc 	andi	r3,r2,255
 400abac:	008100b4 	movhi	r2,1026
 400abb0:	10a20044 	addi	r2,r2,-30719
 400abb4:	10c5883a 	add	r2,r2,r3
 400abb8:	10800003 	ldbu	r2,0(r2)
 400abbc:	1007883a 	mov	r3,r2
 400abc0:	e0bffc17 	ldw	r2,-16(fp)
 400abc4:	10800d43 	ldbu	r2,53(r2)
 400abc8:	0084303a 	nor	r2,zero,r2
 400abcc:	1884703a 	and	r2,r3,r2
 400abd0:	1007883a 	mov	r3,r2
 400abd4:	008100b4 	movhi	r2,1026
 400abd8:	10a20044 	addi	r2,r2,-30719
 400abdc:	1105883a 	add	r2,r2,r4
 400abe0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 400abe4:	e0bffc17 	ldw	r2,-16(fp)
 400abe8:	10800d03 	ldbu	r2,52(r2)
 400abec:	10c03fcc 	andi	r3,r2,255
 400abf0:	008100b4 	movhi	r2,1026
 400abf4:	10a20044 	addi	r2,r2,-30719
 400abf8:	10c5883a 	add	r2,r2,r3
 400abfc:	10800003 	ldbu	r2,0(r2)
 400ac00:	10803fcc 	andi	r2,r2,255
 400ac04:	1004c03a 	cmpne	r2,r2,zero
 400ac08:	10000c1e 	bne	r2,zero,400ac3c <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 400ac0c:	e0bffc17 	ldw	r2,-16(fp)
 400ac10:	10800d83 	ldbu	r2,54(r2)
 400ac14:	0084303a 	nor	r2,zero,r2
 400ac18:	1007883a 	mov	r3,r2
 400ac1c:	008100b4 	movhi	r2,1026
 400ac20:	10a20004 	addi	r2,r2,-30720
 400ac24:	10800003 	ldbu	r2,0(r2)
 400ac28:	1884703a 	and	r2,r3,r2
 400ac2c:	1007883a 	mov	r3,r2
 400ac30:	008100b4 	movhi	r2,1026
 400ac34:	10a20004 	addi	r2,r2,-30720
 400ac38:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 400ac3c:	e0bffc17 	ldw	r2,-16(fp)
 400ac40:	10800717 	ldw	r2,28(r2)
 400ac44:	1005003a 	cmpeq	r2,r2,zero
 400ac48:	1000041e 	bne	r2,zero,400ac5c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 400ac4c:	e0bffc17 	ldw	r2,-16(fp)
 400ac50:	11400717 	ldw	r5,28(r2)
 400ac54:	e13ffc17 	ldw	r4,-16(fp)
 400ac58:	400510c0 	call	400510c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 400ac5c:	e0bffc17 	ldw	r2,-16(fp)
 400ac60:	10800817 	ldw	r2,32(r2)
 400ac64:	1005003a 	cmpeq	r2,r2,zero
 400ac68:	1000041e 	bne	r2,zero,400ac7c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 400ac6c:	e0bffc17 	ldw	r2,-16(fp)
 400ac70:	11400817 	ldw	r5,32(r2)
 400ac74:	e13ffc17 	ldw	r4,-16(fp)
 400ac78:	40051c40 	call	40051c4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 400ac7c:	e0bffc17 	ldw	r2,-16(fp)
 400ac80:	10800a17 	ldw	r2,40(r2)
 400ac84:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 400ac88:	e0bffd17 	ldw	r2,-12(fp)
 400ac8c:	1005003a 	cmpeq	r2,r2,zero
 400ac90:	1000021e 	bne	r2,zero,400ac9c <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 400ac94:	e13ffd17 	ldw	r4,-12(fp)
 400ac98:	40079740 	call	4007974 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 400ac9c:	e0bffc17 	ldw	r2,-16(fp)
 400aca0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 400aca4:	e0bffc17 	ldw	r2,-16(fp)
 400aca8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 400acac:	e0bffc17 	ldw	r2,-16(fp)
 400acb0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 400acb4:	008100b4 	movhi	r2,1026
 400acb8:	10a1f404 	addi	r2,r2,-30768
 400acbc:	10800003 	ldbu	r2,0(r2)
 400acc0:	10803fcc 	andi	r2,r2,255
 400acc4:	10803fe0 	cmpeqi	r2,r2,255
 400acc8:	1000081e 	bne	r2,zero,400acec <OSTaskDel+0x280>
        OSLockNesting++;
 400accc:	008100b4 	movhi	r2,1026
 400acd0:	10a1f404 	addi	r2,r2,-30768
 400acd4:	10800003 	ldbu	r2,0(r2)
 400acd8:	10800044 	addi	r2,r2,1
 400acdc:	1007883a 	mov	r3,r2
 400ace0:	008100b4 	movhi	r2,1026
 400ace4:	10a1f404 	addi	r2,r2,-30768
 400ace8:	10c00005 	stb	r3,0(r2)
 400acec:	e0bffb17 	ldw	r2,-20(fp)
 400acf0:	e0bff715 	stw	r2,-36(fp)
 400acf4:	e0bff717 	ldw	r2,-36(fp)
 400acf8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 400acfc:	4004cf80 	call	4004cf8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ad00:	0005303a 	rdctl	r2,status
 400ad04:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ad08:	e0fff617 	ldw	r3,-40(fp)
 400ad0c:	00bfff84 	movi	r2,-2
 400ad10:	1884703a 	and	r2,r3,r2
 400ad14:	1001703a 	wrctl	status,r2
  
  return context;
 400ad18:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 400ad1c:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 400ad20:	008100b4 	movhi	r2,1026
 400ad24:	10a1f404 	addi	r2,r2,-30768
 400ad28:	10800003 	ldbu	r2,0(r2)
 400ad2c:	10803fcc 	andi	r2,r2,255
 400ad30:	1005003a 	cmpeq	r2,r2,zero
 400ad34:	1000081e 	bne	r2,zero,400ad58 <OSTaskDel+0x2ec>
        OSLockNesting--;
 400ad38:	008100b4 	movhi	r2,1026
 400ad3c:	10a1f404 	addi	r2,r2,-30768
 400ad40:	10800003 	ldbu	r2,0(r2)
 400ad44:	10bfffc4 	addi	r2,r2,-1
 400ad48:	1007883a 	mov	r3,r2
 400ad4c:	008100b4 	movhi	r2,1026
 400ad50:	10a1f404 	addi	r2,r2,-30768
 400ad54:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 400ad58:	e13ffc17 	ldw	r4,-16(fp)
 400ad5c:	400ee540 	call	400ee54 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 400ad60:	008100b4 	movhi	r2,1026
 400ad64:	10a1fc44 	addi	r2,r2,-30735
 400ad68:	10800003 	ldbu	r2,0(r2)
 400ad6c:	10bfffc4 	addi	r2,r2,-1
 400ad70:	1007883a 	mov	r3,r2
 400ad74:	008100b4 	movhi	r2,1026
 400ad78:	10a1fc44 	addi	r2,r2,-30735
 400ad7c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 400ad80:	e0bffe03 	ldbu	r2,-8(fp)
 400ad84:	00c100b4 	movhi	r3,1026
 400ad88:	18ceef04 	addi	r3,r3,15292
 400ad8c:	1085883a 	add	r2,r2,r2
 400ad90:	1085883a 	add	r2,r2,r2
 400ad94:	10c5883a 	add	r2,r2,r3
 400ad98:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 400ad9c:	e0bffc17 	ldw	r2,-16(fp)
 400ada0:	10800617 	ldw	r2,24(r2)
 400ada4:	1004c03a 	cmpne	r2,r2,zero
 400ada8:	1000091e 	bne	r2,zero,400add0 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 400adac:	e0bffc17 	ldw	r2,-16(fp)
 400adb0:	10800517 	ldw	r2,20(r2)
 400adb4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 400adb8:	e0bffc17 	ldw	r2,-16(fp)
 400adbc:	10c00517 	ldw	r3,20(r2)
 400adc0:	008100b4 	movhi	r2,1026
 400adc4:	10a1f704 	addi	r2,r2,-30756
 400adc8:	10c00015 	stw	r3,0(r2)
 400adcc:	00000a06 	br	400adf8 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 400add0:	e0bffc17 	ldw	r2,-16(fp)
 400add4:	10c00617 	ldw	r3,24(r2)
 400add8:	e0bffc17 	ldw	r2,-16(fp)
 400addc:	10800517 	ldw	r2,20(r2)
 400ade0:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 400ade4:	e0bffc17 	ldw	r2,-16(fp)
 400ade8:	10c00517 	ldw	r3,20(r2)
 400adec:	e0bffc17 	ldw	r2,-16(fp)
 400adf0:	10800617 	ldw	r2,24(r2)
 400adf4:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 400adf8:	008100b4 	movhi	r2,1026
 400adfc:	10a1fb04 	addi	r2,r2,-30740
 400ae00:	10c00017 	ldw	r3,0(r2)
 400ae04:	e0bffc17 	ldw	r2,-16(fp)
 400ae08:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 400ae0c:	00c100b4 	movhi	r3,1026
 400ae10:	18e1fb04 	addi	r3,r3,-30740
 400ae14:	e0bffc17 	ldw	r2,-16(fp)
 400ae18:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 400ae1c:	e0fffc17 	ldw	r3,-16(fp)
 400ae20:	00800fc4 	movi	r2,63
 400ae24:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 400ae28:	e0bffc17 	ldw	r2,-16(fp)
 400ae2c:	10001345 	stb	zero,77(r2)
 400ae30:	e0bffb17 	ldw	r2,-20(fp)
 400ae34:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ae38:	e0bff517 	ldw	r2,-44(fp)
 400ae3c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 400ae40:	008100b4 	movhi	r2,1026
 400ae44:	10a1f444 	addi	r2,r2,-30767
 400ae48:	10800003 	ldbu	r2,0(r2)
 400ae4c:	10803fcc 	andi	r2,r2,255
 400ae50:	10800058 	cmpnei	r2,r2,1
 400ae54:	1000011e 	bne	r2,zero,400ae5c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 400ae58:	40057540 	call	4005754 <OS_Sched>
    }
    return (OS_ERR_NONE);
 400ae5c:	e03fff15 	stw	zero,-4(fp)
 400ae60:	e0bfff17 	ldw	r2,-4(fp)
}
 400ae64:	e037883a 	mov	sp,fp
 400ae68:	dfc00117 	ldw	ra,4(sp)
 400ae6c:	df000017 	ldw	fp,0(sp)
 400ae70:	dec00204 	addi	sp,sp,8
 400ae74:	f800283a 	ret

0400ae78 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 400ae78:	defff404 	addi	sp,sp,-48
 400ae7c:	df000b15 	stw	fp,44(sp)
 400ae80:	df000b04 	addi	fp,sp,44
 400ae84:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ae88:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 400ae8c:	e0bffe03 	ldbu	r2,-8(fp)
 400ae90:	10800fd8 	cmpnei	r2,r2,63
 400ae94:	1000031e 	bne	r2,zero,400aea4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 400ae98:	00800f84 	movi	r2,62
 400ae9c:	e0bfff15 	stw	r2,-4(fp)
 400aea0:	00004c06 	br	400afd4 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 400aea4:	e0bffe03 	ldbu	r2,-8(fp)
 400aea8:	10800ff0 	cmpltui	r2,r2,63
 400aeac:	1000061e 	bne	r2,zero,400aec8 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 400aeb0:	e0bffe03 	ldbu	r2,-8(fp)
 400aeb4:	10803fe0 	cmpeqi	r2,r2,255
 400aeb8:	1000031e 	bne	r2,zero,400aec8 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 400aebc:	00800a84 	movi	r2,42
 400aec0:	e0bfff15 	stw	r2,-4(fp)
 400aec4:	00004306 	br	400afd4 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 400aec8:	e0bffe03 	ldbu	r2,-8(fp)
 400aecc:	10803fd8 	cmpnei	r2,r2,255
 400aed0:	1000141e 	bne	r2,zero,400af24 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400aed4:	0005303a 	rdctl	r2,status
 400aed8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400aedc:	e0fffa17 	ldw	r3,-24(fp)
 400aee0:	00bfff84 	movi	r2,-2
 400aee4:	1884703a 	and	r2,r3,r2
 400aee8:	1001703a 	wrctl	status,r2
  
  return context;
 400aeec:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 400aef0:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 400aef4:	008100b4 	movhi	r2,1026
 400aef8:	10a20504 	addi	r2,r2,-30700
 400aefc:	10800017 	ldw	r2,0(r2)
 400af00:	10800dc3 	ldbu	r2,55(r2)
 400af04:	e0bffd05 	stb	r2,-12(fp)
 400af08:	e0bffb17 	ldw	r2,-20(fp)
 400af0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400af10:	e0bff917 	ldw	r2,-28(fp)
 400af14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 400af18:	e0bffd03 	ldbu	r2,-12(fp)
 400af1c:	e0bfff15 	stw	r2,-4(fp)
 400af20:	00002c06 	br	400afd4 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400af24:	0005303a 	rdctl	r2,status
 400af28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400af2c:	e0fff817 	ldw	r3,-32(fp)
 400af30:	00bfff84 	movi	r2,-2
 400af34:	1884703a 	and	r2,r3,r2
 400af38:	1001703a 	wrctl	status,r2
  
  return context;
 400af3c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 400af40:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 400af44:	e0bffe03 	ldbu	r2,-8(fp)
 400af48:	00c100b4 	movhi	r3,1026
 400af4c:	18ceef04 	addi	r3,r3,15292
 400af50:	1085883a 	add	r2,r2,r2
 400af54:	1085883a 	add	r2,r2,r2
 400af58:	10c5883a 	add	r2,r2,r3
 400af5c:	10800017 	ldw	r2,0(r2)
 400af60:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 400af64:	e0bffc17 	ldw	r2,-16(fp)
 400af68:	1004c03a 	cmpne	r2,r2,zero
 400af6c:	1000071e 	bne	r2,zero,400af8c <OSTaskDelReq+0x114>
 400af70:	e0bffb17 	ldw	r2,-20(fp)
 400af74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400af78:	e0bff717 	ldw	r2,-36(fp)
 400af7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 400af80:	008010c4 	movi	r2,67
 400af84:	e0bfff15 	stw	r2,-4(fp)
 400af88:	00001206 	br	400afd4 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 400af8c:	e0bffc17 	ldw	r2,-16(fp)
 400af90:	10800058 	cmpnei	r2,r2,1
 400af94:	1000071e 	bne	r2,zero,400afb4 <OSTaskDelReq+0x13c>
 400af98:	e0bffb17 	ldw	r2,-20(fp)
 400af9c:	e0bff615 	stw	r2,-40(fp)
 400afa0:	e0bff617 	ldw	r2,-40(fp)
 400afa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 400afa8:	00800f44 	movi	r2,61
 400afac:	e0bfff15 	stw	r2,-4(fp)
 400afb0:	00000806 	br	400afd4 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 400afb4:	e0fffc17 	ldw	r3,-16(fp)
 400afb8:	00800fc4 	movi	r2,63
 400afbc:	18800dc5 	stb	r2,55(r3)
 400afc0:	e0bffb17 	ldw	r2,-20(fp)
 400afc4:	e0bff515 	stw	r2,-44(fp)
 400afc8:	e0bff517 	ldw	r2,-44(fp)
 400afcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400afd0:	e03fff15 	stw	zero,-4(fp)
 400afd4:	e0bfff17 	ldw	r2,-4(fp)
}
 400afd8:	e037883a 	mov	sp,fp
 400afdc:	df000017 	ldw	fp,0(sp)
 400afe0:	dec00104 	addi	sp,sp,4
 400afe4:	f800283a 	ret

0400afe8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 400afe8:	defff304 	addi	sp,sp,-52
 400afec:	dfc00c15 	stw	ra,48(sp)
 400aff0:	df000b15 	stw	fp,44(sp)
 400aff4:	df000b04 	addi	fp,sp,44
 400aff8:	e17ffd15 	stw	r5,-12(fp)
 400affc:	e1bffe15 	stw	r6,-8(fp)
 400b000:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 400b004:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 400b008:	e0bffe17 	ldw	r2,-8(fp)
 400b00c:	1004c03a 	cmpne	r2,r2,zero
 400b010:	1000021e 	bne	r2,zero,400b01c <OSTaskNameGet+0x34>
        return (0);
 400b014:	e03fff15 	stw	zero,-4(fp)
 400b018:	00005b06 	br	400b188 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 400b01c:	e0bffc03 	ldbu	r2,-16(fp)
 400b020:	10801030 	cmpltui	r2,r2,64
 400b024:	1000081e 	bne	r2,zero,400b048 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 400b028:	e0bffc03 	ldbu	r2,-16(fp)
 400b02c:	10803fe0 	cmpeqi	r2,r2,255
 400b030:	1000051e 	bne	r2,zero,400b048 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 400b034:	e0fffe17 	ldw	r3,-8(fp)
 400b038:	00800a84 	movi	r2,42
 400b03c:	18800005 	stb	r2,0(r3)
            return (0);
 400b040:	e03fff15 	stw	zero,-4(fp)
 400b044:	00005006 	br	400b188 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 400b048:	e0bffd17 	ldw	r2,-12(fp)
 400b04c:	1004c03a 	cmpne	r2,r2,zero
 400b050:	1000051e 	bne	r2,zero,400b068 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 400b054:	e0fffe17 	ldw	r3,-8(fp)
 400b058:	00800304 	movi	r2,12
 400b05c:	18800005 	stb	r2,0(r3)
        return (0);
 400b060:	e03fff15 	stw	zero,-4(fp)
 400b064:	00004806 	br	400b188 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 400b068:	008100b4 	movhi	r2,1026
 400b06c:	10a20404 	addi	r2,r2,-30704
 400b070:	10800003 	ldbu	r2,0(r2)
 400b074:	10803fcc 	andi	r2,r2,255
 400b078:	1005003a 	cmpeq	r2,r2,zero
 400b07c:	1000051e 	bne	r2,zero,400b094 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 400b080:	e0fffe17 	ldw	r3,-8(fp)
 400b084:	00800444 	movi	r2,17
 400b088:	18800005 	stb	r2,0(r3)
        return (0);
 400b08c:	e03fff15 	stw	zero,-4(fp)
 400b090:	00003d06 	br	400b188 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b094:	0005303a 	rdctl	r2,status
 400b098:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b09c:	e0fff817 	ldw	r3,-32(fp)
 400b0a0:	00bfff84 	movi	r2,-2
 400b0a4:	1884703a 	and	r2,r3,r2
 400b0a8:	1001703a 	wrctl	status,r2
  
  return context;
 400b0ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 400b0b0:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 400b0b4:	e0bffc03 	ldbu	r2,-16(fp)
 400b0b8:	10803fd8 	cmpnei	r2,r2,255
 400b0bc:	1000051e 	bne	r2,zero,400b0d4 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 400b0c0:	008100b4 	movhi	r2,1026
 400b0c4:	10a20504 	addi	r2,r2,-30700
 400b0c8:	10800017 	ldw	r2,0(r2)
 400b0cc:	10800c83 	ldbu	r2,50(r2)
 400b0d0:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400b0d4:	e0bffc03 	ldbu	r2,-16(fp)
 400b0d8:	00c100b4 	movhi	r3,1026
 400b0dc:	18ceef04 	addi	r3,r3,15292
 400b0e0:	1085883a 	add	r2,r2,r2
 400b0e4:	1085883a 	add	r2,r2,r2
 400b0e8:	10c5883a 	add	r2,r2,r3
 400b0ec:	10800017 	ldw	r2,0(r2)
 400b0f0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 400b0f4:	e0bffb17 	ldw	r2,-20(fp)
 400b0f8:	1004c03a 	cmpne	r2,r2,zero
 400b0fc:	1000091e 	bne	r2,zero,400b124 <OSTaskNameGet+0x13c>
 400b100:	e0bff917 	ldw	r2,-28(fp)
 400b104:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b108:	e0bff717 	ldw	r2,-36(fp)
 400b10c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 400b110:	e0fffe17 	ldw	r3,-8(fp)
 400b114:	008010c4 	movi	r2,67
 400b118:	18800005 	stb	r2,0(r3)
        return (0);
 400b11c:	e03fff15 	stw	zero,-4(fp)
 400b120:	00001906 	br	400b188 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 400b124:	e0bffb17 	ldw	r2,-20(fp)
 400b128:	10800058 	cmpnei	r2,r2,1
 400b12c:	1000091e 	bne	r2,zero,400b154 <OSTaskNameGet+0x16c>
 400b130:	e0bff917 	ldw	r2,-28(fp)
 400b134:	e0bff615 	stw	r2,-40(fp)
 400b138:	e0bff617 	ldw	r2,-40(fp)
 400b13c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 400b140:	e0fffe17 	ldw	r3,-8(fp)
 400b144:	008010c4 	movi	r2,67
 400b148:	18800005 	stb	r2,0(r3)
        return (0);
 400b14c:	e03fff15 	stw	zero,-4(fp)
 400b150:	00000d06 	br	400b188 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 400b154:	e0bffb17 	ldw	r2,-20(fp)
 400b158:	11401304 	addi	r5,r2,76
 400b15c:	e13ffd17 	ldw	r4,-12(fp)
 400b160:	40059740 	call	4005974 <OS_StrCopy>
 400b164:	e0bffa05 	stb	r2,-24(fp)
 400b168:	e0bff917 	ldw	r2,-28(fp)
 400b16c:	e0bff515 	stw	r2,-44(fp)
 400b170:	e0bff517 	ldw	r2,-44(fp)
 400b174:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400b178:	e0bffe17 	ldw	r2,-8(fp)
 400b17c:	10000005 	stb	zero,0(r2)
    return (len);
 400b180:	e0bffa03 	ldbu	r2,-24(fp)
 400b184:	e0bfff15 	stw	r2,-4(fp)
 400b188:	e0bfff17 	ldw	r2,-4(fp)
}
 400b18c:	e037883a 	mov	sp,fp
 400b190:	dfc00117 	ldw	ra,4(sp)
 400b194:	df000017 	ldw	fp,0(sp)
 400b198:	dec00204 	addi	sp,sp,8
 400b19c:	f800283a 	ret

0400b1a0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 400b1a0:	defff304 	addi	sp,sp,-52
 400b1a4:	dfc00c15 	stw	ra,48(sp)
 400b1a8:	df000b15 	stw	fp,44(sp)
 400b1ac:	df000b04 	addi	fp,sp,44
 400b1b0:	e17ffe15 	stw	r5,-8(fp)
 400b1b4:	e1bfff15 	stw	r6,-4(fp)
 400b1b8:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 400b1bc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 400b1c0:	e0bfff17 	ldw	r2,-4(fp)
 400b1c4:	1005003a 	cmpeq	r2,r2,zero
 400b1c8:	1000611e 	bne	r2,zero,400b350 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 400b1cc:	e0bffd03 	ldbu	r2,-12(fp)
 400b1d0:	10801030 	cmpltui	r2,r2,64
 400b1d4:	1000071e 	bne	r2,zero,400b1f4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 400b1d8:	e0bffd03 	ldbu	r2,-12(fp)
 400b1dc:	10803fe0 	cmpeqi	r2,r2,255
 400b1e0:	1000041e 	bne	r2,zero,400b1f4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 400b1e4:	e0ffff17 	ldw	r3,-4(fp)
 400b1e8:	00800a84 	movi	r2,42
 400b1ec:	18800005 	stb	r2,0(r3)
            return;
 400b1f0:	00005706 	br	400b350 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 400b1f4:	e0bffe17 	ldw	r2,-8(fp)
 400b1f8:	1004c03a 	cmpne	r2,r2,zero
 400b1fc:	1000041e 	bne	r2,zero,400b210 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 400b200:	e0ffff17 	ldw	r3,-4(fp)
 400b204:	00800304 	movi	r2,12
 400b208:	18800005 	stb	r2,0(r3)
        return;
 400b20c:	00005006 	br	400b350 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 400b210:	008100b4 	movhi	r2,1026
 400b214:	10a20404 	addi	r2,r2,-30704
 400b218:	10800003 	ldbu	r2,0(r2)
 400b21c:	10803fcc 	andi	r2,r2,255
 400b220:	1005003a 	cmpeq	r2,r2,zero
 400b224:	1000041e 	bne	r2,zero,400b238 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 400b228:	e0ffff17 	ldw	r3,-4(fp)
 400b22c:	00800484 	movi	r2,18
 400b230:	18800005 	stb	r2,0(r3)
        return;
 400b234:	00004606 	br	400b350 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b238:	0005303a 	rdctl	r2,status
 400b23c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b240:	e0fff917 	ldw	r3,-28(fp)
 400b244:	00bfff84 	movi	r2,-2
 400b248:	1884703a 	and	r2,r3,r2
 400b24c:	1001703a 	wrctl	status,r2
  
  return context;
 400b250:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400b254:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 400b258:	e0bffd03 	ldbu	r2,-12(fp)
 400b25c:	10803fd8 	cmpnei	r2,r2,255
 400b260:	1000051e 	bne	r2,zero,400b278 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 400b264:	008100b4 	movhi	r2,1026
 400b268:	10a20504 	addi	r2,r2,-30700
 400b26c:	10800017 	ldw	r2,0(r2)
 400b270:	10800c83 	ldbu	r2,50(r2)
 400b274:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400b278:	e0bffd03 	ldbu	r2,-12(fp)
 400b27c:	00c100b4 	movhi	r3,1026
 400b280:	18ceef04 	addi	r3,r3,15292
 400b284:	1085883a 	add	r2,r2,r2
 400b288:	1085883a 	add	r2,r2,r2
 400b28c:	10c5883a 	add	r2,r2,r3
 400b290:	10800017 	ldw	r2,0(r2)
 400b294:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 400b298:	e0bffb17 	ldw	r2,-20(fp)
 400b29c:	1004c03a 	cmpne	r2,r2,zero
 400b2a0:	1000081e 	bne	r2,zero,400b2c4 <OSTaskNameSet+0x124>
 400b2a4:	e0bffa17 	ldw	r2,-24(fp)
 400b2a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b2ac:	e0bff817 	ldw	r2,-32(fp)
 400b2b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 400b2b4:	e0ffff17 	ldw	r3,-4(fp)
 400b2b8:	008010c4 	movi	r2,67
 400b2bc:	18800005 	stb	r2,0(r3)
        return;
 400b2c0:	00002306 	br	400b350 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 400b2c4:	e0bffb17 	ldw	r2,-20(fp)
 400b2c8:	10800058 	cmpnei	r2,r2,1
 400b2cc:	1000081e 	bne	r2,zero,400b2f0 <OSTaskNameSet+0x150>
 400b2d0:	e0bffa17 	ldw	r2,-24(fp)
 400b2d4:	e0bff715 	stw	r2,-36(fp)
 400b2d8:	e0bff717 	ldw	r2,-36(fp)
 400b2dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 400b2e0:	e0ffff17 	ldw	r3,-4(fp)
 400b2e4:	008010c4 	movi	r2,67
 400b2e8:	18800005 	stb	r2,0(r3)
        return;
 400b2ec:	00001806 	br	400b350 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 400b2f0:	e13ffe17 	ldw	r4,-8(fp)
 400b2f4:	40059f40 	call	40059f4 <OS_StrLen>
 400b2f8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 400b2fc:	e0bffc03 	ldbu	r2,-16(fp)
 400b300:	10800830 	cmpltui	r2,r2,32
 400b304:	1000081e 	bne	r2,zero,400b328 <OSTaskNameSet+0x188>
 400b308:	e0bffa17 	ldw	r2,-24(fp)
 400b30c:	e0bff615 	stw	r2,-40(fp)
 400b310:	e0bff617 	ldw	r2,-40(fp)
 400b314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 400b318:	e0ffff17 	ldw	r3,-4(fp)
 400b31c:	00801044 	movi	r2,65
 400b320:	18800005 	stb	r2,0(r3)
        return;
 400b324:	00000a06 	br	400b350 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 400b328:	e0bffb17 	ldw	r2,-20(fp)
 400b32c:	11001304 	addi	r4,r2,76
 400b330:	e17ffe17 	ldw	r5,-8(fp)
 400b334:	40059740 	call	4005974 <OS_StrCopy>
 400b338:	e0bffa17 	ldw	r2,-24(fp)
 400b33c:	e0bff515 	stw	r2,-44(fp)
 400b340:	e0bff517 	ldw	r2,-44(fp)
 400b344:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400b348:	e0bfff17 	ldw	r2,-4(fp)
 400b34c:	10000005 	stb	zero,0(r2)
}
 400b350:	e037883a 	mov	sp,fp
 400b354:	dfc00117 	ldw	ra,4(sp)
 400b358:	df000017 	ldw	fp,0(sp)
 400b35c:	dec00204 	addi	sp,sp,8
 400b360:	f800283a 	ret

0400b364 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 400b364:	defff304 	addi	sp,sp,-52
 400b368:	dfc00c15 	stw	ra,48(sp)
 400b36c:	df000b15 	stw	fp,44(sp)
 400b370:	df000b04 	addi	fp,sp,44
 400b374:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 400b378:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 400b37c:	e0bffe03 	ldbu	r2,-8(fp)
 400b380:	10800ff0 	cmpltui	r2,r2,63
 400b384:	1000031e 	bne	r2,zero,400b394 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 400b388:	00800a84 	movi	r2,42
 400b38c:	e0bfff15 	stw	r2,-4(fp)
 400b390:	00007406 	br	400b564 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b394:	0005303a 	rdctl	r2,status
 400b398:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b39c:	e0fffb17 	ldw	r3,-20(fp)
 400b3a0:	00bfff84 	movi	r2,-2
 400b3a4:	1884703a 	and	r2,r3,r2
 400b3a8:	1001703a 	wrctl	status,r2
  
  return context;
 400b3ac:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400b3b0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 400b3b4:	e0bffe03 	ldbu	r2,-8(fp)
 400b3b8:	00c100b4 	movhi	r3,1026
 400b3bc:	18ceef04 	addi	r3,r3,15292
 400b3c0:	1085883a 	add	r2,r2,r2
 400b3c4:	1085883a 	add	r2,r2,r2
 400b3c8:	10c5883a 	add	r2,r2,r3
 400b3cc:	10800017 	ldw	r2,0(r2)
 400b3d0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 400b3d4:	e0bffd17 	ldw	r2,-12(fp)
 400b3d8:	1004c03a 	cmpne	r2,r2,zero
 400b3dc:	1000071e 	bne	r2,zero,400b3fc <OSTaskResume+0x98>
 400b3e0:	e0bffc17 	ldw	r2,-16(fp)
 400b3e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b3e8:	e0bffa17 	ldw	r2,-24(fp)
 400b3ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 400b3f0:	00801184 	movi	r2,70
 400b3f4:	e0bfff15 	stw	r2,-4(fp)
 400b3f8:	00005a06 	br	400b564 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 400b3fc:	e0bffd17 	ldw	r2,-12(fp)
 400b400:	10800058 	cmpnei	r2,r2,1
 400b404:	1000071e 	bne	r2,zero,400b424 <OSTaskResume+0xc0>
 400b408:	e0bffc17 	ldw	r2,-16(fp)
 400b40c:	e0bff915 	stw	r2,-28(fp)
 400b410:	e0bff917 	ldw	r2,-28(fp)
 400b414:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400b418:	008010c4 	movi	r2,67
 400b41c:	e0bfff15 	stw	r2,-4(fp)
 400b420:	00005006 	br	400b564 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 400b424:	e0bffd17 	ldw	r2,-12(fp)
 400b428:	10800c03 	ldbu	r2,48(r2)
 400b42c:	10803fcc 	andi	r2,r2,255
 400b430:	1080020c 	andi	r2,r2,8
 400b434:	1005003a 	cmpeq	r2,r2,zero
 400b438:	1000441e 	bne	r2,zero,400b54c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 400b43c:	e0bffd17 	ldw	r2,-12(fp)
 400b440:	10c00c03 	ldbu	r3,48(r2)
 400b444:	00bffdc4 	movi	r2,-9
 400b448:	1884703a 	and	r2,r3,r2
 400b44c:	1007883a 	mov	r3,r2
 400b450:	e0bffd17 	ldw	r2,-12(fp)
 400b454:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 400b458:	e0bffd17 	ldw	r2,-12(fp)
 400b45c:	10800c03 	ldbu	r2,48(r2)
 400b460:	10803fcc 	andi	r2,r2,255
 400b464:	1004c03a 	cmpne	r2,r2,zero
 400b468:	1000321e 	bne	r2,zero,400b534 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 400b46c:	e0bffd17 	ldw	r2,-12(fp)
 400b470:	10800b8b 	ldhu	r2,46(r2)
 400b474:	10bfffcc 	andi	r2,r2,65535
 400b478:	1004c03a 	cmpne	r2,r2,zero
 400b47c:	1000281e 	bne	r2,zero,400b520 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 400b480:	e0bffd17 	ldw	r2,-12(fp)
 400b484:	10c00d83 	ldbu	r3,54(r2)
 400b488:	008100b4 	movhi	r2,1026
 400b48c:	10a20004 	addi	r2,r2,-30720
 400b490:	10800003 	ldbu	r2,0(r2)
 400b494:	1884b03a 	or	r2,r3,r2
 400b498:	1007883a 	mov	r3,r2
 400b49c:	008100b4 	movhi	r2,1026
 400b4a0:	10a20004 	addi	r2,r2,-30720
 400b4a4:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400b4a8:	e0bffd17 	ldw	r2,-12(fp)
 400b4ac:	10800d03 	ldbu	r2,52(r2)
 400b4b0:	11003fcc 	andi	r4,r2,255
 400b4b4:	e0bffd17 	ldw	r2,-12(fp)
 400b4b8:	10800d03 	ldbu	r2,52(r2)
 400b4bc:	10c03fcc 	andi	r3,r2,255
 400b4c0:	008100b4 	movhi	r2,1026
 400b4c4:	10a20044 	addi	r2,r2,-30719
 400b4c8:	10c5883a 	add	r2,r2,r3
 400b4cc:	10c00003 	ldbu	r3,0(r2)
 400b4d0:	e0bffd17 	ldw	r2,-12(fp)
 400b4d4:	10800d43 	ldbu	r2,53(r2)
 400b4d8:	1884b03a 	or	r2,r3,r2
 400b4dc:	1007883a 	mov	r3,r2
 400b4e0:	008100b4 	movhi	r2,1026
 400b4e4:	10a20044 	addi	r2,r2,-30719
 400b4e8:	1105883a 	add	r2,r2,r4
 400b4ec:	10c00005 	stb	r3,0(r2)
 400b4f0:	e0bffc17 	ldw	r2,-16(fp)
 400b4f4:	e0bff815 	stw	r2,-32(fp)
 400b4f8:	e0bff817 	ldw	r2,-32(fp)
 400b4fc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 400b500:	008100b4 	movhi	r2,1026
 400b504:	10a1f444 	addi	r2,r2,-30767
 400b508:	10800003 	ldbu	r2,0(r2)
 400b50c:	10803fcc 	andi	r2,r2,255
 400b510:	10800058 	cmpnei	r2,r2,1
 400b514:	10000b1e 	bne	r2,zero,400b544 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 400b518:	40057540 	call	4005754 <OS_Sched>
 400b51c:	00000906 	br	400b544 <OSTaskResume+0x1e0>
 400b520:	e0bffc17 	ldw	r2,-16(fp)
 400b524:	e0bff715 	stw	r2,-36(fp)
 400b528:	e0bff717 	ldw	r2,-36(fp)
 400b52c:	1001703a 	wrctl	status,r2
 400b530:	00000406 	br	400b544 <OSTaskResume+0x1e0>
 400b534:	e0bffc17 	ldw	r2,-16(fp)
 400b538:	e0bff615 	stw	r2,-40(fp)
 400b53c:	e0bff617 	ldw	r2,-40(fp)
 400b540:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 400b544:	e03fff15 	stw	zero,-4(fp)
 400b548:	00000606 	br	400b564 <OSTaskResume+0x200>
 400b54c:	e0bffc17 	ldw	r2,-16(fp)
 400b550:	e0bff515 	stw	r2,-44(fp)
 400b554:	e0bff517 	ldw	r2,-44(fp)
 400b558:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 400b55c:	00801104 	movi	r2,68
 400b560:	e0bfff15 	stw	r2,-4(fp)
 400b564:	e0bfff17 	ldw	r2,-4(fp)
}
 400b568:	e037883a 	mov	sp,fp
 400b56c:	dfc00117 	ldw	ra,4(sp)
 400b570:	df000017 	ldw	fp,0(sp)
 400b574:	dec00204 	addi	sp,sp,8
 400b578:	f800283a 	ret

0400b57c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 400b57c:	defff204 	addi	sp,sp,-56
 400b580:	df000d15 	stw	fp,52(sp)
 400b584:	df000d04 	addi	fp,sp,52
 400b588:	e17ffe15 	stw	r5,-8(fp)
 400b58c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400b590:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 400b594:	e0bffd03 	ldbu	r2,-12(fp)
 400b598:	10801030 	cmpltui	r2,r2,64
 400b59c:	1000061e 	bne	r2,zero,400b5b8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 400b5a0:	e0bffd03 	ldbu	r2,-12(fp)
 400b5a4:	10803fe0 	cmpeqi	r2,r2,255
 400b5a8:	1000031e 	bne	r2,zero,400b5b8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 400b5ac:	00800a84 	movi	r2,42
 400b5b0:	e0bfff15 	stw	r2,-4(fp)
 400b5b4:	00006b06 	br	400b764 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 400b5b8:	e0bffe17 	ldw	r2,-8(fp)
 400b5bc:	1004c03a 	cmpne	r2,r2,zero
 400b5c0:	1000031e 	bne	r2,zero,400b5d0 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 400b5c4:	00800244 	movi	r2,9
 400b5c8:	e0bfff15 	stw	r2,-4(fp)
 400b5cc:	00006506 	br	400b764 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 400b5d0:	e0bffe17 	ldw	r2,-8(fp)
 400b5d4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 400b5d8:	e0bffe17 	ldw	r2,-8(fp)
 400b5dc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b5e0:	0005303a 	rdctl	r2,status
 400b5e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b5e8:	e0fff717 	ldw	r3,-36(fp)
 400b5ec:	00bfff84 	movi	r2,-2
 400b5f0:	1884703a 	and	r2,r3,r2
 400b5f4:	1001703a 	wrctl	status,r2
  
  return context;
 400b5f8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 400b5fc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 400b600:	e0bffd03 	ldbu	r2,-12(fp)
 400b604:	10803fd8 	cmpnei	r2,r2,255
 400b608:	1000051e 	bne	r2,zero,400b620 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 400b60c:	008100b4 	movhi	r2,1026
 400b610:	10a20504 	addi	r2,r2,-30700
 400b614:	10800017 	ldw	r2,0(r2)
 400b618:	10800c83 	ldbu	r2,50(r2)
 400b61c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400b620:	e0bffd03 	ldbu	r2,-12(fp)
 400b624:	00c100b4 	movhi	r3,1026
 400b628:	18ceef04 	addi	r3,r3,15292
 400b62c:	1085883a 	add	r2,r2,r2
 400b630:	1085883a 	add	r2,r2,r2
 400b634:	10c5883a 	add	r2,r2,r3
 400b638:	10800017 	ldw	r2,0(r2)
 400b63c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 400b640:	e0bffc17 	ldw	r2,-16(fp)
 400b644:	1004c03a 	cmpne	r2,r2,zero
 400b648:	1000071e 	bne	r2,zero,400b668 <OSTaskStkChk+0xec>
 400b64c:	e0bff817 	ldw	r2,-32(fp)
 400b650:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b654:	e0bff617 	ldw	r2,-40(fp)
 400b658:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400b65c:	008010c4 	movi	r2,67
 400b660:	e0bfff15 	stw	r2,-4(fp)
 400b664:	00003f06 	br	400b764 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 400b668:	e0bffc17 	ldw	r2,-16(fp)
 400b66c:	10800058 	cmpnei	r2,r2,1
 400b670:	1000071e 	bne	r2,zero,400b690 <OSTaskStkChk+0x114>
 400b674:	e0bff817 	ldw	r2,-32(fp)
 400b678:	e0bff515 	stw	r2,-44(fp)
 400b67c:	e0bff517 	ldw	r2,-44(fp)
 400b680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400b684:	008010c4 	movi	r2,67
 400b688:	e0bfff15 	stw	r2,-4(fp)
 400b68c:	00003506 	br	400b764 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 400b690:	e0bffc17 	ldw	r2,-16(fp)
 400b694:	1080040b 	ldhu	r2,16(r2)
 400b698:	10bfffcc 	andi	r2,r2,65535
 400b69c:	1080004c 	andi	r2,r2,1
 400b6a0:	1004c03a 	cmpne	r2,r2,zero
 400b6a4:	1000071e 	bne	r2,zero,400b6c4 <OSTaskStkChk+0x148>
 400b6a8:	e0bff817 	ldw	r2,-32(fp)
 400b6ac:	e0bff415 	stw	r2,-48(fp)
 400b6b0:	e0bff417 	ldw	r2,-48(fp)
 400b6b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 400b6b8:	00801144 	movi	r2,69
 400b6bc:	e0bfff15 	stw	r2,-4(fp)
 400b6c0:	00002806 	br	400b764 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 400b6c4:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 400b6c8:	e0bffc17 	ldw	r2,-16(fp)
 400b6cc:	10800317 	ldw	r2,12(r2)
 400b6d0:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 400b6d4:	e0bffc17 	ldw	r2,-16(fp)
 400b6d8:	10800217 	ldw	r2,8(r2)
 400b6dc:	e0bffb15 	stw	r2,-20(fp)
 400b6e0:	e0bff817 	ldw	r2,-32(fp)
 400b6e4:	e0bff315 	stw	r2,-52(fp)
 400b6e8:	e0bff317 	ldw	r2,-52(fp)
 400b6ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 400b6f0:	00000306 	br	400b700 <OSTaskStkChk+0x184>
        nfree++;
 400b6f4:	e0bffa17 	ldw	r2,-24(fp)
 400b6f8:	10800044 	addi	r2,r2,1
 400b6fc:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 400b700:	e0bffb17 	ldw	r2,-20(fp)
 400b704:	10800017 	ldw	r2,0(r2)
 400b708:	1005003a 	cmpeq	r2,r2,zero
 400b70c:	1007883a 	mov	r3,r2
 400b710:	e0bffb17 	ldw	r2,-20(fp)
 400b714:	10800104 	addi	r2,r2,4
 400b718:	e0bffb15 	stw	r2,-20(fp)
 400b71c:	18803fcc 	andi	r2,r3,255
 400b720:	1004c03a 	cmpne	r2,r2,zero
 400b724:	103ff31e 	bne	r2,zero,400b6f4 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 400b728:	e0bffa17 	ldw	r2,-24(fp)
 400b72c:	1085883a 	add	r2,r2,r2
 400b730:	1085883a 	add	r2,r2,r2
 400b734:	1007883a 	mov	r3,r2
 400b738:	e0bffe17 	ldw	r2,-8(fp)
 400b73c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 400b740:	e0fff917 	ldw	r3,-28(fp)
 400b744:	e0bffa17 	ldw	r2,-24(fp)
 400b748:	1885c83a 	sub	r2,r3,r2
 400b74c:	1085883a 	add	r2,r2,r2
 400b750:	1085883a 	add	r2,r2,r2
 400b754:	1007883a 	mov	r3,r2
 400b758:	e0bffe17 	ldw	r2,-8(fp)
 400b75c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 400b760:	e03fff15 	stw	zero,-4(fp)
 400b764:	e0bfff17 	ldw	r2,-4(fp)
}
 400b768:	e037883a 	mov	sp,fp
 400b76c:	df000017 	ldw	fp,0(sp)
 400b770:	dec00104 	addi	sp,sp,4
 400b774:	f800283a 	ret

0400b778 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 400b778:	defff404 	addi	sp,sp,-48
 400b77c:	dfc00b15 	stw	ra,44(sp)
 400b780:	df000a15 	stw	fp,40(sp)
 400b784:	df000a04 	addi	fp,sp,40
 400b788:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400b78c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 400b790:	e0bffe03 	ldbu	r2,-8(fp)
 400b794:	10800fd8 	cmpnei	r2,r2,63
 400b798:	1000031e 	bne	r2,zero,400b7a8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 400b79c:	008011c4 	movi	r2,71
 400b7a0:	e0bfff15 	stw	r2,-4(fp)
 400b7a4:	00007906 	br	400b98c <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 400b7a8:	e0bffe03 	ldbu	r2,-8(fp)
 400b7ac:	10800ff0 	cmpltui	r2,r2,63
 400b7b0:	1000061e 	bne	r2,zero,400b7cc <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 400b7b4:	e0bffe03 	ldbu	r2,-8(fp)
 400b7b8:	10803fe0 	cmpeqi	r2,r2,255
 400b7bc:	1000031e 	bne	r2,zero,400b7cc <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 400b7c0:	00800a84 	movi	r2,42
 400b7c4:	e0bfff15 	stw	r2,-4(fp)
 400b7c8:	00007006 	br	400b98c <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b7cc:	0005303a 	rdctl	r2,status
 400b7d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b7d4:	e0fff917 	ldw	r3,-28(fp)
 400b7d8:	00bfff84 	movi	r2,-2
 400b7dc:	1884703a 	and	r2,r3,r2
 400b7e0:	1001703a 	wrctl	status,r2
  
  return context;
 400b7e4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 400b7e8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 400b7ec:	e0bffe03 	ldbu	r2,-8(fp)
 400b7f0:	10803fd8 	cmpnei	r2,r2,255
 400b7f4:	1000081e 	bne	r2,zero,400b818 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 400b7f8:	008100b4 	movhi	r2,1026
 400b7fc:	10a20504 	addi	r2,r2,-30700
 400b800:	10800017 	ldw	r2,0(r2)
 400b804:	10800c83 	ldbu	r2,50(r2)
 400b808:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 400b80c:	00800044 	movi	r2,1
 400b810:	e0bffd05 	stb	r2,-12(fp)
 400b814:	00000b06 	br	400b844 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 400b818:	008100b4 	movhi	r2,1026
 400b81c:	10a20504 	addi	r2,r2,-30700
 400b820:	10800017 	ldw	r2,0(r2)
 400b824:	10800c83 	ldbu	r2,50(r2)
 400b828:	10c03fcc 	andi	r3,r2,255
 400b82c:	e0bffe03 	ldbu	r2,-8(fp)
 400b830:	1880031e 	bne	r3,r2,400b840 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 400b834:	00800044 	movi	r2,1
 400b838:	e0bffd05 	stb	r2,-12(fp)
 400b83c:	00000106 	br	400b844 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 400b840:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400b844:	e0bffe03 	ldbu	r2,-8(fp)
 400b848:	00c100b4 	movhi	r3,1026
 400b84c:	18ceef04 	addi	r3,r3,15292
 400b850:	1085883a 	add	r2,r2,r2
 400b854:	1085883a 	add	r2,r2,r2
 400b858:	10c5883a 	add	r2,r2,r3
 400b85c:	10800017 	ldw	r2,0(r2)
 400b860:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 400b864:	e0bffc17 	ldw	r2,-16(fp)
 400b868:	1004c03a 	cmpne	r2,r2,zero
 400b86c:	1000071e 	bne	r2,zero,400b88c <OSTaskSuspend+0x114>
 400b870:	e0bffa17 	ldw	r2,-24(fp)
 400b874:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b878:	e0bff817 	ldw	r2,-32(fp)
 400b87c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 400b880:	00801204 	movi	r2,72
 400b884:	e0bfff15 	stw	r2,-4(fp)
 400b888:	00004006 	br	400b98c <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 400b88c:	e0bffc17 	ldw	r2,-16(fp)
 400b890:	10800058 	cmpnei	r2,r2,1
 400b894:	1000071e 	bne	r2,zero,400b8b4 <OSTaskSuspend+0x13c>
 400b898:	e0bffa17 	ldw	r2,-24(fp)
 400b89c:	e0bff715 	stw	r2,-36(fp)
 400b8a0:	e0bff717 	ldw	r2,-36(fp)
 400b8a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400b8a8:	008010c4 	movi	r2,67
 400b8ac:	e0bfff15 	stw	r2,-4(fp)
 400b8b0:	00003606 	br	400b98c <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 400b8b4:	e0bffc17 	ldw	r2,-16(fp)
 400b8b8:	10800d03 	ldbu	r2,52(r2)
 400b8bc:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 400b8c0:	e13ffb03 	ldbu	r4,-20(fp)
 400b8c4:	e0fffb03 	ldbu	r3,-20(fp)
 400b8c8:	008100b4 	movhi	r2,1026
 400b8cc:	10a20044 	addi	r2,r2,-30719
 400b8d0:	10c5883a 	add	r2,r2,r3
 400b8d4:	10800003 	ldbu	r2,0(r2)
 400b8d8:	1007883a 	mov	r3,r2
 400b8dc:	e0bffc17 	ldw	r2,-16(fp)
 400b8e0:	10800d43 	ldbu	r2,53(r2)
 400b8e4:	0084303a 	nor	r2,zero,r2
 400b8e8:	1884703a 	and	r2,r3,r2
 400b8ec:	1007883a 	mov	r3,r2
 400b8f0:	008100b4 	movhi	r2,1026
 400b8f4:	10a20044 	addi	r2,r2,-30719
 400b8f8:	1105883a 	add	r2,r2,r4
 400b8fc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 400b900:	e0fffb03 	ldbu	r3,-20(fp)
 400b904:	008100b4 	movhi	r2,1026
 400b908:	10a20044 	addi	r2,r2,-30719
 400b90c:	10c5883a 	add	r2,r2,r3
 400b910:	10800003 	ldbu	r2,0(r2)
 400b914:	10803fcc 	andi	r2,r2,255
 400b918:	1004c03a 	cmpne	r2,r2,zero
 400b91c:	10000c1e 	bne	r2,zero,400b950 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 400b920:	e0bffc17 	ldw	r2,-16(fp)
 400b924:	10800d83 	ldbu	r2,54(r2)
 400b928:	0084303a 	nor	r2,zero,r2
 400b92c:	1007883a 	mov	r3,r2
 400b930:	008100b4 	movhi	r2,1026
 400b934:	10a20004 	addi	r2,r2,-30720
 400b938:	10800003 	ldbu	r2,0(r2)
 400b93c:	1884703a 	and	r2,r3,r2
 400b940:	1007883a 	mov	r3,r2
 400b944:	008100b4 	movhi	r2,1026
 400b948:	10a20004 	addi	r2,r2,-30720
 400b94c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 400b950:	e0bffc17 	ldw	r2,-16(fp)
 400b954:	10800c03 	ldbu	r2,48(r2)
 400b958:	10800214 	ori	r2,r2,8
 400b95c:	1007883a 	mov	r3,r2
 400b960:	e0bffc17 	ldw	r2,-16(fp)
 400b964:	10c00c05 	stb	r3,48(r2)
 400b968:	e0bffa17 	ldw	r2,-24(fp)
 400b96c:	e0bff615 	stw	r2,-40(fp)
 400b970:	e0bff617 	ldw	r2,-40(fp)
 400b974:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 400b978:	e0bffd03 	ldbu	r2,-12(fp)
 400b97c:	10800058 	cmpnei	r2,r2,1
 400b980:	1000011e 	bne	r2,zero,400b988 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 400b984:	40057540 	call	4005754 <OS_Sched>
    }
    return (OS_ERR_NONE);
 400b988:	e03fff15 	stw	zero,-4(fp)
 400b98c:	e0bfff17 	ldw	r2,-4(fp)
}
 400b990:	e037883a 	mov	sp,fp
 400b994:	dfc00117 	ldw	ra,4(sp)
 400b998:	df000017 	ldw	fp,0(sp)
 400b99c:	dec00204 	addi	sp,sp,8
 400b9a0:	f800283a 	ret

0400b9a4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 400b9a4:	defff504 	addi	sp,sp,-44
 400b9a8:	dfc00a15 	stw	ra,40(sp)
 400b9ac:	df000915 	stw	fp,36(sp)
 400b9b0:	df000904 	addi	fp,sp,36
 400b9b4:	e17ffe15 	stw	r5,-8(fp)
 400b9b8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400b9bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 400b9c0:	e0bffd03 	ldbu	r2,-12(fp)
 400b9c4:	10801030 	cmpltui	r2,r2,64
 400b9c8:	1000061e 	bne	r2,zero,400b9e4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 400b9cc:	e0bffd03 	ldbu	r2,-12(fp)
 400b9d0:	10803fe0 	cmpeqi	r2,r2,255
 400b9d4:	1000031e 	bne	r2,zero,400b9e4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 400b9d8:	00800a84 	movi	r2,42
 400b9dc:	e0bfff15 	stw	r2,-4(fp)
 400b9e0:	00003b06 	br	400bad0 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 400b9e4:	e0bffe17 	ldw	r2,-8(fp)
 400b9e8:	1004c03a 	cmpne	r2,r2,zero
 400b9ec:	1000031e 	bne	r2,zero,400b9fc <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 400b9f0:	00800244 	movi	r2,9
 400b9f4:	e0bfff15 	stw	r2,-4(fp)
 400b9f8:	00003506 	br	400bad0 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b9fc:	0005303a 	rdctl	r2,status
 400ba00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ba04:	e0fffa17 	ldw	r3,-24(fp)
 400ba08:	00bfff84 	movi	r2,-2
 400ba0c:	1884703a 	and	r2,r3,r2
 400ba10:	1001703a 	wrctl	status,r2
  
  return context;
 400ba14:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400ba18:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 400ba1c:	e0bffd03 	ldbu	r2,-12(fp)
 400ba20:	10803fd8 	cmpnei	r2,r2,255
 400ba24:	1000051e 	bne	r2,zero,400ba3c <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 400ba28:	008100b4 	movhi	r2,1026
 400ba2c:	10a20504 	addi	r2,r2,-30700
 400ba30:	10800017 	ldw	r2,0(r2)
 400ba34:	10800c83 	ldbu	r2,50(r2)
 400ba38:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400ba3c:	e0bffd03 	ldbu	r2,-12(fp)
 400ba40:	00c100b4 	movhi	r3,1026
 400ba44:	18ceef04 	addi	r3,r3,15292
 400ba48:	1085883a 	add	r2,r2,r2
 400ba4c:	1085883a 	add	r2,r2,r2
 400ba50:	10c5883a 	add	r2,r2,r3
 400ba54:	10800017 	ldw	r2,0(r2)
 400ba58:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 400ba5c:	e0bffc17 	ldw	r2,-16(fp)
 400ba60:	1004c03a 	cmpne	r2,r2,zero
 400ba64:	1000071e 	bne	r2,zero,400ba84 <OSTaskQuery+0xe0>
 400ba68:	e0bffb17 	ldw	r2,-20(fp)
 400ba6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ba70:	e0bff917 	ldw	r2,-28(fp)
 400ba74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 400ba78:	00800a44 	movi	r2,41
 400ba7c:	e0bfff15 	stw	r2,-4(fp)
 400ba80:	00001306 	br	400bad0 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 400ba84:	e0bffc17 	ldw	r2,-16(fp)
 400ba88:	10800058 	cmpnei	r2,r2,1
 400ba8c:	1000071e 	bne	r2,zero,400baac <OSTaskQuery+0x108>
 400ba90:	e0bffb17 	ldw	r2,-20(fp)
 400ba94:	e0bff815 	stw	r2,-32(fp)
 400ba98:	e0bff817 	ldw	r2,-32(fp)
 400ba9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400baa0:	008010c4 	movi	r2,67
 400baa4:	e0bfff15 	stw	r2,-4(fp)
 400baa8:	00000906 	br	400bad0 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 400baac:	e13ffe17 	ldw	r4,-8(fp)
 400bab0:	e17ffc17 	ldw	r5,-16(fp)
 400bab4:	01801d04 	movi	r6,116
 400bab8:	40056e80 	call	40056e8 <OS_MemCopy>
 400babc:	e0bffb17 	ldw	r2,-20(fp)
 400bac0:	e0bff715 	stw	r2,-36(fp)
 400bac4:	e0bff717 	ldw	r2,-36(fp)
 400bac8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400bacc:	e03fff15 	stw	zero,-4(fp)
 400bad0:	e0bfff17 	ldw	r2,-4(fp)
}
 400bad4:	e037883a 	mov	sp,fp
 400bad8:	dfc00117 	ldw	ra,4(sp)
 400badc:	df000017 	ldw	fp,0(sp)
 400bae0:	dec00204 	addi	sp,sp,8
 400bae4:	f800283a 	ret

0400bae8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 400bae8:	defffc04 	addi	sp,sp,-16
 400baec:	df000315 	stw	fp,12(sp)
 400baf0:	df000304 	addi	fp,sp,12
 400baf4:	e13ffd15 	stw	r4,-12(fp)
 400baf8:	e17ffe15 	stw	r5,-8(fp)
 400bafc:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 400bb00:	e0bfff0b 	ldhu	r2,-4(fp)
 400bb04:	1080004c 	andi	r2,r2,1
 400bb08:	10803fcc 	andi	r2,r2,255
 400bb0c:	1005003a 	cmpeq	r2,r2,zero
 400bb10:	1000101e 	bne	r2,zero,400bb54 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 400bb14:	e0bfff0b 	ldhu	r2,-4(fp)
 400bb18:	1080008c 	andi	r2,r2,2
 400bb1c:	1005003a 	cmpeq	r2,r2,zero
 400bb20:	10000c1e 	bne	r2,zero,400bb54 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 400bb24:	00000806 	br	400bb48 <OS_TaskStkClr+0x60>
                size--;
 400bb28:	e0bffe17 	ldw	r2,-8(fp)
 400bb2c:	10bfffc4 	addi	r2,r2,-1
 400bb30:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 400bb34:	e0bffd17 	ldw	r2,-12(fp)
 400bb38:	10000015 	stw	zero,0(r2)
 400bb3c:	e0bffd17 	ldw	r2,-12(fp)
 400bb40:	10800104 	addi	r2,r2,4
 400bb44:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 400bb48:	e0bffe17 	ldw	r2,-8(fp)
 400bb4c:	1004c03a 	cmpne	r2,r2,zero
 400bb50:	103ff51e 	bne	r2,zero,400bb28 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 400bb54:	e037883a 	mov	sp,fp
 400bb58:	df000017 	ldw	fp,0(sp)
 400bb5c:	dec00104 	addi	sp,sp,4
 400bb60:	f800283a 	ret

0400bb64 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 400bb64:	defff904 	addi	sp,sp,-28
 400bb68:	dfc00615 	stw	ra,24(sp)
 400bb6c:	df000515 	stw	fp,20(sp)
 400bb70:	df000504 	addi	fp,sp,20
 400bb74:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400bb78:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400bb7c:	008100b4 	movhi	r2,1026
 400bb80:	10a20404 	addi	r2,r2,-30704
 400bb84:	10800003 	ldbu	r2,0(r2)
 400bb88:	10803fcc 	andi	r2,r2,255
 400bb8c:	1004c03a 	cmpne	r2,r2,zero
 400bb90:	1000421e 	bne	r2,zero,400bc9c <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 400bb94:	e0bfff0b 	ldhu	r2,-4(fp)
 400bb98:	1005003a 	cmpeq	r2,r2,zero
 400bb9c:	10003f1e 	bne	r2,zero,400bc9c <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400bba0:	0005303a 	rdctl	r2,status
 400bba4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400bba8:	e0fffc17 	ldw	r3,-16(fp)
 400bbac:	00bfff84 	movi	r2,-2
 400bbb0:	1884703a 	and	r2,r3,r2
 400bbb4:	1001703a 	wrctl	status,r2
  
  return context;
 400bbb8:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 400bbbc:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 400bbc0:	008100b4 	movhi	r2,1026
 400bbc4:	10a20504 	addi	r2,r2,-30700
 400bbc8:	10800017 	ldw	r2,0(r2)
 400bbcc:	10800d03 	ldbu	r2,52(r2)
 400bbd0:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 400bbd4:	e13ffe03 	ldbu	r4,-8(fp)
 400bbd8:	e0fffe03 	ldbu	r3,-8(fp)
 400bbdc:	008100b4 	movhi	r2,1026
 400bbe0:	10a20044 	addi	r2,r2,-30719
 400bbe4:	10c5883a 	add	r2,r2,r3
 400bbe8:	10800003 	ldbu	r2,0(r2)
 400bbec:	1007883a 	mov	r3,r2
 400bbf0:	008100b4 	movhi	r2,1026
 400bbf4:	10a20504 	addi	r2,r2,-30700
 400bbf8:	10800017 	ldw	r2,0(r2)
 400bbfc:	10800d43 	ldbu	r2,53(r2)
 400bc00:	0084303a 	nor	r2,zero,r2
 400bc04:	1884703a 	and	r2,r3,r2
 400bc08:	1007883a 	mov	r3,r2
 400bc0c:	008100b4 	movhi	r2,1026
 400bc10:	10a20044 	addi	r2,r2,-30719
 400bc14:	1105883a 	add	r2,r2,r4
 400bc18:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 400bc1c:	e0fffe03 	ldbu	r3,-8(fp)
 400bc20:	008100b4 	movhi	r2,1026
 400bc24:	10a20044 	addi	r2,r2,-30719
 400bc28:	10c5883a 	add	r2,r2,r3
 400bc2c:	10800003 	ldbu	r2,0(r2)
 400bc30:	10803fcc 	andi	r2,r2,255
 400bc34:	1004c03a 	cmpne	r2,r2,zero
 400bc38:	10000e1e 	bne	r2,zero,400bc74 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 400bc3c:	008100b4 	movhi	r2,1026
 400bc40:	10a20504 	addi	r2,r2,-30700
 400bc44:	10800017 	ldw	r2,0(r2)
 400bc48:	10800d83 	ldbu	r2,54(r2)
 400bc4c:	0084303a 	nor	r2,zero,r2
 400bc50:	1007883a 	mov	r3,r2
 400bc54:	008100b4 	movhi	r2,1026
 400bc58:	10a20004 	addi	r2,r2,-30720
 400bc5c:	10800003 	ldbu	r2,0(r2)
 400bc60:	1884703a 	and	r2,r3,r2
 400bc64:	1007883a 	mov	r3,r2
 400bc68:	008100b4 	movhi	r2,1026
 400bc6c:	10a20004 	addi	r2,r2,-30720
 400bc70:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 400bc74:	008100b4 	movhi	r2,1026
 400bc78:	10a20504 	addi	r2,r2,-30700
 400bc7c:	10c00017 	ldw	r3,0(r2)
 400bc80:	e0bfff0b 	ldhu	r2,-4(fp)
 400bc84:	18800b8d 	sth	r2,46(r3)
 400bc88:	e0bffd17 	ldw	r2,-12(fp)
 400bc8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bc90:	e0bffb17 	ldw	r2,-20(fp)
 400bc94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 400bc98:	40057540 	call	4005754 <OS_Sched>
    }
}
 400bc9c:	e037883a 	mov	sp,fp
 400bca0:	dfc00117 	ldw	ra,4(sp)
 400bca4:	df000017 	ldw	fp,0(sp)
 400bca8:	dec00204 	addi	sp,sp,8
 400bcac:	f800283a 	ret

0400bcb0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 400bcb0:	defff604 	addi	sp,sp,-40
 400bcb4:	dfc00915 	stw	ra,36(sp)
 400bcb8:	df000815 	stw	fp,32(sp)
 400bcbc:	dc000715 	stw	r16,28(sp)
 400bcc0:	df000704 	addi	fp,sp,28
 400bcc4:	e13ffb05 	stb	r4,-20(fp)
 400bcc8:	e17ffc05 	stb	r5,-16(fp)
 400bccc:	e1bffd05 	stb	r6,-12(fp)
 400bcd0:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400bcd4:	008100b4 	movhi	r2,1026
 400bcd8:	10a20404 	addi	r2,r2,-30704
 400bcdc:	10800003 	ldbu	r2,0(r2)
 400bce0:	10803fcc 	andi	r2,r2,255
 400bce4:	1005003a 	cmpeq	r2,r2,zero
 400bce8:	1000031e 	bne	r2,zero,400bcf8 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 400bcec:	00801544 	movi	r2,85
 400bcf0:	e0bfff15 	stw	r2,-4(fp)
 400bcf4:	00004506 	br	400be0c <OSTimeDlyHMSM+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 400bcf8:	e0bffb03 	ldbu	r2,-20(fp)
 400bcfc:	1004c03a 	cmpne	r2,r2,zero
 400bd00:	10000c1e 	bne	r2,zero,400bd34 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 400bd04:	e0bffc03 	ldbu	r2,-16(fp)
 400bd08:	1004c03a 	cmpne	r2,r2,zero
 400bd0c:	1000091e 	bne	r2,zero,400bd34 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 400bd10:	e0bffd03 	ldbu	r2,-12(fp)
 400bd14:	1004c03a 	cmpne	r2,r2,zero
 400bd18:	1000061e 	bne	r2,zero,400bd34 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 400bd1c:	e0bffe0b 	ldhu	r2,-8(fp)
 400bd20:	1004c03a 	cmpne	r2,r2,zero
 400bd24:	1000031e 	bne	r2,zero,400bd34 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 400bd28:	00801504 	movi	r2,84
 400bd2c:	e0bfff15 	stw	r2,-4(fp)
 400bd30:	00003606 	br	400be0c <OSTimeDlyHMSM+0x15c>
                }
            }
        }
    }
    if (minutes > 59) {
 400bd34:	e0bffc03 	ldbu	r2,-16(fp)
 400bd38:	10800f30 	cmpltui	r2,r2,60
 400bd3c:	1000031e 	bne	r2,zero,400bd4c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 400bd40:	00801444 	movi	r2,81
 400bd44:	e0bfff15 	stw	r2,-4(fp)
 400bd48:	00003006 	br	400be0c <OSTimeDlyHMSM+0x15c>
    }
    if (seconds > 59) {
 400bd4c:	e0bffd03 	ldbu	r2,-12(fp)
 400bd50:	10800f30 	cmpltui	r2,r2,60
 400bd54:	1000031e 	bne	r2,zero,400bd64 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 400bd58:	00801484 	movi	r2,82
 400bd5c:	e0bfff15 	stw	r2,-4(fp)
 400bd60:	00002a06 	br	400be0c <OSTimeDlyHMSM+0x15c>
    }
    if (ms > 999) {
 400bd64:	e0bffe0b 	ldhu	r2,-8(fp)
 400bd68:	1080fa30 	cmpltui	r2,r2,1000
 400bd6c:	1000031e 	bne	r2,zero,400bd7c <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 400bd70:	008014c4 	movi	r2,83
 400bd74:	e0bfff15 	stw	r2,-4(fp)
 400bd78:	00002406 	br	400be0c <OSTimeDlyHMSM+0x15c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 400bd7c:	e0bffb03 	ldbu	r2,-20(fp)
 400bd80:	10c38424 	muli	r3,r2,3600
 400bd84:	e0bffc03 	ldbu	r2,-16(fp)
 400bd88:	10800f24 	muli	r2,r2,60
 400bd8c:	1887883a 	add	r3,r3,r2
 400bd90:	e0bffd03 	ldbu	r2,-12(fp)
 400bd94:	1885883a 	add	r2,r3,r2
 400bd98:	14001924 	muli	r16,r2,100
 400bd9c:	e0bffe0b 	ldhu	r2,-8(fp)
 400bda0:	10801924 	muli	r2,r2,100
 400bda4:	11007d04 	addi	r4,r2,500
 400bda8:	0140fa04 	movi	r5,1000
 400bdac:	4015fbc0 	call	4015fbc <__udivsi3>
 400bdb0:	8085883a 	add	r2,r16,r2
 400bdb4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 400bdb8:	e0bffa17 	ldw	r2,-24(fp)
 400bdbc:	1004d43a 	srli	r2,r2,16
 400bdc0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 400bdc4:	e0bffa17 	ldw	r2,-24(fp)
 400bdc8:	10bfffcc 	andi	r2,r2,65535
 400bdcc:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 400bdd0:	e0bffa17 	ldw	r2,-24(fp)
 400bdd4:	113fffcc 	andi	r4,r2,65535
 400bdd8:	400bb640 	call	400bb64 <OSTimeDly>
    while (loops > 0) {
 400bddc:	00000706 	br	400bdfc <OSTimeDlyHMSM+0x14c>
        OSTimeDly((INT16U)32768u);
 400bde0:	01200014 	movui	r4,32768
 400bde4:	400bb640 	call	400bb64 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 400bde8:	01200014 	movui	r4,32768
 400bdec:	400bb640 	call	400bb64 <OSTimeDly>
        loops--;
 400bdf0:	e0bff90b 	ldhu	r2,-28(fp)
 400bdf4:	10bfffc4 	addi	r2,r2,-1
 400bdf8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 400bdfc:	e0bff90b 	ldhu	r2,-28(fp)
 400be00:	1004c03a 	cmpne	r2,r2,zero
 400be04:	103ff61e 	bne	r2,zero,400bde0 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 400be08:	e03fff15 	stw	zero,-4(fp)
 400be0c:	e0bfff17 	ldw	r2,-4(fp)
}
 400be10:	e037883a 	mov	sp,fp
 400be14:	dfc00217 	ldw	ra,8(sp)
 400be18:	df000117 	ldw	fp,4(sp)
 400be1c:	dc000017 	ldw	r16,0(sp)
 400be20:	dec00304 	addi	sp,sp,12
 400be24:	f800283a 	ret

0400be28 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 400be28:	defff404 	addi	sp,sp,-48
 400be2c:	dfc00b15 	stw	ra,44(sp)
 400be30:	df000a15 	stw	fp,40(sp)
 400be34:	df000a04 	addi	fp,sp,40
 400be38:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400be3c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 400be40:	e0bffe03 	ldbu	r2,-8(fp)
 400be44:	10800ff0 	cmpltui	r2,r2,63
 400be48:	1000031e 	bne	r2,zero,400be58 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 400be4c:	00800a84 	movi	r2,42
 400be50:	e0bfff15 	stw	r2,-4(fp)
 400be54:	00007206 	br	400c020 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400be58:	0005303a 	rdctl	r2,status
 400be5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400be60:	e0fffb17 	ldw	r3,-20(fp)
 400be64:	00bfff84 	movi	r2,-2
 400be68:	1884703a 	and	r2,r3,r2
 400be6c:	1001703a 	wrctl	status,r2
  
  return context;
 400be70:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 400be74:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 400be78:	e0bffe03 	ldbu	r2,-8(fp)
 400be7c:	00c100b4 	movhi	r3,1026
 400be80:	18ceef04 	addi	r3,r3,15292
 400be84:	1085883a 	add	r2,r2,r2
 400be88:	1085883a 	add	r2,r2,r2
 400be8c:	10c5883a 	add	r2,r2,r3
 400be90:	10800017 	ldw	r2,0(r2)
 400be94:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 400be98:	e0bffd17 	ldw	r2,-12(fp)
 400be9c:	1004c03a 	cmpne	r2,r2,zero
 400bea0:	1000071e 	bne	r2,zero,400bec0 <OSTimeDlyResume+0x98>
 400bea4:	e0bffc17 	ldw	r2,-16(fp)
 400bea8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400beac:	e0bffa17 	ldw	r2,-24(fp)
 400beb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 400beb4:	008010c4 	movi	r2,67
 400beb8:	e0bfff15 	stw	r2,-4(fp)
 400bebc:	00005806 	br	400c020 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 400bec0:	e0bffd17 	ldw	r2,-12(fp)
 400bec4:	10800058 	cmpnei	r2,r2,1
 400bec8:	1000071e 	bne	r2,zero,400bee8 <OSTimeDlyResume+0xc0>
 400becc:	e0bffc17 	ldw	r2,-16(fp)
 400bed0:	e0bff915 	stw	r2,-28(fp)
 400bed4:	e0bff917 	ldw	r2,-28(fp)
 400bed8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 400bedc:	008010c4 	movi	r2,67
 400bee0:	e0bfff15 	stw	r2,-4(fp)
 400bee4:	00004e06 	br	400c020 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 400bee8:	e0bffd17 	ldw	r2,-12(fp)
 400beec:	10800b8b 	ldhu	r2,46(r2)
 400bef0:	10bfffcc 	andi	r2,r2,65535
 400bef4:	1004c03a 	cmpne	r2,r2,zero
 400bef8:	1000071e 	bne	r2,zero,400bf18 <OSTimeDlyResume+0xf0>
 400befc:	e0bffc17 	ldw	r2,-16(fp)
 400bf00:	e0bff815 	stw	r2,-32(fp)
 400bf04:	e0bff817 	ldw	r2,-32(fp)
 400bf08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 400bf0c:	00801404 	movi	r2,80
 400bf10:	e0bfff15 	stw	r2,-4(fp)
 400bf14:	00004206 	br	400c020 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 400bf18:	e0bffd17 	ldw	r2,-12(fp)
 400bf1c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 400bf20:	e0bffd17 	ldw	r2,-12(fp)
 400bf24:	10800c03 	ldbu	r2,48(r2)
 400bf28:	10803fcc 	andi	r2,r2,255
 400bf2c:	10800dcc 	andi	r2,r2,55
 400bf30:	1005003a 	cmpeq	r2,r2,zero
 400bf34:	10000b1e 	bne	r2,zero,400bf64 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 400bf38:	e0bffd17 	ldw	r2,-12(fp)
 400bf3c:	10c00c03 	ldbu	r3,48(r2)
 400bf40:	00bff204 	movi	r2,-56
 400bf44:	1884703a 	and	r2,r3,r2
 400bf48:	1007883a 	mov	r3,r2
 400bf4c:	e0bffd17 	ldw	r2,-12(fp)
 400bf50:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 400bf54:	e0fffd17 	ldw	r3,-12(fp)
 400bf58:	00800044 	movi	r2,1
 400bf5c:	18800c45 	stb	r2,49(r3)
 400bf60:	00000206 	br	400bf6c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 400bf64:	e0bffd17 	ldw	r2,-12(fp)
 400bf68:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 400bf6c:	e0bffd17 	ldw	r2,-12(fp)
 400bf70:	10800c03 	ldbu	r2,48(r2)
 400bf74:	10803fcc 	andi	r2,r2,255
 400bf78:	1080020c 	andi	r2,r2,8
 400bf7c:	1004c03a 	cmpne	r2,r2,zero
 400bf80:	1000221e 	bne	r2,zero,400c00c <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 400bf84:	e0bffd17 	ldw	r2,-12(fp)
 400bf88:	10c00d83 	ldbu	r3,54(r2)
 400bf8c:	008100b4 	movhi	r2,1026
 400bf90:	10a20004 	addi	r2,r2,-30720
 400bf94:	10800003 	ldbu	r2,0(r2)
 400bf98:	1884b03a 	or	r2,r3,r2
 400bf9c:	1007883a 	mov	r3,r2
 400bfa0:	008100b4 	movhi	r2,1026
 400bfa4:	10a20004 	addi	r2,r2,-30720
 400bfa8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400bfac:	e0bffd17 	ldw	r2,-12(fp)
 400bfb0:	10800d03 	ldbu	r2,52(r2)
 400bfb4:	11003fcc 	andi	r4,r2,255
 400bfb8:	e0bffd17 	ldw	r2,-12(fp)
 400bfbc:	10800d03 	ldbu	r2,52(r2)
 400bfc0:	10c03fcc 	andi	r3,r2,255
 400bfc4:	008100b4 	movhi	r2,1026
 400bfc8:	10a20044 	addi	r2,r2,-30719
 400bfcc:	10c5883a 	add	r2,r2,r3
 400bfd0:	10c00003 	ldbu	r3,0(r2)
 400bfd4:	e0bffd17 	ldw	r2,-12(fp)
 400bfd8:	10800d43 	ldbu	r2,53(r2)
 400bfdc:	1884b03a 	or	r2,r3,r2
 400bfe0:	1007883a 	mov	r3,r2
 400bfe4:	008100b4 	movhi	r2,1026
 400bfe8:	10a20044 	addi	r2,r2,-30719
 400bfec:	1105883a 	add	r2,r2,r4
 400bff0:	10c00005 	stb	r3,0(r2)
 400bff4:	e0bffc17 	ldw	r2,-16(fp)
 400bff8:	e0bff715 	stw	r2,-36(fp)
 400bffc:	e0bff717 	ldw	r2,-36(fp)
 400c000:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 400c004:	40057540 	call	4005754 <OS_Sched>
 400c008:	00000406 	br	400c01c <OSTimeDlyResume+0x1f4>
 400c00c:	e0bffc17 	ldw	r2,-16(fp)
 400c010:	e0bff615 	stw	r2,-40(fp)
 400c014:	e0bff617 	ldw	r2,-40(fp)
 400c018:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 400c01c:	e03fff15 	stw	zero,-4(fp)
 400c020:	e0bfff17 	ldw	r2,-4(fp)
}
 400c024:	e037883a 	mov	sp,fp
 400c028:	dfc00117 	ldw	ra,4(sp)
 400c02c:	df000017 	ldw	fp,0(sp)
 400c030:	dec00204 	addi	sp,sp,8
 400c034:	f800283a 	ret

0400c038 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 400c038:	defffb04 	addi	sp,sp,-20
 400c03c:	df000415 	stw	fp,16(sp)
 400c040:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400c044:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c048:	0005303a 	rdctl	r2,status
 400c04c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c050:	e0fffd17 	ldw	r3,-12(fp)
 400c054:	00bfff84 	movi	r2,-2
 400c058:	1884703a 	and	r2,r3,r2
 400c05c:	1001703a 	wrctl	status,r2
  
  return context;
 400c060:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 400c064:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 400c068:	008100b4 	movhi	r2,1026
 400c06c:	10a20604 	addi	r2,r2,-30696
 400c070:	10800017 	ldw	r2,0(r2)
 400c074:	e0bfff15 	stw	r2,-4(fp)
 400c078:	e0bffe17 	ldw	r2,-8(fp)
 400c07c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c080:	e0bffc17 	ldw	r2,-16(fp)
 400c084:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 400c088:	e0bfff17 	ldw	r2,-4(fp)
}
 400c08c:	e037883a 	mov	sp,fp
 400c090:	df000017 	ldw	fp,0(sp)
 400c094:	dec00104 	addi	sp,sp,4
 400c098:	f800283a 	ret

0400c09c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 400c09c:	defffb04 	addi	sp,sp,-20
 400c0a0:	df000415 	stw	fp,16(sp)
 400c0a4:	df000404 	addi	fp,sp,16
 400c0a8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400c0ac:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c0b0:	0005303a 	rdctl	r2,status
 400c0b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c0b8:	e0fffd17 	ldw	r3,-12(fp)
 400c0bc:	00bfff84 	movi	r2,-2
 400c0c0:	1884703a 	and	r2,r3,r2
 400c0c4:	1001703a 	wrctl	status,r2
  
  return context;
 400c0c8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 400c0cc:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 400c0d0:	00c100b4 	movhi	r3,1026
 400c0d4:	18e20604 	addi	r3,r3,-30696
 400c0d8:	e0bfff17 	ldw	r2,-4(fp)
 400c0dc:	18800015 	stw	r2,0(r3)
 400c0e0:	e0bffe17 	ldw	r2,-8(fp)
 400c0e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c0e8:	e0bffc17 	ldw	r2,-16(fp)
 400c0ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 400c0f0:	e037883a 	mov	sp,fp
 400c0f4:	df000017 	ldw	fp,0(sp)
 400c0f8:	dec00104 	addi	sp,sp,4
 400c0fc:	f800283a 	ret

0400c100 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400c100:	defffd04 	addi	sp,sp,-12
 400c104:	dfc00215 	stw	ra,8(sp)
 400c108:	df000115 	stw	fp,4(sp)
 400c10c:	df000104 	addi	fp,sp,4
 400c110:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
 400c114:	400ea340 	call	400ea34 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400c118:	00800044 	movi	r2,1
 400c11c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400c120:	e037883a 	mov	sp,fp
 400c124:	dfc00117 	ldw	ra,4(sp)
 400c128:	df000017 	ldw	fp,0(sp)
 400c12c:	dec00204 	addi	sp,sp,8
 400c130:	f800283a 	ret

0400c134 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400c134:	defffe04 	addi	sp,sp,-8
 400c138:	dfc00115 	stw	ra,4(sp)
 400c13c:	df000015 	stw	fp,0(sp)
 400c140:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( UCOSII_TIMER, ucosii_timer);
 400c144:	01060004 	movi	r4,6144
 400c148:	000b883a 	mov	r5,zero
 400c14c:	01800084 	movi	r6,2
 400c150:	01c01904 	movi	r7,100
 400c154:	400d8d00 	call	400d8d0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 400c158:	01010074 	movhi	r4,1025
 400c15c:	211d6804 	addi	r4,r4,30112
 400c160:	400c1d00 	call	400c1d0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400c164:	01010074 	movhi	r4,1025
 400c168:	211da304 	addi	r4,r4,30348
 400c16c:	000b883a 	mov	r5,zero
 400c170:	01800044 	movi	r6,1
 400c174:	400cc4c0 	call	400cc4c <altera_avalon_jtag_uart_init>
 400c178:	01010074 	movhi	r4,1025
 400c17c:	211d9904 	addi	r4,r4,30308
 400c180:	400c1980 	call	400c198 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
 400c184:	e037883a 	mov	sp,fp
 400c188:	dfc00117 	ldw	ra,4(sp)
 400c18c:	df000017 	ldw	fp,0(sp)
 400c190:	dec00204 	addi	sp,sp,8
 400c194:	f800283a 	ret

0400c198 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400c198:	defffd04 	addi	sp,sp,-12
 400c19c:	dfc00215 	stw	ra,8(sp)
 400c1a0:	df000115 	stw	fp,4(sp)
 400c1a4:	df000104 	addi	fp,sp,4
 400c1a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400c1ac:	e13fff17 	ldw	r4,-4(fp)
 400c1b0:	014100b4 	movhi	r5,1026
 400c1b4:	2961bd04 	addi	r5,r5,-30988
 400c1b8:	400df140 	call	400df14 <alt_dev_llist_insert>
}
 400c1bc:	e037883a 	mov	sp,fp
 400c1c0:	dfc00117 	ldw	ra,4(sp)
 400c1c4:	df000017 	ldw	fp,0(sp)
 400c1c8:	dec00204 	addi	sp,sp,8
 400c1cc:	f800283a 	ret

0400c1d0 <alt_epcs_flash_init>:
 400c1d0:	defffc04 	addi	sp,sp,-16
 400c1d4:	dfc00315 	stw	ra,12(sp)
 400c1d8:	df000215 	stw	fp,8(sp)
 400c1dc:	df000204 	addi	fp,sp,8
 400c1e0:	e13fff15 	stw	r4,-4(fp)
 400c1e4:	e03ffe15 	stw	zero,-8(fp)
 400c1e8:	e13fff17 	ldw	r4,-4(fp)
 400c1ec:	400c25c0 	call	400c25c <alt_epcs_flash_query>
 400c1f0:	e0bffe15 	stw	r2,-8(fp)
 400c1f4:	e0bffe17 	ldw	r2,-8(fp)
 400c1f8:	1004c03a 	cmpne	r2,r2,zero
 400c1fc:	1000031e 	bne	r2,zero,400c20c <alt_epcs_flash_init+0x3c>
 400c200:	e13fff17 	ldw	r4,-4(fp)
 400c204:	400c2240 	call	400c224 <alt_flash_device_register>
 400c208:	e0bffe15 	stw	r2,-8(fp)
 400c20c:	e0bffe17 	ldw	r2,-8(fp)
 400c210:	e037883a 	mov	sp,fp
 400c214:	dfc00117 	ldw	ra,4(sp)
 400c218:	df000017 	ldw	fp,0(sp)
 400c21c:	dec00204 	addi	sp,sp,8
 400c220:	f800283a 	ret

0400c224 <alt_flash_device_register>:
 400c224:	defffd04 	addi	sp,sp,-12
 400c228:	dfc00215 	stw	ra,8(sp)
 400c22c:	df000115 	stw	fp,4(sp)
 400c230:	df000104 	addi	fp,sp,4
 400c234:	e13fff15 	stw	r4,-4(fp)
 400c238:	e13fff17 	ldw	r4,-4(fp)
 400c23c:	014100b4 	movhi	r5,1026
 400c240:	2961e104 	addi	r5,r5,-30844
 400c244:	400df140 	call	400df14 <alt_dev_llist_insert>
 400c248:	e037883a 	mov	sp,fp
 400c24c:	dfc00117 	ldw	ra,4(sp)
 400c250:	df000017 	ldw	fp,0(sp)
 400c254:	dec00204 	addi	sp,sp,8
 400c258:	f800283a 	ret

0400c25c <alt_epcs_flash_query>:
 400c25c:	defffc04 	addi	sp,sp,-16
 400c260:	dfc00315 	stw	ra,12(sp)
 400c264:	df000215 	stw	fp,8(sp)
 400c268:	df000204 	addi	fp,sp,8
 400c26c:	e13fff15 	stw	r4,-4(fp)
 400c270:	e03ffe15 	stw	zero,-8(fp)
 400c274:	e0bfff17 	ldw	r2,-4(fp)
 400c278:	11002d17 	ldw	r4,180(r2)
 400c27c:	400dcec0 	call	400dcec <epcs_read_electronic_signature>
 400c280:	10c03fcc 	andi	r3,r2,255
 400c284:	e0bfff17 	ldw	r2,-4(fp)
 400c288:	10c02f15 	stw	r3,188(r2)
 400c28c:	e0bfff17 	ldw	r2,-4(fp)
 400c290:	10802f17 	ldw	r2,188(r2)
 400c294:	10800598 	cmpnei	r2,r2,22
 400c298:	10000a1e 	bne	r2,zero,400c2c4 <alt_epcs_flash_query+0x68>
 400c29c:	e0ffff17 	ldw	r3,-4(fp)
 400c2a0:	00802034 	movhi	r2,128
 400c2a4:	18800e15 	stw	r2,56(r3)
 400c2a8:	e0ffff17 	ldw	r3,-4(fp)
 400c2ac:	00802004 	movi	r2,128
 400c2b0:	18800f15 	stw	r2,60(r3)
 400c2b4:	e0ffff17 	ldw	r3,-4(fp)
 400c2b8:	00800074 	movhi	r2,1
 400c2bc:	18801015 	stw	r2,64(r3)
 400c2c0:	00004e06 	br	400c3fc <alt_epcs_flash_query+0x1a0>
 400c2c4:	e0bfff17 	ldw	r2,-4(fp)
 400c2c8:	10802f17 	ldw	r2,188(r2)
 400c2cc:	10800518 	cmpnei	r2,r2,20
 400c2d0:	10000a1e 	bne	r2,zero,400c2fc <alt_epcs_flash_query+0xa0>
 400c2d4:	e0ffff17 	ldw	r3,-4(fp)
 400c2d8:	00800834 	movhi	r2,32
 400c2dc:	18800e15 	stw	r2,56(r3)
 400c2e0:	e0ffff17 	ldw	r3,-4(fp)
 400c2e4:	00800804 	movi	r2,32
 400c2e8:	18800f15 	stw	r2,60(r3)
 400c2ec:	e0ffff17 	ldw	r3,-4(fp)
 400c2f0:	00800074 	movhi	r2,1
 400c2f4:	18801015 	stw	r2,64(r3)
 400c2f8:	00004006 	br	400c3fc <alt_epcs_flash_query+0x1a0>
 400c2fc:	e0bfff17 	ldw	r2,-4(fp)
 400c300:	10802f17 	ldw	r2,188(r2)
 400c304:	108004d8 	cmpnei	r2,r2,19
 400c308:	10000a1e 	bne	r2,zero,400c334 <alt_epcs_flash_query+0xd8>
 400c30c:	e0ffff17 	ldw	r3,-4(fp)
 400c310:	00800434 	movhi	r2,16
 400c314:	18800e15 	stw	r2,56(r3)
 400c318:	e0ffff17 	ldw	r3,-4(fp)
 400c31c:	00800404 	movi	r2,16
 400c320:	18800f15 	stw	r2,60(r3)
 400c324:	e0ffff17 	ldw	r3,-4(fp)
 400c328:	00800074 	movhi	r2,1
 400c32c:	18801015 	stw	r2,64(r3)
 400c330:	00003206 	br	400c3fc <alt_epcs_flash_query+0x1a0>
 400c334:	e0bfff17 	ldw	r2,-4(fp)
 400c338:	10802f17 	ldw	r2,188(r2)
 400c33c:	10800498 	cmpnei	r2,r2,18
 400c340:	10000a1e 	bne	r2,zero,400c36c <alt_epcs_flash_query+0x110>
 400c344:	e0ffff17 	ldw	r3,-4(fp)
 400c348:	00800234 	movhi	r2,8
 400c34c:	18800e15 	stw	r2,56(r3)
 400c350:	e0ffff17 	ldw	r3,-4(fp)
 400c354:	00800204 	movi	r2,8
 400c358:	18800f15 	stw	r2,60(r3)
 400c35c:	e0ffff17 	ldw	r3,-4(fp)
 400c360:	00800074 	movhi	r2,1
 400c364:	18801015 	stw	r2,64(r3)
 400c368:	00002406 	br	400c3fc <alt_epcs_flash_query+0x1a0>
 400c36c:	e0bfff17 	ldw	r2,-4(fp)
 400c370:	10802f17 	ldw	r2,188(r2)
 400c374:	10800418 	cmpnei	r2,r2,16
 400c378:	10000a1e 	bne	r2,zero,400c3a4 <alt_epcs_flash_query+0x148>
 400c37c:	e0ffff17 	ldw	r3,-4(fp)
 400c380:	008000b4 	movhi	r2,2
 400c384:	18800e15 	stw	r2,56(r3)
 400c388:	e0ffff17 	ldw	r3,-4(fp)
 400c38c:	00800104 	movi	r2,4
 400c390:	18800f15 	stw	r2,60(r3)
 400c394:	e0ffff17 	ldw	r3,-4(fp)
 400c398:	00a00014 	movui	r2,32768
 400c39c:	18801015 	stw	r2,64(r3)
 400c3a0:	00001606 	br	400c3fc <alt_epcs_flash_query+0x1a0>
 400c3a4:	e0bfff17 	ldw	r2,-4(fp)
 400c3a8:	11002d17 	ldw	r4,180(r2)
 400c3ac:	400dd580 	call	400dd58 <epcs_read_device_id>
 400c3b0:	10c03fcc 	andi	r3,r2,255
 400c3b4:	e0bfff17 	ldw	r2,-4(fp)
 400c3b8:	10c02f15 	stw	r3,188(r2)
 400c3bc:	e0bfff17 	ldw	r2,-4(fp)
 400c3c0:	10802f17 	ldw	r2,188(r2)
 400c3c4:	10800618 	cmpnei	r2,r2,24
 400c3c8:	10000a1e 	bne	r2,zero,400c3f4 <alt_epcs_flash_query+0x198>
 400c3cc:	e0ffff17 	ldw	r3,-4(fp)
 400c3d0:	00804034 	movhi	r2,256
 400c3d4:	18800e15 	stw	r2,56(r3)
 400c3d8:	e0ffff17 	ldw	r3,-4(fp)
 400c3dc:	00801004 	movi	r2,64
 400c3e0:	18800f15 	stw	r2,60(r3)
 400c3e4:	e0ffff17 	ldw	r3,-4(fp)
 400c3e8:	00800134 	movhi	r2,4
 400c3ec:	18801015 	stw	r2,64(r3)
 400c3f0:	00000206 	br	400c3fc <alt_epcs_flash_query+0x1a0>
 400c3f4:	00bffb44 	movi	r2,-19
 400c3f8:	e0bffe15 	stw	r2,-8(fp)
 400c3fc:	e0bfff17 	ldw	r2,-4(fp)
 400c400:	10800e17 	ldw	r2,56(r2)
 400c404:	1007883a 	mov	r3,r2
 400c408:	e0bfff17 	ldw	r2,-4(fp)
 400c40c:	10c02e15 	stw	r3,184(r2)
 400c410:	e0ffff17 	ldw	r3,-4(fp)
 400c414:	00800044 	movi	r2,1
 400c418:	18800c15 	stw	r2,48(r3)
 400c41c:	e0bfff17 	ldw	r2,-4(fp)
 400c420:	10000d15 	stw	zero,52(r2)
 400c424:	e0ffff17 	ldw	r3,-4(fp)
 400c428:	00804004 	movi	r2,256
 400c42c:	18803015 	stw	r2,192(r3)
 400c430:	e0bffe17 	ldw	r2,-8(fp)
 400c434:	e037883a 	mov	sp,fp
 400c438:	dfc00117 	ldw	ra,4(sp)
 400c43c:	df000017 	ldw	fp,0(sp)
 400c440:	dec00204 	addi	sp,sp,8
 400c444:	f800283a 	ret

0400c448 <alt_epcs_flash_memcmp>:
 400c448:	deffeb04 	addi	sp,sp,-84
 400c44c:	dfc01415 	stw	ra,80(sp)
 400c450:	df001315 	stw	fp,76(sp)
 400c454:	df001304 	addi	fp,sp,76
 400c458:	e13ff915 	stw	r4,-28(fp)
 400c45c:	e17ffa15 	stw	r5,-24(fp)
 400c460:	e1bffb15 	stw	r6,-20(fp)
 400c464:	e1fffc15 	stw	r7,-16(fp)
 400c468:	00800804 	movi	r2,32
 400c46c:	e0bff015 	stw	r2,-64(fp)
 400c470:	e03fef15 	stw	zero,-68(fp)
 400c474:	00002c06 	br	400c528 <alt_epcs_flash_memcmp+0xe0>
 400c478:	e0bff017 	ldw	r2,-64(fp)
 400c47c:	e0bfff15 	stw	r2,-4(fp)
 400c480:	e0fffc17 	ldw	r3,-16(fp)
 400c484:	e0fffe15 	stw	r3,-8(fp)
 400c488:	e0bfff17 	ldw	r2,-4(fp)
 400c48c:	e0fffe17 	ldw	r3,-8(fp)
 400c490:	10c0022e 	bgeu	r2,r3,400c49c <alt_epcs_flash_memcmp+0x54>
 400c494:	e0bfff17 	ldw	r2,-4(fp)
 400c498:	e0bffe15 	stw	r2,-8(fp)
 400c49c:	e0fffe17 	ldw	r3,-8(fp)
 400c4a0:	e0ffee15 	stw	r3,-72(fp)
 400c4a4:	e0fffb17 	ldw	r3,-20(fp)
 400c4a8:	e0bfef17 	ldw	r2,-68(fp)
 400c4ac:	188b883a 	add	r5,r3,r2
 400c4b0:	e1bff104 	addi	r6,fp,-60
 400c4b4:	e13ff917 	ldw	r4,-28(fp)
 400c4b8:	e1ffee17 	ldw	r7,-72(fp)
 400c4bc:	400ca780 	call	400ca78 <alt_epcs_flash_read>
 400c4c0:	1004403a 	cmpge	r2,r2,zero
 400c4c4:	1000031e 	bne	r2,zero,400c4d4 <alt_epcs_flash_memcmp+0x8c>
 400c4c8:	00bfffc4 	movi	r2,-1
 400c4cc:	e0bffd15 	stw	r2,-12(fp)
 400c4d0:	00001906 	br	400c538 <alt_epcs_flash_memcmp+0xf0>
 400c4d4:	e0fffa17 	ldw	r3,-24(fp)
 400c4d8:	e0bfef17 	ldw	r2,-68(fp)
 400c4dc:	1889883a 	add	r4,r3,r2
 400c4e0:	e1bfee17 	ldw	r6,-72(fp)
 400c4e4:	e17ff104 	addi	r5,fp,-60
 400c4e8:	400f4680 	call	400f468 <memcmp>
 400c4ec:	e0bfed15 	stw	r2,-76(fp)
 400c4f0:	e0bfed17 	ldw	r2,-76(fp)
 400c4f4:	1005003a 	cmpeq	r2,r2,zero
 400c4f8:	1000031e 	bne	r2,zero,400c508 <alt_epcs_flash_memcmp+0xc0>
 400c4fc:	e0ffed17 	ldw	r3,-76(fp)
 400c500:	e0fffd15 	stw	r3,-12(fp)
 400c504:	00000c06 	br	400c538 <alt_epcs_flash_memcmp+0xf0>
 400c508:	e0ffee17 	ldw	r3,-72(fp)
 400c50c:	e0bffc17 	ldw	r2,-16(fp)
 400c510:	10c5c83a 	sub	r2,r2,r3
 400c514:	e0bffc15 	stw	r2,-16(fp)
 400c518:	e0ffef17 	ldw	r3,-68(fp)
 400c51c:	e0bfee17 	ldw	r2,-72(fp)
 400c520:	1885883a 	add	r2,r3,r2
 400c524:	e0bfef15 	stw	r2,-68(fp)
 400c528:	e0bffc17 	ldw	r2,-16(fp)
 400c52c:	1004c03a 	cmpne	r2,r2,zero
 400c530:	103fd11e 	bne	r2,zero,400c478 <alt_epcs_flash_memcmp+0x30>
 400c534:	e03ffd15 	stw	zero,-12(fp)
 400c538:	e0bffd17 	ldw	r2,-12(fp)
 400c53c:	e037883a 	mov	sp,fp
 400c540:	dfc00117 	ldw	ra,4(sp)
 400c544:	df000017 	ldw	fp,0(sp)
 400c548:	dec00204 	addi	sp,sp,8
 400c54c:	f800283a 	ret

0400c550 <alt_epcs_flash_write>:
 400c550:	defff204 	addi	sp,sp,-56
 400c554:	dfc00d15 	stw	ra,52(sp)
 400c558:	df000c15 	stw	fp,48(sp)
 400c55c:	df000c04 	addi	fp,sp,48
 400c560:	e13ffa15 	stw	r4,-24(fp)
 400c564:	e17ffb15 	stw	r5,-20(fp)
 400c568:	e1bffc15 	stw	r6,-16(fp)
 400c56c:	e1fffd15 	stw	r7,-12(fp)
 400c570:	e03ff915 	stw	zero,-28(fp)
 400c574:	e03ff815 	stw	zero,-32(fp)
 400c578:	00008b06 	br	400c7a8 <alt_epcs_flash_write+0x258>
 400c57c:	e0bff817 	ldw	r2,-32(fp)
 400c580:	e0fffa17 	ldw	r3,-24(fp)
 400c584:	1004913a 	slli	r2,r2,4
 400c588:	10c5883a 	add	r2,r2,r3
 400c58c:	10800d04 	addi	r2,r2,52
 400c590:	10c00017 	ldw	r3,0(r2)
 400c594:	e0bffb17 	ldw	r2,-20(fp)
 400c598:	10c08016 	blt	r2,r3,400c79c <alt_epcs_flash_write+0x24c>
 400c59c:	e0bff817 	ldw	r2,-32(fp)
 400c5a0:	e0fffa17 	ldw	r3,-24(fp)
 400c5a4:	1004913a 	slli	r2,r2,4
 400c5a8:	10c5883a 	add	r2,r2,r3
 400c5ac:	10800d04 	addi	r2,r2,52
 400c5b0:	11000017 	ldw	r4,0(r2)
 400c5b4:	e0bff817 	ldw	r2,-32(fp)
 400c5b8:	e0fffa17 	ldw	r3,-24(fp)
 400c5bc:	1004913a 	slli	r2,r2,4
 400c5c0:	10c5883a 	add	r2,r2,r3
 400c5c4:	10800e04 	addi	r2,r2,56
 400c5c8:	10800017 	ldw	r2,0(r2)
 400c5cc:	2087883a 	add	r3,r4,r2
 400c5d0:	e0bffb17 	ldw	r2,-20(fp)
 400c5d4:	10c0710e 	bge	r2,r3,400c79c <alt_epcs_flash_write+0x24c>
 400c5d8:	e0bff817 	ldw	r2,-32(fp)
 400c5dc:	e0fffa17 	ldw	r3,-24(fp)
 400c5e0:	1004913a 	slli	r2,r2,4
 400c5e4:	10c5883a 	add	r2,r2,r3
 400c5e8:	10800d04 	addi	r2,r2,52
 400c5ec:	10800017 	ldw	r2,0(r2)
 400c5f0:	e0bff515 	stw	r2,-44(fp)
 400c5f4:	e03ff715 	stw	zero,-36(fp)
 400c5f8:	00006006 	br	400c77c <alt_epcs_flash_write+0x22c>
 400c5fc:	e0fffb17 	ldw	r3,-20(fp)
 400c600:	e0bff517 	ldw	r2,-44(fp)
 400c604:	18805116 	blt	r3,r2,400c74c <alt_epcs_flash_write+0x1fc>
 400c608:	e0bff817 	ldw	r2,-32(fp)
 400c60c:	e0fffa17 	ldw	r3,-24(fp)
 400c610:	1004913a 	slli	r2,r2,4
 400c614:	10c5883a 	add	r2,r2,r3
 400c618:	10801004 	addi	r2,r2,64
 400c61c:	10c00017 	ldw	r3,0(r2)
 400c620:	e0bff517 	ldw	r2,-44(fp)
 400c624:	1887883a 	add	r3,r3,r2
 400c628:	e0bffb17 	ldw	r2,-20(fp)
 400c62c:	10c0470e 	bge	r2,r3,400c74c <alt_epcs_flash_write+0x1fc>
 400c630:	e0bff817 	ldw	r2,-32(fp)
 400c634:	e0fffa17 	ldw	r3,-24(fp)
 400c638:	1004913a 	slli	r2,r2,4
 400c63c:	10c5883a 	add	r2,r2,r3
 400c640:	10801004 	addi	r2,r2,64
 400c644:	10c00017 	ldw	r3,0(r2)
 400c648:	e0bff517 	ldw	r2,-44(fp)
 400c64c:	1887883a 	add	r3,r3,r2
 400c650:	e0bffb17 	ldw	r2,-20(fp)
 400c654:	1885c83a 	sub	r2,r3,r2
 400c658:	e0bff615 	stw	r2,-40(fp)
 400c65c:	e0bff617 	ldw	r2,-40(fp)
 400c660:	e0bfff15 	stw	r2,-4(fp)
 400c664:	e0fffd17 	ldw	r3,-12(fp)
 400c668:	e0fffe15 	stw	r3,-8(fp)
 400c66c:	e0bfff17 	ldw	r2,-4(fp)
 400c670:	e0fffe17 	ldw	r3,-8(fp)
 400c674:	10c0020e 	bge	r2,r3,400c680 <alt_epcs_flash_write+0x130>
 400c678:	e0bfff17 	ldw	r2,-4(fp)
 400c67c:	e0bffe15 	stw	r2,-8(fp)
 400c680:	e0fffe17 	ldw	r3,-8(fp)
 400c684:	e0fff615 	stw	r3,-40(fp)
 400c688:	e1fff617 	ldw	r7,-40(fp)
 400c68c:	e13ffa17 	ldw	r4,-24(fp)
 400c690:	e17ffc17 	ldw	r5,-16(fp)
 400c694:	e1bffb17 	ldw	r6,-20(fp)
 400c698:	400c4480 	call	400c448 <alt_epcs_flash_memcmp>
 400c69c:	1005003a 	cmpeq	r2,r2,zero
 400c6a0:	1000131e 	bne	r2,zero,400c6f0 <alt_epcs_flash_write+0x1a0>
 400c6a4:	e0bffa17 	ldw	r2,-24(fp)
 400c6a8:	10800817 	ldw	r2,32(r2)
 400c6ac:	e13ffa17 	ldw	r4,-24(fp)
 400c6b0:	e17ff517 	ldw	r5,-44(fp)
 400c6b4:	103ee83a 	callr	r2
 400c6b8:	e0bff915 	stw	r2,-28(fp)
 400c6bc:	e0bff917 	ldw	r2,-28(fp)
 400c6c0:	1004c03a 	cmpne	r2,r2,zero
 400c6c4:	10000a1e 	bne	r2,zero,400c6f0 <alt_epcs_flash_write+0x1a0>
 400c6c8:	e0bffa17 	ldw	r2,-24(fp)
 400c6cc:	10c00917 	ldw	r3,36(r2)
 400c6d0:	e0bff617 	ldw	r2,-40(fp)
 400c6d4:	d8800015 	stw	r2,0(sp)
 400c6d8:	e13ffa17 	ldw	r4,-24(fp)
 400c6dc:	e17ff517 	ldw	r5,-44(fp)
 400c6e0:	e1bffb17 	ldw	r6,-20(fp)
 400c6e4:	e1fffc17 	ldw	r7,-16(fp)
 400c6e8:	183ee83a 	callr	r3
 400c6ec:	e0bff915 	stw	r2,-28(fp)
 400c6f0:	e0fffd17 	ldw	r3,-12(fp)
 400c6f4:	e0bff617 	ldw	r2,-40(fp)
 400c6f8:	18802f26 	beq	r3,r2,400c7b8 <alt_epcs_flash_write+0x268>
 400c6fc:	e0bff917 	ldw	r2,-28(fp)
 400c700:	1004c03a 	cmpne	r2,r2,zero
 400c704:	10002c1e 	bne	r2,zero,400c7b8 <alt_epcs_flash_write+0x268>
 400c708:	e0fffd17 	ldw	r3,-12(fp)
 400c70c:	e0bff617 	ldw	r2,-40(fp)
 400c710:	1885c83a 	sub	r2,r3,r2
 400c714:	e0bffd15 	stw	r2,-12(fp)
 400c718:	e0bff817 	ldw	r2,-32(fp)
 400c71c:	e0fffa17 	ldw	r3,-24(fp)
 400c720:	1004913a 	slli	r2,r2,4
 400c724:	10c5883a 	add	r2,r2,r3
 400c728:	10801004 	addi	r2,r2,64
 400c72c:	10c00017 	ldw	r3,0(r2)
 400c730:	e0bff517 	ldw	r2,-44(fp)
 400c734:	1885883a 	add	r2,r3,r2
 400c738:	e0bffb15 	stw	r2,-20(fp)
 400c73c:	e0fffc17 	ldw	r3,-16(fp)
 400c740:	e0bff617 	ldw	r2,-40(fp)
 400c744:	1885883a 	add	r2,r3,r2
 400c748:	e0bffc15 	stw	r2,-16(fp)
 400c74c:	e0bff817 	ldw	r2,-32(fp)
 400c750:	e0fffa17 	ldw	r3,-24(fp)
 400c754:	1004913a 	slli	r2,r2,4
 400c758:	10c5883a 	add	r2,r2,r3
 400c75c:	10801004 	addi	r2,r2,64
 400c760:	10c00017 	ldw	r3,0(r2)
 400c764:	e0bff517 	ldw	r2,-44(fp)
 400c768:	10c5883a 	add	r2,r2,r3
 400c76c:	e0bff515 	stw	r2,-44(fp)
 400c770:	e0bff717 	ldw	r2,-36(fp)
 400c774:	10800044 	addi	r2,r2,1
 400c778:	e0bff715 	stw	r2,-36(fp)
 400c77c:	e0bff817 	ldw	r2,-32(fp)
 400c780:	e0fffa17 	ldw	r3,-24(fp)
 400c784:	1004913a 	slli	r2,r2,4
 400c788:	10c5883a 	add	r2,r2,r3
 400c78c:	10800f04 	addi	r2,r2,60
 400c790:	10c00017 	ldw	r3,0(r2)
 400c794:	e0bff717 	ldw	r2,-36(fp)
 400c798:	10ff9816 	blt	r2,r3,400c5fc <alt_epcs_flash_write+0xac>
 400c79c:	e0bff817 	ldw	r2,-32(fp)
 400c7a0:	10800044 	addi	r2,r2,1
 400c7a4:	e0bff815 	stw	r2,-32(fp)
 400c7a8:	e0bffa17 	ldw	r2,-24(fp)
 400c7ac:	10c00c17 	ldw	r3,48(r2)
 400c7b0:	e0bff817 	ldw	r2,-32(fp)
 400c7b4:	10ff7116 	blt	r2,r3,400c57c <alt_epcs_flash_write+0x2c>
 400c7b8:	e0bff917 	ldw	r2,-28(fp)
 400c7bc:	e037883a 	mov	sp,fp
 400c7c0:	dfc00117 	ldw	ra,4(sp)
 400c7c4:	df000017 	ldw	fp,0(sp)
 400c7c8:	dec00204 	addi	sp,sp,8
 400c7cc:	f800283a 	ret

0400c7d0 <alt_epcs_flash_get_info>:
 400c7d0:	defffa04 	addi	sp,sp,-24
 400c7d4:	df000515 	stw	fp,20(sp)
 400c7d8:	df000504 	addi	fp,sp,20
 400c7dc:	e13ffd15 	stw	r4,-12(fp)
 400c7e0:	e17ffe15 	stw	r5,-8(fp)
 400c7e4:	e1bfff15 	stw	r6,-4(fp)
 400c7e8:	e03ffc15 	stw	zero,-16(fp)
 400c7ec:	e0bffd17 	ldw	r2,-12(fp)
 400c7f0:	e0bffb15 	stw	r2,-20(fp)
 400c7f4:	e0bffb17 	ldw	r2,-20(fp)
 400c7f8:	10c00c17 	ldw	r3,48(r2)
 400c7fc:	e0bfff17 	ldw	r2,-4(fp)
 400c800:	10c00015 	stw	r3,0(r2)
 400c804:	e0bffb17 	ldw	r2,-20(fp)
 400c808:	10800c17 	ldw	r2,48(r2)
 400c80c:	1004c03a 	cmpne	r2,r2,zero
 400c810:	1000031e 	bne	r2,zero,400c820 <alt_epcs_flash_get_info+0x50>
 400c814:	00bffec4 	movi	r2,-5
 400c818:	e0bffc15 	stw	r2,-16(fp)
 400c81c:	00000b06 	br	400c84c <alt_epcs_flash_get_info+0x7c>
 400c820:	e0bffb17 	ldw	r2,-20(fp)
 400c824:	10800c17 	ldw	r2,48(r2)
 400c828:	10800250 	cmplti	r2,r2,9
 400c82c:	1000031e 	bne	r2,zero,400c83c <alt_epcs_flash_get_info+0x6c>
 400c830:	00bffd04 	movi	r2,-12
 400c834:	e0bffc15 	stw	r2,-16(fp)
 400c838:	00000406 	br	400c84c <alt_epcs_flash_get_info+0x7c>
 400c83c:	e0bffb17 	ldw	r2,-20(fp)
 400c840:	10c00d04 	addi	r3,r2,52
 400c844:	e0bffe17 	ldw	r2,-8(fp)
 400c848:	10c00015 	stw	r3,0(r2)
 400c84c:	e0bffc17 	ldw	r2,-16(fp)
 400c850:	e037883a 	mov	sp,fp
 400c854:	df000017 	ldw	fp,0(sp)
 400c858:	dec00104 	addi	sp,sp,4
 400c85c:	f800283a 	ret

0400c860 <alt_epcs_flash_erase_block>:
 400c860:	defffa04 	addi	sp,sp,-24
 400c864:	dfc00515 	stw	ra,20(sp)
 400c868:	df000415 	stw	fp,16(sp)
 400c86c:	df000404 	addi	fp,sp,16
 400c870:	e13ffe15 	stw	r4,-8(fp)
 400c874:	e17fff15 	stw	r5,-4(fp)
 400c878:	e03ffd15 	stw	zero,-12(fp)
 400c87c:	e0bffe17 	ldw	r2,-8(fp)
 400c880:	e0bffc15 	stw	r2,-16(fp)
 400c884:	e13ffe17 	ldw	r4,-8(fp)
 400c888:	e17fff17 	ldw	r5,-4(fp)
 400c88c:	400c8d40 	call	400c8d4 <alt_epcs_test_address>
 400c890:	e0bffd15 	stw	r2,-12(fp)
 400c894:	e0bffd17 	ldw	r2,-12(fp)
 400c898:	1004803a 	cmplt	r2,r2,zero
 400c89c:	1000071e 	bne	r2,zero,400c8bc <alt_epcs_flash_erase_block+0x5c>
 400c8a0:	e0bffc17 	ldw	r2,-16(fp)
 400c8a4:	11002d17 	ldw	r4,180(r2)
 400c8a8:	400db600 	call	400db60 <epcs_write_enable>
 400c8ac:	e0bffc17 	ldw	r2,-16(fp)
 400c8b0:	11002d17 	ldw	r4,180(r2)
 400c8b4:	e17fff17 	ldw	r5,-4(fp)
 400c8b8:	400d9c00 	call	400d9c0 <epcs_sector_erase>
 400c8bc:	e0bffd17 	ldw	r2,-12(fp)
 400c8c0:	e037883a 	mov	sp,fp
 400c8c4:	dfc00117 	ldw	ra,4(sp)
 400c8c8:	df000017 	ldw	fp,0(sp)
 400c8cc:	dec00204 	addi	sp,sp,8
 400c8d0:	f800283a 	ret

0400c8d4 <alt_epcs_test_address>:
 400c8d4:	defff904 	addi	sp,sp,-28
 400c8d8:	df000615 	stw	fp,24(sp)
 400c8dc:	df000604 	addi	fp,sp,24
 400c8e0:	e13ffe15 	stw	r4,-8(fp)
 400c8e4:	e17fff15 	stw	r5,-4(fp)
 400c8e8:	e03ffd15 	stw	zero,-12(fp)
 400c8ec:	e0bffe17 	ldw	r2,-8(fp)
 400c8f0:	e0bffc15 	stw	r2,-16(fp)
 400c8f4:	e0bffc17 	ldw	r2,-16(fp)
 400c8f8:	10800c17 	ldw	r2,48(r2)
 400c8fc:	10bfffc4 	addi	r2,r2,-1
 400c900:	e0bffb15 	stw	r2,-20(fp)
 400c904:	e0bffb17 	ldw	r2,-20(fp)
 400c908:	e0fffc17 	ldw	r3,-16(fp)
 400c90c:	1004913a 	slli	r2,r2,4
 400c910:	10c5883a 	add	r2,r2,r3
 400c914:	10800d04 	addi	r2,r2,52
 400c918:	11000017 	ldw	r4,0(r2)
 400c91c:	e0bffb17 	ldw	r2,-20(fp)
 400c920:	e0fffc17 	ldw	r3,-16(fp)
 400c924:	1004913a 	slli	r2,r2,4
 400c928:	10c5883a 	add	r2,r2,r3
 400c92c:	10800e04 	addi	r2,r2,56
 400c930:	10800017 	ldw	r2,0(r2)
 400c934:	2085883a 	add	r2,r4,r2
 400c938:	10bfffc4 	addi	r2,r2,-1
 400c93c:	e0bffa15 	stw	r2,-24(fp)
 400c940:	e0ffff17 	ldw	r3,-4(fp)
 400c944:	e0bffa17 	ldw	r2,-24(fp)
 400c948:	10c0022e 	bgeu	r2,r3,400c954 <alt_epcs_test_address+0x80>
 400c94c:	00bffec4 	movi	r2,-5
 400c950:	e0bffd15 	stw	r2,-12(fp)
 400c954:	e0bffd17 	ldw	r2,-12(fp)
 400c958:	e037883a 	mov	sp,fp
 400c95c:	df000017 	ldw	fp,0(sp)
 400c960:	dec00104 	addi	sp,sp,4
 400c964:	f800283a 	ret

0400c968 <alt_epcs_flash_write_block>:
 400c968:	defff304 	addi	sp,sp,-52
 400c96c:	dfc00c15 	stw	ra,48(sp)
 400c970:	df000b15 	stw	fp,44(sp)
 400c974:	df000b04 	addi	fp,sp,44
 400c978:	e13ffa15 	stw	r4,-24(fp)
 400c97c:	e17ffb15 	stw	r5,-20(fp)
 400c980:	e1bffc15 	stw	r6,-16(fp)
 400c984:	e1fffd15 	stw	r7,-12(fp)
 400c988:	e0bffa17 	ldw	r2,-24(fp)
 400c98c:	e0bff815 	stw	r2,-32(fp)
 400c990:	e03ff715 	stw	zero,-36(fp)
 400c994:	e13ffa17 	ldw	r4,-24(fp)
 400c998:	e17ffc17 	ldw	r5,-16(fp)
 400c99c:	400c8d40 	call	400c8d4 <alt_epcs_test_address>
 400c9a0:	e0bff915 	stw	r2,-28(fp)
 400c9a4:	e0bff917 	ldw	r2,-28(fp)
 400c9a8:	1004803a 	cmplt	r2,r2,zero
 400c9ac:	10002c1e 	bne	r2,zero,400ca60 <alt_epcs_flash_write_block+0xf8>
 400c9b0:	00002806 	br	400ca54 <alt_epcs_flash_write_block+0xec>
 400c9b4:	e0bff817 	ldw	r2,-32(fp)
 400c9b8:	10c03017 	ldw	r3,192(r2)
 400c9bc:	e0bffc17 	ldw	r2,-16(fp)
 400c9c0:	1887883a 	add	r3,r3,r2
 400c9c4:	e0bff817 	ldw	r2,-32(fp)
 400c9c8:	10803017 	ldw	r2,192(r2)
 400c9cc:	0085c83a 	sub	r2,zero,r2
 400c9d0:	1884703a 	and	r2,r3,r2
 400c9d4:	e0bff515 	stw	r2,-44(fp)
 400c9d8:	e0fff517 	ldw	r3,-44(fp)
 400c9dc:	e0bffc17 	ldw	r2,-16(fp)
 400c9e0:	1885c83a 	sub	r2,r3,r2
 400c9e4:	e0c00217 	ldw	r3,8(fp)
 400c9e8:	e0ffff15 	stw	r3,-4(fp)
 400c9ec:	e0bffe15 	stw	r2,-8(fp)
 400c9f0:	e0bfff17 	ldw	r2,-4(fp)
 400c9f4:	e0fffe17 	ldw	r3,-8(fp)
 400c9f8:	10c0020e 	bge	r2,r3,400ca04 <alt_epcs_flash_write_block+0x9c>
 400c9fc:	e0bfff17 	ldw	r2,-4(fp)
 400ca00:	e0bffe15 	stw	r2,-8(fp)
 400ca04:	e0fffe17 	ldw	r3,-8(fp)
 400ca08:	e0fff615 	stw	r3,-40(fp)
 400ca0c:	e0bff817 	ldw	r2,-32(fp)
 400ca10:	11002d17 	ldw	r4,180(r2)
 400ca14:	e0fffd17 	ldw	r3,-12(fp)
 400ca18:	e0bff717 	ldw	r2,-36(fp)
 400ca1c:	188d883a 	add	r6,r3,r2
 400ca20:	e17ffc17 	ldw	r5,-16(fp)
 400ca24:	e1fff617 	ldw	r7,-40(fp)
 400ca28:	400dc140 	call	400dc14 <epcs_write_buffer>
 400ca2c:	e0c00217 	ldw	r3,8(fp)
 400ca30:	e0bff617 	ldw	r2,-40(fp)
 400ca34:	1885c83a 	sub	r2,r3,r2
 400ca38:	e0800215 	stw	r2,8(fp)
 400ca3c:	e0fff717 	ldw	r3,-36(fp)
 400ca40:	e0bff617 	ldw	r2,-40(fp)
 400ca44:	1885883a 	add	r2,r3,r2
 400ca48:	e0bff715 	stw	r2,-36(fp)
 400ca4c:	e0bff517 	ldw	r2,-44(fp)
 400ca50:	e0bffc15 	stw	r2,-16(fp)
 400ca54:	e0800217 	ldw	r2,8(fp)
 400ca58:	1004c03a 	cmpne	r2,r2,zero
 400ca5c:	103fd51e 	bne	r2,zero,400c9b4 <alt_epcs_flash_write_block+0x4c>
 400ca60:	e0bff917 	ldw	r2,-28(fp)
 400ca64:	e037883a 	mov	sp,fp
 400ca68:	dfc00117 	ldw	ra,4(sp)
 400ca6c:	df000017 	ldw	fp,0(sp)
 400ca70:	dec00204 	addi	sp,sp,8
 400ca74:	f800283a 	ret

0400ca78 <alt_epcs_flash_read>:
 400ca78:	defff804 	addi	sp,sp,-32
 400ca7c:	dfc00715 	stw	ra,28(sp)
 400ca80:	df000615 	stw	fp,24(sp)
 400ca84:	df000604 	addi	fp,sp,24
 400ca88:	e13ffc15 	stw	r4,-16(fp)
 400ca8c:	e17ffd15 	stw	r5,-12(fp)
 400ca90:	e1bffe15 	stw	r6,-8(fp)
 400ca94:	e1ffff15 	stw	r7,-4(fp)
 400ca98:	e03ffb15 	stw	zero,-20(fp)
 400ca9c:	e0bffc17 	ldw	r2,-16(fp)
 400caa0:	e0bffa15 	stw	r2,-24(fp)
 400caa4:	e13ffc17 	ldw	r4,-16(fp)
 400caa8:	e17ffd17 	ldw	r5,-12(fp)
 400caac:	400c8d40 	call	400c8d4 <alt_epcs_test_address>
 400cab0:	e0bffb15 	stw	r2,-20(fp)
 400cab4:	e0bffb17 	ldw	r2,-20(fp)
 400cab8:	1004803a 	cmplt	r2,r2,zero
 400cabc:	10000b1e 	bne	r2,zero,400caec <alt_epcs_flash_read+0x74>
 400cac0:	e0bffa17 	ldw	r2,-24(fp)
 400cac4:	11002d17 	ldw	r4,180(r2)
 400cac8:	e1bffe17 	ldw	r6,-8(fp)
 400cacc:	e17ffd17 	ldw	r5,-12(fp)
 400cad0:	e1ffff17 	ldw	r7,-4(fp)
 400cad4:	400daac0 	call	400daac <epcs_read_buffer>
 400cad8:	e0bffb15 	stw	r2,-20(fp)
 400cadc:	e0fffb17 	ldw	r3,-20(fp)
 400cae0:	e0bfff17 	ldw	r2,-4(fp)
 400cae4:	1880011e 	bne	r3,r2,400caec <alt_epcs_flash_read+0x74>
 400cae8:	e03ffb15 	stw	zero,-20(fp)
 400caec:	e0bffb17 	ldw	r2,-20(fp)
 400caf0:	e037883a 	mov	sp,fp
 400caf4:	dfc00117 	ldw	ra,4(sp)
 400caf8:	df000017 	ldw	fp,0(sp)
 400cafc:	dec00204 	addi	sp,sp,8
 400cb00:	f800283a 	ret

0400cb04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400cb04:	defffa04 	addi	sp,sp,-24
 400cb08:	dfc00515 	stw	ra,20(sp)
 400cb0c:	df000415 	stw	fp,16(sp)
 400cb10:	df000404 	addi	fp,sp,16
 400cb14:	e13ffd15 	stw	r4,-12(fp)
 400cb18:	e17ffe15 	stw	r5,-8(fp)
 400cb1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400cb20:	e0bffd17 	ldw	r2,-12(fp)
 400cb24:	10800017 	ldw	r2,0(r2)
 400cb28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400cb2c:	e0bffc17 	ldw	r2,-16(fp)
 400cb30:	11000a04 	addi	r4,r2,40
 400cb34:	e0bffd17 	ldw	r2,-12(fp)
 400cb38:	11c00217 	ldw	r7,8(r2)
 400cb3c:	e17ffe17 	ldw	r5,-8(fp)
 400cb40:	e1bfff17 	ldw	r6,-4(fp)
 400cb44:	400d2c40 	call	400d2c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400cb48:	e037883a 	mov	sp,fp
 400cb4c:	dfc00117 	ldw	ra,4(sp)
 400cb50:	df000017 	ldw	fp,0(sp)
 400cb54:	dec00204 	addi	sp,sp,8
 400cb58:	f800283a 	ret

0400cb5c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400cb5c:	defffa04 	addi	sp,sp,-24
 400cb60:	dfc00515 	stw	ra,20(sp)
 400cb64:	df000415 	stw	fp,16(sp)
 400cb68:	df000404 	addi	fp,sp,16
 400cb6c:	e13ffd15 	stw	r4,-12(fp)
 400cb70:	e17ffe15 	stw	r5,-8(fp)
 400cb74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400cb78:	e0bffd17 	ldw	r2,-12(fp)
 400cb7c:	10800017 	ldw	r2,0(r2)
 400cb80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400cb84:	e0bffc17 	ldw	r2,-16(fp)
 400cb88:	11000a04 	addi	r4,r2,40
 400cb8c:	e0bffd17 	ldw	r2,-12(fp)
 400cb90:	11c00217 	ldw	r7,8(r2)
 400cb94:	e17ffe17 	ldw	r5,-8(fp)
 400cb98:	e1bfff17 	ldw	r6,-4(fp)
 400cb9c:	400d5840 	call	400d584 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400cba0:	e037883a 	mov	sp,fp
 400cba4:	dfc00117 	ldw	ra,4(sp)
 400cba8:	df000017 	ldw	fp,0(sp)
 400cbac:	dec00204 	addi	sp,sp,8
 400cbb0:	f800283a 	ret

0400cbb4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400cbb4:	defffc04 	addi	sp,sp,-16
 400cbb8:	dfc00315 	stw	ra,12(sp)
 400cbbc:	df000215 	stw	fp,8(sp)
 400cbc0:	df000204 	addi	fp,sp,8
 400cbc4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400cbc8:	e0bfff17 	ldw	r2,-4(fp)
 400cbcc:	10800017 	ldw	r2,0(r2)
 400cbd0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400cbd4:	e0bffe17 	ldw	r2,-8(fp)
 400cbd8:	11000a04 	addi	r4,r2,40
 400cbdc:	e0bfff17 	ldw	r2,-4(fp)
 400cbe0:	11400217 	ldw	r5,8(r2)
 400cbe4:	400d15c0 	call	400d15c <altera_avalon_jtag_uart_close>
}
 400cbe8:	e037883a 	mov	sp,fp
 400cbec:	dfc00117 	ldw	ra,4(sp)
 400cbf0:	df000017 	ldw	fp,0(sp)
 400cbf4:	dec00204 	addi	sp,sp,8
 400cbf8:	f800283a 	ret

0400cbfc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400cbfc:	defffa04 	addi	sp,sp,-24
 400cc00:	dfc00515 	stw	ra,20(sp)
 400cc04:	df000415 	stw	fp,16(sp)
 400cc08:	df000404 	addi	fp,sp,16
 400cc0c:	e13ffd15 	stw	r4,-12(fp)
 400cc10:	e17ffe15 	stw	r5,-8(fp)
 400cc14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400cc18:	e0bffd17 	ldw	r2,-12(fp)
 400cc1c:	10800017 	ldw	r2,0(r2)
 400cc20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400cc24:	e0bffc17 	ldw	r2,-16(fp)
 400cc28:	11000a04 	addi	r4,r2,40
 400cc2c:	e17ffe17 	ldw	r5,-8(fp)
 400cc30:	e1bfff17 	ldw	r6,-4(fp)
 400cc34:	400d1d00 	call	400d1d0 <altera_avalon_jtag_uart_ioctl>
}
 400cc38:	e037883a 	mov	sp,fp
 400cc3c:	dfc00117 	ldw	ra,4(sp)
 400cc40:	df000017 	ldw	fp,0(sp)
 400cc44:	dec00204 	addi	sp,sp,8
 400cc48:	f800283a 	ret

0400cc4c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400cc4c:	defff404 	addi	sp,sp,-48
 400cc50:	dfc00b15 	stw	ra,44(sp)
 400cc54:	df000a15 	stw	fp,40(sp)
 400cc58:	df000a04 	addi	fp,sp,40
 400cc5c:	e13ffd15 	stw	r4,-12(fp)
 400cc60:	e17ffe15 	stw	r5,-8(fp)
 400cc64:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 400cc68:	e0bffd17 	ldw	r2,-12(fp)
 400cc6c:	10800c04 	addi	r2,r2,48
 400cc70:	e0bffb15 	stw	r2,-20(fp)
 400cc74:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 400cc78:	e13ffc0b 	ldhu	r4,-16(fp)
 400cc7c:	e17ffc84 	addi	r5,fp,-14
 400cc80:	40064180 	call	4006418 <OSFlagCreate>
 400cc84:	1007883a 	mov	r3,r2
 400cc88:	e0bffb17 	ldw	r2,-20(fp)
 400cc8c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 400cc90:	e0bffd17 	ldw	r2,-12(fp)
 400cc94:	10800a04 	addi	r2,r2,40
 400cc98:	e0bff915 	stw	r2,-28(fp)
 400cc9c:	00800044 	movi	r2,1
 400cca0:	e0bffa0d 	sth	r2,-24(fp)
 400cca4:	e13ffa0b 	ldhu	r4,-24(fp)
 400cca8:	400961c0 	call	400961c <OSSemCreate>
 400ccac:	1007883a 	mov	r3,r2
 400ccb0:	e0bff917 	ldw	r2,-28(fp)
 400ccb4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 400ccb8:	e0bffd17 	ldw	r2,-12(fp)
 400ccbc:	10800b04 	addi	r2,r2,44
 400ccc0:	e0bff715 	stw	r2,-36(fp)
 400ccc4:	00800044 	movi	r2,1
 400ccc8:	e0bff80d 	sth	r2,-32(fp)
 400cccc:	e13ff80b 	ldhu	r4,-32(fp)
 400ccd0:	400961c0 	call	400961c <OSSemCreate>
 400ccd4:	1007883a 	mov	r3,r2
 400ccd8:	e0bff717 	ldw	r2,-36(fp)
 400ccdc:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400cce0:	e0fffd17 	ldw	r3,-12(fp)
 400cce4:	00800044 	movi	r2,1
 400cce8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400ccec:	e0bffd17 	ldw	r2,-12(fp)
 400ccf0:	10800017 	ldw	r2,0(r2)
 400ccf4:	11000104 	addi	r4,r2,4
 400ccf8:	e0bffd17 	ldw	r2,-12(fp)
 400ccfc:	10800817 	ldw	r2,32(r2)
 400cd00:	1007883a 	mov	r3,r2
 400cd04:	2005883a 	mov	r2,r4
 400cd08:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400cd0c:	e13ffe17 	ldw	r4,-8(fp)
 400cd10:	e17fff17 	ldw	r5,-4(fp)
 400cd14:	d8000015 	stw	zero,0(sp)
 400cd18:	01810074 	movhi	r6,1025
 400cd1c:	31b36104 	addi	r6,r6,-12924
 400cd20:	e1fffd17 	ldw	r7,-12(fp)
 400cd24:	400e1c00 	call	400e1c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400cd28:	e0bffd17 	ldw	r2,-12(fp)
 400cd2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400cd30:	e0bffd17 	ldw	r2,-12(fp)
 400cd34:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400cd38:	008100b4 	movhi	r2,1026
 400cd3c:	10a20b04 	addi	r2,r2,-30676
 400cd40:	10800017 	ldw	r2,0(r2)
 400cd44:	100b883a 	mov	r5,r2
 400cd48:	01810074 	movhi	r6,1025
 400cd4c:	31b41204 	addi	r6,r6,-12216
 400cd50:	e1fffd17 	ldw	r7,-12(fp)
 400cd54:	400ddc00 	call	400ddc0 <alt_alarm_start>
 400cd58:	1004403a 	cmpge	r2,r2,zero
 400cd5c:	1000041e 	bne	r2,zero,400cd70 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400cd60:	e0fffd17 	ldw	r3,-12(fp)
 400cd64:	00a00034 	movhi	r2,32768
 400cd68:	10bfffc4 	addi	r2,r2,-1
 400cd6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400cd70:	e037883a 	mov	sp,fp
 400cd74:	dfc00117 	ldw	ra,4(sp)
 400cd78:	df000017 	ldw	fp,0(sp)
 400cd7c:	dec00204 	addi	sp,sp,8
 400cd80:	f800283a 	ret

0400cd84 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400cd84:	defff204 	addi	sp,sp,-56
 400cd88:	dfc00d15 	stw	ra,52(sp)
 400cd8c:	df000c15 	stw	fp,48(sp)
 400cd90:	df000c04 	addi	fp,sp,48
 400cd94:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400cd98:	e0bfff17 	ldw	r2,-4(fp)
 400cd9c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 400cda0:	e0bffd17 	ldw	r2,-12(fp)
 400cda4:	10800017 	ldw	r2,0(r2)
 400cda8:	e0bffc15 	stw	r2,-16(fp)
 400cdac:	00000006 	br	400cdb0 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400cdb0:	e0bffc17 	ldw	r2,-16(fp)
 400cdb4:	10800104 	addi	r2,r2,4
 400cdb8:	10800037 	ldwio	r2,0(r2)
 400cdbc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400cdc0:	e0bffb17 	ldw	r2,-20(fp)
 400cdc4:	1080c00c 	andi	r2,r2,768
 400cdc8:	1005003a 	cmpeq	r2,r2,zero
 400cdcc:	1000991e 	bne	r2,zero,400d034 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400cdd0:	e0bffb17 	ldw	r2,-20(fp)
 400cdd4:	1080400c 	andi	r2,r2,256
 400cdd8:	1005003a 	cmpeq	r2,r2,zero
 400cddc:	1000481e 	bne	r2,zero,400cf00 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400cde0:	00800074 	movhi	r2,1
 400cde4:	e0bffa15 	stw	r2,-24(fp)
 400cde8:	00000006 	br	400cdec <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400cdec:	e0bffd17 	ldw	r2,-12(fp)
 400cdf0:	10800d17 	ldw	r2,52(r2)
 400cdf4:	10800044 	addi	r2,r2,1
 400cdf8:	1081ffcc 	andi	r2,r2,2047
 400cdfc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 400ce00:	e0bffd17 	ldw	r2,-12(fp)
 400ce04:	10c00e17 	ldw	r3,56(r2)
 400ce08:	e0bff917 	ldw	r2,-28(fp)
 400ce0c:	18802826 	beq	r3,r2,400ceb0 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400ce10:	e0bffc17 	ldw	r2,-16(fp)
 400ce14:	10800037 	ldwio	r2,0(r2)
 400ce18:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400ce1c:	e0bffa17 	ldw	r2,-24(fp)
 400ce20:	10a0000c 	andi	r2,r2,32768
 400ce24:	1005003a 	cmpeq	r2,r2,zero
 400ce28:	1000211e 	bne	r2,zero,400ceb0 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400ce2c:	e0bffd17 	ldw	r2,-12(fp)
 400ce30:	10c00d17 	ldw	r3,52(r2)
 400ce34:	e0bffa17 	ldw	r2,-24(fp)
 400ce38:	1009883a 	mov	r4,r2
 400ce3c:	e0bffd17 	ldw	r2,-12(fp)
 400ce40:	1885883a 	add	r2,r3,r2
 400ce44:	10801104 	addi	r2,r2,68
 400ce48:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ce4c:	e0bffd17 	ldw	r2,-12(fp)
 400ce50:	10800d17 	ldw	r2,52(r2)
 400ce54:	10800044 	addi	r2,r2,1
 400ce58:	10c1ffcc 	andi	r3,r2,2047
 400ce5c:	e0bffd17 	ldw	r2,-12(fp)
 400ce60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 400ce64:	e0bffd17 	ldw	r2,-12(fp)
 400ce68:	10800c17 	ldw	r2,48(r2)
 400ce6c:	e0bff615 	stw	r2,-40(fp)
 400ce70:	00800044 	movi	r2,1
 400ce74:	e0bff70d 	sth	r2,-36(fp)
 400ce78:	00800044 	movi	r2,1
 400ce7c:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 400ce80:	008100b4 	movhi	r2,1026
 400ce84:	10a1f444 	addi	r2,r2,-30767
 400ce88:	10800003 	ldbu	r2,0(r2)
 400ce8c:	10803fcc 	andi	r2,r2,255
 400ce90:	1005003a 	cmpeq	r2,r2,zero
 400ce94:	103fd51e 	bne	r2,zero,400cdec <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 400ce98:	e17ff70b 	ldhu	r5,-36(fp)
 400ce9c:	e1bff783 	ldbu	r6,-34(fp)
 400cea0:	e1fffe04 	addi	r7,fp,-8
 400cea4:	e13ff617 	ldw	r4,-40(fp)
 400cea8:	40071400 	call	4007140 <OSFlagPost>
    return err;
 400ceac:	003fcf06 	br	400cdec <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400ceb0:	e0bffa17 	ldw	r2,-24(fp)
 400ceb4:	10bfffec 	andhi	r2,r2,65535
 400ceb8:	1005003a 	cmpeq	r2,r2,zero
 400cebc:	1000101e 	bne	r2,zero,400cf00 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400cec0:	e0bffd17 	ldw	r2,-12(fp)
 400cec4:	10c00817 	ldw	r3,32(r2)
 400cec8:	00bfff84 	movi	r2,-2
 400cecc:	1886703a 	and	r3,r3,r2
 400ced0:	e0bffd17 	ldw	r2,-12(fp)
 400ced4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400ced8:	e0bffc17 	ldw	r2,-16(fp)
 400cedc:	11000104 	addi	r4,r2,4
 400cee0:	e0bffd17 	ldw	r2,-12(fp)
 400cee4:	10800817 	ldw	r2,32(r2)
 400cee8:	1007883a 	mov	r3,r2
 400ceec:	2005883a 	mov	r2,r4
 400cef0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400cef4:	e0bffc17 	ldw	r2,-16(fp)
 400cef8:	10800104 	addi	r2,r2,4
 400cefc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400cf00:	e0bffb17 	ldw	r2,-20(fp)
 400cf04:	1080800c 	andi	r2,r2,512
 400cf08:	1005003a 	cmpeq	r2,r2,zero
 400cf0c:	103fa81e 	bne	r2,zero,400cdb0 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400cf10:	e0bffb17 	ldw	r2,-20(fp)
 400cf14:	10bfffec 	andhi	r2,r2,65535
 400cf18:	1004d43a 	srli	r2,r2,16
 400cf1c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400cf20:	00002706 	br	400cfc0 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400cf24:	e13ffc17 	ldw	r4,-16(fp)
 400cf28:	e0bffd17 	ldw	r2,-12(fp)
 400cf2c:	10c01017 	ldw	r3,64(r2)
 400cf30:	e0bffd17 	ldw	r2,-12(fp)
 400cf34:	1885883a 	add	r2,r3,r2
 400cf38:	10821104 	addi	r2,r2,2116
 400cf3c:	10800003 	ldbu	r2,0(r2)
 400cf40:	10c03fcc 	andi	r3,r2,255
 400cf44:	18c0201c 	xori	r3,r3,128
 400cf48:	18ffe004 	addi	r3,r3,-128
 400cf4c:	2005883a 	mov	r2,r4
 400cf50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400cf54:	e0bffd17 	ldw	r2,-12(fp)
 400cf58:	10801017 	ldw	r2,64(r2)
 400cf5c:	10800044 	addi	r2,r2,1
 400cf60:	10c1ffcc 	andi	r3,r2,2047
 400cf64:	e0bffd17 	ldw	r2,-12(fp)
 400cf68:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 400cf6c:	e0bffd17 	ldw	r2,-12(fp)
 400cf70:	10800c17 	ldw	r2,48(r2)
 400cf74:	e0bff415 	stw	r2,-48(fp)
 400cf78:	00800084 	movi	r2,2
 400cf7c:	e0bff50d 	sth	r2,-44(fp)
 400cf80:	00800044 	movi	r2,1
 400cf84:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 400cf88:	008100b4 	movhi	r2,1026
 400cf8c:	10a1f444 	addi	r2,r2,-30767
 400cf90:	10800003 	ldbu	r2,0(r2)
 400cf94:	10803fcc 	andi	r2,r2,255
 400cf98:	1005003a 	cmpeq	r2,r2,zero
 400cf9c:	1000051e 	bne	r2,zero,400cfb4 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 400cfa0:	e17ff50b 	ldhu	r5,-44(fp)
 400cfa4:	e1bff583 	ldbu	r6,-42(fp)
 400cfa8:	e1fffe44 	addi	r7,fp,-7
 400cfac:	e13ff417 	ldw	r4,-48(fp)
 400cfb0:	40071400 	call	4007140 <OSFlagPost>

        space--;
 400cfb4:	e0bff817 	ldw	r2,-32(fp)
 400cfb8:	10bfffc4 	addi	r2,r2,-1
 400cfbc:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400cfc0:	e0bff817 	ldw	r2,-32(fp)
 400cfc4:	1005003a 	cmpeq	r2,r2,zero
 400cfc8:	1000051e 	bne	r2,zero,400cfe0 <altera_avalon_jtag_uart_irq+0x25c>
 400cfcc:	e0bffd17 	ldw	r2,-12(fp)
 400cfd0:	10c01017 	ldw	r3,64(r2)
 400cfd4:	e0bffd17 	ldw	r2,-12(fp)
 400cfd8:	10800f17 	ldw	r2,60(r2)
 400cfdc:	18bfd11e 	bne	r3,r2,400cf24 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400cfe0:	e0bff817 	ldw	r2,-32(fp)
 400cfe4:	1005003a 	cmpeq	r2,r2,zero
 400cfe8:	103f711e 	bne	r2,zero,400cdb0 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400cfec:	e0bffd17 	ldw	r2,-12(fp)
 400cff0:	10c00817 	ldw	r3,32(r2)
 400cff4:	00bfff44 	movi	r2,-3
 400cff8:	1886703a 	and	r3,r3,r2
 400cffc:	e0bffd17 	ldw	r2,-12(fp)
 400d000:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400d004:	e0bffd17 	ldw	r2,-12(fp)
 400d008:	10800017 	ldw	r2,0(r2)
 400d00c:	11000104 	addi	r4,r2,4
 400d010:	e0bffd17 	ldw	r2,-12(fp)
 400d014:	10800817 	ldw	r2,32(r2)
 400d018:	1007883a 	mov	r3,r2
 400d01c:	2005883a 	mov	r2,r4
 400d020:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400d024:	e0bffc17 	ldw	r2,-16(fp)
 400d028:	10800104 	addi	r2,r2,4
 400d02c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400d030:	003f5f06 	br	400cdb0 <altera_avalon_jtag_uart_irq+0x2c>
}
 400d034:	e037883a 	mov	sp,fp
 400d038:	dfc00117 	ldw	ra,4(sp)
 400d03c:	df000017 	ldw	fp,0(sp)
 400d040:	dec00204 	addi	sp,sp,8
 400d044:	f800283a 	ret

0400d048 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400d048:	defff804 	addi	sp,sp,-32
 400d04c:	dfc00715 	stw	ra,28(sp)
 400d050:	df000615 	stw	fp,24(sp)
 400d054:	df000604 	addi	fp,sp,24
 400d058:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400d05c:	e0bfff17 	ldw	r2,-4(fp)
 400d060:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400d064:	e0bffd17 	ldw	r2,-12(fp)
 400d068:	10800017 	ldw	r2,0(r2)
 400d06c:	10800104 	addi	r2,r2,4
 400d070:	10800037 	ldwio	r2,0(r2)
 400d074:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400d078:	e0bffc17 	ldw	r2,-16(fp)
 400d07c:	1081000c 	andi	r2,r2,1024
 400d080:	1005003a 	cmpeq	r2,r2,zero
 400d084:	10000c1e 	bne	r2,zero,400d0b8 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400d088:	e0bffd17 	ldw	r2,-12(fp)
 400d08c:	10800017 	ldw	r2,0(r2)
 400d090:	11000104 	addi	r4,r2,4
 400d094:	e0bffd17 	ldw	r2,-12(fp)
 400d098:	10800817 	ldw	r2,32(r2)
 400d09c:	10810014 	ori	r2,r2,1024
 400d0a0:	1007883a 	mov	r3,r2
 400d0a4:	2005883a 	mov	r2,r4
 400d0a8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 400d0ac:	e0bffd17 	ldw	r2,-12(fp)
 400d0b0:	10000915 	stw	zero,36(r2)
 400d0b4:	00002106 	br	400d13c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400d0b8:	e0bffd17 	ldw	r2,-12(fp)
 400d0bc:	10c00917 	ldw	r3,36(r2)
 400d0c0:	00a00034 	movhi	r2,32768
 400d0c4:	10bfff04 	addi	r2,r2,-4
 400d0c8:	10c01c36 	bltu	r2,r3,400d13c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 400d0cc:	e0bffd17 	ldw	r2,-12(fp)
 400d0d0:	10800917 	ldw	r2,36(r2)
 400d0d4:	10c00044 	addi	r3,r2,1
 400d0d8:	e0bffd17 	ldw	r2,-12(fp)
 400d0dc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 400d0e0:	e0bffd17 	ldw	r2,-12(fp)
 400d0e4:	10c00917 	ldw	r3,36(r2)
 400d0e8:	e0bffd17 	ldw	r2,-12(fp)
 400d0ec:	10800117 	ldw	r2,4(r2)
 400d0f0:	18801236 	bltu	r3,r2,400d13c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 400d0f4:	e0bffd17 	ldw	r2,-12(fp)
 400d0f8:	10800c17 	ldw	r2,48(r2)
 400d0fc:	e0bffa15 	stw	r2,-24(fp)
 400d100:	00800104 	movi	r2,4
 400d104:	e0bffb0d 	sth	r2,-20(fp)
 400d108:	00800044 	movi	r2,1
 400d10c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 400d110:	008100b4 	movhi	r2,1026
 400d114:	10a1f444 	addi	r2,r2,-30767
 400d118:	10800003 	ldbu	r2,0(r2)
 400d11c:	10803fcc 	andi	r2,r2,255
 400d120:	1005003a 	cmpeq	r2,r2,zero
 400d124:	1000051e 	bne	r2,zero,400d13c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 400d128:	e17ffb0b 	ldhu	r5,-20(fp)
 400d12c:	e1bffb83 	ldbu	r6,-18(fp)
 400d130:	e1fffe04 	addi	r7,fp,-8
 400d134:	e13ffa17 	ldw	r4,-24(fp)
 400d138:	40071400 	call	4007140 <OSFlagPost>
 400d13c:	008100b4 	movhi	r2,1026
 400d140:	10a20b04 	addi	r2,r2,-30676
 400d144:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 400d148:	e037883a 	mov	sp,fp
 400d14c:	dfc00117 	ldw	ra,4(sp)
 400d150:	df000017 	ldw	fp,0(sp)
 400d154:	dec00204 	addi	sp,sp,8
 400d158:	f800283a 	ret

0400d15c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400d15c:	defffc04 	addi	sp,sp,-16
 400d160:	df000315 	stw	fp,12(sp)
 400d164:	df000304 	addi	fp,sp,12
 400d168:	e13ffd15 	stw	r4,-12(fp)
 400d16c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400d170:	00000706 	br	400d190 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 400d174:	e0bffe17 	ldw	r2,-8(fp)
 400d178:	1090000c 	andi	r2,r2,16384
 400d17c:	1005003a 	cmpeq	r2,r2,zero
 400d180:	1000031e 	bne	r2,zero,400d190 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 400d184:	00bffd44 	movi	r2,-11
 400d188:	e0bfff15 	stw	r2,-4(fp)
 400d18c:	00000b06 	br	400d1bc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400d190:	e0bffd17 	ldw	r2,-12(fp)
 400d194:	10c01017 	ldw	r3,64(r2)
 400d198:	e0bffd17 	ldw	r2,-12(fp)
 400d19c:	10800f17 	ldw	r2,60(r2)
 400d1a0:	18800526 	beq	r3,r2,400d1b8 <altera_avalon_jtag_uart_close+0x5c>
 400d1a4:	e0bffd17 	ldw	r2,-12(fp)
 400d1a8:	10c00917 	ldw	r3,36(r2)
 400d1ac:	e0bffd17 	ldw	r2,-12(fp)
 400d1b0:	10800117 	ldw	r2,4(r2)
 400d1b4:	18bfef36 	bltu	r3,r2,400d174 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400d1b8:	e03fff15 	stw	zero,-4(fp)
 400d1bc:	e0bfff17 	ldw	r2,-4(fp)
}
 400d1c0:	e037883a 	mov	sp,fp
 400d1c4:	df000017 	ldw	fp,0(sp)
 400d1c8:	dec00104 	addi	sp,sp,4
 400d1cc:	f800283a 	ret

0400d1d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400d1d0:	defff804 	addi	sp,sp,-32
 400d1d4:	df000715 	stw	fp,28(sp)
 400d1d8:	df000704 	addi	fp,sp,28
 400d1dc:	e13ffb15 	stw	r4,-20(fp)
 400d1e0:	e17ffc15 	stw	r5,-16(fp)
 400d1e4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 400d1e8:	00bff9c4 	movi	r2,-25
 400d1ec:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 400d1f0:	e0bffc17 	ldw	r2,-16(fp)
 400d1f4:	e0bfff15 	stw	r2,-4(fp)
 400d1f8:	e0ffff17 	ldw	r3,-4(fp)
 400d1fc:	189a8060 	cmpeqi	r2,r3,27137
 400d200:	1000041e 	bne	r2,zero,400d214 <altera_avalon_jtag_uart_ioctl+0x44>
 400d204:	e0ffff17 	ldw	r3,-4(fp)
 400d208:	189a80a0 	cmpeqi	r2,r3,27138
 400d20c:	10001b1e 	bne	r2,zero,400d27c <altera_avalon_jtag_uart_ioctl+0xac>
 400d210:	00002706 	br	400d2b0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400d214:	e0bffb17 	ldw	r2,-20(fp)
 400d218:	10c00117 	ldw	r3,4(r2)
 400d21c:	00a00034 	movhi	r2,32768
 400d220:	10bfffc4 	addi	r2,r2,-1
 400d224:	18802226 	beq	r3,r2,400d2b0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 400d228:	e0bffd17 	ldw	r2,-12(fp)
 400d22c:	10800017 	ldw	r2,0(r2)
 400d230:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400d234:	e0bff917 	ldw	r2,-28(fp)
 400d238:	10800090 	cmplti	r2,r2,2
 400d23c:	1000071e 	bne	r2,zero,400d25c <altera_avalon_jtag_uart_ioctl+0x8c>
 400d240:	e0fff917 	ldw	r3,-28(fp)
 400d244:	00a00034 	movhi	r2,32768
 400d248:	10bfffc4 	addi	r2,r2,-1
 400d24c:	18800326 	beq	r3,r2,400d25c <altera_avalon_jtag_uart_ioctl+0x8c>
 400d250:	e0bff917 	ldw	r2,-28(fp)
 400d254:	e0bffe15 	stw	r2,-8(fp)
 400d258:	00000306 	br	400d268 <altera_avalon_jtag_uart_ioctl+0x98>
 400d25c:	00e00034 	movhi	r3,32768
 400d260:	18ffff84 	addi	r3,r3,-2
 400d264:	e0fffe15 	stw	r3,-8(fp)
 400d268:	e0bffb17 	ldw	r2,-20(fp)
 400d26c:	e0fffe17 	ldw	r3,-8(fp)
 400d270:	10c00115 	stw	r3,4(r2)
      rc = 0;
 400d274:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 400d278:	00000d06 	br	400d2b0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400d27c:	e0bffb17 	ldw	r2,-20(fp)
 400d280:	10c00117 	ldw	r3,4(r2)
 400d284:	00a00034 	movhi	r2,32768
 400d288:	10bfffc4 	addi	r2,r2,-1
 400d28c:	18800826 	beq	r3,r2,400d2b0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400d290:	e13ffd17 	ldw	r4,-12(fp)
 400d294:	e0bffb17 	ldw	r2,-20(fp)
 400d298:	10c00917 	ldw	r3,36(r2)
 400d29c:	e0bffb17 	ldw	r2,-20(fp)
 400d2a0:	10800117 	ldw	r2,4(r2)
 400d2a4:	1885803a 	cmpltu	r2,r3,r2
 400d2a8:	20800015 	stw	r2,0(r4)
      rc = 0;
 400d2ac:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 400d2b0:	e0bffa17 	ldw	r2,-24(fp)
}
 400d2b4:	e037883a 	mov	sp,fp
 400d2b8:	df000017 	ldw	fp,0(sp)
 400d2bc:	dec00104 	addi	sp,sp,4
 400d2c0:	f800283a 	ret

0400d2c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400d2c4:	deffeb04 	addi	sp,sp,-84
 400d2c8:	dfc01415 	stw	ra,80(sp)
 400d2cc:	df001315 	stw	fp,76(sp)
 400d2d0:	df001304 	addi	fp,sp,76
 400d2d4:	e13ffb15 	stw	r4,-20(fp)
 400d2d8:	e17ffc15 	stw	r5,-16(fp)
 400d2dc:	e1bffd15 	stw	r6,-12(fp)
 400d2e0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 400d2e4:	e0bffc17 	ldw	r2,-16(fp)
 400d2e8:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 400d2ec:	e0bffb17 	ldw	r2,-20(fp)
 400d2f0:	10800a17 	ldw	r2,40(r2)
 400d2f4:	e0bff315 	stw	r2,-52(fp)
 400d2f8:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 400d2fc:	e17ff40b 	ldhu	r5,-48(fp)
 400d300:	e1bffa44 	addi	r6,fp,-23
 400d304:	e13ff317 	ldw	r4,-52(fp)
 400d308:	40099d00 	call	40099d0 <OSSemPend>

  while (space > 0)
 400d30c:	00006406 	br	400d4a0 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400d310:	e0bffb17 	ldw	r2,-20(fp)
 400d314:	10800d17 	ldw	r2,52(r2)
 400d318:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 400d31c:	e0bffb17 	ldw	r2,-20(fp)
 400d320:	10800e17 	ldw	r2,56(r2)
 400d324:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 400d328:	e0fff617 	ldw	r3,-40(fp)
 400d32c:	e0bff517 	ldw	r2,-44(fp)
 400d330:	18800536 	bltu	r3,r2,400d348 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 400d334:	e0bff617 	ldw	r2,-40(fp)
 400d338:	e0fff517 	ldw	r3,-44(fp)
 400d33c:	10c5c83a 	sub	r2,r2,r3
 400d340:	e0bff715 	stw	r2,-36(fp)
 400d344:	00000406 	br	400d358 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400d348:	00820004 	movi	r2,2048
 400d34c:	e0fff517 	ldw	r3,-44(fp)
 400d350:	10c5c83a 	sub	r2,r2,r3
 400d354:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 400d358:	e0bff717 	ldw	r2,-36(fp)
 400d35c:	1005003a 	cmpeq	r2,r2,zero
 400d360:	10001f1e 	bne	r2,zero,400d3e0 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 400d364:	e0fffd17 	ldw	r3,-12(fp)
 400d368:	e0bff717 	ldw	r2,-36(fp)
 400d36c:	1880022e 	bgeu	r3,r2,400d378 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 400d370:	e0bffd17 	ldw	r2,-12(fp)
 400d374:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400d378:	e0bffb17 	ldw	r2,-20(fp)
 400d37c:	10c01104 	addi	r3,r2,68
 400d380:	e0bff517 	ldw	r2,-44(fp)
 400d384:	1887883a 	add	r3,r3,r2
 400d388:	e0bff917 	ldw	r2,-28(fp)
 400d38c:	1009883a 	mov	r4,r2
 400d390:	180b883a 	mov	r5,r3
 400d394:	e1bff717 	ldw	r6,-36(fp)
 400d398:	40014dc0 	call	40014dc <memcpy>
      ptr   += n;
 400d39c:	e0fff717 	ldw	r3,-36(fp)
 400d3a0:	e0bff917 	ldw	r2,-28(fp)
 400d3a4:	10c5883a 	add	r2,r2,r3
 400d3a8:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 400d3ac:	e0fffd17 	ldw	r3,-12(fp)
 400d3b0:	e0bff717 	ldw	r2,-36(fp)
 400d3b4:	1885c83a 	sub	r2,r3,r2
 400d3b8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400d3bc:	e0fff517 	ldw	r3,-44(fp)
 400d3c0:	e0bff717 	ldw	r2,-36(fp)
 400d3c4:	1885883a 	add	r2,r3,r2
 400d3c8:	10c1ffcc 	andi	r3,r2,2047
 400d3cc:	e0bffb17 	ldw	r2,-20(fp)
 400d3d0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 400d3d4:	e0bffd17 	ldw	r2,-12(fp)
 400d3d8:	10800048 	cmpgei	r2,r2,1
 400d3dc:	103fcc1e 	bne	r2,zero,400d310 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 400d3e0:	e0fff917 	ldw	r3,-28(fp)
 400d3e4:	e0bffc17 	ldw	r2,-16(fp)
 400d3e8:	1880301e 	bne	r3,r2,400d4ac <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400d3ec:	e0bffe17 	ldw	r2,-8(fp)
 400d3f0:	1090000c 	andi	r2,r2,16384
 400d3f4:	1004c03a 	cmpne	r2,r2,zero
 400d3f8:	10002c1e 	bne	r2,zero,400d4ac <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 400d3fc:	008100b4 	movhi	r2,1026
 400d400:	10a1f444 	addi	r2,r2,-30767
 400d404:	10800003 	ldbu	r2,0(r2)
 400d408:	10803fcc 	andi	r2,r2,255
 400d40c:	10800058 	cmpnei	r2,r2,1
 400d410:	1000161e 	bne	r2,zero,400d46c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 400d414:	e0bffb17 	ldw	r2,-20(fp)
 400d418:	10800c17 	ldw	r2,48(r2)
 400d41c:	e0bff015 	stw	r2,-64(fp)
 400d420:	00800144 	movi	r2,5
 400d424:	e0bff10d 	sth	r2,-60(fp)
 400d428:	00bfe0c4 	movi	r2,-125
 400d42c:	e0bff185 	stb	r2,-58(fp)
 400d430:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 400d434:	008100b4 	movhi	r2,1026
 400d438:	10a1f444 	addi	r2,r2,-30767
 400d43c:	10800003 	ldbu	r2,0(r2)
 400d440:	10803fcc 	andi	r2,r2,255
 400d444:	1005003a 	cmpeq	r2,r2,zero
 400d448:	1000111e 	bne	r2,zero,400d490 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 400d44c:	e17ff10b 	ldhu	r5,-60(fp)
 400d450:	e1bff183 	ldbu	r6,-58(fp)
 400d454:	e1fff20b 	ldhu	r7,-56(fp)
 400d458:	e0bffa04 	addi	r2,fp,-24
 400d45c:	d8800015 	stw	r2,0(sp)
 400d460:	e13ff017 	ldw	r4,-64(fp)
 400d464:	4006a940 	call	4006a94 <OSFlagPend>
    return err;
 400d468:	00000906 	br	400d490 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400d46c:	e0bffb17 	ldw	r2,-20(fp)
 400d470:	10c00d17 	ldw	r3,52(r2)
 400d474:	e0bff617 	ldw	r2,-40(fp)
 400d478:	1880051e 	bne	r3,r2,400d490 <altera_avalon_jtag_uart_read+0x1cc>
 400d47c:	e0bffb17 	ldw	r2,-20(fp)
 400d480:	10c00917 	ldw	r3,36(r2)
 400d484:	e0bffb17 	ldw	r2,-20(fp)
 400d488:	10800117 	ldw	r2,4(r2)
 400d48c:	18bff736 	bltu	r3,r2,400d46c <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400d490:	e0bffb17 	ldw	r2,-20(fp)
 400d494:	10c00d17 	ldw	r3,52(r2)
 400d498:	e0bff617 	ldw	r2,-40(fp)
 400d49c:	18800326 	beq	r3,r2,400d4ac <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400d4a0:	e0bffd17 	ldw	r2,-12(fp)
 400d4a4:	10800048 	cmpgei	r2,r2,1
 400d4a8:	103f991e 	bne	r2,zero,400d310 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 400d4ac:	e0bffb17 	ldw	r2,-20(fp)
 400d4b0:	11000a17 	ldw	r4,40(r2)
 400d4b4:	4009dc80 	call	4009dc8 <OSSemPost>

  if (ptr != buffer)
 400d4b8:	e0fff917 	ldw	r3,-28(fp)
 400d4bc:	e0bffc17 	ldw	r2,-16(fp)
 400d4c0:	18801926 	beq	r3,r2,400d528 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d4c4:	0005303a 	rdctl	r2,status
 400d4c8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d4cc:	e0ffef17 	ldw	r3,-68(fp)
 400d4d0:	00bfff84 	movi	r2,-2
 400d4d4:	1884703a 	and	r2,r3,r2
 400d4d8:	1001703a 	wrctl	status,r2
  
  return context;
 400d4dc:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400d4e0:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400d4e4:	e0bffb17 	ldw	r2,-20(fp)
 400d4e8:	10800817 	ldw	r2,32(r2)
 400d4ec:	10c00054 	ori	r3,r2,1
 400d4f0:	e0bffb17 	ldw	r2,-20(fp)
 400d4f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400d4f8:	e0bffb17 	ldw	r2,-20(fp)
 400d4fc:	10800017 	ldw	r2,0(r2)
 400d500:	11000104 	addi	r4,r2,4
 400d504:	e0bffb17 	ldw	r2,-20(fp)
 400d508:	10800817 	ldw	r2,32(r2)
 400d50c:	1007883a 	mov	r3,r2
 400d510:	2005883a 	mov	r2,r4
 400d514:	10c00035 	stwio	r3,0(r2)
 400d518:	e0bff817 	ldw	r2,-32(fp)
 400d51c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d520:	e0bfee17 	ldw	r2,-72(fp)
 400d524:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400d528:	e0fff917 	ldw	r3,-28(fp)
 400d52c:	e0bffc17 	ldw	r2,-16(fp)
 400d530:	18800526 	beq	r3,r2,400d548 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 400d534:	e0fff917 	ldw	r3,-28(fp)
 400d538:	e0bffc17 	ldw	r2,-16(fp)
 400d53c:	1887c83a 	sub	r3,r3,r2
 400d540:	e0ffff15 	stw	r3,-4(fp)
 400d544:	00000906 	br	400d56c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 400d548:	e0bffe17 	ldw	r2,-8(fp)
 400d54c:	1090000c 	andi	r2,r2,16384
 400d550:	1005003a 	cmpeq	r2,r2,zero
 400d554:	1000031e 	bne	r2,zero,400d564 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 400d558:	00bffd44 	movi	r2,-11
 400d55c:	e0bfff15 	stw	r2,-4(fp)
 400d560:	00000206 	br	400d56c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 400d564:	00bffec4 	movi	r2,-5
 400d568:	e0bfff15 	stw	r2,-4(fp)
 400d56c:	e0bfff17 	ldw	r2,-4(fp)
}
 400d570:	e037883a 	mov	sp,fp
 400d574:	dfc00117 	ldw	ra,4(sp)
 400d578:	df000017 	ldw	fp,0(sp)
 400d57c:	dec00204 	addi	sp,sp,8
 400d580:	f800283a 	ret

0400d584 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400d584:	deffeb04 	addi	sp,sp,-84
 400d588:	dfc01415 	stw	ra,80(sp)
 400d58c:	df001315 	stw	fp,76(sp)
 400d590:	df001304 	addi	fp,sp,76
 400d594:	e13ffb15 	stw	r4,-20(fp)
 400d598:	e17ffc15 	stw	r5,-16(fp)
 400d59c:	e1bffd15 	stw	r6,-12(fp)
 400d5a0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400d5a4:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400d5a8:	e0bffc17 	ldw	r2,-16(fp)
 400d5ac:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 400d5b0:	e0bffb17 	ldw	r2,-20(fp)
 400d5b4:	10800b17 	ldw	r2,44(r2)
 400d5b8:	e0bff315 	stw	r2,-52(fp)
 400d5bc:	e03ff40d 	sth	zero,-48(fp)
 400d5c0:	e17ff40b 	ldhu	r5,-48(fp)
 400d5c4:	e1bffa04 	addi	r6,fp,-24
 400d5c8:	e13ff317 	ldw	r4,-52(fp)
 400d5cc:	40099d00 	call	40099d0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400d5d0:	00003a06 	br	400d6bc <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400d5d4:	e0bffb17 	ldw	r2,-20(fp)
 400d5d8:	10800f17 	ldw	r2,60(r2)
 400d5dc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400d5e0:	e0bffb17 	ldw	r2,-20(fp)
 400d5e4:	10801017 	ldw	r2,64(r2)
 400d5e8:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 400d5ec:	e0fff917 	ldw	r3,-28(fp)
 400d5f0:	e0bff817 	ldw	r2,-32(fp)
 400d5f4:	1880062e 	bgeu	r3,r2,400d610 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 400d5f8:	e0fff817 	ldw	r3,-32(fp)
 400d5fc:	e0bff917 	ldw	r2,-28(fp)
 400d600:	1885c83a 	sub	r2,r3,r2
 400d604:	10bfffc4 	addi	r2,r2,-1
 400d608:	e0bff715 	stw	r2,-36(fp)
 400d60c:	00000c06 	br	400d640 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 400d610:	e0bff817 	ldw	r2,-32(fp)
 400d614:	1005003a 	cmpeq	r2,r2,zero
 400d618:	1000051e 	bne	r2,zero,400d630 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400d61c:	00820004 	movi	r2,2048
 400d620:	e0fff917 	ldw	r3,-28(fp)
 400d624:	10c5c83a 	sub	r2,r2,r3
 400d628:	e0bff715 	stw	r2,-36(fp)
 400d62c:	00000406 	br	400d640 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400d630:	0081ffc4 	movi	r2,2047
 400d634:	e0fff917 	ldw	r3,-28(fp)
 400d638:	10c5c83a 	sub	r2,r2,r3
 400d63c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 400d640:	e0bff717 	ldw	r2,-36(fp)
 400d644:	1005003a 	cmpeq	r2,r2,zero
 400d648:	10001f1e 	bne	r2,zero,400d6c8 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 400d64c:	e0fffd17 	ldw	r3,-12(fp)
 400d650:	e0bff717 	ldw	r2,-36(fp)
 400d654:	1880022e 	bgeu	r3,r2,400d660 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 400d658:	e0bffd17 	ldw	r2,-12(fp)
 400d65c:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400d660:	e0bffb17 	ldw	r2,-20(fp)
 400d664:	10c21104 	addi	r3,r2,2116
 400d668:	e0bff917 	ldw	r2,-28(fp)
 400d66c:	1885883a 	add	r2,r3,r2
 400d670:	e0fffc17 	ldw	r3,-16(fp)
 400d674:	1009883a 	mov	r4,r2
 400d678:	180b883a 	mov	r5,r3
 400d67c:	e1bff717 	ldw	r6,-36(fp)
 400d680:	40014dc0 	call	40014dc <memcpy>
      ptr   += n;
 400d684:	e0fff717 	ldw	r3,-36(fp)
 400d688:	e0bffc17 	ldw	r2,-16(fp)
 400d68c:	10c5883a 	add	r2,r2,r3
 400d690:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 400d694:	e0fffd17 	ldw	r3,-12(fp)
 400d698:	e0bff717 	ldw	r2,-36(fp)
 400d69c:	1885c83a 	sub	r2,r3,r2
 400d6a0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400d6a4:	e0fff917 	ldw	r3,-28(fp)
 400d6a8:	e0bff717 	ldw	r2,-36(fp)
 400d6ac:	1885883a 	add	r2,r3,r2
 400d6b0:	10c1ffcc 	andi	r3,r2,2047
 400d6b4:	e0bffb17 	ldw	r2,-20(fp)
 400d6b8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400d6bc:	e0bffd17 	ldw	r2,-12(fp)
 400d6c0:	10800048 	cmpgei	r2,r2,1
 400d6c4:	103fc31e 	bne	r2,zero,400d5d4 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d6c8:	0005303a 	rdctl	r2,status
 400d6cc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d6d0:	e0fff217 	ldw	r3,-56(fp)
 400d6d4:	00bfff84 	movi	r2,-2
 400d6d8:	1884703a 	and	r2,r3,r2
 400d6dc:	1001703a 	wrctl	status,r2
  
  return context;
 400d6e0:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400d6e4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400d6e8:	e0bffb17 	ldw	r2,-20(fp)
 400d6ec:	10800817 	ldw	r2,32(r2)
 400d6f0:	10c00094 	ori	r3,r2,2
 400d6f4:	e0bffb17 	ldw	r2,-20(fp)
 400d6f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400d6fc:	e0bffb17 	ldw	r2,-20(fp)
 400d700:	10800017 	ldw	r2,0(r2)
 400d704:	11000104 	addi	r4,r2,4
 400d708:	e0bffb17 	ldw	r2,-20(fp)
 400d70c:	10800817 	ldw	r2,32(r2)
 400d710:	1007883a 	mov	r3,r2
 400d714:	2005883a 	mov	r2,r4
 400d718:	10c00035 	stwio	r3,0(r2)
 400d71c:	e0bff617 	ldw	r2,-40(fp)
 400d720:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d724:	e0bff117 	ldw	r2,-60(fp)
 400d728:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400d72c:	e0bffd17 	ldw	r2,-12(fp)
 400d730:	10800050 	cmplti	r2,r2,1
 400d734:	10002d1e 	bne	r2,zero,400d7ec <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 400d738:	e0bffe17 	ldw	r2,-8(fp)
 400d73c:	1090000c 	andi	r2,r2,16384
 400d740:	1004c03a 	cmpne	r2,r2,zero
 400d744:	10002c1e 	bne	r2,zero,400d7f8 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 400d748:	008100b4 	movhi	r2,1026
 400d74c:	10a1f444 	addi	r2,r2,-30767
 400d750:	10800003 	ldbu	r2,0(r2)
 400d754:	10803fcc 	andi	r2,r2,255
 400d758:	10800058 	cmpnei	r2,r2,1
 400d75c:	1000161e 	bne	r2,zero,400d7b8 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 400d760:	e0bffb17 	ldw	r2,-20(fp)
 400d764:	10800c17 	ldw	r2,48(r2)
 400d768:	e0bfee15 	stw	r2,-72(fp)
 400d76c:	00800184 	movi	r2,6
 400d770:	e0bfef0d 	sth	r2,-68(fp)
 400d774:	00bfe0c4 	movi	r2,-125
 400d778:	e0bfef85 	stb	r2,-66(fp)
 400d77c:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 400d780:	008100b4 	movhi	r2,1026
 400d784:	10a1f444 	addi	r2,r2,-30767
 400d788:	10800003 	ldbu	r2,0(r2)
 400d78c:	10803fcc 	andi	r2,r2,255
 400d790:	1005003a 	cmpeq	r2,r2,zero
 400d794:	1000111e 	bne	r2,zero,400d7dc <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 400d798:	e17fef0b 	ldhu	r5,-68(fp)
 400d79c:	e1bfef83 	ldbu	r6,-66(fp)
 400d7a0:	e1fff00b 	ldhu	r7,-64(fp)
 400d7a4:	e0bffa44 	addi	r2,fp,-23
 400d7a8:	d8800015 	stw	r2,0(sp)
 400d7ac:	e13fee17 	ldw	r4,-72(fp)
 400d7b0:	4006a940 	call	4006a94 <OSFlagPend>
    return err;
 400d7b4:	00000906 	br	400d7dc <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400d7b8:	e0bffb17 	ldw	r2,-20(fp)
 400d7bc:	10c01017 	ldw	r3,64(r2)
 400d7c0:	e0bff817 	ldw	r2,-32(fp)
 400d7c4:	1880051e 	bne	r3,r2,400d7dc <altera_avalon_jtag_uart_write+0x258>
 400d7c8:	e0bffb17 	ldw	r2,-20(fp)
 400d7cc:	10c00917 	ldw	r3,36(r2)
 400d7d0:	e0bffb17 	ldw	r2,-20(fp)
 400d7d4:	10800117 	ldw	r2,4(r2)
 400d7d8:	18bff736 	bltu	r3,r2,400d7b8 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 400d7dc:	e0bffb17 	ldw	r2,-20(fp)
 400d7e0:	10c01017 	ldw	r3,64(r2)
 400d7e4:	e0bff817 	ldw	r2,-32(fp)
 400d7e8:	18800326 	beq	r3,r2,400d7f8 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 400d7ec:	e0bffd17 	ldw	r2,-12(fp)
 400d7f0:	10800048 	cmpgei	r2,r2,1
 400d7f4:	103fb11e 	bne	r2,zero,400d6bc <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 400d7f8:	e0bffb17 	ldw	r2,-20(fp)
 400d7fc:	11000b17 	ldw	r4,44(r2)
 400d800:	4009dc80 	call	4009dc8 <OSSemPost>

  if (ptr != start)
 400d804:	e0fffc17 	ldw	r3,-16(fp)
 400d808:	e0bff517 	ldw	r2,-44(fp)
 400d80c:	18800526 	beq	r3,r2,400d824 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 400d810:	e0fffc17 	ldw	r3,-16(fp)
 400d814:	e0bff517 	ldw	r2,-44(fp)
 400d818:	1887c83a 	sub	r3,r3,r2
 400d81c:	e0ffff15 	stw	r3,-4(fp)
 400d820:	00000906 	br	400d848 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 400d824:	e0bffe17 	ldw	r2,-8(fp)
 400d828:	1090000c 	andi	r2,r2,16384
 400d82c:	1005003a 	cmpeq	r2,r2,zero
 400d830:	1000031e 	bne	r2,zero,400d840 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 400d834:	00bffd44 	movi	r2,-11
 400d838:	e0bfff15 	stw	r2,-4(fp)
 400d83c:	00000206 	br	400d848 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 400d840:	00bffec4 	movi	r2,-5
 400d844:	e0bfff15 	stw	r2,-4(fp)
 400d848:	e0bfff17 	ldw	r2,-4(fp)
}
 400d84c:	e037883a 	mov	sp,fp
 400d850:	dfc00117 	ldw	ra,4(sp)
 400d854:	df000017 	ldw	fp,0(sp)
 400d858:	dec00204 	addi	sp,sp,8
 400d85c:	f800283a 	ret

0400d860 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400d860:	defffa04 	addi	sp,sp,-24
 400d864:	dfc00515 	stw	ra,20(sp)
 400d868:	df000415 	stw	fp,16(sp)
 400d86c:	df000404 	addi	fp,sp,16
 400d870:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 400d874:	e0bfff17 	ldw	r2,-4(fp)
 400d878:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 400d87c:	e0bfff17 	ldw	r2,-4(fp)
 400d880:	10800104 	addi	r2,r2,4
 400d884:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d888:	0005303a 	rdctl	r2,status
 400d88c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d890:	e0fffd17 	ldw	r3,-12(fp)
 400d894:	00bfff84 	movi	r2,-2
 400d898:	1884703a 	and	r2,r3,r2
 400d89c:	1001703a 	wrctl	status,r2
  
  return context;
 400d8a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 400d8a4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 400d8a8:	400e9240 	call	400e924 <alt_tick>
 400d8ac:	e0bffe17 	ldw	r2,-8(fp)
 400d8b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d8b4:	e0bffc17 	ldw	r2,-16(fp)
 400d8b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 400d8bc:	e037883a 	mov	sp,fp
 400d8c0:	dfc00117 	ldw	ra,4(sp)
 400d8c4:	df000017 	ldw	fp,0(sp)
 400d8c8:	dec00204 	addi	sp,sp,8
 400d8cc:	f800283a 	ret

0400d8d0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 400d8d0:	defff804 	addi	sp,sp,-32
 400d8d4:	dfc00715 	stw	ra,28(sp)
 400d8d8:	df000615 	stw	fp,24(sp)
 400d8dc:	df000604 	addi	fp,sp,24
 400d8e0:	e13ffc15 	stw	r4,-16(fp)
 400d8e4:	e17ffd15 	stw	r5,-12(fp)
 400d8e8:	e1bffe15 	stw	r6,-8(fp)
 400d8ec:	e1ffff15 	stw	r7,-4(fp)
 400d8f0:	e0bfff17 	ldw	r2,-4(fp)
 400d8f4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 400d8f8:	008100b4 	movhi	r2,1026
 400d8fc:	10a20b04 	addi	r2,r2,-30676
 400d900:	10800017 	ldw	r2,0(r2)
 400d904:	1004c03a 	cmpne	r2,r2,zero
 400d908:	1000041e 	bne	r2,zero,400d91c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 400d90c:	00c100b4 	movhi	r3,1026
 400d910:	18e20b04 	addi	r3,r3,-30676
 400d914:	e0bffb17 	ldw	r2,-20(fp)
 400d918:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 400d91c:	e0bffc17 	ldw	r2,-16(fp)
 400d920:	10800104 	addi	r2,r2,4
 400d924:	1007883a 	mov	r3,r2
 400d928:	008001c4 	movi	r2,7
 400d92c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 400d930:	d8000015 	stw	zero,0(sp)
 400d934:	e13ffd17 	ldw	r4,-12(fp)
 400d938:	e17ffe17 	ldw	r5,-8(fp)
 400d93c:	01810074 	movhi	r6,1025
 400d940:	31b61804 	addi	r6,r6,-10144
 400d944:	e1fffc17 	ldw	r7,-16(fp)
 400d948:	400e1c00 	call	400e1c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 400d94c:	e037883a 	mov	sp,fp
 400d950:	dfc00117 	ldw	ra,4(sp)
 400d954:	df000017 	ldw	fp,0(sp)
 400d958:	dec00204 	addi	sp,sp,8
 400d95c:	f800283a 	ret

0400d960 <epcs_read_status_register>:
 400d960:	defff904 	addi	sp,sp,-28
 400d964:	dfc00615 	stw	ra,24(sp)
 400d968:	df000515 	stw	fp,20(sp)
 400d96c:	df000504 	addi	fp,sp,20
 400d970:	e13fff15 	stw	r4,-4(fp)
 400d974:	00800144 	movi	r2,5
 400d978:	e0bffe05 	stb	r2,-8(fp)
 400d97c:	00800044 	movi	r2,1
 400d980:	d8800015 	stw	r2,0(sp)
 400d984:	e0bffe44 	addi	r2,fp,-7
 400d988:	d8800115 	stw	r2,4(sp)
 400d98c:	d8000215 	stw	zero,8(sp)
 400d990:	e13fff17 	ldw	r4,-4(fp)
 400d994:	000b883a 	mov	r5,zero
 400d998:	01800044 	movi	r6,1
 400d99c:	e1fffe04 	addi	r7,fp,-8
 400d9a0:	400ef3c0 	call	400ef3c <alt_avalon_spi_command>
 400d9a4:	e0bffe43 	ldbu	r2,-7(fp)
 400d9a8:	10803fcc 	andi	r2,r2,255
 400d9ac:	e037883a 	mov	sp,fp
 400d9b0:	dfc00117 	ldw	ra,4(sp)
 400d9b4:	df000017 	ldw	fp,0(sp)
 400d9b8:	dec00204 	addi	sp,sp,8
 400d9bc:	f800283a 	ret

0400d9c0 <epcs_sector_erase>:
 400d9c0:	defff804 	addi	sp,sp,-32
 400d9c4:	dfc00715 	stw	ra,28(sp)
 400d9c8:	df000615 	stw	fp,24(sp)
 400d9cc:	df000604 	addi	fp,sp,24
 400d9d0:	e13ffe15 	stw	r4,-8(fp)
 400d9d4:	e17fff15 	stw	r5,-4(fp)
 400d9d8:	00bff604 	movi	r2,-40
 400d9dc:	e0bffd05 	stb	r2,-12(fp)
 400d9e0:	e0bfff17 	ldw	r2,-4(fp)
 400d9e4:	1004d43a 	srli	r2,r2,16
 400d9e8:	e0bffd45 	stb	r2,-11(fp)
 400d9ec:	e0bfff17 	ldw	r2,-4(fp)
 400d9f0:	1004d23a 	srli	r2,r2,8
 400d9f4:	e0bffd85 	stb	r2,-10(fp)
 400d9f8:	e0bfff17 	ldw	r2,-4(fp)
 400d9fc:	e0bffdc5 	stb	r2,-9(fp)
 400da00:	d8000015 	stw	zero,0(sp)
 400da04:	d8000115 	stw	zero,4(sp)
 400da08:	d8000215 	stw	zero,8(sp)
 400da0c:	e13ffe17 	ldw	r4,-8(fp)
 400da10:	000b883a 	mov	r5,zero
 400da14:	01800104 	movi	r6,4
 400da18:	e1fffd04 	addi	r7,fp,-12
 400da1c:	400ef3c0 	call	400ef3c <alt_avalon_spi_command>
 400da20:	e13ffe17 	ldw	r4,-8(fp)
 400da24:	400da3c0 	call	400da3c <epcs_await_wip_released>
 400da28:	e037883a 	mov	sp,fp
 400da2c:	dfc00117 	ldw	ra,4(sp)
 400da30:	df000017 	ldw	fp,0(sp)
 400da34:	dec00204 	addi	sp,sp,8
 400da38:	f800283a 	ret

0400da3c <epcs_await_wip_released>:
 400da3c:	defffd04 	addi	sp,sp,-12
 400da40:	dfc00215 	stw	ra,8(sp)
 400da44:	df000115 	stw	fp,4(sp)
 400da48:	df000104 	addi	fp,sp,4
 400da4c:	e13fff15 	stw	r4,-4(fp)
 400da50:	e13fff17 	ldw	r4,-4(fp)
 400da54:	400da740 	call	400da74 <epcs_test_wip>
 400da58:	1004c03a 	cmpne	r2,r2,zero
 400da5c:	103ffc1e 	bne	r2,zero,400da50 <epcs_await_wip_released+0x14>
 400da60:	e037883a 	mov	sp,fp
 400da64:	dfc00117 	ldw	ra,4(sp)
 400da68:	df000017 	ldw	fp,0(sp)
 400da6c:	dec00204 	addi	sp,sp,8
 400da70:	f800283a 	ret

0400da74 <epcs_test_wip>:
 400da74:	defffd04 	addi	sp,sp,-12
 400da78:	dfc00215 	stw	ra,8(sp)
 400da7c:	df000115 	stw	fp,4(sp)
 400da80:	df000104 	addi	fp,sp,4
 400da84:	e13fff15 	stw	r4,-4(fp)
 400da88:	e13fff17 	ldw	r4,-4(fp)
 400da8c:	400d9600 	call	400d960 <epcs_read_status_register>
 400da90:	10803fcc 	andi	r2,r2,255
 400da94:	1080004c 	andi	r2,r2,1
 400da98:	e037883a 	mov	sp,fp
 400da9c:	dfc00117 	ldw	ra,4(sp)
 400daa0:	df000017 	ldw	fp,0(sp)
 400daa4:	dec00204 	addi	sp,sp,8
 400daa8:	f800283a 	ret

0400daac <epcs_read_buffer>:
 400daac:	defff604 	addi	sp,sp,-40
 400dab0:	dfc00915 	stw	ra,36(sp)
 400dab4:	df000815 	stw	fp,32(sp)
 400dab8:	df000804 	addi	fp,sp,32
 400dabc:	e13ffc15 	stw	r4,-16(fp)
 400dac0:	e17ffd15 	stw	r5,-12(fp)
 400dac4:	e1bffe15 	stw	r6,-8(fp)
 400dac8:	e1ffff15 	stw	r7,-4(fp)
 400dacc:	008000c4 	movi	r2,3
 400dad0:	e0bffb05 	stb	r2,-20(fp)
 400dad4:	e0bffd17 	ldw	r2,-12(fp)
 400dad8:	1005d43a 	srai	r2,r2,16
 400dadc:	1007883a 	mov	r3,r2
 400dae0:	00bfffc4 	movi	r2,-1
 400dae4:	1884703a 	and	r2,r3,r2
 400dae8:	e0bffb45 	stb	r2,-19(fp)
 400daec:	e0bffd17 	ldw	r2,-12(fp)
 400daf0:	1005d23a 	srai	r2,r2,8
 400daf4:	1007883a 	mov	r3,r2
 400daf8:	00bfffc4 	movi	r2,-1
 400dafc:	1884703a 	and	r2,r3,r2
 400db00:	e0bffb85 	stb	r2,-18(fp)
 400db04:	e0bffd17 	ldw	r2,-12(fp)
 400db08:	1007883a 	mov	r3,r2
 400db0c:	00bfffc4 	movi	r2,-1
 400db10:	1884703a 	and	r2,r3,r2
 400db14:	e0bffbc5 	stb	r2,-17(fp)
 400db18:	e13ffc17 	ldw	r4,-16(fp)
 400db1c:	400da3c0 	call	400da3c <epcs_await_wip_released>
 400db20:	e0bfff17 	ldw	r2,-4(fp)
 400db24:	d8800015 	stw	r2,0(sp)
 400db28:	e0bffe17 	ldw	r2,-8(fp)
 400db2c:	d8800115 	stw	r2,4(sp)
 400db30:	d8000215 	stw	zero,8(sp)
 400db34:	e13ffc17 	ldw	r4,-16(fp)
 400db38:	000b883a 	mov	r5,zero
 400db3c:	01800104 	movi	r6,4
 400db40:	e1fffb04 	addi	r7,fp,-20
 400db44:	400ef3c0 	call	400ef3c <alt_avalon_spi_command>
 400db48:	e0bfff17 	ldw	r2,-4(fp)
 400db4c:	e037883a 	mov	sp,fp
 400db50:	dfc00117 	ldw	ra,4(sp)
 400db54:	df000017 	ldw	fp,0(sp)
 400db58:	dec00204 	addi	sp,sp,8
 400db5c:	f800283a 	ret

0400db60 <epcs_write_enable>:
 400db60:	defff904 	addi	sp,sp,-28
 400db64:	dfc00615 	stw	ra,24(sp)
 400db68:	df000515 	stw	fp,20(sp)
 400db6c:	df000504 	addi	fp,sp,20
 400db70:	e13fff15 	stw	r4,-4(fp)
 400db74:	00800184 	movi	r2,6
 400db78:	e0bffe05 	stb	r2,-8(fp)
 400db7c:	d8000015 	stw	zero,0(sp)
 400db80:	d8000115 	stw	zero,4(sp)
 400db84:	d8000215 	stw	zero,8(sp)
 400db88:	e13fff17 	ldw	r4,-4(fp)
 400db8c:	000b883a 	mov	r5,zero
 400db90:	01800044 	movi	r6,1
 400db94:	e1fffe04 	addi	r7,fp,-8
 400db98:	400ef3c0 	call	400ef3c <alt_avalon_spi_command>
 400db9c:	e037883a 	mov	sp,fp
 400dba0:	dfc00117 	ldw	ra,4(sp)
 400dba4:	df000017 	ldw	fp,0(sp)
 400dba8:	dec00204 	addi	sp,sp,8
 400dbac:	f800283a 	ret

0400dbb0 <epcs_write_status_register>:
 400dbb0:	defff804 	addi	sp,sp,-32
 400dbb4:	dfc00715 	stw	ra,28(sp)
 400dbb8:	df000615 	stw	fp,24(sp)
 400dbbc:	df000604 	addi	fp,sp,24
 400dbc0:	e13ffe15 	stw	r4,-8(fp)
 400dbc4:	e17fff05 	stb	r5,-4(fp)
 400dbc8:	00800044 	movi	r2,1
 400dbcc:	e0bffd05 	stb	r2,-12(fp)
 400dbd0:	e0bfff03 	ldbu	r2,-4(fp)
 400dbd4:	e0bffd45 	stb	r2,-11(fp)
 400dbd8:	d8000015 	stw	zero,0(sp)
 400dbdc:	d8000115 	stw	zero,4(sp)
 400dbe0:	d8000215 	stw	zero,8(sp)
 400dbe4:	e13ffe17 	ldw	r4,-8(fp)
 400dbe8:	000b883a 	mov	r5,zero
 400dbec:	01800084 	movi	r6,2
 400dbf0:	e1fffd04 	addi	r7,fp,-12
 400dbf4:	400ef3c0 	call	400ef3c <alt_avalon_spi_command>
 400dbf8:	e13ffe17 	ldw	r4,-8(fp)
 400dbfc:	400da3c0 	call	400da3c <epcs_await_wip_released>
 400dc00:	e037883a 	mov	sp,fp
 400dc04:	dfc00117 	ldw	ra,4(sp)
 400dc08:	df000017 	ldw	fp,0(sp)
 400dc0c:	dec00204 	addi	sp,sp,8
 400dc10:	f800283a 	ret

0400dc14 <epcs_write_buffer>:
 400dc14:	defff604 	addi	sp,sp,-40
 400dc18:	dfc00915 	stw	ra,36(sp)
 400dc1c:	df000815 	stw	fp,32(sp)
 400dc20:	df000804 	addi	fp,sp,32
 400dc24:	e13ffc15 	stw	r4,-16(fp)
 400dc28:	e17ffd15 	stw	r5,-12(fp)
 400dc2c:	e1bffe15 	stw	r6,-8(fp)
 400dc30:	e1ffff15 	stw	r7,-4(fp)
 400dc34:	00800084 	movi	r2,2
 400dc38:	e0bffb05 	stb	r2,-20(fp)
 400dc3c:	e0bffd17 	ldw	r2,-12(fp)
 400dc40:	1005d43a 	srai	r2,r2,16
 400dc44:	1007883a 	mov	r3,r2
 400dc48:	00bfffc4 	movi	r2,-1
 400dc4c:	1884703a 	and	r2,r3,r2
 400dc50:	e0bffb45 	stb	r2,-19(fp)
 400dc54:	e0bffd17 	ldw	r2,-12(fp)
 400dc58:	1005d23a 	srai	r2,r2,8
 400dc5c:	1007883a 	mov	r3,r2
 400dc60:	00bfffc4 	movi	r2,-1
 400dc64:	1884703a 	and	r2,r3,r2
 400dc68:	e0bffb85 	stb	r2,-18(fp)
 400dc6c:	e0bffd17 	ldw	r2,-12(fp)
 400dc70:	1007883a 	mov	r3,r2
 400dc74:	00bfffc4 	movi	r2,-1
 400dc78:	1884703a 	and	r2,r3,r2
 400dc7c:	e0bffbc5 	stb	r2,-17(fp)
 400dc80:	e13ffc17 	ldw	r4,-16(fp)
 400dc84:	400db600 	call	400db60 <epcs_write_enable>
 400dc88:	d8000015 	stw	zero,0(sp)
 400dc8c:	d8000115 	stw	zero,4(sp)
 400dc90:	00800044 	movi	r2,1
 400dc94:	d8800215 	stw	r2,8(sp)
 400dc98:	e13ffc17 	ldw	r4,-16(fp)
 400dc9c:	000b883a 	mov	r5,zero
 400dca0:	01800104 	movi	r6,4
 400dca4:	e1fffb04 	addi	r7,fp,-20
 400dca8:	400ef3c0 	call	400ef3c <alt_avalon_spi_command>
 400dcac:	e1bfff17 	ldw	r6,-4(fp)
 400dcb0:	d8000015 	stw	zero,0(sp)
 400dcb4:	d8000115 	stw	zero,4(sp)
 400dcb8:	d8000215 	stw	zero,8(sp)
 400dcbc:	e13ffc17 	ldw	r4,-16(fp)
 400dcc0:	000b883a 	mov	r5,zero
 400dcc4:	e1fffe17 	ldw	r7,-8(fp)
 400dcc8:	400ef3c0 	call	400ef3c <alt_avalon_spi_command>
 400dccc:	e13ffc17 	ldw	r4,-16(fp)
 400dcd0:	400da3c0 	call	400da3c <epcs_await_wip_released>
 400dcd4:	e0bfff17 	ldw	r2,-4(fp)
 400dcd8:	e037883a 	mov	sp,fp
 400dcdc:	dfc00117 	ldw	ra,4(sp)
 400dce0:	df000017 	ldw	fp,0(sp)
 400dce4:	dec00204 	addi	sp,sp,8
 400dce8:	f800283a 	ret

0400dcec <epcs_read_electronic_signature>:
 400dcec:	defff804 	addi	sp,sp,-32
 400dcf0:	dfc00715 	stw	ra,28(sp)
 400dcf4:	df000615 	stw	fp,24(sp)
 400dcf8:	df000604 	addi	fp,sp,24
 400dcfc:	e13fff15 	stw	r4,-4(fp)
 400dd00:	00bfeac4 	movi	r2,-85
 400dd04:	e0bffd05 	stb	r2,-12(fp)
 400dd08:	e03ffd45 	stb	zero,-11(fp)
 400dd0c:	e03ffd85 	stb	zero,-10(fp)
 400dd10:	e03ffdc5 	stb	zero,-9(fp)
 400dd14:	00800044 	movi	r2,1
 400dd18:	d8800015 	stw	r2,0(sp)
 400dd1c:	e0bffe04 	addi	r2,fp,-8
 400dd20:	d8800115 	stw	r2,4(sp)
 400dd24:	d8000215 	stw	zero,8(sp)
 400dd28:	e13fff17 	ldw	r4,-4(fp)
 400dd2c:	000b883a 	mov	r5,zero
 400dd30:	01800104 	movi	r6,4
 400dd34:	e1fffd04 	addi	r7,fp,-12
 400dd38:	400ef3c0 	call	400ef3c <alt_avalon_spi_command>
 400dd3c:	e0bffe03 	ldbu	r2,-8(fp)
 400dd40:	10803fcc 	andi	r2,r2,255
 400dd44:	e037883a 	mov	sp,fp
 400dd48:	dfc00117 	ldw	ra,4(sp)
 400dd4c:	df000017 	ldw	fp,0(sp)
 400dd50:	dec00204 	addi	sp,sp,8
 400dd54:	f800283a 	ret

0400dd58 <epcs_read_device_id>:
 400dd58:	defff904 	addi	sp,sp,-28
 400dd5c:	dfc00615 	stw	ra,24(sp)
 400dd60:	df000515 	stw	fp,20(sp)
 400dd64:	df000504 	addi	fp,sp,20
 400dd68:	e13fff15 	stw	r4,-4(fp)
 400dd6c:	00bfe7c4 	movi	r2,-97
 400dd70:	e0bffe05 	stb	r2,-8(fp)
 400dd74:	e03ffe45 	stb	zero,-7(fp)
 400dd78:	e03ffe85 	stb	zero,-6(fp)
 400dd7c:	00800044 	movi	r2,1
 400dd80:	d8800015 	stw	r2,0(sp)
 400dd84:	e0bffec4 	addi	r2,fp,-5
 400dd88:	d8800115 	stw	r2,4(sp)
 400dd8c:	d8000215 	stw	zero,8(sp)
 400dd90:	e13fff17 	ldw	r4,-4(fp)
 400dd94:	000b883a 	mov	r5,zero
 400dd98:	018000c4 	movi	r6,3
 400dd9c:	e1fffe04 	addi	r7,fp,-8
 400dda0:	400ef3c0 	call	400ef3c <alt_avalon_spi_command>
 400dda4:	e0bffec3 	ldbu	r2,-5(fp)
 400dda8:	10803fcc 	andi	r2,r2,255
 400ddac:	e037883a 	mov	sp,fp
 400ddb0:	dfc00117 	ldw	ra,4(sp)
 400ddb4:	df000017 	ldw	fp,0(sp)
 400ddb8:	dec00204 	addi	sp,sp,8
 400ddbc:	f800283a 	ret

0400ddc0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400ddc0:	defff404 	addi	sp,sp,-48
 400ddc4:	df000b15 	stw	fp,44(sp)
 400ddc8:	df000b04 	addi	fp,sp,44
 400ddcc:	e13ffb15 	stw	r4,-20(fp)
 400ddd0:	e17ffc15 	stw	r5,-16(fp)
 400ddd4:	e1bffd15 	stw	r6,-12(fp)
 400ddd8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400dddc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400dde0:	008100b4 	movhi	r2,1026
 400dde4:	10a20b04 	addi	r2,r2,-30676
 400dde8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 400ddec:	1005003a 	cmpeq	r2,r2,zero
 400ddf0:	1000411e 	bne	r2,zero,400def8 <alt_alarm_start+0x138>
  {
    if (alarm)
 400ddf4:	e0bffb17 	ldw	r2,-20(fp)
 400ddf8:	1005003a 	cmpeq	r2,r2,zero
 400ddfc:	10003b1e 	bne	r2,zero,400deec <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 400de00:	e0fffb17 	ldw	r3,-20(fp)
 400de04:	e0bffd17 	ldw	r2,-12(fp)
 400de08:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 400de0c:	e0fffb17 	ldw	r3,-20(fp)
 400de10:	e0bffe17 	ldw	r2,-8(fp)
 400de14:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400de18:	0005303a 	rdctl	r2,status
 400de1c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400de20:	e0fff817 	ldw	r3,-32(fp)
 400de24:	00bfff84 	movi	r2,-2
 400de28:	1884703a 	and	r2,r3,r2
 400de2c:	1001703a 	wrctl	status,r2
  
  return context;
 400de30:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 400de34:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400de38:	008100b4 	movhi	r2,1026
 400de3c:	10a20c04 	addi	r2,r2,-30672
 400de40:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 400de44:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400de48:	e0fffc17 	ldw	r3,-16(fp)
 400de4c:	e0bff917 	ldw	r2,-28(fp)
 400de50:	1885883a 	add	r2,r3,r2
 400de54:	10c00044 	addi	r3,r2,1
 400de58:	e0bffb17 	ldw	r2,-20(fp)
 400de5c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400de60:	e0bffb17 	ldw	r2,-20(fp)
 400de64:	10c00217 	ldw	r3,8(r2)
 400de68:	e0bff917 	ldw	r2,-28(fp)
 400de6c:	1880042e 	bgeu	r3,r2,400de80 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 400de70:	e0fffb17 	ldw	r3,-20(fp)
 400de74:	00800044 	movi	r2,1
 400de78:	18800405 	stb	r2,16(r3)
 400de7c:	00000206 	br	400de88 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 400de80:	e0bffb17 	ldw	r2,-20(fp)
 400de84:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400de88:	e0fffb17 	ldw	r3,-20(fp)
 400de8c:	008100b4 	movhi	r2,1026
 400de90:	10a1e404 	addi	r2,r2,-30832
 400de94:	e0bff615 	stw	r2,-40(fp)
 400de98:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400de9c:	e0fff717 	ldw	r3,-36(fp)
 400dea0:	e0bff617 	ldw	r2,-40(fp)
 400dea4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 400dea8:	e0bff617 	ldw	r2,-40(fp)
 400deac:	10c00017 	ldw	r3,0(r2)
 400deb0:	e0bff717 	ldw	r2,-36(fp)
 400deb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400deb8:	e0bff617 	ldw	r2,-40(fp)
 400debc:	10c00017 	ldw	r3,0(r2)
 400dec0:	e0bff717 	ldw	r2,-36(fp)
 400dec4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 400dec8:	e0fff617 	ldw	r3,-40(fp)
 400decc:	e0bff717 	ldw	r2,-36(fp)
 400ded0:	18800015 	stw	r2,0(r3)
 400ded4:	e0bffa17 	ldw	r2,-24(fp)
 400ded8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400dedc:	e0bff517 	ldw	r2,-44(fp)
 400dee0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400dee4:	e03fff15 	stw	zero,-4(fp)
 400dee8:	00000506 	br	400df00 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 400deec:	00bffa84 	movi	r2,-22
 400def0:	e0bfff15 	stw	r2,-4(fp)
 400def4:	00000206 	br	400df00 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 400def8:	00bfde84 	movi	r2,-134
 400defc:	e0bfff15 	stw	r2,-4(fp)
 400df00:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 400df04:	e037883a 	mov	sp,fp
 400df08:	df000017 	ldw	fp,0(sp)
 400df0c:	dec00104 	addi	sp,sp,4
 400df10:	f800283a 	ret

0400df14 <alt_dev_llist_insert>:
 400df14:	defff904 	addi	sp,sp,-28
 400df18:	dfc00615 	stw	ra,24(sp)
 400df1c:	df000515 	stw	fp,20(sp)
 400df20:	df000504 	addi	fp,sp,20
 400df24:	e13ffd15 	stw	r4,-12(fp)
 400df28:	e17ffe15 	stw	r5,-8(fp)
 400df2c:	e0bffd17 	ldw	r2,-12(fp)
 400df30:	1005003a 	cmpeq	r2,r2,zero
 400df34:	1000041e 	bne	r2,zero,400df48 <alt_dev_llist_insert+0x34>
 400df38:	e0bffd17 	ldw	r2,-12(fp)
 400df3c:	10800217 	ldw	r2,8(r2)
 400df40:	1004c03a 	cmpne	r2,r2,zero
 400df44:	1000071e 	bne	r2,zero,400df64 <alt_dev_llist_insert+0x50>
 400df48:	400dfc80 	call	400dfc8 <alt_get_errno>
 400df4c:	1007883a 	mov	r3,r2
 400df50:	00800584 	movi	r2,22
 400df54:	18800015 	stw	r2,0(r3)
 400df58:	00bffa84 	movi	r2,-22
 400df5c:	e0bfff15 	stw	r2,-4(fp)
 400df60:	00001306 	br	400dfb0 <alt_dev_llist_insert+0x9c>
 400df64:	e0fffd17 	ldw	r3,-12(fp)
 400df68:	e0bffe17 	ldw	r2,-8(fp)
 400df6c:	e0bffb15 	stw	r2,-20(fp)
 400df70:	e0fffc15 	stw	r3,-16(fp)
 400df74:	e0fffc17 	ldw	r3,-16(fp)
 400df78:	e0bffb17 	ldw	r2,-20(fp)
 400df7c:	18800115 	stw	r2,4(r3)
 400df80:	e0bffb17 	ldw	r2,-20(fp)
 400df84:	10c00017 	ldw	r3,0(r2)
 400df88:	e0bffc17 	ldw	r2,-16(fp)
 400df8c:	10c00015 	stw	r3,0(r2)
 400df90:	e0bffb17 	ldw	r2,-20(fp)
 400df94:	10c00017 	ldw	r3,0(r2)
 400df98:	e0bffc17 	ldw	r2,-16(fp)
 400df9c:	18800115 	stw	r2,4(r3)
 400dfa0:	e0fffb17 	ldw	r3,-20(fp)
 400dfa4:	e0bffc17 	ldw	r2,-16(fp)
 400dfa8:	18800015 	stw	r2,0(r3)
 400dfac:	e03fff15 	stw	zero,-4(fp)
 400dfb0:	e0bfff17 	ldw	r2,-4(fp)
 400dfb4:	e037883a 	mov	sp,fp
 400dfb8:	dfc00117 	ldw	ra,4(sp)
 400dfbc:	df000017 	ldw	fp,0(sp)
 400dfc0:	dec00204 	addi	sp,sp,8
 400dfc4:	f800283a 	ret

0400dfc8 <alt_get_errno>:
 400dfc8:	defffd04 	addi	sp,sp,-12
 400dfcc:	dfc00215 	stw	ra,8(sp)
 400dfd0:	df000115 	stw	fp,4(sp)
 400dfd4:	df000104 	addi	fp,sp,4
 400dfd8:	008100b4 	movhi	r2,1026
 400dfdc:	10a1c004 	addi	r2,r2,-30976
 400dfe0:	10800017 	ldw	r2,0(r2)
 400dfe4:	1005003a 	cmpeq	r2,r2,zero
 400dfe8:	1000061e 	bne	r2,zero,400e004 <alt_get_errno+0x3c>
 400dfec:	008100b4 	movhi	r2,1026
 400dff0:	10a1c004 	addi	r2,r2,-30976
 400dff4:	10800017 	ldw	r2,0(r2)
 400dff8:	103ee83a 	callr	r2
 400dffc:	e0bfff15 	stw	r2,-4(fp)
 400e000:	00000306 	br	400e010 <alt_get_errno+0x48>
 400e004:	008100b4 	movhi	r2,1026
 400e008:	10a1eb04 	addi	r2,r2,-30804
 400e00c:	e0bfff15 	stw	r2,-4(fp)
 400e010:	e0bfff17 	ldw	r2,-4(fp)
 400e014:	e037883a 	mov	sp,fp
 400e018:	dfc00117 	ldw	ra,4(sp)
 400e01c:	df000017 	ldw	fp,0(sp)
 400e020:	dec00204 	addi	sp,sp,8
 400e024:	f800283a 	ret

0400e028 <_do_ctors>:
 400e028:	defffd04 	addi	sp,sp,-12
 400e02c:	dfc00215 	stw	ra,8(sp)
 400e030:	df000115 	stw	fp,4(sp)
 400e034:	df000104 	addi	fp,sp,4
 400e038:	00bfff04 	movi	r2,-4
 400e03c:	00c10074 	movhi	r3,1025
 400e040:	18d9b504 	addi	r3,r3,26324
 400e044:	1885883a 	add	r2,r3,r2
 400e048:	e0bfff15 	stw	r2,-4(fp)
 400e04c:	00000606 	br	400e068 <_do_ctors+0x40>
 400e050:	e0bfff17 	ldw	r2,-4(fp)
 400e054:	10800017 	ldw	r2,0(r2)
 400e058:	103ee83a 	callr	r2
 400e05c:	e0bfff17 	ldw	r2,-4(fp)
 400e060:	10bfff04 	addi	r2,r2,-4
 400e064:	e0bfff15 	stw	r2,-4(fp)
 400e068:	e0ffff17 	ldw	r3,-4(fp)
 400e06c:	00810074 	movhi	r2,1025
 400e070:	1099b404 	addi	r2,r2,26320
 400e074:	18bff62e 	bgeu	r3,r2,400e050 <_do_ctors+0x28>
 400e078:	e037883a 	mov	sp,fp
 400e07c:	dfc00117 	ldw	ra,4(sp)
 400e080:	df000017 	ldw	fp,0(sp)
 400e084:	dec00204 	addi	sp,sp,8
 400e088:	f800283a 	ret

0400e08c <_do_dtors>:
 400e08c:	defffd04 	addi	sp,sp,-12
 400e090:	dfc00215 	stw	ra,8(sp)
 400e094:	df000115 	stw	fp,4(sp)
 400e098:	df000104 	addi	fp,sp,4
 400e09c:	00bfff04 	movi	r2,-4
 400e0a0:	00c10074 	movhi	r3,1025
 400e0a4:	18d9b504 	addi	r3,r3,26324
 400e0a8:	1885883a 	add	r2,r3,r2
 400e0ac:	e0bfff15 	stw	r2,-4(fp)
 400e0b0:	00000606 	br	400e0cc <_do_dtors+0x40>
 400e0b4:	e0bfff17 	ldw	r2,-4(fp)
 400e0b8:	10800017 	ldw	r2,0(r2)
 400e0bc:	103ee83a 	callr	r2
 400e0c0:	e0bfff17 	ldw	r2,-4(fp)
 400e0c4:	10bfff04 	addi	r2,r2,-4
 400e0c8:	e0bfff15 	stw	r2,-4(fp)
 400e0cc:	e0ffff17 	ldw	r3,-4(fp)
 400e0d0:	00810074 	movhi	r2,1025
 400e0d4:	1099b504 	addi	r2,r2,26324
 400e0d8:	18bff62e 	bgeu	r3,r2,400e0b4 <_do_dtors+0x28>
 400e0dc:	e037883a 	mov	sp,fp
 400e0e0:	dfc00117 	ldw	ra,4(sp)
 400e0e4:	df000017 	ldw	fp,0(sp)
 400e0e8:	dec00204 	addi	sp,sp,8
 400e0ec:	f800283a 	ret

0400e0f0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 400e0f0:	defffb04 	addi	sp,sp,-20
 400e0f4:	dfc00415 	stw	ra,16(sp)
 400e0f8:	df000315 	stw	fp,12(sp)
 400e0fc:	df000304 	addi	fp,sp,12
 400e100:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 400e104:	e13ffe17 	ldw	r4,-8(fp)
 400e108:	d1602a04 	addi	r5,gp,-32600
 400e10c:	400f1740 	call	400f174 <alt_find_dev>
 400e110:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 400e114:	e0bffd17 	ldw	r2,-12(fp)
 400e118:	1005003a 	cmpeq	r2,r2,zero
 400e11c:	10000b1e 	bne	r2,zero,400e14c <alt_flash_open_dev+0x5c>
 400e120:	e0bffd17 	ldw	r2,-12(fp)
 400e124:	10800317 	ldw	r2,12(r2)
 400e128:	1005003a 	cmpeq	r2,r2,zero
 400e12c:	1000071e 	bne	r2,zero,400e14c <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 400e130:	e0bffd17 	ldw	r2,-12(fp)
 400e134:	10800317 	ldw	r2,12(r2)
 400e138:	e13ffd17 	ldw	r4,-12(fp)
 400e13c:	e17ffe17 	ldw	r5,-8(fp)
 400e140:	103ee83a 	callr	r2
 400e144:	e0bfff15 	stw	r2,-4(fp)
 400e148:	00000206 	br	400e154 <alt_flash_open_dev+0x64>
  }

  return dev;
 400e14c:	e0bffd17 	ldw	r2,-12(fp)
 400e150:	e0bfff15 	stw	r2,-4(fp)
 400e154:	e0bfff17 	ldw	r2,-4(fp)
}
 400e158:	e037883a 	mov	sp,fp
 400e15c:	dfc00117 	ldw	ra,4(sp)
 400e160:	df000017 	ldw	fp,0(sp)
 400e164:	dec00204 	addi	sp,sp,8
 400e168:	f800283a 	ret

0400e16c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 400e16c:	defffd04 	addi	sp,sp,-12
 400e170:	dfc00215 	stw	ra,8(sp)
 400e174:	df000115 	stw	fp,4(sp)
 400e178:	df000104 	addi	fp,sp,4
 400e17c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 400e180:	e0bfff17 	ldw	r2,-4(fp)
 400e184:	1005003a 	cmpeq	r2,r2,zero
 400e188:	1000081e 	bne	r2,zero,400e1ac <alt_flash_close_dev+0x40>
 400e18c:	e0bfff17 	ldw	r2,-4(fp)
 400e190:	10800417 	ldw	r2,16(r2)
 400e194:	1005003a 	cmpeq	r2,r2,zero
 400e198:	1000041e 	bne	r2,zero,400e1ac <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 400e19c:	e0bfff17 	ldw	r2,-4(fp)
 400e1a0:	10800417 	ldw	r2,16(r2)
 400e1a4:	e13fff17 	ldw	r4,-4(fp)
 400e1a8:	103ee83a 	callr	r2
  }
  return;
}
 400e1ac:	e037883a 	mov	sp,fp
 400e1b0:	dfc00117 	ldw	ra,4(sp)
 400e1b4:	df000017 	ldw	fp,0(sp)
 400e1b8:	dec00204 	addi	sp,sp,8
 400e1bc:	f800283a 	ret

0400e1c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400e1c0:	defff904 	addi	sp,sp,-28
 400e1c4:	dfc00615 	stw	ra,24(sp)
 400e1c8:	df000515 	stw	fp,20(sp)
 400e1cc:	df000504 	addi	fp,sp,20
 400e1d0:	e13ffc15 	stw	r4,-16(fp)
 400e1d4:	e17ffd15 	stw	r5,-12(fp)
 400e1d8:	e1bffe15 	stw	r6,-8(fp)
 400e1dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400e1e0:	e0800217 	ldw	r2,8(fp)
 400e1e4:	d8800015 	stw	r2,0(sp)
 400e1e8:	e13ffc17 	ldw	r4,-16(fp)
 400e1ec:	e17ffd17 	ldw	r5,-12(fp)
 400e1f0:	e1bffe17 	ldw	r6,-8(fp)
 400e1f4:	e1ffff17 	ldw	r7,-4(fp)
 400e1f8:	400e3940 	call	400e394 <alt_iic_isr_register>
}  
 400e1fc:	e037883a 	mov	sp,fp
 400e200:	dfc00117 	ldw	ra,4(sp)
 400e204:	df000017 	ldw	fp,0(sp)
 400e208:	dec00204 	addi	sp,sp,8
 400e20c:	f800283a 	ret

0400e210 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400e210:	defff904 	addi	sp,sp,-28
 400e214:	df000615 	stw	fp,24(sp)
 400e218:	df000604 	addi	fp,sp,24
 400e21c:	e13ffe15 	stw	r4,-8(fp)
 400e220:	e17fff15 	stw	r5,-4(fp)
 400e224:	e0bfff17 	ldw	r2,-4(fp)
 400e228:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e22c:	0005303a 	rdctl	r2,status
 400e230:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e234:	e0fffb17 	ldw	r3,-20(fp)
 400e238:	00bfff84 	movi	r2,-2
 400e23c:	1884703a 	and	r2,r3,r2
 400e240:	1001703a 	wrctl	status,r2
  
  return context;
 400e244:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400e248:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 400e24c:	e0fffc17 	ldw	r3,-16(fp)
 400e250:	00800044 	movi	r2,1
 400e254:	10c4983a 	sll	r2,r2,r3
 400e258:	1007883a 	mov	r3,r2
 400e25c:	008100b4 	movhi	r2,1026
 400e260:	10a20a04 	addi	r2,r2,-30680
 400e264:	10800017 	ldw	r2,0(r2)
 400e268:	1886b03a 	or	r3,r3,r2
 400e26c:	008100b4 	movhi	r2,1026
 400e270:	10a20a04 	addi	r2,r2,-30680
 400e274:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400e278:	008100b4 	movhi	r2,1026
 400e27c:	10a20a04 	addi	r2,r2,-30680
 400e280:	10800017 	ldw	r2,0(r2)
 400e284:	100170fa 	wrctl	ienable,r2
 400e288:	e0bffd17 	ldw	r2,-12(fp)
 400e28c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e290:	e0bffa17 	ldw	r2,-24(fp)
 400e294:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400e298:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 400e29c:	e037883a 	mov	sp,fp
 400e2a0:	df000017 	ldw	fp,0(sp)
 400e2a4:	dec00104 	addi	sp,sp,4
 400e2a8:	f800283a 	ret

0400e2ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400e2ac:	defff904 	addi	sp,sp,-28
 400e2b0:	df000615 	stw	fp,24(sp)
 400e2b4:	df000604 	addi	fp,sp,24
 400e2b8:	e13ffe15 	stw	r4,-8(fp)
 400e2bc:	e17fff15 	stw	r5,-4(fp)
 400e2c0:	e0bfff17 	ldw	r2,-4(fp)
 400e2c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e2c8:	0005303a 	rdctl	r2,status
 400e2cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e2d0:	e0fffb17 	ldw	r3,-20(fp)
 400e2d4:	00bfff84 	movi	r2,-2
 400e2d8:	1884703a 	and	r2,r3,r2
 400e2dc:	1001703a 	wrctl	status,r2
  
  return context;
 400e2e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400e2e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 400e2e8:	e0fffc17 	ldw	r3,-16(fp)
 400e2ec:	00800044 	movi	r2,1
 400e2f0:	10c4983a 	sll	r2,r2,r3
 400e2f4:	0084303a 	nor	r2,zero,r2
 400e2f8:	1007883a 	mov	r3,r2
 400e2fc:	008100b4 	movhi	r2,1026
 400e300:	10a20a04 	addi	r2,r2,-30680
 400e304:	10800017 	ldw	r2,0(r2)
 400e308:	1886703a 	and	r3,r3,r2
 400e30c:	008100b4 	movhi	r2,1026
 400e310:	10a20a04 	addi	r2,r2,-30680
 400e314:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400e318:	008100b4 	movhi	r2,1026
 400e31c:	10a20a04 	addi	r2,r2,-30680
 400e320:	10800017 	ldw	r2,0(r2)
 400e324:	100170fa 	wrctl	ienable,r2
 400e328:	e0bffd17 	ldw	r2,-12(fp)
 400e32c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e330:	e0bffa17 	ldw	r2,-24(fp)
 400e334:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400e338:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 400e33c:	e037883a 	mov	sp,fp
 400e340:	df000017 	ldw	fp,0(sp)
 400e344:	dec00104 	addi	sp,sp,4
 400e348:	f800283a 	ret

0400e34c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400e34c:	defffc04 	addi	sp,sp,-16
 400e350:	df000315 	stw	fp,12(sp)
 400e354:	df000304 	addi	fp,sp,12
 400e358:	e13ffe15 	stw	r4,-8(fp)
 400e35c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400e360:	000530fa 	rdctl	r2,ienable
 400e364:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400e368:	e0ffff17 	ldw	r3,-4(fp)
 400e36c:	00800044 	movi	r2,1
 400e370:	10c4983a 	sll	r2,r2,r3
 400e374:	1007883a 	mov	r3,r2
 400e378:	e0bffd17 	ldw	r2,-12(fp)
 400e37c:	1884703a 	and	r2,r3,r2
 400e380:	1004c03a 	cmpne	r2,r2,zero
}
 400e384:	e037883a 	mov	sp,fp
 400e388:	df000017 	ldw	fp,0(sp)
 400e38c:	dec00104 	addi	sp,sp,4
 400e390:	f800283a 	ret

0400e394 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400e394:	defff404 	addi	sp,sp,-48
 400e398:	dfc00b15 	stw	ra,44(sp)
 400e39c:	df000a15 	stw	fp,40(sp)
 400e3a0:	df000a04 	addi	fp,sp,40
 400e3a4:	e13ffb15 	stw	r4,-20(fp)
 400e3a8:	e17ffc15 	stw	r5,-16(fp)
 400e3ac:	e1bffd15 	stw	r6,-12(fp)
 400e3b0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 400e3b4:	00bffa84 	movi	r2,-22
 400e3b8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400e3bc:	e0bffc17 	ldw	r2,-16(fp)
 400e3c0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400e3c4:	e0bff917 	ldw	r2,-28(fp)
 400e3c8:	10800808 	cmpgei	r2,r2,32
 400e3cc:	1000291e 	bne	r2,zero,400e474 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e3d0:	0005303a 	rdctl	r2,status
 400e3d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e3d8:	e0fff717 	ldw	r3,-36(fp)
 400e3dc:	00bfff84 	movi	r2,-2
 400e3e0:	1884703a 	and	r2,r3,r2
 400e3e4:	1001703a 	wrctl	status,r2
  
  return context;
 400e3e8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400e3ec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 400e3f0:	e0bff917 	ldw	r2,-28(fp)
 400e3f4:	00c100b4 	movhi	r3,1026
 400e3f8:	18cf2f04 	addi	r3,r3,15548
 400e3fc:	100490fa 	slli	r2,r2,3
 400e400:	10c7883a 	add	r3,r2,r3
 400e404:	e0bffd17 	ldw	r2,-12(fp)
 400e408:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 400e40c:	e0bff917 	ldw	r2,-28(fp)
 400e410:	00c100b4 	movhi	r3,1026
 400e414:	18cf2f04 	addi	r3,r3,15548
 400e418:	100490fa 	slli	r2,r2,3
 400e41c:	10c5883a 	add	r2,r2,r3
 400e420:	10c00104 	addi	r3,r2,4
 400e424:	e0bffe17 	ldw	r2,-8(fp)
 400e428:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400e42c:	e0bffd17 	ldw	r2,-12(fp)
 400e430:	1005003a 	cmpeq	r2,r2,zero
 400e434:	1000051e 	bne	r2,zero,400e44c <alt_iic_isr_register+0xb8>
 400e438:	e17ff917 	ldw	r5,-28(fp)
 400e43c:	e13ffb17 	ldw	r4,-20(fp)
 400e440:	400e2100 	call	400e210 <alt_ic_irq_enable>
 400e444:	e0bfff15 	stw	r2,-4(fp)
 400e448:	00000406 	br	400e45c <alt_iic_isr_register+0xc8>
 400e44c:	e17ff917 	ldw	r5,-28(fp)
 400e450:	e13ffb17 	ldw	r4,-20(fp)
 400e454:	400e2ac0 	call	400e2ac <alt_ic_irq_disable>
 400e458:	e0bfff15 	stw	r2,-4(fp)
 400e45c:	e0bfff17 	ldw	r2,-4(fp)
 400e460:	e0bffa15 	stw	r2,-24(fp)
 400e464:	e0bff817 	ldw	r2,-32(fp)
 400e468:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e46c:	e0bff617 	ldw	r2,-40(fp)
 400e470:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400e474:	e0bffa17 	ldw	r2,-24(fp)
}
 400e478:	e037883a 	mov	sp,fp
 400e47c:	dfc00117 	ldw	ra,4(sp)
 400e480:	df000017 	ldw	fp,0(sp)
 400e484:	dec00204 	addi	sp,sp,8
 400e488:	f800283a 	ret

0400e48c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400e48c:	defff904 	addi	sp,sp,-28
 400e490:	dfc00615 	stw	ra,24(sp)
 400e494:	df000515 	stw	fp,20(sp)
 400e498:	df000504 	addi	fp,sp,20
 400e49c:	e13ffc15 	stw	r4,-16(fp)
 400e4a0:	e17ffd15 	stw	r5,-12(fp)
 400e4a4:	e1bffe15 	stw	r6,-8(fp)
 400e4a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400e4ac:	e13ffd17 	ldw	r4,-12(fp)
 400e4b0:	e17ffe17 	ldw	r5,-8(fp)
 400e4b4:	e1bfff17 	ldw	r6,-4(fp)
 400e4b8:	400e6a40 	call	400e6a4 <open>
 400e4bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400e4c0:	e0bffb17 	ldw	r2,-20(fp)
 400e4c4:	1004803a 	cmplt	r2,r2,zero
 400e4c8:	10001c1e 	bne	r2,zero,400e53c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 400e4cc:	e0bffb17 	ldw	r2,-20(fp)
 400e4d0:	00c10074 	movhi	r3,1025
 400e4d4:	18dd0804 	addi	r3,r3,29728
 400e4d8:	10800324 	muli	r2,r2,12
 400e4dc:	10c5883a 	add	r2,r2,r3
 400e4e0:	10c00017 	ldw	r3,0(r2)
 400e4e4:	e0bffc17 	ldw	r2,-16(fp)
 400e4e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400e4ec:	e0bffb17 	ldw	r2,-20(fp)
 400e4f0:	00c10074 	movhi	r3,1025
 400e4f4:	18dd0804 	addi	r3,r3,29728
 400e4f8:	10800324 	muli	r2,r2,12
 400e4fc:	10c5883a 	add	r2,r2,r3
 400e500:	10800104 	addi	r2,r2,4
 400e504:	10c00017 	ldw	r3,0(r2)
 400e508:	e0bffc17 	ldw	r2,-16(fp)
 400e50c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400e510:	e0bffb17 	ldw	r2,-20(fp)
 400e514:	00c10074 	movhi	r3,1025
 400e518:	18dd0804 	addi	r3,r3,29728
 400e51c:	10800324 	muli	r2,r2,12
 400e520:	10c5883a 	add	r2,r2,r3
 400e524:	10800204 	addi	r2,r2,8
 400e528:	10c00017 	ldw	r3,0(r2)
 400e52c:	e0bffc17 	ldw	r2,-16(fp)
 400e530:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400e534:	e13ffb17 	ldw	r4,-20(fp)
 400e538:	40037780 	call	4003778 <alt_release_fd>
  }
} 
 400e53c:	e037883a 	mov	sp,fp
 400e540:	dfc00117 	ldw	ra,4(sp)
 400e544:	df000017 	ldw	fp,0(sp)
 400e548:	dec00204 	addi	sp,sp,8
 400e54c:	f800283a 	ret

0400e550 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400e550:	defffb04 	addi	sp,sp,-20
 400e554:	dfc00415 	stw	ra,16(sp)
 400e558:	df000315 	stw	fp,12(sp)
 400e55c:	df000304 	addi	fp,sp,12
 400e560:	e13ffd15 	stw	r4,-12(fp)
 400e564:	e17ffe15 	stw	r5,-8(fp)
 400e568:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400e56c:	01010074 	movhi	r4,1025
 400e570:	211d0b04 	addi	r4,r4,29740
 400e574:	e17ffd17 	ldw	r5,-12(fp)
 400e578:	01800044 	movi	r6,1
 400e57c:	01c07fc4 	movi	r7,511
 400e580:	400e48c0 	call	400e48c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400e584:	01010074 	movhi	r4,1025
 400e588:	211d0804 	addi	r4,r4,29728
 400e58c:	e17ffe17 	ldw	r5,-8(fp)
 400e590:	000d883a 	mov	r6,zero
 400e594:	01c07fc4 	movi	r7,511
 400e598:	400e48c0 	call	400e48c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400e59c:	01010074 	movhi	r4,1025
 400e5a0:	211d0e04 	addi	r4,r4,29752
 400e5a4:	e17fff17 	ldw	r5,-4(fp)
 400e5a8:	01800044 	movi	r6,1
 400e5ac:	01c07fc4 	movi	r7,511
 400e5b0:	400e48c0 	call	400e48c <alt_open_fd>
}  
 400e5b4:	e037883a 	mov	sp,fp
 400e5b8:	dfc00117 	ldw	ra,4(sp)
 400e5bc:	df000017 	ldw	fp,0(sp)
 400e5c0:	dec00204 	addi	sp,sp,8
 400e5c4:	f800283a 	ret

0400e5c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400e5c8:	defffc04 	addi	sp,sp,-16
 400e5cc:	df000315 	stw	fp,12(sp)
 400e5d0:	df000304 	addi	fp,sp,12
 400e5d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400e5d8:	e0bffe17 	ldw	r2,-8(fp)
 400e5dc:	10800217 	ldw	r2,8(r2)
 400e5e0:	10d00034 	orhi	r3,r2,16384
 400e5e4:	e0bffe17 	ldw	r2,-8(fp)
 400e5e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400e5ec:	e03ffd15 	stw	zero,-12(fp)
 400e5f0:	00002006 	br	400e674 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400e5f4:	e0bffd17 	ldw	r2,-12(fp)
 400e5f8:	00c10074 	movhi	r3,1025
 400e5fc:	18dd0804 	addi	r3,r3,29728
 400e600:	10800324 	muli	r2,r2,12
 400e604:	10c5883a 	add	r2,r2,r3
 400e608:	10c00017 	ldw	r3,0(r2)
 400e60c:	e0bffe17 	ldw	r2,-8(fp)
 400e610:	10800017 	ldw	r2,0(r2)
 400e614:	1880141e 	bne	r3,r2,400e668 <alt_file_locked+0xa0>
 400e618:	e0bffd17 	ldw	r2,-12(fp)
 400e61c:	00c10074 	movhi	r3,1025
 400e620:	18dd0804 	addi	r3,r3,29728
 400e624:	10800324 	muli	r2,r2,12
 400e628:	10c5883a 	add	r2,r2,r3
 400e62c:	10800204 	addi	r2,r2,8
 400e630:	10800017 	ldw	r2,0(r2)
 400e634:	1004403a 	cmpge	r2,r2,zero
 400e638:	10000b1e 	bne	r2,zero,400e668 <alt_file_locked+0xa0>
 400e63c:	e0bffd17 	ldw	r2,-12(fp)
 400e640:	10800324 	muli	r2,r2,12
 400e644:	1007883a 	mov	r3,r2
 400e648:	00810074 	movhi	r2,1025
 400e64c:	109d0804 	addi	r2,r2,29728
 400e650:	1887883a 	add	r3,r3,r2
 400e654:	e0bffe17 	ldw	r2,-8(fp)
 400e658:	18800326 	beq	r3,r2,400e668 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400e65c:	00bffcc4 	movi	r2,-13
 400e660:	e0bfff15 	stw	r2,-4(fp)
 400e664:	00000a06 	br	400e690 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400e668:	e0bffd17 	ldw	r2,-12(fp)
 400e66c:	10800044 	addi	r2,r2,1
 400e670:	e0bffd15 	stw	r2,-12(fp)
 400e674:	008100b4 	movhi	r2,1026
 400e678:	10a1bf04 	addi	r2,r2,-30980
 400e67c:	10800017 	ldw	r2,0(r2)
 400e680:	1007883a 	mov	r3,r2
 400e684:	e0bffd17 	ldw	r2,-12(fp)
 400e688:	18bfda2e 	bgeu	r3,r2,400e5f4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400e68c:	e03fff15 	stw	zero,-4(fp)
 400e690:	e0bfff17 	ldw	r2,-4(fp)
}
 400e694:	e037883a 	mov	sp,fp
 400e698:	df000017 	ldw	fp,0(sp)
 400e69c:	dec00104 	addi	sp,sp,4
 400e6a0:	f800283a 	ret

0400e6a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400e6a4:	defff404 	addi	sp,sp,-48
 400e6a8:	dfc00b15 	stw	ra,44(sp)
 400e6ac:	df000a15 	stw	fp,40(sp)
 400e6b0:	df000a04 	addi	fp,sp,40
 400e6b4:	e13ffb15 	stw	r4,-20(fp)
 400e6b8:	e17ffc15 	stw	r5,-16(fp)
 400e6bc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400e6c0:	00bfffc4 	movi	r2,-1
 400e6c4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 400e6c8:	00bffb44 	movi	r2,-19
 400e6cc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 400e6d0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400e6d4:	e13ffb17 	ldw	r4,-20(fp)
 400e6d8:	014100b4 	movhi	r5,1026
 400e6dc:	2961bd04 	addi	r5,r5,-30988
 400e6e0:	400f1740 	call	400f174 <alt_find_dev>
 400e6e4:	e0bffa15 	stw	r2,-24(fp)
 400e6e8:	e0bffa17 	ldw	r2,-24(fp)
 400e6ec:	1004c03a 	cmpne	r2,r2,zero
 400e6f0:	1000051e 	bne	r2,zero,400e708 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400e6f4:	e13ffb17 	ldw	r4,-20(fp)
 400e6f8:	400f2080 	call	400f208 <alt_find_file>
 400e6fc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 400e700:	00800044 	movi	r2,1
 400e704:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400e708:	e0bffa17 	ldw	r2,-24(fp)
 400e70c:	1005003a 	cmpeq	r2,r2,zero
 400e710:	1000301e 	bne	r2,zero,400e7d4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400e714:	e13ffa17 	ldw	r4,-24(fp)
 400e718:	400f3280 	call	400f328 <alt_get_fd>
 400e71c:	e0bff815 	stw	r2,-32(fp)
 400e720:	e0bff817 	ldw	r2,-32(fp)
 400e724:	1004403a 	cmpge	r2,r2,zero
 400e728:	1000031e 	bne	r2,zero,400e738 <open+0x94>
    {
      status = index;
 400e72c:	e0bff817 	ldw	r2,-32(fp)
 400e730:	e0bff715 	stw	r2,-36(fp)
 400e734:	00002906 	br	400e7dc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 400e738:	e0bff817 	ldw	r2,-32(fp)
 400e73c:	10800324 	muli	r2,r2,12
 400e740:	1007883a 	mov	r3,r2
 400e744:	00810074 	movhi	r2,1025
 400e748:	109d0804 	addi	r2,r2,29728
 400e74c:	1885883a 	add	r2,r3,r2
 400e750:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400e754:	e0fffc17 	ldw	r3,-16(fp)
 400e758:	00900034 	movhi	r2,16384
 400e75c:	10bfffc4 	addi	r2,r2,-1
 400e760:	1886703a 	and	r3,r3,r2
 400e764:	e0bff917 	ldw	r2,-28(fp)
 400e768:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400e76c:	e0bff617 	ldw	r2,-40(fp)
 400e770:	1004c03a 	cmpne	r2,r2,zero
 400e774:	1000061e 	bne	r2,zero,400e790 <open+0xec>
 400e778:	e13ff917 	ldw	r4,-28(fp)
 400e77c:	400e5c80 	call	400e5c8 <alt_file_locked>
 400e780:	e0bff715 	stw	r2,-36(fp)
 400e784:	e0bff717 	ldw	r2,-36(fp)
 400e788:	1004803a 	cmplt	r2,r2,zero
 400e78c:	1000131e 	bne	r2,zero,400e7dc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400e790:	e0bffa17 	ldw	r2,-24(fp)
 400e794:	10800317 	ldw	r2,12(r2)
 400e798:	1005003a 	cmpeq	r2,r2,zero
 400e79c:	1000091e 	bne	r2,zero,400e7c4 <open+0x120>
 400e7a0:	e0bffa17 	ldw	r2,-24(fp)
 400e7a4:	10800317 	ldw	r2,12(r2)
 400e7a8:	e13ff917 	ldw	r4,-28(fp)
 400e7ac:	e17ffb17 	ldw	r5,-20(fp)
 400e7b0:	e1bffc17 	ldw	r6,-16(fp)
 400e7b4:	e1fffd17 	ldw	r7,-12(fp)
 400e7b8:	103ee83a 	callr	r2
 400e7bc:	e0bfff15 	stw	r2,-4(fp)
 400e7c0:	00000106 	br	400e7c8 <open+0x124>
 400e7c4:	e03fff15 	stw	zero,-4(fp)
 400e7c8:	e0bfff17 	ldw	r2,-4(fp)
 400e7cc:	e0bff715 	stw	r2,-36(fp)
 400e7d0:	00000206 	br	400e7dc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400e7d4:	00bffb44 	movi	r2,-19
 400e7d8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400e7dc:	e0bff717 	ldw	r2,-36(fp)
 400e7e0:	1004403a 	cmpge	r2,r2,zero
 400e7e4:	1000091e 	bne	r2,zero,400e80c <open+0x168>
  {
    alt_release_fd (index);  
 400e7e8:	e13ff817 	ldw	r4,-32(fp)
 400e7ec:	40037780 	call	4003778 <alt_release_fd>
    ALT_ERRNO = -status;
 400e7f0:	400e82c0 	call	400e82c <alt_get_errno>
 400e7f4:	e0fff717 	ldw	r3,-36(fp)
 400e7f8:	00c7c83a 	sub	r3,zero,r3
 400e7fc:	10c00015 	stw	r3,0(r2)
    return -1;
 400e800:	00bfffc4 	movi	r2,-1
 400e804:	e0bffe15 	stw	r2,-8(fp)
 400e808:	00000206 	br	400e814 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 400e80c:	e0bff817 	ldw	r2,-32(fp)
 400e810:	e0bffe15 	stw	r2,-8(fp)
 400e814:	e0bffe17 	ldw	r2,-8(fp)
}
 400e818:	e037883a 	mov	sp,fp
 400e81c:	dfc00117 	ldw	ra,4(sp)
 400e820:	df000017 	ldw	fp,0(sp)
 400e824:	dec00204 	addi	sp,sp,8
 400e828:	f800283a 	ret

0400e82c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e82c:	defffd04 	addi	sp,sp,-12
 400e830:	dfc00215 	stw	ra,8(sp)
 400e834:	df000115 	stw	fp,4(sp)
 400e838:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400e83c:	008100b4 	movhi	r2,1026
 400e840:	10a1c004 	addi	r2,r2,-30976
 400e844:	10800017 	ldw	r2,0(r2)
 400e848:	1005003a 	cmpeq	r2,r2,zero
 400e84c:	1000061e 	bne	r2,zero,400e868 <alt_get_errno+0x3c>
 400e850:	008100b4 	movhi	r2,1026
 400e854:	10a1c004 	addi	r2,r2,-30976
 400e858:	10800017 	ldw	r2,0(r2)
 400e85c:	103ee83a 	callr	r2
 400e860:	e0bfff15 	stw	r2,-4(fp)
 400e864:	00000306 	br	400e874 <alt_get_errno+0x48>
 400e868:	008100b4 	movhi	r2,1026
 400e86c:	10a1eb04 	addi	r2,r2,-30804
 400e870:	e0bfff15 	stw	r2,-4(fp)
 400e874:	e0bfff17 	ldw	r2,-4(fp)
}
 400e878:	e037883a 	mov	sp,fp
 400e87c:	dfc00117 	ldw	ra,4(sp)
 400e880:	df000017 	ldw	fp,0(sp)
 400e884:	dec00204 	addi	sp,sp,8
 400e888:	f800283a 	ret

0400e88c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400e88c:	defffa04 	addi	sp,sp,-24
 400e890:	df000515 	stw	fp,20(sp)
 400e894:	df000504 	addi	fp,sp,20
 400e898:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e89c:	0005303a 	rdctl	r2,status
 400e8a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e8a4:	e0fffd17 	ldw	r3,-12(fp)
 400e8a8:	00bfff84 	movi	r2,-2
 400e8ac:	1884703a 	and	r2,r3,r2
 400e8b0:	1001703a 	wrctl	status,r2
  
  return context;
 400e8b4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400e8b8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 400e8bc:	e0bfff17 	ldw	r2,-4(fp)
 400e8c0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400e8c4:	e0bffc17 	ldw	r2,-16(fp)
 400e8c8:	10c00017 	ldw	r3,0(r2)
 400e8cc:	e0bffc17 	ldw	r2,-16(fp)
 400e8d0:	10800117 	ldw	r2,4(r2)
 400e8d4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 400e8d8:	e0bffc17 	ldw	r2,-16(fp)
 400e8dc:	10c00117 	ldw	r3,4(r2)
 400e8e0:	e0bffc17 	ldw	r2,-16(fp)
 400e8e4:	10800017 	ldw	r2,0(r2)
 400e8e8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400e8ec:	e0fffc17 	ldw	r3,-16(fp)
 400e8f0:	e0bffc17 	ldw	r2,-16(fp)
 400e8f4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 400e8f8:	e0fffc17 	ldw	r3,-16(fp)
 400e8fc:	e0bffc17 	ldw	r2,-16(fp)
 400e900:	18800015 	stw	r2,0(r3)
 400e904:	e0bffe17 	ldw	r2,-8(fp)
 400e908:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e90c:	e0bffb17 	ldw	r2,-20(fp)
 400e910:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400e914:	e037883a 	mov	sp,fp
 400e918:	df000017 	ldw	fp,0(sp)
 400e91c:	dec00104 	addi	sp,sp,4
 400e920:	f800283a 	ret

0400e924 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400e924:	defffb04 	addi	sp,sp,-20
 400e928:	dfc00415 	stw	ra,16(sp)
 400e92c:	df000315 	stw	fp,12(sp)
 400e930:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400e934:	d0a02d17 	ldw	r2,-32588(gp)
 400e938:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400e93c:	d0a05517 	ldw	r2,-32428(gp)
 400e940:	10800044 	addi	r2,r2,1
 400e944:	d0a05515 	stw	r2,-32428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400e948:	00003106 	br	400ea10 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 400e94c:	e0bffe17 	ldw	r2,-8(fp)
 400e950:	10800017 	ldw	r2,0(r2)
 400e954:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400e958:	e0bffe17 	ldw	r2,-8(fp)
 400e95c:	10800403 	ldbu	r2,16(r2)
 400e960:	10803fcc 	andi	r2,r2,255
 400e964:	1005003a 	cmpeq	r2,r2,zero
 400e968:	1000051e 	bne	r2,zero,400e980 <alt_tick+0x5c>
 400e96c:	d0a05517 	ldw	r2,-32428(gp)
 400e970:	1004c03a 	cmpne	r2,r2,zero
 400e974:	1000021e 	bne	r2,zero,400e980 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 400e978:	e0bffe17 	ldw	r2,-8(fp)
 400e97c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400e980:	e0bffe17 	ldw	r2,-8(fp)
 400e984:	10c00217 	ldw	r3,8(r2)
 400e988:	d0a05517 	ldw	r2,-32428(gp)
 400e98c:	10c01e36 	bltu	r2,r3,400ea08 <alt_tick+0xe4>
 400e990:	e0bffe17 	ldw	r2,-8(fp)
 400e994:	10800403 	ldbu	r2,16(r2)
 400e998:	10803fcc 	andi	r2,r2,255
 400e99c:	1004c03a 	cmpne	r2,r2,zero
 400e9a0:	1000191e 	bne	r2,zero,400ea08 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 400e9a4:	e0bffe17 	ldw	r2,-8(fp)
 400e9a8:	10c00317 	ldw	r3,12(r2)
 400e9ac:	e0bffe17 	ldw	r2,-8(fp)
 400e9b0:	11000517 	ldw	r4,20(r2)
 400e9b4:	183ee83a 	callr	r3
 400e9b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400e9bc:	e0bffd17 	ldw	r2,-12(fp)
 400e9c0:	1004c03a 	cmpne	r2,r2,zero
 400e9c4:	1000031e 	bne	r2,zero,400e9d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 400e9c8:	e13ffe17 	ldw	r4,-8(fp)
 400e9cc:	400e88c0 	call	400e88c <alt_alarm_stop>
 400e9d0:	00000d06 	br	400ea08 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 400e9d4:	e0bffe17 	ldw	r2,-8(fp)
 400e9d8:	10c00217 	ldw	r3,8(r2)
 400e9dc:	e0bffd17 	ldw	r2,-12(fp)
 400e9e0:	1887883a 	add	r3,r3,r2
 400e9e4:	e0bffe17 	ldw	r2,-8(fp)
 400e9e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400e9ec:	e0bffe17 	ldw	r2,-8(fp)
 400e9f0:	10c00217 	ldw	r3,8(r2)
 400e9f4:	d0a05517 	ldw	r2,-32428(gp)
 400e9f8:	1880032e 	bgeu	r3,r2,400ea08 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 400e9fc:	e0fffe17 	ldw	r3,-8(fp)
 400ea00:	00800044 	movi	r2,1
 400ea04:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 400ea08:	e0bfff17 	ldw	r2,-4(fp)
 400ea0c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400ea10:	d0e02d04 	addi	r3,gp,-32588
 400ea14:	e0bffe17 	ldw	r2,-8(fp)
 400ea18:	10ffcc1e 	bne	r2,r3,400e94c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400ea1c:	4004a880 	call	4004a88 <OSTimeTick>
}
 400ea20:	e037883a 	mov	sp,fp
 400ea24:	dfc00117 	ldw	ra,4(sp)
 400ea28:	df000017 	ldw	fp,0(sp)
 400ea2c:	dec00204 	addi	sp,sp,8
 400ea30:	f800283a 	ret

0400ea34 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 400ea34:	deffff04 	addi	sp,sp,-4
 400ea38:	df000015 	stw	fp,0(sp)
 400ea3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400ea40:	000170fa 	wrctl	ienable,zero
}
 400ea44:	e037883a 	mov	sp,fp
 400ea48:	df000017 	ldw	fp,0(sp)
 400ea4c:	dec00104 	addi	sp,sp,4
 400ea50:	f800283a 	ret

0400ea54 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 400ea54:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 400ea58:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 400ea5c:	d1204e17 	ldw	r4,-32456(gp)

      stw ra,  0(sp)
 400ea60:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 400ea64:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 400ea68:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 400ea6c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 400ea70:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 400ea74:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 400ea78:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 400ea7c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 400ea80:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 400ea84:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 400ea88:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 400ea8c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 400ea90:	400ee740 	call	400ee74 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 400ea94:	d1204717 	ldw	r4,-32484(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 400ea98:	d1603f07 	ldb	r5,-32516(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 400ea9c:	d1204e15 	stw	r4,-32456(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 400eaa0:	d1603f45 	stb	r5,-32515(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 400eaa4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 400eaa8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 400eaac:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 400eab0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 400eab4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 400eab8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 400eabc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 400eac0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 400eac4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 400eac8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 400eacc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 400ead0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 400ead4:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 400ead8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 400eadc:	f800283a 	ret

0400eae0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 400eae0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 400eae4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 400eae8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 400eaec:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 400eaf0:	400ee740 	call	400ee74 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 400eaf4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 400eaf8:	d4a03d45 	stb	r18,-32523(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 400eafc:	003fe506 	br	400ea94 <OSCtxSw+0x40>

0400eb00 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 400eb00:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 400eb04:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 400eb08:	10800054 	ori	r2,r2,1
      wrctl status, r2
 400eb0c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 400eb10:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 400eb14:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 400eb18:	dec00204 	addi	sp,sp,8

      callr r2
 400eb1c:	103ee83a 	callr	r2

      nop
 400eb20:	0001883a 	nop

0400eb24 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 400eb24:	defff704 	addi	sp,sp,-36
 400eb28:	dfc00815 	stw	ra,32(sp)
 400eb2c:	df000715 	stw	fp,28(sp)
 400eb30:	df000704 	addi	fp,sp,28
 400eb34:	e13ffc15 	stw	r4,-16(fp)
 400eb38:	e17ffd15 	stw	r5,-12(fp)
 400eb3c:	e1bffe15 	stw	r6,-8(fp)
 400eb40:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 400eb44:	e0bffe17 	ldw	r2,-8(fp)
 400eb48:	1007883a 	mov	r3,r2
 400eb4c:	00bfff04 	movi	r2,-4
 400eb50:	1884703a 	and	r2,r3,r2
 400eb54:	10bf0004 	addi	r2,r2,-1024
 400eb58:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 400eb5c:	e0bff917 	ldw	r2,-28(fp)
 400eb60:	10000015 	stw	zero,0(r2)
 400eb64:	e0bff917 	ldw	r2,-28(fp)
 400eb68:	10c0bb04 	addi	r3,r2,748
 400eb6c:	e0bff917 	ldw	r2,-28(fp)
 400eb70:	10c00115 	stw	r3,4(r2)
 400eb74:	e0bff917 	ldw	r2,-28(fp)
 400eb78:	1080bb04 	addi	r2,r2,748
 400eb7c:	10c01704 	addi	r3,r2,92
 400eb80:	e0bff917 	ldw	r2,-28(fp)
 400eb84:	10c00215 	stw	r3,8(r2)
 400eb88:	e0bff917 	ldw	r2,-28(fp)
 400eb8c:	1080bb04 	addi	r2,r2,748
 400eb90:	10c02e04 	addi	r3,r2,184
 400eb94:	e0bff917 	ldw	r2,-28(fp)
 400eb98:	10c00315 	stw	r3,12(r2)
 400eb9c:	e0bff917 	ldw	r2,-28(fp)
 400eba0:	10000415 	stw	zero,16(r2)
 400eba4:	e0bff917 	ldw	r2,-28(fp)
 400eba8:	10800504 	addi	r2,r2,20
 400ebac:	1009883a 	mov	r4,r2
 400ebb0:	01800644 	movi	r6,25
 400ebb4:	000b883a 	mov	r5,zero
 400ebb8:	4002a400 	call	4002a40 <memset>
 400ebbc:	e0bff917 	ldw	r2,-28(fp)
 400ebc0:	10000c15 	stw	zero,48(r2)
 400ebc4:	e0fff917 	ldw	r3,-28(fp)
 400ebc8:	00810074 	movhi	r2,1025
 400ebcc:	109a3104 	addi	r2,r2,26820
 400ebd0:	18800d15 	stw	r2,52(r3)
 400ebd4:	e0bff917 	ldw	r2,-28(fp)
 400ebd8:	10000e15 	stw	zero,56(r2)
 400ebdc:	e0bff917 	ldw	r2,-28(fp)
 400ebe0:	10000f15 	stw	zero,60(r2)
 400ebe4:	e0bff917 	ldw	r2,-28(fp)
 400ebe8:	10001015 	stw	zero,64(r2)
 400ebec:	e0bff917 	ldw	r2,-28(fp)
 400ebf0:	10001115 	stw	zero,68(r2)
 400ebf4:	e0bff917 	ldw	r2,-28(fp)
 400ebf8:	10001215 	stw	zero,72(r2)
 400ebfc:	e0bff917 	ldw	r2,-28(fp)
 400ec00:	10001315 	stw	zero,76(r2)
 400ec04:	e0bff917 	ldw	r2,-28(fp)
 400ec08:	10001415 	stw	zero,80(r2)
 400ec0c:	e0bff917 	ldw	r2,-28(fp)
 400ec10:	10001515 	stw	zero,84(r2)
 400ec14:	e0bff917 	ldw	r2,-28(fp)
 400ec18:	10001615 	stw	zero,88(r2)
 400ec1c:	e0bff917 	ldw	r2,-28(fp)
 400ec20:	10001715 	stw	zero,92(r2)
 400ec24:	e0bff917 	ldw	r2,-28(fp)
 400ec28:	10001805 	stb	zero,96(r2)
 400ec2c:	e0bff917 	ldw	r2,-28(fp)
 400ec30:	10801f04 	addi	r2,r2,124
 400ec34:	10000015 	stw	zero,0(r2)
 400ec38:	10000115 	stw	zero,4(r2)
 400ec3c:	10000215 	stw	zero,8(r2)
 400ec40:	10000315 	stw	zero,12(r2)
 400ec44:	10000415 	stw	zero,16(r2)
 400ec48:	10000515 	stw	zero,20(r2)
 400ec4c:	10000615 	stw	zero,24(r2)
 400ec50:	10000715 	stw	zero,28(r2)
 400ec54:	10000815 	stw	zero,32(r2)
 400ec58:	e0bff917 	ldw	r2,-28(fp)
 400ec5c:	10002815 	stw	zero,160(r2)
 400ec60:	e0fff917 	ldw	r3,-28(fp)
 400ec64:	00800044 	movi	r2,1
 400ec68:	18802915 	stw	r2,164(r3)
 400ec6c:	18002a15 	stw	zero,168(r3)
 400ec70:	e0fff917 	ldw	r3,-28(fp)
 400ec74:	008cc384 	movi	r2,13070
 400ec78:	18802b0d 	sth	r2,172(r3)
 400ec7c:	e0fff917 	ldw	r3,-28(fp)
 400ec80:	00aaf344 	movi	r2,-21555
 400ec84:	18802b8d 	sth	r2,174(r3)
 400ec88:	e0fff917 	ldw	r3,-28(fp)
 400ec8c:	00848d04 	movi	r2,4660
 400ec90:	18802c0d 	sth	r2,176(r3)
 400ec94:	e0fff917 	ldw	r3,-28(fp)
 400ec98:	00b99b44 	movi	r2,-6547
 400ec9c:	18802c8d 	sth	r2,178(r3)
 400eca0:	e0fff917 	ldw	r3,-28(fp)
 400eca4:	00b7bb04 	movi	r2,-8468
 400eca8:	18802d0d 	sth	r2,180(r3)
 400ecac:	e0fff917 	ldw	r3,-28(fp)
 400ecb0:	00800144 	movi	r2,5
 400ecb4:	18802d8d 	sth	r2,182(r3)
 400ecb8:	e0fff917 	ldw	r3,-28(fp)
 400ecbc:	008002c4 	movi	r2,11
 400ecc0:	18802e0d 	sth	r2,184(r3)
 400ecc4:	e0bff917 	ldw	r2,-28(fp)
 400ecc8:	10002f15 	stw	zero,188(r2)
 400eccc:	e0bff917 	ldw	r2,-28(fp)
 400ecd0:	10003015 	stw	zero,192(r2)
 400ecd4:	e0bff917 	ldw	r2,-28(fp)
 400ecd8:	10003115 	stw	zero,196(r2)
 400ecdc:	e0bff917 	ldw	r2,-28(fp)
 400ece0:	10003215 	stw	zero,200(r2)
 400ece4:	e0bff917 	ldw	r2,-28(fp)
 400ece8:	10003315 	stw	zero,204(r2)
 400ecec:	e0bff917 	ldw	r2,-28(fp)
 400ecf0:	10003415 	stw	zero,208(r2)
 400ecf4:	e0bff917 	ldw	r2,-28(fp)
 400ecf8:	10003e15 	stw	zero,248(r2)
 400ecfc:	e0bff917 	ldw	r2,-28(fp)
 400ed00:	10003f15 	stw	zero,252(r2)
 400ed04:	e0bff917 	ldw	r2,-28(fp)
 400ed08:	10004015 	stw	zero,256(r2)
 400ed0c:	e0bff917 	ldw	r2,-28(fp)
 400ed10:	10004115 	stw	zero,260(r2)
 400ed14:	e0bff917 	ldw	r2,-28(fp)
 400ed18:	10004215 	stw	zero,264(r2)
 400ed1c:	e0bff917 	ldw	r2,-28(fp)
 400ed20:	10004315 	stw	zero,268(r2)
 400ed24:	e0bff917 	ldw	r2,-28(fp)
 400ed28:	10004415 	stw	zero,272(r2)
 400ed2c:	e0bff917 	ldw	r2,-28(fp)
 400ed30:	10004515 	stw	zero,276(r2)
 400ed34:	e0bff917 	ldw	r2,-28(fp)
 400ed38:	10004615 	stw	zero,280(r2)
 400ed3c:	e0bff917 	ldw	r2,-28(fp)
 400ed40:	10004715 	stw	zero,284(r2)
 400ed44:	e0bff917 	ldw	r2,-28(fp)
 400ed48:	10003505 	stb	zero,212(r2)
 400ed4c:	e0bff917 	ldw	r2,-28(fp)
 400ed50:	10003705 	stb	zero,220(r2)
 400ed54:	e0bff917 	ldw	r2,-28(fp)
 400ed58:	10003d15 	stw	zero,244(r2)
 400ed5c:	e0bff917 	ldw	r2,-28(fp)
 400ed60:	10005215 	stw	zero,328(r2)
 400ed64:	e0bff917 	ldw	r2,-28(fp)
 400ed68:	10005315 	stw	zero,332(r2)
 400ed6c:	e0bff917 	ldw	r2,-28(fp)
 400ed70:	10005415 	stw	zero,336(r2)
 400ed74:	e0bff917 	ldw	r2,-28(fp)
 400ed78:	10005515 	stw	zero,340(r2)
 400ed7c:	e0bff917 	ldw	r2,-28(fp)
 400ed80:	1000b515 	stw	zero,724(r2)
 400ed84:	e0bff917 	ldw	r2,-28(fp)
 400ed88:	10007515 	stw	zero,468(r2)
 400ed8c:	e0bff917 	ldw	r2,-28(fp)
 400ed90:	1000b715 	stw	zero,732(r2)
 400ed94:	e0bff917 	ldw	r2,-28(fp)
 400ed98:	1000b815 	stw	zero,736(r2)
 400ed9c:	e0bff917 	ldw	r2,-28(fp)
 400eda0:	1000b915 	stw	zero,740(r2)
 400eda4:	e0bff917 	ldw	r2,-28(fp)
 400eda8:	1000ba15 	stw	zero,744(r2)
 400edac:	e0bff917 	ldw	r2,-28(fp)
 400edb0:	1080bb04 	addi	r2,r2,748
 400edb4:	1009883a 	mov	r4,r2
 400edb8:	01804504 	movi	r6,276
 400edbc:	000b883a 	mov	r5,zero
 400edc0:	4002a400 	call	4002a40 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 400edc4:	e0bff917 	ldw	r2,-28(fp)
 400edc8:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 400edcc:	e0bffb17 	ldw	r2,-20(fp)
 400edd0:	10bff304 	addi	r2,r2,-52
 400edd4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 400edd8:	e0bffa17 	ldw	r2,-24(fp)
 400eddc:	10c00c04 	addi	r3,r2,48
 400ede0:	e0bffc17 	ldw	r2,-16(fp)
 400ede4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 400ede8:	e0bffa17 	ldw	r2,-24(fp)
 400edec:	10c00b04 	addi	r3,r2,44
 400edf0:	e0bffd17 	ldw	r2,-12(fp)
 400edf4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 400edf8:	e0bffa17 	ldw	r2,-24(fp)
 400edfc:	10c00a04 	addi	r3,r2,40
 400ee00:	e0bff917 	ldw	r2,-28(fp)
 400ee04:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 400ee08:	00810074 	movhi	r2,1025
 400ee0c:	10bac004 	addi	r2,r2,-5376
 400ee10:	10c00104 	addi	r3,r2,4
 400ee14:	e0bffa17 	ldw	r2,-24(fp)
 400ee18:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 400ee1c:	e0bffa17 	ldw	r2,-24(fp)
}
 400ee20:	e037883a 	mov	sp,fp
 400ee24:	dfc00117 	ldw	ra,4(sp)
 400ee28:	df000017 	ldw	fp,0(sp)
 400ee2c:	dec00204 	addi	sp,sp,8
 400ee30:	f800283a 	ret

0400ee34 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 400ee34:	defffe04 	addi	sp,sp,-8
 400ee38:	df000115 	stw	fp,4(sp)
 400ee3c:	df000104 	addi	fp,sp,4
 400ee40:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 400ee44:	e037883a 	mov	sp,fp
 400ee48:	df000017 	ldw	fp,0(sp)
 400ee4c:	dec00104 	addi	sp,sp,4
 400ee50:	f800283a 	ret

0400ee54 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 400ee54:	defffe04 	addi	sp,sp,-8
 400ee58:	df000115 	stw	fp,4(sp)
 400ee5c:	df000104 	addi	fp,sp,4
 400ee60:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 400ee64:	e037883a 	mov	sp,fp
 400ee68:	df000017 	ldw	fp,0(sp)
 400ee6c:	dec00104 	addi	sp,sp,4
 400ee70:	f800283a 	ret

0400ee74 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 400ee74:	deffff04 	addi	sp,sp,-4
 400ee78:	df000015 	stw	fp,0(sp)
 400ee7c:	d839883a 	mov	fp,sp
}
 400ee80:	e037883a 	mov	sp,fp
 400ee84:	df000017 	ldw	fp,0(sp)
 400ee88:	dec00104 	addi	sp,sp,4
 400ee8c:	f800283a 	ret

0400ee90 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 400ee90:	deffff04 	addi	sp,sp,-4
 400ee94:	df000015 	stw	fp,0(sp)
 400ee98:	d839883a 	mov	fp,sp
}
 400ee9c:	e037883a 	mov	sp,fp
 400eea0:	df000017 	ldw	fp,0(sp)
 400eea4:	dec00104 	addi	sp,sp,4
 400eea8:	f800283a 	ret

0400eeac <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 400eeac:	deffff04 	addi	sp,sp,-4
 400eeb0:	df000015 	stw	fp,0(sp)
 400eeb4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 400eeb8:	e037883a 	mov	sp,fp
 400eebc:	df000017 	ldw	fp,0(sp)
 400eec0:	dec00104 	addi	sp,sp,4
 400eec4:	f800283a 	ret

0400eec8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 400eec8:	deffff04 	addi	sp,sp,-4
 400eecc:	df000015 	stw	fp,0(sp)
 400eed0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 400eed4:	e037883a 	mov	sp,fp
 400eed8:	df000017 	ldw	fp,0(sp)
 400eedc:	dec00104 	addi	sp,sp,4
 400eee0:	f800283a 	ret

0400eee4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 400eee4:	deffff04 	addi	sp,sp,-4
 400eee8:	df000015 	stw	fp,0(sp)
 400eeec:	d839883a 	mov	fp,sp
}
 400eef0:	e037883a 	mov	sp,fp
 400eef4:	df000017 	ldw	fp,0(sp)
 400eef8:	dec00104 	addi	sp,sp,4
 400eefc:	f800283a 	ret

0400ef00 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 400ef00:	deffff04 	addi	sp,sp,-4
 400ef04:	df000015 	stw	fp,0(sp)
 400ef08:	d839883a 	mov	fp,sp
}
 400ef0c:	e037883a 	mov	sp,fp
 400ef10:	df000017 	ldw	fp,0(sp)
 400ef14:	dec00104 	addi	sp,sp,4
 400ef18:	f800283a 	ret

0400ef1c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 400ef1c:	defffe04 	addi	sp,sp,-8
 400ef20:	df000115 	stw	fp,4(sp)
 400ef24:	df000104 	addi	fp,sp,4
 400ef28:	e13fff15 	stw	r4,-4(fp)
}
 400ef2c:	e037883a 	mov	sp,fp
 400ef30:	df000017 	ldw	fp,0(sp)
 400ef34:	dec00104 	addi	sp,sp,4
 400ef38:	f800283a 	ret

0400ef3c <alt_avalon_spi_command>:
 400ef3c:	defff404 	addi	sp,sp,-48
 400ef40:	df000b15 	stw	fp,44(sp)
 400ef44:	df000b04 	addi	fp,sp,44
 400ef48:	e13ffc15 	stw	r4,-16(fp)
 400ef4c:	e17ffd15 	stw	r5,-12(fp)
 400ef50:	e1bffe15 	stw	r6,-8(fp)
 400ef54:	e1ffff15 	stw	r7,-4(fp)
 400ef58:	e0fffe17 	ldw	r3,-8(fp)
 400ef5c:	e0bfff17 	ldw	r2,-4(fp)
 400ef60:	10c5883a 	add	r2,r2,r3
 400ef64:	e0bffb15 	stw	r2,-20(fp)
 400ef68:	e0c00117 	ldw	r3,4(fp)
 400ef6c:	e0800217 	ldw	r2,8(fp)
 400ef70:	10c5883a 	add	r2,r2,r3
 400ef74:	e0bffa15 	stw	r2,-24(fp)
 400ef78:	e0800117 	ldw	r2,4(fp)
 400ef7c:	e0bff915 	stw	r2,-28(fp)
 400ef80:	e0bffe17 	ldw	r2,-8(fp)
 400ef84:	e0bff815 	stw	r2,-32(fp)
 400ef88:	00800044 	movi	r2,1
 400ef8c:	e0bff615 	stw	r2,-40(fp)
 400ef90:	e0bffc17 	ldw	r2,-16(fp)
 400ef94:	11000504 	addi	r4,r2,20
 400ef98:	e0fffd17 	ldw	r3,-12(fp)
 400ef9c:	00800044 	movi	r2,1
 400efa0:	10c6983a 	sll	r3,r2,r3
 400efa4:	2005883a 	mov	r2,r4
 400efa8:	10c00035 	stwio	r3,0(r2)
 400efac:	e0800317 	ldw	r2,12(fp)
 400efb0:	1080008c 	andi	r2,r2,2
 400efb4:	1004c03a 	cmpne	r2,r2,zero
 400efb8:	1000051e 	bne	r2,zero,400efd0 <alt_avalon_spi_command+0x94>
 400efbc:	e0bffc17 	ldw	r2,-16(fp)
 400efc0:	10800304 	addi	r2,r2,12
 400efc4:	1007883a 	mov	r3,r2
 400efc8:	00810004 	movi	r2,1024
 400efcc:	18800035 	stwio	r2,0(r3)
 400efd0:	e0bffc17 	ldw	r2,-16(fp)
 400efd4:	10800037 	ldwio	r2,0(r2)
 400efd8:	00000006 	br	400efdc <alt_avalon_spi_command+0xa0>
 400efdc:	e0bffc17 	ldw	r2,-16(fp)
 400efe0:	10800204 	addi	r2,r2,8
 400efe4:	10800037 	ldwio	r2,0(r2)
 400efe8:	e0bff715 	stw	r2,-36(fp)
 400efec:	e0bff717 	ldw	r2,-36(fp)
 400eff0:	1080100c 	andi	r2,r2,64
 400eff4:	1005003a 	cmpeq	r2,r2,zero
 400eff8:	1000031e 	bne	r2,zero,400f008 <alt_avalon_spi_command+0xcc>
 400effc:	e0bff617 	ldw	r2,-40(fp)
 400f000:	1004c03a 	cmpne	r2,r2,zero
 400f004:	1000041e 	bne	r2,zero,400f018 <alt_avalon_spi_command+0xdc>
 400f008:	e0bff717 	ldw	r2,-36(fp)
 400f00c:	1080200c 	andi	r2,r2,128
 400f010:	1005003a 	cmpeq	r2,r2,zero
 400f014:	103ff11e 	bne	r2,zero,400efdc <alt_avalon_spi_command+0xa0>
 400f018:	e0bff717 	ldw	r2,-36(fp)
 400f01c:	1080100c 	andi	r2,r2,64
 400f020:	1005003a 	cmpeq	r2,r2,zero
 400f024:	1000201e 	bne	r2,zero,400f0a8 <alt_avalon_spi_command+0x16c>
 400f028:	e0bff617 	ldw	r2,-40(fp)
 400f02c:	10800050 	cmplti	r2,r2,1
 400f030:	10001d1e 	bne	r2,zero,400f0a8 <alt_avalon_spi_command+0x16c>
 400f034:	e0bff617 	ldw	r2,-40(fp)
 400f038:	10bfffc4 	addi	r2,r2,-1
 400f03c:	e0bff615 	stw	r2,-40(fp)
 400f040:	e0ffff17 	ldw	r3,-4(fp)
 400f044:	e0bffb17 	ldw	r2,-20(fp)
 400f048:	18800b2e 	bgeu	r3,r2,400f078 <alt_avalon_spi_command+0x13c>
 400f04c:	e0bffc17 	ldw	r2,-16(fp)
 400f050:	11000104 	addi	r4,r2,4
 400f054:	e0bfff17 	ldw	r2,-4(fp)
 400f058:	10800003 	ldbu	r2,0(r2)
 400f05c:	10c03fcc 	andi	r3,r2,255
 400f060:	e0bfff17 	ldw	r2,-4(fp)
 400f064:	10800044 	addi	r2,r2,1
 400f068:	e0bfff15 	stw	r2,-4(fp)
 400f06c:	2005883a 	mov	r2,r4
 400f070:	10c00035 	stwio	r3,0(r2)
 400f074:	00000c06 	br	400f0a8 <alt_avalon_spi_command+0x16c>
 400f078:	e0bff917 	ldw	r2,-28(fp)
 400f07c:	1005003a 	cmpeq	r2,r2,zero
 400f080:	1000071e 	bne	r2,zero,400f0a0 <alt_avalon_spi_command+0x164>
 400f084:	e0bff917 	ldw	r2,-28(fp)
 400f088:	10bfffc4 	addi	r2,r2,-1
 400f08c:	e0bff915 	stw	r2,-28(fp)
 400f090:	e0bffc17 	ldw	r2,-16(fp)
 400f094:	10800104 	addi	r2,r2,4
 400f098:	10000035 	stwio	zero,0(r2)
 400f09c:	00000206 	br	400f0a8 <alt_avalon_spi_command+0x16c>
 400f0a0:	00bf0004 	movi	r2,-1024
 400f0a4:	e0bff615 	stw	r2,-40(fp)
 400f0a8:	e0bff717 	ldw	r2,-36(fp)
 400f0ac:	1080200c 	andi	r2,r2,128
 400f0b0:	1005003a 	cmpeq	r2,r2,zero
 400f0b4:	103fc91e 	bne	r2,zero,400efdc <alt_avalon_spi_command+0xa0>
 400f0b8:	e0bffc17 	ldw	r2,-16(fp)
 400f0bc:	10800037 	ldwio	r2,0(r2)
 400f0c0:	e0bff515 	stw	r2,-44(fp)
 400f0c4:	e0bff817 	ldw	r2,-32(fp)
 400f0c8:	1005003a 	cmpeq	r2,r2,zero
 400f0cc:	1000041e 	bne	r2,zero,400f0e0 <alt_avalon_spi_command+0x1a4>
 400f0d0:	e0bff817 	ldw	r2,-32(fp)
 400f0d4:	10bfffc4 	addi	r2,r2,-1
 400f0d8:	e0bff815 	stw	r2,-32(fp)
 400f0dc:	00000706 	br	400f0fc <alt_avalon_spi_command+0x1c0>
 400f0e0:	e0bff517 	ldw	r2,-44(fp)
 400f0e4:	1007883a 	mov	r3,r2
 400f0e8:	e0800217 	ldw	r2,8(fp)
 400f0ec:	10c00005 	stb	r3,0(r2)
 400f0f0:	e0800217 	ldw	r2,8(fp)
 400f0f4:	10800044 	addi	r2,r2,1
 400f0f8:	e0800215 	stw	r2,8(fp)
 400f0fc:	e0bff617 	ldw	r2,-40(fp)
 400f100:	10800044 	addi	r2,r2,1
 400f104:	e0bff615 	stw	r2,-40(fp)
 400f108:	e0bff817 	ldw	r2,-32(fp)
 400f10c:	1004c03a 	cmpne	r2,r2,zero
 400f110:	103fb21e 	bne	r2,zero,400efdc <alt_avalon_spi_command+0xa0>
 400f114:	e0c00217 	ldw	r3,8(fp)
 400f118:	e0bffa17 	ldw	r2,-24(fp)
 400f11c:	18800126 	beq	r3,r2,400f124 <alt_avalon_spi_command+0x1e8>
 400f120:	003fae06 	br	400efdc <alt_avalon_spi_command+0xa0>
 400f124:	e0bffc17 	ldw	r2,-16(fp)
 400f128:	10800204 	addi	r2,r2,8
 400f12c:	10800037 	ldwio	r2,0(r2)
 400f130:	e0bff715 	stw	r2,-36(fp)
 400f134:	e0bff717 	ldw	r2,-36(fp)
 400f138:	1080080c 	andi	r2,r2,32
 400f13c:	1005003a 	cmpeq	r2,r2,zero
 400f140:	103ff81e 	bne	r2,zero,400f124 <alt_avalon_spi_command+0x1e8>
 400f144:	e0800317 	ldw	r2,12(fp)
 400f148:	1080004c 	andi	r2,r2,1
 400f14c:	1004c03a 	cmpne	r2,r2,zero
 400f150:	1000031e 	bne	r2,zero,400f160 <alt_avalon_spi_command+0x224>
 400f154:	e0bffc17 	ldw	r2,-16(fp)
 400f158:	10800304 	addi	r2,r2,12
 400f15c:	10000035 	stwio	zero,0(r2)
 400f160:	e0800117 	ldw	r2,4(fp)
 400f164:	e037883a 	mov	sp,fp
 400f168:	df000017 	ldw	fp,0(sp)
 400f16c:	dec00104 	addi	sp,sp,4
 400f170:	f800283a 	ret

0400f174 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400f174:	defff904 	addi	sp,sp,-28
 400f178:	dfc00615 	stw	ra,24(sp)
 400f17c:	df000515 	stw	fp,20(sp)
 400f180:	df000504 	addi	fp,sp,20
 400f184:	e13ffd15 	stw	r4,-12(fp)
 400f188:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400f18c:	e0bffe17 	ldw	r2,-8(fp)
 400f190:	10800017 	ldw	r2,0(r2)
 400f194:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400f198:	e13ffd17 	ldw	r4,-12(fp)
 400f19c:	40007a80 	call	40007a8 <strlen>
 400f1a0:	10800044 	addi	r2,r2,1
 400f1a4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400f1a8:	00000d06 	br	400f1e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400f1ac:	e0bffc17 	ldw	r2,-16(fp)
 400f1b0:	11000217 	ldw	r4,8(r2)
 400f1b4:	e1bffb17 	ldw	r6,-20(fp)
 400f1b8:	e17ffd17 	ldw	r5,-12(fp)
 400f1bc:	400f4680 	call	400f468 <memcmp>
 400f1c0:	1004c03a 	cmpne	r2,r2,zero
 400f1c4:	1000031e 	bne	r2,zero,400f1d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400f1c8:	e0bffc17 	ldw	r2,-16(fp)
 400f1cc:	e0bfff15 	stw	r2,-4(fp)
 400f1d0:	00000706 	br	400f1f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400f1d4:	e0bffc17 	ldw	r2,-16(fp)
 400f1d8:	10800017 	ldw	r2,0(r2)
 400f1dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400f1e0:	e0fffe17 	ldw	r3,-8(fp)
 400f1e4:	e0bffc17 	ldw	r2,-16(fp)
 400f1e8:	10fff01e 	bne	r2,r3,400f1ac <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400f1ec:	e03fff15 	stw	zero,-4(fp)
 400f1f0:	e0bfff17 	ldw	r2,-4(fp)
}
 400f1f4:	e037883a 	mov	sp,fp
 400f1f8:	dfc00117 	ldw	ra,4(sp)
 400f1fc:	df000017 	ldw	fp,0(sp)
 400f200:	dec00204 	addi	sp,sp,8
 400f204:	f800283a 	ret

0400f208 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400f208:	defffa04 	addi	sp,sp,-24
 400f20c:	dfc00515 	stw	ra,20(sp)
 400f210:	df000415 	stw	fp,16(sp)
 400f214:	df000404 	addi	fp,sp,16
 400f218:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400f21c:	008100b4 	movhi	r2,1026
 400f220:	10a1bb04 	addi	r2,r2,-30996
 400f224:	10800017 	ldw	r2,0(r2)
 400f228:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400f22c:	00003306 	br	400f2fc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 400f230:	e0bffd17 	ldw	r2,-12(fp)
 400f234:	11000217 	ldw	r4,8(r2)
 400f238:	40007a80 	call	40007a8 <strlen>
 400f23c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 400f240:	e0bffd17 	ldw	r2,-12(fp)
 400f244:	10c00217 	ldw	r3,8(r2)
 400f248:	e0bffc17 	ldw	r2,-16(fp)
 400f24c:	1885883a 	add	r2,r3,r2
 400f250:	10bfffc4 	addi	r2,r2,-1
 400f254:	10800003 	ldbu	r2,0(r2)
 400f258:	10803fcc 	andi	r2,r2,255
 400f25c:	1080201c 	xori	r2,r2,128
 400f260:	10bfe004 	addi	r2,r2,-128
 400f264:	10800bd8 	cmpnei	r2,r2,47
 400f268:	1000031e 	bne	r2,zero,400f278 <alt_find_file+0x70>
    {
      len -= 1;
 400f26c:	e0bffc17 	ldw	r2,-16(fp)
 400f270:	10bfffc4 	addi	r2,r2,-1
 400f274:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400f278:	e0bffc17 	ldw	r2,-16(fp)
 400f27c:	1007883a 	mov	r3,r2
 400f280:	e0bffe17 	ldw	r2,-8(fp)
 400f284:	1885883a 	add	r2,r3,r2
 400f288:	10800003 	ldbu	r2,0(r2)
 400f28c:	10803fcc 	andi	r2,r2,255
 400f290:	1080201c 	xori	r2,r2,128
 400f294:	10bfe004 	addi	r2,r2,-128
 400f298:	10800be0 	cmpeqi	r2,r2,47
 400f29c:	10000a1e 	bne	r2,zero,400f2c8 <alt_find_file+0xc0>
 400f2a0:	e0bffc17 	ldw	r2,-16(fp)
 400f2a4:	1007883a 	mov	r3,r2
 400f2a8:	e0bffe17 	ldw	r2,-8(fp)
 400f2ac:	1885883a 	add	r2,r3,r2
 400f2b0:	10800003 	ldbu	r2,0(r2)
 400f2b4:	10803fcc 	andi	r2,r2,255
 400f2b8:	1080201c 	xori	r2,r2,128
 400f2bc:	10bfe004 	addi	r2,r2,-128
 400f2c0:	1004c03a 	cmpne	r2,r2,zero
 400f2c4:	10000a1e 	bne	r2,zero,400f2f0 <alt_find_file+0xe8>
 400f2c8:	e0bffd17 	ldw	r2,-12(fp)
 400f2cc:	11000217 	ldw	r4,8(r2)
 400f2d0:	e1bffc17 	ldw	r6,-16(fp)
 400f2d4:	e17ffe17 	ldw	r5,-8(fp)
 400f2d8:	400f4680 	call	400f468 <memcmp>
 400f2dc:	1004c03a 	cmpne	r2,r2,zero
 400f2e0:	1000031e 	bne	r2,zero,400f2f0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400f2e4:	e0bffd17 	ldw	r2,-12(fp)
 400f2e8:	e0bfff15 	stw	r2,-4(fp)
 400f2ec:	00000806 	br	400f310 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 400f2f0:	e0bffd17 	ldw	r2,-12(fp)
 400f2f4:	10800017 	ldw	r2,0(r2)
 400f2f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400f2fc:	00c100b4 	movhi	r3,1026
 400f300:	18e1bb04 	addi	r3,r3,-30996
 400f304:	e0bffd17 	ldw	r2,-12(fp)
 400f308:	10ffc91e 	bne	r2,r3,400f230 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400f30c:	e03fff15 	stw	zero,-4(fp)
 400f310:	e0bfff17 	ldw	r2,-4(fp)
}
 400f314:	e037883a 	mov	sp,fp
 400f318:	dfc00117 	ldw	ra,4(sp)
 400f31c:	df000017 	ldw	fp,0(sp)
 400f320:	dec00204 	addi	sp,sp,8
 400f324:	f800283a 	ret

0400f328 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400f328:	defff804 	addi	sp,sp,-32
 400f32c:	dfc00715 	stw	ra,28(sp)
 400f330:	df000615 	stw	fp,24(sp)
 400f334:	df000604 	addi	fp,sp,24
 400f338:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400f33c:	00bffa04 	movi	r2,-24
 400f340:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 400f344:	008100b4 	movhi	r2,1026
 400f348:	10a1ec04 	addi	r2,r2,-30800
 400f34c:	10800017 	ldw	r2,0(r2)
 400f350:	e0bffa15 	stw	r2,-24(fp)
 400f354:	e03ffb0d 	sth	zero,-20(fp)
 400f358:	e17ffb0b 	ldhu	r5,-20(fp)
 400f35c:	e1bffe04 	addi	r6,fp,-8
 400f360:	e13ffa17 	ldw	r4,-24(fp)
 400f364:	40099d00 	call	40099d0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400f368:	e03ffd15 	stw	zero,-12(fp)
 400f36c:	00001e06 	br	400f3e8 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 400f370:	e0bffd17 	ldw	r2,-12(fp)
 400f374:	00c10074 	movhi	r3,1025
 400f378:	18dd0804 	addi	r3,r3,29728
 400f37c:	10800324 	muli	r2,r2,12
 400f380:	10c5883a 	add	r2,r2,r3
 400f384:	10800017 	ldw	r2,0(r2)
 400f388:	1004c03a 	cmpne	r2,r2,zero
 400f38c:	1000131e 	bne	r2,zero,400f3dc <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 400f390:	e0bffd17 	ldw	r2,-12(fp)
 400f394:	00c10074 	movhi	r3,1025
 400f398:	18dd0804 	addi	r3,r3,29728
 400f39c:	10800324 	muli	r2,r2,12
 400f3a0:	10c7883a 	add	r3,r2,r3
 400f3a4:	e0bfff17 	ldw	r2,-4(fp)
 400f3a8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 400f3ac:	008100b4 	movhi	r2,1026
 400f3b0:	10a1bf04 	addi	r2,r2,-30980
 400f3b4:	10c00017 	ldw	r3,0(r2)
 400f3b8:	e0bffd17 	ldw	r2,-12(fp)
 400f3bc:	1880040e 	bge	r3,r2,400f3d0 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 400f3c0:	00c100b4 	movhi	r3,1026
 400f3c4:	18e1bf04 	addi	r3,r3,-30980
 400f3c8:	e0bffd17 	ldw	r2,-12(fp)
 400f3cc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 400f3d0:	e0bffd17 	ldw	r2,-12(fp)
 400f3d4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 400f3d8:	00000606 	br	400f3f4 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400f3dc:	e0bffd17 	ldw	r2,-12(fp)
 400f3e0:	10800044 	addi	r2,r2,1
 400f3e4:	e0bffd15 	stw	r2,-12(fp)
 400f3e8:	e0bffd17 	ldw	r2,-12(fp)
 400f3ec:	10800810 	cmplti	r2,r2,32
 400f3f0:	103fdf1e 	bne	r2,zero,400f370 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 400f3f4:	008100b4 	movhi	r2,1026
 400f3f8:	10a1ec04 	addi	r2,r2,-30800
 400f3fc:	11000017 	ldw	r4,0(r2)
 400f400:	4009dc80 	call	4009dc8 <OSSemPost>

  return rc;
 400f404:	e0bffc17 	ldw	r2,-16(fp)
}
 400f408:	e037883a 	mov	sp,fp
 400f40c:	dfc00117 	ldw	ra,4(sp)
 400f410:	df000017 	ldw	fp,0(sp)
 400f414:	dec00204 	addi	sp,sp,8
 400f418:	f800283a 	ret

0400f41c <atexit>:
 400f41c:	200b883a 	mov	r5,r4
 400f420:	000d883a 	mov	r6,zero
 400f424:	0009883a 	mov	r4,zero
 400f428:	000f883a 	mov	r7,zero
 400f42c:	401147c1 	jmpi	401147c <__register_exitproc>

0400f430 <exit>:
 400f430:	defffe04 	addi	sp,sp,-8
 400f434:	000b883a 	mov	r5,zero
 400f438:	dc000015 	stw	r16,0(sp)
 400f43c:	dfc00115 	stw	ra,4(sp)
 400f440:	2021883a 	mov	r16,r4
 400f444:	40115b40 	call	40115b4 <__call_exitprocs>
 400f448:	008100b4 	movhi	r2,1026
 400f44c:	10a1b804 	addi	r2,r2,-31008
 400f450:	11000017 	ldw	r4,0(r2)
 400f454:	20800f17 	ldw	r2,60(r4)
 400f458:	10000126 	beq	r2,zero,400f460 <exit+0x30>
 400f45c:	103ee83a 	callr	r2
 400f460:	8009883a 	mov	r4,r16
 400f464:	40166380 	call	4016638 <_exit>

0400f468 <memcmp>:
 400f468:	00c000c4 	movi	r3,3
 400f46c:	1980032e 	bgeu	r3,r6,400f47c <memcmp+0x14>
 400f470:	2144b03a 	or	r2,r4,r5
 400f474:	10c4703a 	and	r2,r2,r3
 400f478:	10000f26 	beq	r2,zero,400f4b8 <memcmp+0x50>
 400f47c:	31ffffc4 	addi	r7,r6,-1
 400f480:	3000061e 	bne	r6,zero,400f49c <memcmp+0x34>
 400f484:	00000a06 	br	400f4b0 <memcmp+0x48>
 400f488:	39ffffc4 	addi	r7,r7,-1
 400f48c:	00bfffc4 	movi	r2,-1
 400f490:	21000044 	addi	r4,r4,1
 400f494:	29400044 	addi	r5,r5,1
 400f498:	38800526 	beq	r7,r2,400f4b0 <memcmp+0x48>
 400f49c:	20c00003 	ldbu	r3,0(r4)
 400f4a0:	28800003 	ldbu	r2,0(r5)
 400f4a4:	18bff826 	beq	r3,r2,400f488 <memcmp+0x20>
 400f4a8:	1885c83a 	sub	r2,r3,r2
 400f4ac:	f800283a 	ret
 400f4b0:	0005883a 	mov	r2,zero
 400f4b4:	f800283a 	ret
 400f4b8:	180f883a 	mov	r7,r3
 400f4bc:	20c00017 	ldw	r3,0(r4)
 400f4c0:	28800017 	ldw	r2,0(r5)
 400f4c4:	18bfed1e 	bne	r3,r2,400f47c <memcmp+0x14>
 400f4c8:	31bfff04 	addi	r6,r6,-4
 400f4cc:	21000104 	addi	r4,r4,4
 400f4d0:	29400104 	addi	r5,r5,4
 400f4d4:	39bff936 	bltu	r7,r6,400f4bc <memcmp+0x54>
 400f4d8:	003fe806 	br	400f47c <memcmp+0x14>

0400f4dc <printf>:
 400f4dc:	defffb04 	addi	sp,sp,-20
 400f4e0:	dfc00115 	stw	ra,4(sp)
 400f4e4:	d9400215 	stw	r5,8(sp)
 400f4e8:	d9800315 	stw	r6,12(sp)
 400f4ec:	d9c00415 	stw	r7,16(sp)
 400f4f0:	008100b4 	movhi	r2,1026
 400f4f4:	10a1b704 	addi	r2,r2,-31012
 400f4f8:	10c00017 	ldw	r3,0(r2)
 400f4fc:	200b883a 	mov	r5,r4
 400f500:	d8800204 	addi	r2,sp,8
 400f504:	19000217 	ldw	r4,8(r3)
 400f508:	100d883a 	mov	r6,r2
 400f50c:	d8800015 	stw	r2,0(sp)
 400f510:	40114580 	call	4011458 <__vfprintf_internal>
 400f514:	dfc00117 	ldw	ra,4(sp)
 400f518:	dec00504 	addi	sp,sp,20
 400f51c:	f800283a 	ret

0400f520 <_printf_r>:
 400f520:	defffc04 	addi	sp,sp,-16
 400f524:	dfc00115 	stw	ra,4(sp)
 400f528:	d9800215 	stw	r6,8(sp)
 400f52c:	d9c00315 	stw	r7,12(sp)
 400f530:	280d883a 	mov	r6,r5
 400f534:	21400217 	ldw	r5,8(r4)
 400f538:	d8c00204 	addi	r3,sp,8
 400f53c:	180f883a 	mov	r7,r3
 400f540:	d8c00015 	stw	r3,0(sp)
 400f544:	400f5ac0 	call	400f5ac <___vfprintf_internal_r>
 400f548:	dfc00117 	ldw	ra,4(sp)
 400f54c:	dec00404 	addi	sp,sp,16
 400f550:	f800283a 	ret

0400f554 <__sprint_r>:
 400f554:	30800217 	ldw	r2,8(r6)
 400f558:	defffe04 	addi	sp,sp,-8
 400f55c:	dc000015 	stw	r16,0(sp)
 400f560:	dfc00115 	stw	ra,4(sp)
 400f564:	3021883a 	mov	r16,r6
 400f568:	0007883a 	mov	r3,zero
 400f56c:	1000061e 	bne	r2,zero,400f588 <__sprint_r+0x34>
 400f570:	1805883a 	mov	r2,r3
 400f574:	30000115 	stw	zero,4(r6)
 400f578:	dfc00117 	ldw	ra,4(sp)
 400f57c:	dc000017 	ldw	r16,0(sp)
 400f580:	dec00204 	addi	sp,sp,8
 400f584:	f800283a 	ret
 400f588:	400081c0 	call	400081c <__sfvwrite_r>
 400f58c:	1007883a 	mov	r3,r2
 400f590:	1805883a 	mov	r2,r3
 400f594:	80000115 	stw	zero,4(r16)
 400f598:	80000215 	stw	zero,8(r16)
 400f59c:	dfc00117 	ldw	ra,4(sp)
 400f5a0:	dc000017 	ldw	r16,0(sp)
 400f5a4:	dec00204 	addi	sp,sp,8
 400f5a8:	f800283a 	ret

0400f5ac <___vfprintf_internal_r>:
 400f5ac:	defea404 	addi	sp,sp,-1392
 400f5b0:	dd815815 	stw	r22,1376(sp)
 400f5b4:	dc015215 	stw	r16,1352(sp)
 400f5b8:	d9c15115 	stw	r7,1348(sp)
 400f5bc:	dfc15b15 	stw	ra,1388(sp)
 400f5c0:	df015a15 	stw	fp,1384(sp)
 400f5c4:	ddc15915 	stw	r23,1380(sp)
 400f5c8:	dd415715 	stw	r21,1372(sp)
 400f5cc:	dd015615 	stw	r20,1368(sp)
 400f5d0:	dcc15515 	stw	r19,1364(sp)
 400f5d4:	dc815415 	stw	r18,1360(sp)
 400f5d8:	dc415315 	stw	r17,1356(sp)
 400f5dc:	282d883a 	mov	r22,r5
 400f5e0:	3021883a 	mov	r16,r6
 400f5e4:	d9014f15 	stw	r4,1340(sp)
 400f5e8:	4012f380 	call	4012f38 <_localeconv_r>
 400f5ec:	10800017 	ldw	r2,0(r2)
 400f5f0:	d9c15117 	ldw	r7,1348(sp)
 400f5f4:	d8814915 	stw	r2,1316(sp)
 400f5f8:	d8814f17 	ldw	r2,1340(sp)
 400f5fc:	10000226 	beq	r2,zero,400f608 <___vfprintf_internal_r+0x5c>
 400f600:	10800e17 	ldw	r2,56(r2)
 400f604:	10020d26 	beq	r2,zero,400fe3c <___vfprintf_internal_r+0x890>
 400f608:	b080030b 	ldhu	r2,12(r22)
 400f60c:	1080020c 	andi	r2,r2,8
 400f610:	10020e26 	beq	r2,zero,400fe4c <___vfprintf_internal_r+0x8a0>
 400f614:	b0800417 	ldw	r2,16(r22)
 400f618:	10020c26 	beq	r2,zero,400fe4c <___vfprintf_internal_r+0x8a0>
 400f61c:	b200030b 	ldhu	r8,12(r22)
 400f620:	00800284 	movi	r2,10
 400f624:	40c0068c 	andi	r3,r8,26
 400f628:	18802f1e 	bne	r3,r2,400f6e8 <___vfprintf_internal_r+0x13c>
 400f62c:	b080038f 	ldh	r2,14(r22)
 400f630:	10002d16 	blt	r2,zero,400f6e8 <___vfprintf_internal_r+0x13c>
 400f634:	b240038b 	ldhu	r9,14(r22)
 400f638:	b2800717 	ldw	r10,28(r22)
 400f63c:	b2c00917 	ldw	r11,36(r22)
 400f640:	d9014f17 	ldw	r4,1340(sp)
 400f644:	dc402904 	addi	r17,sp,164
 400f648:	d8804004 	addi	r2,sp,256
 400f64c:	00c10004 	movi	r3,1024
 400f650:	423fff4c 	andi	r8,r8,65533
 400f654:	800d883a 	mov	r6,r16
 400f658:	880b883a 	mov	r5,r17
 400f65c:	da002c0d 	sth	r8,176(sp)
 400f660:	da402c8d 	sth	r9,178(sp)
 400f664:	da803015 	stw	r10,192(sp)
 400f668:	dac03215 	stw	r11,200(sp)
 400f66c:	d8802d15 	stw	r2,180(sp)
 400f670:	d8c02e15 	stw	r3,184(sp)
 400f674:	d8802915 	stw	r2,164(sp)
 400f678:	d8c02b15 	stw	r3,172(sp)
 400f67c:	d8002f15 	stw	zero,188(sp)
 400f680:	400f5ac0 	call	400f5ac <___vfprintf_internal_r>
 400f684:	d8814b15 	stw	r2,1324(sp)
 400f688:	10000416 	blt	r2,zero,400f69c <___vfprintf_internal_r+0xf0>
 400f68c:	d9014f17 	ldw	r4,1340(sp)
 400f690:	880b883a 	mov	r5,r17
 400f694:	4001dfc0 	call	4001dfc <_fflush_r>
 400f698:	1002321e 	bne	r2,zero,400ff64 <___vfprintf_internal_r+0x9b8>
 400f69c:	d8802c0b 	ldhu	r2,176(sp)
 400f6a0:	1080100c 	andi	r2,r2,64
 400f6a4:	10000326 	beq	r2,zero,400f6b4 <___vfprintf_internal_r+0x108>
 400f6a8:	b080030b 	ldhu	r2,12(r22)
 400f6ac:	10801014 	ori	r2,r2,64
 400f6b0:	b080030d 	sth	r2,12(r22)
 400f6b4:	d8814b17 	ldw	r2,1324(sp)
 400f6b8:	dfc15b17 	ldw	ra,1388(sp)
 400f6bc:	df015a17 	ldw	fp,1384(sp)
 400f6c0:	ddc15917 	ldw	r23,1380(sp)
 400f6c4:	dd815817 	ldw	r22,1376(sp)
 400f6c8:	dd415717 	ldw	r21,1372(sp)
 400f6cc:	dd015617 	ldw	r20,1368(sp)
 400f6d0:	dcc15517 	ldw	r19,1364(sp)
 400f6d4:	dc815417 	ldw	r18,1360(sp)
 400f6d8:	dc415317 	ldw	r17,1356(sp)
 400f6dc:	dc015217 	ldw	r16,1352(sp)
 400f6e0:	dec15c04 	addi	sp,sp,1392
 400f6e4:	f800283a 	ret
 400f6e8:	0005883a 	mov	r2,zero
 400f6ec:	0007883a 	mov	r3,zero
 400f6f0:	dd401904 	addi	r21,sp,100
 400f6f4:	d8814215 	stw	r2,1288(sp)
 400f6f8:	802f883a 	mov	r23,r16
 400f6fc:	d8c14315 	stw	r3,1292(sp)
 400f700:	d8014b15 	stw	zero,1324(sp)
 400f704:	d8014815 	stw	zero,1312(sp)
 400f708:	d8014415 	stw	zero,1296(sp)
 400f70c:	d8014715 	stw	zero,1308(sp)
 400f710:	dd400c15 	stw	r21,48(sp)
 400f714:	d8000e15 	stw	zero,56(sp)
 400f718:	d8000d15 	stw	zero,52(sp)
 400f71c:	b8800007 	ldb	r2,0(r23)
 400f720:	10001926 	beq	r2,zero,400f788 <___vfprintf_internal_r+0x1dc>
 400f724:	00c00944 	movi	r3,37
 400f728:	10c01726 	beq	r2,r3,400f788 <___vfprintf_internal_r+0x1dc>
 400f72c:	b821883a 	mov	r16,r23
 400f730:	00000106 	br	400f738 <___vfprintf_internal_r+0x18c>
 400f734:	10c00326 	beq	r2,r3,400f744 <___vfprintf_internal_r+0x198>
 400f738:	84000044 	addi	r16,r16,1
 400f73c:	80800007 	ldb	r2,0(r16)
 400f740:	103ffc1e 	bne	r2,zero,400f734 <___vfprintf_internal_r+0x188>
 400f744:	85e7c83a 	sub	r19,r16,r23
 400f748:	98000e26 	beq	r19,zero,400f784 <___vfprintf_internal_r+0x1d8>
 400f74c:	dc800e17 	ldw	r18,56(sp)
 400f750:	dc400d17 	ldw	r17,52(sp)
 400f754:	008001c4 	movi	r2,7
 400f758:	94e5883a 	add	r18,r18,r19
 400f75c:	8c400044 	addi	r17,r17,1
 400f760:	adc00015 	stw	r23,0(r21)
 400f764:	dc800e15 	stw	r18,56(sp)
 400f768:	acc00115 	stw	r19,4(r21)
 400f76c:	dc400d15 	stw	r17,52(sp)
 400f770:	14428b16 	blt	r2,r17,40101a0 <___vfprintf_internal_r+0xbf4>
 400f774:	ad400204 	addi	r21,r21,8
 400f778:	d9014b17 	ldw	r4,1324(sp)
 400f77c:	24c9883a 	add	r4,r4,r19
 400f780:	d9014b15 	stw	r4,1324(sp)
 400f784:	802f883a 	mov	r23,r16
 400f788:	b8800007 	ldb	r2,0(r23)
 400f78c:	10013c26 	beq	r2,zero,400fc80 <___vfprintf_internal_r+0x6d4>
 400f790:	bdc00044 	addi	r23,r23,1
 400f794:	d8000405 	stb	zero,16(sp)
 400f798:	b8c00007 	ldb	r3,0(r23)
 400f79c:	04ffffc4 	movi	r19,-1
 400f7a0:	d8014c15 	stw	zero,1328(sp)
 400f7a4:	d8014a15 	stw	zero,1320(sp)
 400f7a8:	d8c14d15 	stw	r3,1332(sp)
 400f7ac:	bdc00044 	addi	r23,r23,1
 400f7b0:	d9414d17 	ldw	r5,1332(sp)
 400f7b4:	00801604 	movi	r2,88
 400f7b8:	28fff804 	addi	r3,r5,-32
 400f7bc:	10c06036 	bltu	r2,r3,400f940 <___vfprintf_internal_r+0x394>
 400f7c0:	18c5883a 	add	r2,r3,r3
 400f7c4:	1085883a 	add	r2,r2,r2
 400f7c8:	00c10074 	movhi	r3,1025
 400f7cc:	18fdf704 	addi	r3,r3,-2084
 400f7d0:	10c5883a 	add	r2,r2,r3
 400f7d4:	11000017 	ldw	r4,0(r2)
 400f7d8:	2000683a 	jmp	r4
 400f7dc:	04010750 	cmplti	r16,zero,1053
 400f7e0:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f7e4:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f7e8:	0401073c 	xorhi	r16,zero,1052
 400f7ec:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f7f0:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f7f4:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f7f8:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f7fc:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f800:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f804:	0401051c 	xori	r16,zero,1044
 400f808:	0401072c 	andhi	r16,zero,1052
 400f80c:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f810:	04010534 	movhi	r16,1044
 400f814:	040107c8 	cmpgei	r16,zero,1055
 400f818:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f81c:	040107b4 	movhi	r16,1054
 400f820:	0401077c 	xorhi	r16,zero,1053
 400f824:	0401077c 	xorhi	r16,zero,1053
 400f828:	0401077c 	xorhi	r16,zero,1053
 400f82c:	0401077c 	xorhi	r16,zero,1053
 400f830:	0401077c 	xorhi	r16,zero,1053
 400f834:	0401077c 	xorhi	r16,zero,1053
 400f838:	0401077c 	xorhi	r16,zero,1053
 400f83c:	0401077c 	xorhi	r16,zero,1053
 400f840:	0401077c 	xorhi	r16,zero,1053
 400f844:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f848:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f84c:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f850:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f854:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f858:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f85c:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f860:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f864:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f868:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f86c:	0400ff98 	cmpnei	r16,zero,1022
 400f870:	04010604 	movi	r16,1048
 400f874:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f878:	04010604 	movi	r16,1048
 400f87c:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f880:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f884:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f888:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f88c:	04010768 	cmpgeui	r16,zero,1053
 400f890:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f894:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f898:	0401004c 	andi	r16,zero,1025
 400f89c:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8a0:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8a4:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8a8:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8ac:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8b0:	04010098 	cmpnei	r16,zero,1026
 400f8b4:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8b8:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8bc:	040106b8 	rdprs	r16,zero,1050
 400f8c0:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8c4:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8c8:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8cc:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8d0:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8d4:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8d8:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8dc:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8e0:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8e4:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f8e8:	0401068c 	andi	r16,zero,1050
 400f8ec:	0400ffa4 	muli	r16,zero,1022
 400f8f0:	04010604 	movi	r16,1048
 400f8f4:	04010604 	movi	r16,1048
 400f8f8:	04010604 	movi	r16,1048
 400f8fc:	040105f0 	cmpltui	r16,zero,1047
 400f900:	0400ffa4 	muli	r16,zero,1022
 400f904:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f908:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f90c:	04010578 	rdprs	r16,zero,1045
 400f910:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f914:	04010548 	cmpgei	r16,zero,1045
 400f918:	04010058 	cmpnei	r16,zero,1025
 400f91c:	040105a8 	cmpgeui	r16,zero,1046
 400f920:	04010594 	movui	r16,1046
 400f924:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f928:	04010824 	muli	r16,zero,1056
 400f92c:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f930:	040100a4 	muli	r16,zero,1026
 400f934:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f938:	0400f940 	call	400f94 <OSCtxSw_SWITCH_PC+0x400f54>
 400f93c:	0401071c 	xori	r16,zero,1052
 400f940:	d9014d17 	ldw	r4,1332(sp)
 400f944:	2000ce26 	beq	r4,zero,400fc80 <___vfprintf_internal_r+0x6d4>
 400f948:	01400044 	movi	r5,1
 400f94c:	d9800f04 	addi	r6,sp,60
 400f950:	d9c14015 	stw	r7,1280(sp)
 400f954:	d9414515 	stw	r5,1300(sp)
 400f958:	d9814115 	stw	r6,1284(sp)
 400f95c:	280f883a 	mov	r7,r5
 400f960:	d9000f05 	stb	r4,60(sp)
 400f964:	d8000405 	stb	zero,16(sp)
 400f968:	d8014615 	stw	zero,1304(sp)
 400f96c:	d8c14c17 	ldw	r3,1328(sp)
 400f970:	1880008c 	andi	r2,r3,2
 400f974:	1005003a 	cmpeq	r2,r2,zero
 400f978:	d8815015 	stw	r2,1344(sp)
 400f97c:	1000031e 	bne	r2,zero,400f98c <___vfprintf_internal_r+0x3e0>
 400f980:	d9014517 	ldw	r4,1300(sp)
 400f984:	21000084 	addi	r4,r4,2
 400f988:	d9014515 	stw	r4,1300(sp)
 400f98c:	d9414c17 	ldw	r5,1328(sp)
 400f990:	2940210c 	andi	r5,r5,132
 400f994:	d9414e15 	stw	r5,1336(sp)
 400f998:	28002d1e 	bne	r5,zero,400fa50 <___vfprintf_internal_r+0x4a4>
 400f99c:	d9814a17 	ldw	r6,1320(sp)
 400f9a0:	d8814517 	ldw	r2,1300(sp)
 400f9a4:	30a1c83a 	sub	r16,r6,r2
 400f9a8:	0400290e 	bge	zero,r16,400fa50 <___vfprintf_internal_r+0x4a4>
 400f9ac:	00800404 	movi	r2,16
 400f9b0:	1404580e 	bge	r2,r16,4010b14 <___vfprintf_internal_r+0x1568>
 400f9b4:	dc800e17 	ldw	r18,56(sp)
 400f9b8:	dc400d17 	ldw	r17,52(sp)
 400f9bc:	1027883a 	mov	r19,r2
 400f9c0:	07010074 	movhi	fp,1025
 400f9c4:	e71a4d84 	addi	fp,fp,26934
 400f9c8:	050001c4 	movi	r20,7
 400f9cc:	00000306 	br	400f9dc <___vfprintf_internal_r+0x430>
 400f9d0:	843ffc04 	addi	r16,r16,-16
 400f9d4:	ad400204 	addi	r21,r21,8
 400f9d8:	9c00130e 	bge	r19,r16,400fa28 <___vfprintf_internal_r+0x47c>
 400f9dc:	94800404 	addi	r18,r18,16
 400f9e0:	8c400044 	addi	r17,r17,1
 400f9e4:	af000015 	stw	fp,0(r21)
 400f9e8:	acc00115 	stw	r19,4(r21)
 400f9ec:	dc800e15 	stw	r18,56(sp)
 400f9f0:	dc400d15 	stw	r17,52(sp)
 400f9f4:	a47ff60e 	bge	r20,r17,400f9d0 <___vfprintf_internal_r+0x424>
 400f9f8:	d9014f17 	ldw	r4,1340(sp)
 400f9fc:	b00b883a 	mov	r5,r22
 400fa00:	d9800c04 	addi	r6,sp,48
 400fa04:	d9c15115 	stw	r7,1348(sp)
 400fa08:	400f5540 	call	400f554 <__sprint_r>
 400fa0c:	d9c15117 	ldw	r7,1348(sp)
 400fa10:	10009e1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 400fa14:	843ffc04 	addi	r16,r16,-16
 400fa18:	dc800e17 	ldw	r18,56(sp)
 400fa1c:	dc400d17 	ldw	r17,52(sp)
 400fa20:	dd401904 	addi	r21,sp,100
 400fa24:	9c3fed16 	blt	r19,r16,400f9dc <___vfprintf_internal_r+0x430>
 400fa28:	9425883a 	add	r18,r18,r16
 400fa2c:	8c400044 	addi	r17,r17,1
 400fa30:	008001c4 	movi	r2,7
 400fa34:	af000015 	stw	fp,0(r21)
 400fa38:	ac000115 	stw	r16,4(r21)
 400fa3c:	dc800e15 	stw	r18,56(sp)
 400fa40:	dc400d15 	stw	r17,52(sp)
 400fa44:	1441f516 	blt	r2,r17,401021c <___vfprintf_internal_r+0xc70>
 400fa48:	ad400204 	addi	r21,r21,8
 400fa4c:	00000206 	br	400fa58 <___vfprintf_internal_r+0x4ac>
 400fa50:	dc800e17 	ldw	r18,56(sp)
 400fa54:	dc400d17 	ldw	r17,52(sp)
 400fa58:	d8800407 	ldb	r2,16(sp)
 400fa5c:	10000b26 	beq	r2,zero,400fa8c <___vfprintf_internal_r+0x4e0>
 400fa60:	00800044 	movi	r2,1
 400fa64:	94800044 	addi	r18,r18,1
 400fa68:	8c400044 	addi	r17,r17,1
 400fa6c:	a8800115 	stw	r2,4(r21)
 400fa70:	d8c00404 	addi	r3,sp,16
 400fa74:	008001c4 	movi	r2,7
 400fa78:	a8c00015 	stw	r3,0(r21)
 400fa7c:	dc800e15 	stw	r18,56(sp)
 400fa80:	dc400d15 	stw	r17,52(sp)
 400fa84:	1441da16 	blt	r2,r17,40101f0 <___vfprintf_internal_r+0xc44>
 400fa88:	ad400204 	addi	r21,r21,8
 400fa8c:	d9015017 	ldw	r4,1344(sp)
 400fa90:	20000b1e 	bne	r4,zero,400fac0 <___vfprintf_internal_r+0x514>
 400fa94:	d8800444 	addi	r2,sp,17
 400fa98:	94800084 	addi	r18,r18,2
 400fa9c:	8c400044 	addi	r17,r17,1
 400faa0:	a8800015 	stw	r2,0(r21)
 400faa4:	00c00084 	movi	r3,2
 400faa8:	008001c4 	movi	r2,7
 400faac:	a8c00115 	stw	r3,4(r21)
 400fab0:	dc800e15 	stw	r18,56(sp)
 400fab4:	dc400d15 	stw	r17,52(sp)
 400fab8:	1441c216 	blt	r2,r17,40101c4 <___vfprintf_internal_r+0xc18>
 400fabc:	ad400204 	addi	r21,r21,8
 400fac0:	d9414e17 	ldw	r5,1336(sp)
 400fac4:	00802004 	movi	r2,128
 400fac8:	2880b126 	beq	r5,r2,400fd90 <___vfprintf_internal_r+0x7e4>
 400facc:	d8c14617 	ldw	r3,1304(sp)
 400fad0:	19e1c83a 	sub	r16,r3,r7
 400fad4:	0400260e 	bge	zero,r16,400fb70 <___vfprintf_internal_r+0x5c4>
 400fad8:	00800404 	movi	r2,16
 400fadc:	1403c90e 	bge	r2,r16,4010a04 <___vfprintf_internal_r+0x1458>
 400fae0:	1027883a 	mov	r19,r2
 400fae4:	07010074 	movhi	fp,1025
 400fae8:	e71a4984 	addi	fp,fp,26918
 400faec:	050001c4 	movi	r20,7
 400faf0:	00000306 	br	400fb00 <___vfprintf_internal_r+0x554>
 400faf4:	843ffc04 	addi	r16,r16,-16
 400faf8:	ad400204 	addi	r21,r21,8
 400fafc:	9c00130e 	bge	r19,r16,400fb4c <___vfprintf_internal_r+0x5a0>
 400fb00:	94800404 	addi	r18,r18,16
 400fb04:	8c400044 	addi	r17,r17,1
 400fb08:	af000015 	stw	fp,0(r21)
 400fb0c:	acc00115 	stw	r19,4(r21)
 400fb10:	dc800e15 	stw	r18,56(sp)
 400fb14:	dc400d15 	stw	r17,52(sp)
 400fb18:	a47ff60e 	bge	r20,r17,400faf4 <___vfprintf_internal_r+0x548>
 400fb1c:	d9014f17 	ldw	r4,1340(sp)
 400fb20:	b00b883a 	mov	r5,r22
 400fb24:	d9800c04 	addi	r6,sp,48
 400fb28:	d9c15115 	stw	r7,1348(sp)
 400fb2c:	400f5540 	call	400f554 <__sprint_r>
 400fb30:	d9c15117 	ldw	r7,1348(sp)
 400fb34:	1000551e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 400fb38:	843ffc04 	addi	r16,r16,-16
 400fb3c:	dc800e17 	ldw	r18,56(sp)
 400fb40:	dc400d17 	ldw	r17,52(sp)
 400fb44:	dd401904 	addi	r21,sp,100
 400fb48:	9c3fed16 	blt	r19,r16,400fb00 <___vfprintf_internal_r+0x554>
 400fb4c:	9425883a 	add	r18,r18,r16
 400fb50:	8c400044 	addi	r17,r17,1
 400fb54:	008001c4 	movi	r2,7
 400fb58:	af000015 	stw	fp,0(r21)
 400fb5c:	ac000115 	stw	r16,4(r21)
 400fb60:	dc800e15 	stw	r18,56(sp)
 400fb64:	dc400d15 	stw	r17,52(sp)
 400fb68:	14418216 	blt	r2,r17,4010174 <___vfprintf_internal_r+0xbc8>
 400fb6c:	ad400204 	addi	r21,r21,8
 400fb70:	d9014c17 	ldw	r4,1328(sp)
 400fb74:	2080400c 	andi	r2,r4,256
 400fb78:	10004a1e 	bne	r2,zero,400fca4 <___vfprintf_internal_r+0x6f8>
 400fb7c:	d9414117 	ldw	r5,1284(sp)
 400fb80:	91e5883a 	add	r18,r18,r7
 400fb84:	8c400044 	addi	r17,r17,1
 400fb88:	008001c4 	movi	r2,7
 400fb8c:	a9400015 	stw	r5,0(r21)
 400fb90:	a9c00115 	stw	r7,4(r21)
 400fb94:	dc800e15 	stw	r18,56(sp)
 400fb98:	dc400d15 	stw	r17,52(sp)
 400fb9c:	14416716 	blt	r2,r17,401013c <___vfprintf_internal_r+0xb90>
 400fba0:	a8c00204 	addi	r3,r21,8
 400fba4:	d9814c17 	ldw	r6,1328(sp)
 400fba8:	3080010c 	andi	r2,r6,4
 400fbac:	10002826 	beq	r2,zero,400fc50 <___vfprintf_internal_r+0x6a4>
 400fbb0:	d8814a17 	ldw	r2,1320(sp)
 400fbb4:	d9014517 	ldw	r4,1300(sp)
 400fbb8:	1121c83a 	sub	r16,r2,r4
 400fbbc:	0400240e 	bge	zero,r16,400fc50 <___vfprintf_internal_r+0x6a4>
 400fbc0:	00800404 	movi	r2,16
 400fbc4:	14044f0e 	bge	r2,r16,4010d04 <___vfprintf_internal_r+0x1758>
 400fbc8:	dc400d17 	ldw	r17,52(sp)
 400fbcc:	1027883a 	mov	r19,r2
 400fbd0:	07010074 	movhi	fp,1025
 400fbd4:	e71a4d84 	addi	fp,fp,26934
 400fbd8:	050001c4 	movi	r20,7
 400fbdc:	00000306 	br	400fbec <___vfprintf_internal_r+0x640>
 400fbe0:	843ffc04 	addi	r16,r16,-16
 400fbe4:	18c00204 	addi	r3,r3,8
 400fbe8:	9c00110e 	bge	r19,r16,400fc30 <___vfprintf_internal_r+0x684>
 400fbec:	94800404 	addi	r18,r18,16
 400fbf0:	8c400044 	addi	r17,r17,1
 400fbf4:	1f000015 	stw	fp,0(r3)
 400fbf8:	1cc00115 	stw	r19,4(r3)
 400fbfc:	dc800e15 	stw	r18,56(sp)
 400fc00:	dc400d15 	stw	r17,52(sp)
 400fc04:	a47ff60e 	bge	r20,r17,400fbe0 <___vfprintf_internal_r+0x634>
 400fc08:	d9014f17 	ldw	r4,1340(sp)
 400fc0c:	b00b883a 	mov	r5,r22
 400fc10:	d9800c04 	addi	r6,sp,48
 400fc14:	400f5540 	call	400f554 <__sprint_r>
 400fc18:	10001c1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 400fc1c:	843ffc04 	addi	r16,r16,-16
 400fc20:	dc800e17 	ldw	r18,56(sp)
 400fc24:	dc400d17 	ldw	r17,52(sp)
 400fc28:	d8c01904 	addi	r3,sp,100
 400fc2c:	9c3fef16 	blt	r19,r16,400fbec <___vfprintf_internal_r+0x640>
 400fc30:	9425883a 	add	r18,r18,r16
 400fc34:	8c400044 	addi	r17,r17,1
 400fc38:	008001c4 	movi	r2,7
 400fc3c:	1f000015 	stw	fp,0(r3)
 400fc40:	1c000115 	stw	r16,4(r3)
 400fc44:	dc800e15 	stw	r18,56(sp)
 400fc48:	dc400d15 	stw	r17,52(sp)
 400fc4c:	1440cb16 	blt	r2,r17,400ff7c <___vfprintf_internal_r+0x9d0>
 400fc50:	d8814a17 	ldw	r2,1320(sp)
 400fc54:	d9414517 	ldw	r5,1300(sp)
 400fc58:	1140010e 	bge	r2,r5,400fc60 <___vfprintf_internal_r+0x6b4>
 400fc5c:	2805883a 	mov	r2,r5
 400fc60:	d9814b17 	ldw	r6,1324(sp)
 400fc64:	308d883a 	add	r6,r6,r2
 400fc68:	d9814b15 	stw	r6,1324(sp)
 400fc6c:	90013b1e 	bne	r18,zero,401015c <___vfprintf_internal_r+0xbb0>
 400fc70:	d9c14017 	ldw	r7,1280(sp)
 400fc74:	dd401904 	addi	r21,sp,100
 400fc78:	d8000d15 	stw	zero,52(sp)
 400fc7c:	003ea706 	br	400f71c <___vfprintf_internal_r+0x170>
 400fc80:	d8800e17 	ldw	r2,56(sp)
 400fc84:	10053f1e 	bne	r2,zero,4011184 <___vfprintf_internal_r+0x1bd8>
 400fc88:	d8000d15 	stw	zero,52(sp)
 400fc8c:	b080030b 	ldhu	r2,12(r22)
 400fc90:	1080100c 	andi	r2,r2,64
 400fc94:	103e8726 	beq	r2,zero,400f6b4 <___vfprintf_internal_r+0x108>
 400fc98:	00bfffc4 	movi	r2,-1
 400fc9c:	d8814b15 	stw	r2,1324(sp)
 400fca0:	003e8406 	br	400f6b4 <___vfprintf_internal_r+0x108>
 400fca4:	d9814d17 	ldw	r6,1332(sp)
 400fca8:	00801944 	movi	r2,101
 400fcac:	11806e16 	blt	r2,r6,400fe68 <___vfprintf_internal_r+0x8bc>
 400fcb0:	d9414717 	ldw	r5,1308(sp)
 400fcb4:	00c00044 	movi	r3,1
 400fcb8:	1943430e 	bge	r3,r5,40109c8 <___vfprintf_internal_r+0x141c>
 400fcbc:	d8814117 	ldw	r2,1284(sp)
 400fcc0:	94800044 	addi	r18,r18,1
 400fcc4:	8c400044 	addi	r17,r17,1
 400fcc8:	a8800015 	stw	r2,0(r21)
 400fccc:	008001c4 	movi	r2,7
 400fcd0:	a8c00115 	stw	r3,4(r21)
 400fcd4:	dc800e15 	stw	r18,56(sp)
 400fcd8:	dc400d15 	stw	r17,52(sp)
 400fcdc:	1441ca16 	blt	r2,r17,4010408 <___vfprintf_internal_r+0xe5c>
 400fce0:	a8c00204 	addi	r3,r21,8
 400fce4:	d9014917 	ldw	r4,1316(sp)
 400fce8:	00800044 	movi	r2,1
 400fcec:	94800044 	addi	r18,r18,1
 400fcf0:	8c400044 	addi	r17,r17,1
 400fcf4:	18800115 	stw	r2,4(r3)
 400fcf8:	008001c4 	movi	r2,7
 400fcfc:	19000015 	stw	r4,0(r3)
 400fd00:	dc800e15 	stw	r18,56(sp)
 400fd04:	dc400d15 	stw	r17,52(sp)
 400fd08:	1441b616 	blt	r2,r17,40103e4 <___vfprintf_internal_r+0xe38>
 400fd0c:	1cc00204 	addi	r19,r3,8
 400fd10:	d9014217 	ldw	r4,1288(sp)
 400fd14:	d9414317 	ldw	r5,1292(sp)
 400fd18:	000d883a 	mov	r6,zero
 400fd1c:	000f883a 	mov	r7,zero
 400fd20:	40158fc0 	call	40158fc <__nedf2>
 400fd24:	10017426 	beq	r2,zero,40102f8 <___vfprintf_internal_r+0xd4c>
 400fd28:	d9414717 	ldw	r5,1308(sp)
 400fd2c:	d9814117 	ldw	r6,1284(sp)
 400fd30:	8c400044 	addi	r17,r17,1
 400fd34:	2c85883a 	add	r2,r5,r18
 400fd38:	14bfffc4 	addi	r18,r2,-1
 400fd3c:	28bfffc4 	addi	r2,r5,-1
 400fd40:	30c00044 	addi	r3,r6,1
 400fd44:	98800115 	stw	r2,4(r19)
 400fd48:	008001c4 	movi	r2,7
 400fd4c:	98c00015 	stw	r3,0(r19)
 400fd50:	dc800e15 	stw	r18,56(sp)
 400fd54:	dc400d15 	stw	r17,52(sp)
 400fd58:	14418e16 	blt	r2,r17,4010394 <___vfprintf_internal_r+0xde8>
 400fd5c:	9cc00204 	addi	r19,r19,8
 400fd60:	d9414817 	ldw	r5,1312(sp)
 400fd64:	d8800804 	addi	r2,sp,32
 400fd68:	8c400044 	addi	r17,r17,1
 400fd6c:	9165883a 	add	r18,r18,r5
 400fd70:	98800015 	stw	r2,0(r19)
 400fd74:	008001c4 	movi	r2,7
 400fd78:	99400115 	stw	r5,4(r19)
 400fd7c:	dc800e15 	stw	r18,56(sp)
 400fd80:	dc400d15 	stw	r17,52(sp)
 400fd84:	1440ed16 	blt	r2,r17,401013c <___vfprintf_internal_r+0xb90>
 400fd88:	98c00204 	addi	r3,r19,8
 400fd8c:	003f8506 	br	400fba4 <___vfprintf_internal_r+0x5f8>
 400fd90:	d9814a17 	ldw	r6,1320(sp)
 400fd94:	d8814517 	ldw	r2,1300(sp)
 400fd98:	30a1c83a 	sub	r16,r6,r2
 400fd9c:	043f4b0e 	bge	zero,r16,400facc <___vfprintf_internal_r+0x520>
 400fda0:	00800404 	movi	r2,16
 400fda4:	1404340e 	bge	r2,r16,4010e78 <___vfprintf_internal_r+0x18cc>
 400fda8:	1027883a 	mov	r19,r2
 400fdac:	07010074 	movhi	fp,1025
 400fdb0:	e71a4984 	addi	fp,fp,26918
 400fdb4:	050001c4 	movi	r20,7
 400fdb8:	00000306 	br	400fdc8 <___vfprintf_internal_r+0x81c>
 400fdbc:	843ffc04 	addi	r16,r16,-16
 400fdc0:	ad400204 	addi	r21,r21,8
 400fdc4:	9c00130e 	bge	r19,r16,400fe14 <___vfprintf_internal_r+0x868>
 400fdc8:	94800404 	addi	r18,r18,16
 400fdcc:	8c400044 	addi	r17,r17,1
 400fdd0:	af000015 	stw	fp,0(r21)
 400fdd4:	acc00115 	stw	r19,4(r21)
 400fdd8:	dc800e15 	stw	r18,56(sp)
 400fddc:	dc400d15 	stw	r17,52(sp)
 400fde0:	a47ff60e 	bge	r20,r17,400fdbc <___vfprintf_internal_r+0x810>
 400fde4:	d9014f17 	ldw	r4,1340(sp)
 400fde8:	b00b883a 	mov	r5,r22
 400fdec:	d9800c04 	addi	r6,sp,48
 400fdf0:	d9c15115 	stw	r7,1348(sp)
 400fdf4:	400f5540 	call	400f554 <__sprint_r>
 400fdf8:	d9c15117 	ldw	r7,1348(sp)
 400fdfc:	103fa31e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 400fe00:	843ffc04 	addi	r16,r16,-16
 400fe04:	dc800e17 	ldw	r18,56(sp)
 400fe08:	dc400d17 	ldw	r17,52(sp)
 400fe0c:	dd401904 	addi	r21,sp,100
 400fe10:	9c3fed16 	blt	r19,r16,400fdc8 <___vfprintf_internal_r+0x81c>
 400fe14:	9425883a 	add	r18,r18,r16
 400fe18:	8c400044 	addi	r17,r17,1
 400fe1c:	008001c4 	movi	r2,7
 400fe20:	af000015 	stw	fp,0(r21)
 400fe24:	ac000115 	stw	r16,4(r21)
 400fe28:	dc800e15 	stw	r18,56(sp)
 400fe2c:	dc400d15 	stw	r17,52(sp)
 400fe30:	14416116 	blt	r2,r17,40103b8 <___vfprintf_internal_r+0xe0c>
 400fe34:	ad400204 	addi	r21,r21,8
 400fe38:	003f2406 	br	400facc <___vfprintf_internal_r+0x520>
 400fe3c:	d9014f17 	ldw	r4,1340(sp)
 400fe40:	40020940 	call	4002094 <__sinit>
 400fe44:	d9c15117 	ldw	r7,1348(sp)
 400fe48:	003def06 	br	400f608 <___vfprintf_internal_r+0x5c>
 400fe4c:	d9014f17 	ldw	r4,1340(sp)
 400fe50:	b00b883a 	mov	r5,r22
 400fe54:	d9c15115 	stw	r7,1348(sp)
 400fe58:	4001cc00 	call	4001cc0 <__swsetup_r>
 400fe5c:	d9c15117 	ldw	r7,1348(sp)
 400fe60:	103dee26 	beq	r2,zero,400f61c <___vfprintf_internal_r+0x70>
 400fe64:	003f8c06 	br	400fc98 <___vfprintf_internal_r+0x6ec>
 400fe68:	d9014217 	ldw	r4,1288(sp)
 400fe6c:	d9414317 	ldw	r5,1292(sp)
 400fe70:	000d883a 	mov	r6,zero
 400fe74:	000f883a 	mov	r7,zero
 400fe78:	40158740 	call	4015874 <__eqdf2>
 400fe7c:	1000f21e 	bne	r2,zero,4010248 <___vfprintf_internal_r+0xc9c>
 400fe80:	00810074 	movhi	r2,1025
 400fe84:	109a4904 	addi	r2,r2,26916
 400fe88:	94800044 	addi	r18,r18,1
 400fe8c:	8c400044 	addi	r17,r17,1
 400fe90:	a8800015 	stw	r2,0(r21)
 400fe94:	00c00044 	movi	r3,1
 400fe98:	008001c4 	movi	r2,7
 400fe9c:	a8c00115 	stw	r3,4(r21)
 400fea0:	dc800e15 	stw	r18,56(sp)
 400fea4:	dc400d15 	stw	r17,52(sp)
 400fea8:	1442fa16 	blt	r2,r17,4010a94 <___vfprintf_internal_r+0x14e8>
 400feac:	a8c00204 	addi	r3,r21,8
 400feb0:	d8800517 	ldw	r2,20(sp)
 400feb4:	d9014717 	ldw	r4,1308(sp)
 400feb8:	11015c0e 	bge	r2,r4,401042c <___vfprintf_internal_r+0xe80>
 400febc:	dc400d17 	ldw	r17,52(sp)
 400fec0:	d9814917 	ldw	r6,1316(sp)
 400fec4:	00800044 	movi	r2,1
 400fec8:	94800044 	addi	r18,r18,1
 400fecc:	8c400044 	addi	r17,r17,1
 400fed0:	18800115 	stw	r2,4(r3)
 400fed4:	008001c4 	movi	r2,7
 400fed8:	19800015 	stw	r6,0(r3)
 400fedc:	dc800e15 	stw	r18,56(sp)
 400fee0:	dc400d15 	stw	r17,52(sp)
 400fee4:	14431016 	blt	r2,r17,4010b28 <___vfprintf_internal_r+0x157c>
 400fee8:	18c00204 	addi	r3,r3,8
 400feec:	d8814717 	ldw	r2,1308(sp)
 400fef0:	143fffc4 	addi	r16,r2,-1
 400fef4:	043f2b0e 	bge	zero,r16,400fba4 <___vfprintf_internal_r+0x5f8>
 400fef8:	00800404 	movi	r2,16
 400fefc:	1402a20e 	bge	r2,r16,4010988 <___vfprintf_internal_r+0x13dc>
 400ff00:	dc400d17 	ldw	r17,52(sp)
 400ff04:	1027883a 	mov	r19,r2
 400ff08:	07010074 	movhi	fp,1025
 400ff0c:	e71a4984 	addi	fp,fp,26918
 400ff10:	050001c4 	movi	r20,7
 400ff14:	00000306 	br	400ff24 <___vfprintf_internal_r+0x978>
 400ff18:	18c00204 	addi	r3,r3,8
 400ff1c:	843ffc04 	addi	r16,r16,-16
 400ff20:	9c029c0e 	bge	r19,r16,4010994 <___vfprintf_internal_r+0x13e8>
 400ff24:	94800404 	addi	r18,r18,16
 400ff28:	8c400044 	addi	r17,r17,1
 400ff2c:	1f000015 	stw	fp,0(r3)
 400ff30:	1cc00115 	stw	r19,4(r3)
 400ff34:	dc800e15 	stw	r18,56(sp)
 400ff38:	dc400d15 	stw	r17,52(sp)
 400ff3c:	a47ff60e 	bge	r20,r17,400ff18 <___vfprintf_internal_r+0x96c>
 400ff40:	d9014f17 	ldw	r4,1340(sp)
 400ff44:	b00b883a 	mov	r5,r22
 400ff48:	d9800c04 	addi	r6,sp,48
 400ff4c:	400f5540 	call	400f554 <__sprint_r>
 400ff50:	103f4e1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 400ff54:	dc800e17 	ldw	r18,56(sp)
 400ff58:	dc400d17 	ldw	r17,52(sp)
 400ff5c:	d8c01904 	addi	r3,sp,100
 400ff60:	003fee06 	br	400ff1c <___vfprintf_internal_r+0x970>
 400ff64:	d8802c0b 	ldhu	r2,176(sp)
 400ff68:	00ffffc4 	movi	r3,-1
 400ff6c:	d8c14b15 	stw	r3,1324(sp)
 400ff70:	1080100c 	andi	r2,r2,64
 400ff74:	103dcc1e 	bne	r2,zero,400f6a8 <___vfprintf_internal_r+0xfc>
 400ff78:	003dce06 	br	400f6b4 <___vfprintf_internal_r+0x108>
 400ff7c:	d9014f17 	ldw	r4,1340(sp)
 400ff80:	b00b883a 	mov	r5,r22
 400ff84:	d9800c04 	addi	r6,sp,48
 400ff88:	400f5540 	call	400f554 <__sprint_r>
 400ff8c:	103f3f1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 400ff90:	dc800e17 	ldw	r18,56(sp)
 400ff94:	003f2e06 	br	400fc50 <___vfprintf_internal_r+0x6a4>
 400ff98:	d9414c17 	ldw	r5,1328(sp)
 400ff9c:	29400414 	ori	r5,r5,16
 400ffa0:	d9414c15 	stw	r5,1328(sp)
 400ffa4:	d9814c17 	ldw	r6,1328(sp)
 400ffa8:	3080080c 	andi	r2,r6,32
 400ffac:	10014f1e 	bne	r2,zero,40104ec <___vfprintf_internal_r+0xf40>
 400ffb0:	d8c14c17 	ldw	r3,1328(sp)
 400ffb4:	1880040c 	andi	r2,r3,16
 400ffb8:	1002ea1e 	bne	r2,zero,4010b64 <___vfprintf_internal_r+0x15b8>
 400ffbc:	d9014c17 	ldw	r4,1328(sp)
 400ffc0:	2080100c 	andi	r2,r4,64
 400ffc4:	1002e726 	beq	r2,zero,4010b64 <___vfprintf_internal_r+0x15b8>
 400ffc8:	3880000f 	ldh	r2,0(r7)
 400ffcc:	39c00104 	addi	r7,r7,4
 400ffd0:	d9c14015 	stw	r7,1280(sp)
 400ffd4:	1023d7fa 	srai	r17,r2,31
 400ffd8:	1021883a 	mov	r16,r2
 400ffdc:	88037216 	blt	r17,zero,4010da8 <___vfprintf_internal_r+0x17fc>
 400ffe0:	01000044 	movi	r4,1
 400ffe4:	98000416 	blt	r19,zero,400fff8 <___vfprintf_internal_r+0xa4c>
 400ffe8:	d8c14c17 	ldw	r3,1328(sp)
 400ffec:	00bfdfc4 	movi	r2,-129
 400fff0:	1886703a 	and	r3,r3,r2
 400fff4:	d8c14c15 	stw	r3,1328(sp)
 400fff8:	8444b03a 	or	r2,r16,r17
 400fffc:	1002261e 	bne	r2,zero,4010898 <___vfprintf_internal_r+0x12ec>
 4010000:	9802251e 	bne	r19,zero,4010898 <___vfprintf_internal_r+0x12ec>
 4010004:	20803fcc 	andi	r2,r4,255
 4010008:	10029b26 	beq	r2,zero,4010a78 <___vfprintf_internal_r+0x14cc>
 401000c:	d8c01904 	addi	r3,sp,100
 4010010:	dd000f04 	addi	r20,sp,60
 4010014:	d8c14115 	stw	r3,1284(sp)
 4010018:	d8c14117 	ldw	r3,1284(sp)
 401001c:	dcc14515 	stw	r19,1300(sp)
 4010020:	a0c5c83a 	sub	r2,r20,r3
 4010024:	11c00a04 	addi	r7,r2,40
 4010028:	99c0010e 	bge	r19,r7,4010030 <___vfprintf_internal_r+0xa84>
 401002c:	d9c14515 	stw	r7,1300(sp)
 4010030:	dcc14615 	stw	r19,1304(sp)
 4010034:	d8800407 	ldb	r2,16(sp)
 4010038:	103e4c26 	beq	r2,zero,400f96c <___vfprintf_internal_r+0x3c0>
 401003c:	d8814517 	ldw	r2,1300(sp)
 4010040:	10800044 	addi	r2,r2,1
 4010044:	d8814515 	stw	r2,1300(sp)
 4010048:	003e4806 	br	400f96c <___vfprintf_internal_r+0x3c0>
 401004c:	d9814c17 	ldw	r6,1328(sp)
 4010050:	31800414 	ori	r6,r6,16
 4010054:	d9814c15 	stw	r6,1328(sp)
 4010058:	d8c14c17 	ldw	r3,1328(sp)
 401005c:	1880080c 	andi	r2,r3,32
 4010060:	1001271e 	bne	r2,zero,4010500 <___vfprintf_internal_r+0xf54>
 4010064:	d9414c17 	ldw	r5,1328(sp)
 4010068:	2880040c 	andi	r2,r5,16
 401006c:	1002b61e 	bne	r2,zero,4010b48 <___vfprintf_internal_r+0x159c>
 4010070:	d9814c17 	ldw	r6,1328(sp)
 4010074:	3080100c 	andi	r2,r6,64
 4010078:	1002b326 	beq	r2,zero,4010b48 <___vfprintf_internal_r+0x159c>
 401007c:	3c00000b 	ldhu	r16,0(r7)
 4010080:	0009883a 	mov	r4,zero
 4010084:	39c00104 	addi	r7,r7,4
 4010088:	0023883a 	mov	r17,zero
 401008c:	d9c14015 	stw	r7,1280(sp)
 4010090:	d8000405 	stb	zero,16(sp)
 4010094:	003fd306 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 4010098:	d9014c17 	ldw	r4,1328(sp)
 401009c:	21000414 	ori	r4,r4,16
 40100a0:	d9014c15 	stw	r4,1328(sp)
 40100a4:	d9414c17 	ldw	r5,1328(sp)
 40100a8:	2880080c 	andi	r2,r5,32
 40100ac:	1001081e 	bne	r2,zero,40104d0 <___vfprintf_internal_r+0xf24>
 40100b0:	d8c14c17 	ldw	r3,1328(sp)
 40100b4:	1880040c 	andi	r2,r3,16
 40100b8:	1002b01e 	bne	r2,zero,4010b7c <___vfprintf_internal_r+0x15d0>
 40100bc:	d9014c17 	ldw	r4,1328(sp)
 40100c0:	2080100c 	andi	r2,r4,64
 40100c4:	1002ad26 	beq	r2,zero,4010b7c <___vfprintf_internal_r+0x15d0>
 40100c8:	3c00000b 	ldhu	r16,0(r7)
 40100cc:	01000044 	movi	r4,1
 40100d0:	39c00104 	addi	r7,r7,4
 40100d4:	0023883a 	mov	r17,zero
 40100d8:	d9c14015 	stw	r7,1280(sp)
 40100dc:	d8000405 	stb	zero,16(sp)
 40100e0:	003fc006 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 40100e4:	d9014f17 	ldw	r4,1340(sp)
 40100e8:	b00b883a 	mov	r5,r22
 40100ec:	d9800c04 	addi	r6,sp,48
 40100f0:	400f5540 	call	400f554 <__sprint_r>
 40100f4:	103ee51e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 40100f8:	dc800e17 	ldw	r18,56(sp)
 40100fc:	d8c01904 	addi	r3,sp,100
 4010100:	d9814c17 	ldw	r6,1328(sp)
 4010104:	3080004c 	andi	r2,r6,1
 4010108:	1005003a 	cmpeq	r2,r2,zero
 401010c:	103ea51e 	bne	r2,zero,400fba4 <___vfprintf_internal_r+0x5f8>
 4010110:	00800044 	movi	r2,1
 4010114:	dc400d17 	ldw	r17,52(sp)
 4010118:	18800115 	stw	r2,4(r3)
 401011c:	d8814917 	ldw	r2,1316(sp)
 4010120:	94800044 	addi	r18,r18,1
 4010124:	8c400044 	addi	r17,r17,1
 4010128:	18800015 	stw	r2,0(r3)
 401012c:	008001c4 	movi	r2,7
 4010130:	dc800e15 	stw	r18,56(sp)
 4010134:	dc400d15 	stw	r17,52(sp)
 4010138:	14421e0e 	bge	r2,r17,40109b4 <___vfprintf_internal_r+0x1408>
 401013c:	d9014f17 	ldw	r4,1340(sp)
 4010140:	b00b883a 	mov	r5,r22
 4010144:	d9800c04 	addi	r6,sp,48
 4010148:	400f5540 	call	400f554 <__sprint_r>
 401014c:	103ecf1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010150:	dc800e17 	ldw	r18,56(sp)
 4010154:	d8c01904 	addi	r3,sp,100
 4010158:	003e9206 	br	400fba4 <___vfprintf_internal_r+0x5f8>
 401015c:	d9014f17 	ldw	r4,1340(sp)
 4010160:	b00b883a 	mov	r5,r22
 4010164:	d9800c04 	addi	r6,sp,48
 4010168:	400f5540 	call	400f554 <__sprint_r>
 401016c:	103ec026 	beq	r2,zero,400fc70 <___vfprintf_internal_r+0x6c4>
 4010170:	003ec606 	br	400fc8c <___vfprintf_internal_r+0x6e0>
 4010174:	d9014f17 	ldw	r4,1340(sp)
 4010178:	b00b883a 	mov	r5,r22
 401017c:	d9800c04 	addi	r6,sp,48
 4010180:	d9c15115 	stw	r7,1348(sp)
 4010184:	400f5540 	call	400f554 <__sprint_r>
 4010188:	d9c15117 	ldw	r7,1348(sp)
 401018c:	103ebf1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010190:	dc800e17 	ldw	r18,56(sp)
 4010194:	dc400d17 	ldw	r17,52(sp)
 4010198:	dd401904 	addi	r21,sp,100
 401019c:	003e7406 	br	400fb70 <___vfprintf_internal_r+0x5c4>
 40101a0:	d9014f17 	ldw	r4,1340(sp)
 40101a4:	b00b883a 	mov	r5,r22
 40101a8:	d9800c04 	addi	r6,sp,48
 40101ac:	d9c15115 	stw	r7,1348(sp)
 40101b0:	400f5540 	call	400f554 <__sprint_r>
 40101b4:	d9c15117 	ldw	r7,1348(sp)
 40101b8:	103eb41e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 40101bc:	dd401904 	addi	r21,sp,100
 40101c0:	003d6d06 	br	400f778 <___vfprintf_internal_r+0x1cc>
 40101c4:	d9014f17 	ldw	r4,1340(sp)
 40101c8:	b00b883a 	mov	r5,r22
 40101cc:	d9800c04 	addi	r6,sp,48
 40101d0:	d9c15115 	stw	r7,1348(sp)
 40101d4:	400f5540 	call	400f554 <__sprint_r>
 40101d8:	d9c15117 	ldw	r7,1348(sp)
 40101dc:	103eab1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 40101e0:	dc800e17 	ldw	r18,56(sp)
 40101e4:	dc400d17 	ldw	r17,52(sp)
 40101e8:	dd401904 	addi	r21,sp,100
 40101ec:	003e3406 	br	400fac0 <___vfprintf_internal_r+0x514>
 40101f0:	d9014f17 	ldw	r4,1340(sp)
 40101f4:	b00b883a 	mov	r5,r22
 40101f8:	d9800c04 	addi	r6,sp,48
 40101fc:	d9c15115 	stw	r7,1348(sp)
 4010200:	400f5540 	call	400f554 <__sprint_r>
 4010204:	d9c15117 	ldw	r7,1348(sp)
 4010208:	103ea01e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 401020c:	dc800e17 	ldw	r18,56(sp)
 4010210:	dc400d17 	ldw	r17,52(sp)
 4010214:	dd401904 	addi	r21,sp,100
 4010218:	003e1c06 	br	400fa8c <___vfprintf_internal_r+0x4e0>
 401021c:	d9014f17 	ldw	r4,1340(sp)
 4010220:	b00b883a 	mov	r5,r22
 4010224:	d9800c04 	addi	r6,sp,48
 4010228:	d9c15115 	stw	r7,1348(sp)
 401022c:	400f5540 	call	400f554 <__sprint_r>
 4010230:	d9c15117 	ldw	r7,1348(sp)
 4010234:	103e951e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010238:	dc800e17 	ldw	r18,56(sp)
 401023c:	dc400d17 	ldw	r17,52(sp)
 4010240:	dd401904 	addi	r21,sp,100
 4010244:	003e0406 	br	400fa58 <___vfprintf_internal_r+0x4ac>
 4010248:	d9000517 	ldw	r4,20(sp)
 401024c:	0102520e 	bge	zero,r4,4010b98 <___vfprintf_internal_r+0x15ec>
 4010250:	d9814717 	ldw	r6,1308(sp)
 4010254:	21807a16 	blt	r4,r6,4010440 <___vfprintf_internal_r+0xe94>
 4010258:	d8814117 	ldw	r2,1284(sp)
 401025c:	91a5883a 	add	r18,r18,r6
 4010260:	8c400044 	addi	r17,r17,1
 4010264:	a8800015 	stw	r2,0(r21)
 4010268:	008001c4 	movi	r2,7
 401026c:	a9800115 	stw	r6,4(r21)
 4010270:	dc800e15 	stw	r18,56(sp)
 4010274:	dc400d15 	stw	r17,52(sp)
 4010278:	1442f616 	blt	r2,r17,4010e54 <___vfprintf_internal_r+0x18a8>
 401027c:	a8c00204 	addi	r3,r21,8
 4010280:	d9414717 	ldw	r5,1308(sp)
 4010284:	2161c83a 	sub	r16,r4,r5
 4010288:	043f9d0e 	bge	zero,r16,4010100 <___vfprintf_internal_r+0xb54>
 401028c:	00800404 	movi	r2,16
 4010290:	1402130e 	bge	r2,r16,4010ae0 <___vfprintf_internal_r+0x1534>
 4010294:	dc400d17 	ldw	r17,52(sp)
 4010298:	1027883a 	mov	r19,r2
 401029c:	07010074 	movhi	fp,1025
 40102a0:	e71a4984 	addi	fp,fp,26918
 40102a4:	050001c4 	movi	r20,7
 40102a8:	00000306 	br	40102b8 <___vfprintf_internal_r+0xd0c>
 40102ac:	18c00204 	addi	r3,r3,8
 40102b0:	843ffc04 	addi	r16,r16,-16
 40102b4:	9c020d0e 	bge	r19,r16,4010aec <___vfprintf_internal_r+0x1540>
 40102b8:	94800404 	addi	r18,r18,16
 40102bc:	8c400044 	addi	r17,r17,1
 40102c0:	1f000015 	stw	fp,0(r3)
 40102c4:	1cc00115 	stw	r19,4(r3)
 40102c8:	dc800e15 	stw	r18,56(sp)
 40102cc:	dc400d15 	stw	r17,52(sp)
 40102d0:	a47ff60e 	bge	r20,r17,40102ac <___vfprintf_internal_r+0xd00>
 40102d4:	d9014f17 	ldw	r4,1340(sp)
 40102d8:	b00b883a 	mov	r5,r22
 40102dc:	d9800c04 	addi	r6,sp,48
 40102e0:	400f5540 	call	400f554 <__sprint_r>
 40102e4:	103e691e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 40102e8:	dc800e17 	ldw	r18,56(sp)
 40102ec:	dc400d17 	ldw	r17,52(sp)
 40102f0:	d8c01904 	addi	r3,sp,100
 40102f4:	003fee06 	br	40102b0 <___vfprintf_internal_r+0xd04>
 40102f8:	d8814717 	ldw	r2,1308(sp)
 40102fc:	143fffc4 	addi	r16,r2,-1
 4010300:	043e970e 	bge	zero,r16,400fd60 <___vfprintf_internal_r+0x7b4>
 4010304:	00800404 	movi	r2,16
 4010308:	1400180e 	bge	r2,r16,401036c <___vfprintf_internal_r+0xdc0>
 401030c:	1029883a 	mov	r20,r2
 4010310:	07010074 	movhi	fp,1025
 4010314:	e71a4984 	addi	fp,fp,26918
 4010318:	054001c4 	movi	r21,7
 401031c:	00000306 	br	401032c <___vfprintf_internal_r+0xd80>
 4010320:	9cc00204 	addi	r19,r19,8
 4010324:	843ffc04 	addi	r16,r16,-16
 4010328:	a400120e 	bge	r20,r16,4010374 <___vfprintf_internal_r+0xdc8>
 401032c:	94800404 	addi	r18,r18,16
 4010330:	8c400044 	addi	r17,r17,1
 4010334:	9f000015 	stw	fp,0(r19)
 4010338:	9d000115 	stw	r20,4(r19)
 401033c:	dc800e15 	stw	r18,56(sp)
 4010340:	dc400d15 	stw	r17,52(sp)
 4010344:	ac7ff60e 	bge	r21,r17,4010320 <___vfprintf_internal_r+0xd74>
 4010348:	d9014f17 	ldw	r4,1340(sp)
 401034c:	b00b883a 	mov	r5,r22
 4010350:	d9800c04 	addi	r6,sp,48
 4010354:	400f5540 	call	400f554 <__sprint_r>
 4010358:	103e4c1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 401035c:	dc800e17 	ldw	r18,56(sp)
 4010360:	dc400d17 	ldw	r17,52(sp)
 4010364:	dcc01904 	addi	r19,sp,100
 4010368:	003fee06 	br	4010324 <___vfprintf_internal_r+0xd78>
 401036c:	07010074 	movhi	fp,1025
 4010370:	e71a4984 	addi	fp,fp,26918
 4010374:	9425883a 	add	r18,r18,r16
 4010378:	8c400044 	addi	r17,r17,1
 401037c:	008001c4 	movi	r2,7
 4010380:	9f000015 	stw	fp,0(r19)
 4010384:	9c000115 	stw	r16,4(r19)
 4010388:	dc800e15 	stw	r18,56(sp)
 401038c:	dc400d15 	stw	r17,52(sp)
 4010390:	147e720e 	bge	r2,r17,400fd5c <___vfprintf_internal_r+0x7b0>
 4010394:	d9014f17 	ldw	r4,1340(sp)
 4010398:	b00b883a 	mov	r5,r22
 401039c:	d9800c04 	addi	r6,sp,48
 40103a0:	400f5540 	call	400f554 <__sprint_r>
 40103a4:	103e391e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 40103a8:	dc800e17 	ldw	r18,56(sp)
 40103ac:	dc400d17 	ldw	r17,52(sp)
 40103b0:	dcc01904 	addi	r19,sp,100
 40103b4:	003e6a06 	br	400fd60 <___vfprintf_internal_r+0x7b4>
 40103b8:	d9014f17 	ldw	r4,1340(sp)
 40103bc:	b00b883a 	mov	r5,r22
 40103c0:	d9800c04 	addi	r6,sp,48
 40103c4:	d9c15115 	stw	r7,1348(sp)
 40103c8:	400f5540 	call	400f554 <__sprint_r>
 40103cc:	d9c15117 	ldw	r7,1348(sp)
 40103d0:	103e2e1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 40103d4:	dc800e17 	ldw	r18,56(sp)
 40103d8:	dc400d17 	ldw	r17,52(sp)
 40103dc:	dd401904 	addi	r21,sp,100
 40103e0:	003dba06 	br	400facc <___vfprintf_internal_r+0x520>
 40103e4:	d9014f17 	ldw	r4,1340(sp)
 40103e8:	b00b883a 	mov	r5,r22
 40103ec:	d9800c04 	addi	r6,sp,48
 40103f0:	400f5540 	call	400f554 <__sprint_r>
 40103f4:	103e251e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 40103f8:	dc800e17 	ldw	r18,56(sp)
 40103fc:	dc400d17 	ldw	r17,52(sp)
 4010400:	dcc01904 	addi	r19,sp,100
 4010404:	003e4206 	br	400fd10 <___vfprintf_internal_r+0x764>
 4010408:	d9014f17 	ldw	r4,1340(sp)
 401040c:	b00b883a 	mov	r5,r22
 4010410:	d9800c04 	addi	r6,sp,48
 4010414:	400f5540 	call	400f554 <__sprint_r>
 4010418:	103e1c1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 401041c:	dc800e17 	ldw	r18,56(sp)
 4010420:	dc400d17 	ldw	r17,52(sp)
 4010424:	d8c01904 	addi	r3,sp,100
 4010428:	003e2e06 	br	400fce4 <___vfprintf_internal_r+0x738>
 401042c:	d9414c17 	ldw	r5,1328(sp)
 4010430:	2880004c 	andi	r2,r5,1
 4010434:	1005003a 	cmpeq	r2,r2,zero
 4010438:	103dda1e 	bne	r2,zero,400fba4 <___vfprintf_internal_r+0x5f8>
 401043c:	003e9f06 	br	400febc <___vfprintf_internal_r+0x910>
 4010440:	d8c14117 	ldw	r3,1284(sp)
 4010444:	9125883a 	add	r18,r18,r4
 4010448:	8c400044 	addi	r17,r17,1
 401044c:	008001c4 	movi	r2,7
 4010450:	a8c00015 	stw	r3,0(r21)
 4010454:	a9000115 	stw	r4,4(r21)
 4010458:	dc800e15 	stw	r18,56(sp)
 401045c:	dc400d15 	stw	r17,52(sp)
 4010460:	14426616 	blt	r2,r17,4010dfc <___vfprintf_internal_r+0x1850>
 4010464:	a8c00204 	addi	r3,r21,8
 4010468:	d9414917 	ldw	r5,1316(sp)
 401046c:	00800044 	movi	r2,1
 4010470:	94800044 	addi	r18,r18,1
 4010474:	8c400044 	addi	r17,r17,1
 4010478:	18800115 	stw	r2,4(r3)
 401047c:	008001c4 	movi	r2,7
 4010480:	19400015 	stw	r5,0(r3)
 4010484:	dc800e15 	stw	r18,56(sp)
 4010488:	dc400d15 	stw	r17,52(sp)
 401048c:	2021883a 	mov	r16,r4
 4010490:	14425016 	blt	r2,r17,4010dd4 <___vfprintf_internal_r+0x1828>
 4010494:	19400204 	addi	r5,r3,8
 4010498:	d9814717 	ldw	r6,1308(sp)
 401049c:	8c400044 	addi	r17,r17,1
 40104a0:	dc400d15 	stw	r17,52(sp)
 40104a4:	3107c83a 	sub	r3,r6,r4
 40104a8:	d9014117 	ldw	r4,1284(sp)
 40104ac:	90e5883a 	add	r18,r18,r3
 40104b0:	28c00115 	stw	r3,4(r5)
 40104b4:	8105883a 	add	r2,r16,r4
 40104b8:	28800015 	stw	r2,0(r5)
 40104bc:	008001c4 	movi	r2,7
 40104c0:	dc800e15 	stw	r18,56(sp)
 40104c4:	147f1d16 	blt	r2,r17,401013c <___vfprintf_internal_r+0xb90>
 40104c8:	28c00204 	addi	r3,r5,8
 40104cc:	003db506 	br	400fba4 <___vfprintf_internal_r+0x5f8>
 40104d0:	3c000017 	ldw	r16,0(r7)
 40104d4:	3c400117 	ldw	r17,4(r7)
 40104d8:	39800204 	addi	r6,r7,8
 40104dc:	01000044 	movi	r4,1
 40104e0:	d9814015 	stw	r6,1280(sp)
 40104e4:	d8000405 	stb	zero,16(sp)
 40104e8:	003ebe06 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 40104ec:	3c000017 	ldw	r16,0(r7)
 40104f0:	3c400117 	ldw	r17,4(r7)
 40104f4:	38800204 	addi	r2,r7,8
 40104f8:	d8814015 	stw	r2,1280(sp)
 40104fc:	003eb706 	br	400ffdc <___vfprintf_internal_r+0xa30>
 4010500:	3c000017 	ldw	r16,0(r7)
 4010504:	3c400117 	ldw	r17,4(r7)
 4010508:	39000204 	addi	r4,r7,8
 401050c:	d9014015 	stw	r4,1280(sp)
 4010510:	0009883a 	mov	r4,zero
 4010514:	d8000405 	stb	zero,16(sp)
 4010518:	003eb206 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 401051c:	38c00017 	ldw	r3,0(r7)
 4010520:	39c00104 	addi	r7,r7,4
 4010524:	d8c14a15 	stw	r3,1320(sp)
 4010528:	1800d10e 	bge	r3,zero,4010870 <___vfprintf_internal_r+0x12c4>
 401052c:	00c7c83a 	sub	r3,zero,r3
 4010530:	d8c14a15 	stw	r3,1320(sp)
 4010534:	d9014c17 	ldw	r4,1328(sp)
 4010538:	b8c00007 	ldb	r3,0(r23)
 401053c:	21000114 	ori	r4,r4,4
 4010540:	d9014c15 	stw	r4,1328(sp)
 4010544:	003c9806 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 4010548:	d9814c17 	ldw	r6,1328(sp)
 401054c:	3080080c 	andi	r2,r6,32
 4010550:	1001f026 	beq	r2,zero,4010d14 <___vfprintf_internal_r+0x1768>
 4010554:	d9014b17 	ldw	r4,1324(sp)
 4010558:	38800017 	ldw	r2,0(r7)
 401055c:	39c00104 	addi	r7,r7,4
 4010560:	d9c14015 	stw	r7,1280(sp)
 4010564:	2007d7fa 	srai	r3,r4,31
 4010568:	d9c14017 	ldw	r7,1280(sp)
 401056c:	11000015 	stw	r4,0(r2)
 4010570:	10c00115 	stw	r3,4(r2)
 4010574:	003c6906 	br	400f71c <___vfprintf_internal_r+0x170>
 4010578:	b8c00007 	ldb	r3,0(r23)
 401057c:	00801b04 	movi	r2,108
 4010580:	18824f26 	beq	r3,r2,4010ec0 <___vfprintf_internal_r+0x1914>
 4010584:	d9414c17 	ldw	r5,1328(sp)
 4010588:	29400414 	ori	r5,r5,16
 401058c:	d9414c15 	stw	r5,1328(sp)
 4010590:	003c8506 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 4010594:	d9814c17 	ldw	r6,1328(sp)
 4010598:	b8c00007 	ldb	r3,0(r23)
 401059c:	31800814 	ori	r6,r6,32
 40105a0:	d9814c15 	stw	r6,1328(sp)
 40105a4:	003c8006 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 40105a8:	d8814c17 	ldw	r2,1328(sp)
 40105ac:	3c000017 	ldw	r16,0(r7)
 40105b0:	00c01e04 	movi	r3,120
 40105b4:	10800094 	ori	r2,r2,2
 40105b8:	d8814c15 	stw	r2,1328(sp)
 40105bc:	39c00104 	addi	r7,r7,4
 40105c0:	01410074 	movhi	r5,1025
 40105c4:	295a3204 	addi	r5,r5,26824
 40105c8:	00800c04 	movi	r2,48
 40105cc:	0023883a 	mov	r17,zero
 40105d0:	01000084 	movi	r4,2
 40105d4:	d9c14015 	stw	r7,1280(sp)
 40105d8:	d8c14d15 	stw	r3,1332(sp)
 40105dc:	d9414415 	stw	r5,1296(sp)
 40105e0:	d8800445 	stb	r2,17(sp)
 40105e4:	d8c00485 	stb	r3,18(sp)
 40105e8:	d8000405 	stb	zero,16(sp)
 40105ec:	003e7d06 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 40105f0:	d8814c17 	ldw	r2,1328(sp)
 40105f4:	b8c00007 	ldb	r3,0(r23)
 40105f8:	10801014 	ori	r2,r2,64
 40105fc:	d8814c15 	stw	r2,1328(sp)
 4010600:	003c6906 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 4010604:	d9414c17 	ldw	r5,1328(sp)
 4010608:	2880020c 	andi	r2,r5,8
 401060c:	1001df26 	beq	r2,zero,4010d8c <___vfprintf_internal_r+0x17e0>
 4010610:	39800017 	ldw	r6,0(r7)
 4010614:	38800204 	addi	r2,r7,8
 4010618:	d8814015 	stw	r2,1280(sp)
 401061c:	d9814215 	stw	r6,1288(sp)
 4010620:	39c00117 	ldw	r7,4(r7)
 4010624:	d9c14315 	stw	r7,1292(sp)
 4010628:	d9014217 	ldw	r4,1288(sp)
 401062c:	d9414317 	ldw	r5,1292(sp)
 4010630:	4013fe80 	call	4013fe8 <__isinfd>
 4010634:	10021726 	beq	r2,zero,4010e94 <___vfprintf_internal_r+0x18e8>
 4010638:	d9014217 	ldw	r4,1288(sp)
 401063c:	d9414317 	ldw	r5,1292(sp)
 4010640:	000d883a 	mov	r6,zero
 4010644:	000f883a 	mov	r7,zero
 4010648:	4015a940 	call	4015a94 <__ltdf2>
 401064c:	1002ca16 	blt	r2,zero,4011178 <___vfprintf_internal_r+0x1bcc>
 4010650:	d9414d17 	ldw	r5,1332(sp)
 4010654:	008011c4 	movi	r2,71
 4010658:	11420a16 	blt	r2,r5,4010e84 <___vfprintf_internal_r+0x18d8>
 401065c:	01810074 	movhi	r6,1025
 4010660:	319a3704 	addi	r6,r6,26844
 4010664:	d9814115 	stw	r6,1284(sp)
 4010668:	d9014c17 	ldw	r4,1328(sp)
 401066c:	00c000c4 	movi	r3,3
 4010670:	00bfdfc4 	movi	r2,-129
 4010674:	2088703a 	and	r4,r4,r2
 4010678:	180f883a 	mov	r7,r3
 401067c:	d8c14515 	stw	r3,1300(sp)
 4010680:	d9014c15 	stw	r4,1328(sp)
 4010684:	d8014615 	stw	zero,1304(sp)
 4010688:	003e6a06 	br	4010034 <___vfprintf_internal_r+0xa88>
 401068c:	38800017 	ldw	r2,0(r7)
 4010690:	00c00044 	movi	r3,1
 4010694:	39c00104 	addi	r7,r7,4
 4010698:	d9c14015 	stw	r7,1280(sp)
 401069c:	d9000f04 	addi	r4,sp,60
 40106a0:	180f883a 	mov	r7,r3
 40106a4:	d8c14515 	stw	r3,1300(sp)
 40106a8:	d9014115 	stw	r4,1284(sp)
 40106ac:	d8800f05 	stb	r2,60(sp)
 40106b0:	d8000405 	stb	zero,16(sp)
 40106b4:	003cac06 	br	400f968 <___vfprintf_internal_r+0x3bc>
 40106b8:	01410074 	movhi	r5,1025
 40106bc:	295a3d04 	addi	r5,r5,26868
 40106c0:	d9414415 	stw	r5,1296(sp)
 40106c4:	d9814c17 	ldw	r6,1328(sp)
 40106c8:	3080080c 	andi	r2,r6,32
 40106cc:	1000f926 	beq	r2,zero,4010ab4 <___vfprintf_internal_r+0x1508>
 40106d0:	3c000017 	ldw	r16,0(r7)
 40106d4:	3c400117 	ldw	r17,4(r7)
 40106d8:	38800204 	addi	r2,r7,8
 40106dc:	d8814015 	stw	r2,1280(sp)
 40106e0:	d9414c17 	ldw	r5,1328(sp)
 40106e4:	2880004c 	andi	r2,r5,1
 40106e8:	1005003a 	cmpeq	r2,r2,zero
 40106ec:	1000b31e 	bne	r2,zero,40109bc <___vfprintf_internal_r+0x1410>
 40106f0:	8444b03a 	or	r2,r16,r17
 40106f4:	1000b126 	beq	r2,zero,40109bc <___vfprintf_internal_r+0x1410>
 40106f8:	d9814d17 	ldw	r6,1332(sp)
 40106fc:	29400094 	ori	r5,r5,2
 4010700:	00800c04 	movi	r2,48
 4010704:	01000084 	movi	r4,2
 4010708:	d9414c15 	stw	r5,1328(sp)
 401070c:	d8800445 	stb	r2,17(sp)
 4010710:	d9800485 	stb	r6,18(sp)
 4010714:	d8000405 	stb	zero,16(sp)
 4010718:	003e3206 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 401071c:	01810074 	movhi	r6,1025
 4010720:	319a3204 	addi	r6,r6,26824
 4010724:	d9814415 	stw	r6,1296(sp)
 4010728:	003fe606 	br	40106c4 <___vfprintf_internal_r+0x1118>
 401072c:	00800ac4 	movi	r2,43
 4010730:	d8800405 	stb	r2,16(sp)
 4010734:	b8c00007 	ldb	r3,0(r23)
 4010738:	003c1b06 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 401073c:	d8814c17 	ldw	r2,1328(sp)
 4010740:	b8c00007 	ldb	r3,0(r23)
 4010744:	10800054 	ori	r2,r2,1
 4010748:	d8814c15 	stw	r2,1328(sp)
 401074c:	003c1606 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 4010750:	d8800407 	ldb	r2,16(sp)
 4010754:	1000461e 	bne	r2,zero,4010870 <___vfprintf_internal_r+0x12c4>
 4010758:	00800804 	movi	r2,32
 401075c:	d8800405 	stb	r2,16(sp)
 4010760:	b8c00007 	ldb	r3,0(r23)
 4010764:	003c1006 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 4010768:	d9814c17 	ldw	r6,1328(sp)
 401076c:	b8c00007 	ldb	r3,0(r23)
 4010770:	31800214 	ori	r6,r6,8
 4010774:	d9814c15 	stw	r6,1328(sp)
 4010778:	003c0b06 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 401077c:	0007883a 	mov	r3,zero
 4010780:	01000244 	movi	r4,9
 4010784:	188002a4 	muli	r2,r3,10
 4010788:	b8c00007 	ldb	r3,0(r23)
 401078c:	d9814d17 	ldw	r6,1332(sp)
 4010790:	bdc00044 	addi	r23,r23,1
 4010794:	d8c14d15 	stw	r3,1332(sp)
 4010798:	d9414d17 	ldw	r5,1332(sp)
 401079c:	3085883a 	add	r2,r6,r2
 40107a0:	10fff404 	addi	r3,r2,-48
 40107a4:	28bff404 	addi	r2,r5,-48
 40107a8:	20bff62e 	bgeu	r4,r2,4010784 <___vfprintf_internal_r+0x11d8>
 40107ac:	d8c14a15 	stw	r3,1320(sp)
 40107b0:	003bff06 	br	400f7b0 <___vfprintf_internal_r+0x204>
 40107b4:	d9414c17 	ldw	r5,1328(sp)
 40107b8:	b8c00007 	ldb	r3,0(r23)
 40107bc:	29402014 	ori	r5,r5,128
 40107c0:	d9414c15 	stw	r5,1328(sp)
 40107c4:	003bf806 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 40107c8:	b8c00007 	ldb	r3,0(r23)
 40107cc:	00800a84 	movi	r2,42
 40107d0:	bdc00044 	addi	r23,r23,1
 40107d4:	18831526 	beq	r3,r2,401142c <___vfprintf_internal_r+0x1e80>
 40107d8:	d8c14d15 	stw	r3,1332(sp)
 40107dc:	18bff404 	addi	r2,r3,-48
 40107e0:	00c00244 	movi	r3,9
 40107e4:	18827836 	bltu	r3,r2,40111c8 <___vfprintf_internal_r+0x1c1c>
 40107e8:	000d883a 	mov	r6,zero
 40107ec:	308002a4 	muli	r2,r6,10
 40107f0:	b9800007 	ldb	r6,0(r23)
 40107f4:	d9414d17 	ldw	r5,1332(sp)
 40107f8:	bdc00044 	addi	r23,r23,1
 40107fc:	d9814d15 	stw	r6,1332(sp)
 4010800:	d9014d17 	ldw	r4,1332(sp)
 4010804:	1145883a 	add	r2,r2,r5
 4010808:	11bff404 	addi	r6,r2,-48
 401080c:	20bff404 	addi	r2,r4,-48
 4010810:	18bff62e 	bgeu	r3,r2,40107ec <___vfprintf_internal_r+0x1240>
 4010814:	3027883a 	mov	r19,r6
 4010818:	303be50e 	bge	r6,zero,400f7b0 <___vfprintf_internal_r+0x204>
 401081c:	04ffffc4 	movi	r19,-1
 4010820:	003be306 	br	400f7b0 <___vfprintf_internal_r+0x204>
 4010824:	d8000405 	stb	zero,16(sp)
 4010828:	39800017 	ldw	r6,0(r7)
 401082c:	39c00104 	addi	r7,r7,4
 4010830:	d9c14015 	stw	r7,1280(sp)
 4010834:	d9814115 	stw	r6,1284(sp)
 4010838:	3001c926 	beq	r6,zero,4010f60 <___vfprintf_internal_r+0x19b4>
 401083c:	98000e16 	blt	r19,zero,4010878 <___vfprintf_internal_r+0x12cc>
 4010840:	d9014117 	ldw	r4,1284(sp)
 4010844:	000b883a 	mov	r5,zero
 4010848:	980d883a 	mov	r6,r19
 401084c:	40013f80 	call	40013f8 <memchr>
 4010850:	10025926 	beq	r2,zero,40111b8 <___vfprintf_internal_r+0x1c0c>
 4010854:	d8c14117 	ldw	r3,1284(sp)
 4010858:	10cfc83a 	sub	r7,r2,r3
 401085c:	99c19e16 	blt	r19,r7,4010ed8 <___vfprintf_internal_r+0x192c>
 4010860:	d9c14515 	stw	r7,1300(sp)
 4010864:	38000916 	blt	r7,zero,401088c <___vfprintf_internal_r+0x12e0>
 4010868:	d8014615 	stw	zero,1304(sp)
 401086c:	003df106 	br	4010034 <___vfprintf_internal_r+0xa88>
 4010870:	b8c00007 	ldb	r3,0(r23)
 4010874:	003bcc06 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 4010878:	d9014117 	ldw	r4,1284(sp)
 401087c:	40007a80 	call	40007a8 <strlen>
 4010880:	d8814515 	stw	r2,1300(sp)
 4010884:	100f883a 	mov	r7,r2
 4010888:	103ff70e 	bge	r2,zero,4010868 <___vfprintf_internal_r+0x12bc>
 401088c:	d8014515 	stw	zero,1300(sp)
 4010890:	d8014615 	stw	zero,1304(sp)
 4010894:	003de706 	br	4010034 <___vfprintf_internal_r+0xa88>
 4010898:	20c03fcc 	andi	r3,r4,255
 401089c:	00800044 	movi	r2,1
 40108a0:	18802d26 	beq	r3,r2,4010958 <___vfprintf_internal_r+0x13ac>
 40108a4:	18800e36 	bltu	r3,r2,40108e0 <___vfprintf_internal_r+0x1334>
 40108a8:	00800084 	movi	r2,2
 40108ac:	1880fa26 	beq	r3,r2,4010c98 <___vfprintf_internal_r+0x16ec>
 40108b0:	01010074 	movhi	r4,1025
 40108b4:	211a4204 	addi	r4,r4,26888
 40108b8:	40007a80 	call	40007a8 <strlen>
 40108bc:	100f883a 	mov	r7,r2
 40108c0:	dcc14515 	stw	r19,1300(sp)
 40108c4:	9880010e 	bge	r19,r2,40108cc <___vfprintf_internal_r+0x1320>
 40108c8:	d8814515 	stw	r2,1300(sp)
 40108cc:	00810074 	movhi	r2,1025
 40108d0:	109a4204 	addi	r2,r2,26888
 40108d4:	dcc14615 	stw	r19,1304(sp)
 40108d8:	d8814115 	stw	r2,1284(sp)
 40108dc:	003dd506 	br	4010034 <___vfprintf_internal_r+0xa88>
 40108e0:	d9401904 	addi	r5,sp,100
 40108e4:	dd000f04 	addi	r20,sp,60
 40108e8:	d9414115 	stw	r5,1284(sp)
 40108ec:	880a977a 	slli	r5,r17,29
 40108f0:	d9814117 	ldw	r6,1284(sp)
 40108f4:	8004d0fa 	srli	r2,r16,3
 40108f8:	8806d0fa 	srli	r3,r17,3
 40108fc:	810001cc 	andi	r4,r16,7
 4010900:	2884b03a 	or	r2,r5,r2
 4010904:	31bfffc4 	addi	r6,r6,-1
 4010908:	21000c04 	addi	r4,r4,48
 401090c:	d9814115 	stw	r6,1284(sp)
 4010910:	10cab03a 	or	r5,r2,r3
 4010914:	31000005 	stb	r4,0(r6)
 4010918:	1021883a 	mov	r16,r2
 401091c:	1823883a 	mov	r17,r3
 4010920:	283ff21e 	bne	r5,zero,40108ec <___vfprintf_internal_r+0x1340>
 4010924:	d8c14c17 	ldw	r3,1328(sp)
 4010928:	1880004c 	andi	r2,r3,1
 401092c:	1005003a 	cmpeq	r2,r2,zero
 4010930:	103db91e 	bne	r2,zero,4010018 <___vfprintf_internal_r+0xa6c>
 4010934:	20803fcc 	andi	r2,r4,255
 4010938:	1080201c 	xori	r2,r2,128
 401093c:	10bfe004 	addi	r2,r2,-128
 4010940:	00c00c04 	movi	r3,48
 4010944:	10fdb426 	beq	r2,r3,4010018 <___vfprintf_internal_r+0xa6c>
 4010948:	31bfffc4 	addi	r6,r6,-1
 401094c:	d9814115 	stw	r6,1284(sp)
 4010950:	30c00005 	stb	r3,0(r6)
 4010954:	003db006 	br	4010018 <___vfprintf_internal_r+0xa6c>
 4010958:	88800068 	cmpgeui	r2,r17,1
 401095c:	10002c1e 	bne	r2,zero,4010a10 <___vfprintf_internal_r+0x1464>
 4010960:	8800021e 	bne	r17,zero,401096c <___vfprintf_internal_r+0x13c0>
 4010964:	00800244 	movi	r2,9
 4010968:	14002936 	bltu	r2,r16,4010a10 <___vfprintf_internal_r+0x1464>
 401096c:	d90018c4 	addi	r4,sp,99
 4010970:	dd000f04 	addi	r20,sp,60
 4010974:	d9014115 	stw	r4,1284(sp)
 4010978:	d9014117 	ldw	r4,1284(sp)
 401097c:	80800c04 	addi	r2,r16,48
 4010980:	20800005 	stb	r2,0(r4)
 4010984:	003da406 	br	4010018 <___vfprintf_internal_r+0xa6c>
 4010988:	dc400d17 	ldw	r17,52(sp)
 401098c:	07010074 	movhi	fp,1025
 4010990:	e71a4984 	addi	fp,fp,26918
 4010994:	9425883a 	add	r18,r18,r16
 4010998:	8c400044 	addi	r17,r17,1
 401099c:	008001c4 	movi	r2,7
 40109a0:	1f000015 	stw	fp,0(r3)
 40109a4:	1c000115 	stw	r16,4(r3)
 40109a8:	dc800e15 	stw	r18,56(sp)
 40109ac:	dc400d15 	stw	r17,52(sp)
 40109b0:	147de216 	blt	r2,r17,401013c <___vfprintf_internal_r+0xb90>
 40109b4:	18c00204 	addi	r3,r3,8
 40109b8:	003c7a06 	br	400fba4 <___vfprintf_internal_r+0x5f8>
 40109bc:	01000084 	movi	r4,2
 40109c0:	d8000405 	stb	zero,16(sp)
 40109c4:	003d8706 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 40109c8:	d9814c17 	ldw	r6,1328(sp)
 40109cc:	30c4703a 	and	r2,r6,r3
 40109d0:	1005003a 	cmpeq	r2,r2,zero
 40109d4:	103cb926 	beq	r2,zero,400fcbc <___vfprintf_internal_r+0x710>
 40109d8:	d9014117 	ldw	r4,1284(sp)
 40109dc:	94800044 	addi	r18,r18,1
 40109e0:	8c400044 	addi	r17,r17,1
 40109e4:	008001c4 	movi	r2,7
 40109e8:	a9000015 	stw	r4,0(r21)
 40109ec:	a8c00115 	stw	r3,4(r21)
 40109f0:	dc800e15 	stw	r18,56(sp)
 40109f4:	dc400d15 	stw	r17,52(sp)
 40109f8:	147e6616 	blt	r2,r17,4010394 <___vfprintf_internal_r+0xde8>
 40109fc:	acc00204 	addi	r19,r21,8
 4010a00:	003cd706 	br	400fd60 <___vfprintf_internal_r+0x7b4>
 4010a04:	07010074 	movhi	fp,1025
 4010a08:	e71a4984 	addi	fp,fp,26918
 4010a0c:	003c4f06 	br	400fb4c <___vfprintf_internal_r+0x5a0>
 4010a10:	dd000f04 	addi	r20,sp,60
 4010a14:	dc801904 	addi	r18,sp,100
 4010a18:	8009883a 	mov	r4,r16
 4010a1c:	880b883a 	mov	r5,r17
 4010a20:	01800284 	movi	r6,10
 4010a24:	000f883a 	mov	r7,zero
 4010a28:	40147a40 	call	40147a4 <__umoddi3>
 4010a2c:	12000c04 	addi	r8,r2,48
 4010a30:	94bfffc4 	addi	r18,r18,-1
 4010a34:	8009883a 	mov	r4,r16
 4010a38:	880b883a 	mov	r5,r17
 4010a3c:	01800284 	movi	r6,10
 4010a40:	000f883a 	mov	r7,zero
 4010a44:	92000005 	stb	r8,0(r18)
 4010a48:	40141c80 	call	40141c8 <__udivdi3>
 4010a4c:	1009883a 	mov	r4,r2
 4010a50:	1021883a 	mov	r16,r2
 4010a54:	18800068 	cmpgeui	r2,r3,1
 4010a58:	1823883a 	mov	r17,r3
 4010a5c:	103fee1e 	bne	r2,zero,4010a18 <___vfprintf_internal_r+0x146c>
 4010a60:	1800021e 	bne	r3,zero,4010a6c <___vfprintf_internal_r+0x14c0>
 4010a64:	00800244 	movi	r2,9
 4010a68:	113feb36 	bltu	r2,r4,4010a18 <___vfprintf_internal_r+0x146c>
 4010a6c:	94bfffc4 	addi	r18,r18,-1
 4010a70:	dc814115 	stw	r18,1284(sp)
 4010a74:	003fc006 	br	4010978 <___vfprintf_internal_r+0x13cc>
 4010a78:	d9014c17 	ldw	r4,1328(sp)
 4010a7c:	2080004c 	andi	r2,r4,1
 4010a80:	10009a1e 	bne	r2,zero,4010cec <___vfprintf_internal_r+0x1740>
 4010a84:	d9401904 	addi	r5,sp,100
 4010a88:	dd000f04 	addi	r20,sp,60
 4010a8c:	d9414115 	stw	r5,1284(sp)
 4010a90:	003d6106 	br	4010018 <___vfprintf_internal_r+0xa6c>
 4010a94:	d9014f17 	ldw	r4,1340(sp)
 4010a98:	b00b883a 	mov	r5,r22
 4010a9c:	d9800c04 	addi	r6,sp,48
 4010aa0:	400f5540 	call	400f554 <__sprint_r>
 4010aa4:	103c791e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010aa8:	dc800e17 	ldw	r18,56(sp)
 4010aac:	d8c01904 	addi	r3,sp,100
 4010ab0:	003cff06 	br	400feb0 <___vfprintf_internal_r+0x904>
 4010ab4:	d8c14c17 	ldw	r3,1328(sp)
 4010ab8:	1880040c 	andi	r2,r3,16
 4010abc:	1000711e 	bne	r2,zero,4010c84 <___vfprintf_internal_r+0x16d8>
 4010ac0:	d9014c17 	ldw	r4,1328(sp)
 4010ac4:	2080100c 	andi	r2,r4,64
 4010ac8:	10006e26 	beq	r2,zero,4010c84 <___vfprintf_internal_r+0x16d8>
 4010acc:	3c00000b 	ldhu	r16,0(r7)
 4010ad0:	0023883a 	mov	r17,zero
 4010ad4:	39c00104 	addi	r7,r7,4
 4010ad8:	d9c14015 	stw	r7,1280(sp)
 4010adc:	003f0006 	br	40106e0 <___vfprintf_internal_r+0x1134>
 4010ae0:	dc400d17 	ldw	r17,52(sp)
 4010ae4:	07010074 	movhi	fp,1025
 4010ae8:	e71a4984 	addi	fp,fp,26918
 4010aec:	9425883a 	add	r18,r18,r16
 4010af0:	8c400044 	addi	r17,r17,1
 4010af4:	008001c4 	movi	r2,7
 4010af8:	1f000015 	stw	fp,0(r3)
 4010afc:	1c000115 	stw	r16,4(r3)
 4010b00:	dc800e15 	stw	r18,56(sp)
 4010b04:	dc400d15 	stw	r17,52(sp)
 4010b08:	147d7616 	blt	r2,r17,40100e4 <___vfprintf_internal_r+0xb38>
 4010b0c:	18c00204 	addi	r3,r3,8
 4010b10:	003d7b06 	br	4010100 <___vfprintf_internal_r+0xb54>
 4010b14:	dc800e17 	ldw	r18,56(sp)
 4010b18:	dc400d17 	ldw	r17,52(sp)
 4010b1c:	07010074 	movhi	fp,1025
 4010b20:	e71a4d84 	addi	fp,fp,26934
 4010b24:	003bc006 	br	400fa28 <___vfprintf_internal_r+0x47c>
 4010b28:	d9014f17 	ldw	r4,1340(sp)
 4010b2c:	b00b883a 	mov	r5,r22
 4010b30:	d9800c04 	addi	r6,sp,48
 4010b34:	400f5540 	call	400f554 <__sprint_r>
 4010b38:	103c541e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010b3c:	dc800e17 	ldw	r18,56(sp)
 4010b40:	d8c01904 	addi	r3,sp,100
 4010b44:	003ce906 	br	400feec <___vfprintf_internal_r+0x940>
 4010b48:	3c000017 	ldw	r16,0(r7)
 4010b4c:	0009883a 	mov	r4,zero
 4010b50:	39c00104 	addi	r7,r7,4
 4010b54:	0023883a 	mov	r17,zero
 4010b58:	d9c14015 	stw	r7,1280(sp)
 4010b5c:	d8000405 	stb	zero,16(sp)
 4010b60:	003d2006 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 4010b64:	38800017 	ldw	r2,0(r7)
 4010b68:	39c00104 	addi	r7,r7,4
 4010b6c:	d9c14015 	stw	r7,1280(sp)
 4010b70:	1023d7fa 	srai	r17,r2,31
 4010b74:	1021883a 	mov	r16,r2
 4010b78:	003d1806 	br	400ffdc <___vfprintf_internal_r+0xa30>
 4010b7c:	3c000017 	ldw	r16,0(r7)
 4010b80:	01000044 	movi	r4,1
 4010b84:	39c00104 	addi	r7,r7,4
 4010b88:	0023883a 	mov	r17,zero
 4010b8c:	d9c14015 	stw	r7,1280(sp)
 4010b90:	d8000405 	stb	zero,16(sp)
 4010b94:	003d1306 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 4010b98:	00810074 	movhi	r2,1025
 4010b9c:	109a4904 	addi	r2,r2,26916
 4010ba0:	94800044 	addi	r18,r18,1
 4010ba4:	8c400044 	addi	r17,r17,1
 4010ba8:	a8800015 	stw	r2,0(r21)
 4010bac:	00c00044 	movi	r3,1
 4010bb0:	008001c4 	movi	r2,7
 4010bb4:	a8c00115 	stw	r3,4(r21)
 4010bb8:	dc800e15 	stw	r18,56(sp)
 4010bbc:	dc400d15 	stw	r17,52(sp)
 4010bc0:	1440ca16 	blt	r2,r17,4010eec <___vfprintf_internal_r+0x1940>
 4010bc4:	a8c00204 	addi	r3,r21,8
 4010bc8:	2000061e 	bne	r4,zero,4010be4 <___vfprintf_internal_r+0x1638>
 4010bcc:	d9414717 	ldw	r5,1308(sp)
 4010bd0:	2800041e 	bne	r5,zero,4010be4 <___vfprintf_internal_r+0x1638>
 4010bd4:	d9814c17 	ldw	r6,1328(sp)
 4010bd8:	3080004c 	andi	r2,r6,1
 4010bdc:	1005003a 	cmpeq	r2,r2,zero
 4010be0:	103bf01e 	bne	r2,zero,400fba4 <___vfprintf_internal_r+0x5f8>
 4010be4:	00800044 	movi	r2,1
 4010be8:	dc400d17 	ldw	r17,52(sp)
 4010bec:	18800115 	stw	r2,4(r3)
 4010bf0:	d8814917 	ldw	r2,1316(sp)
 4010bf4:	94800044 	addi	r18,r18,1
 4010bf8:	8c400044 	addi	r17,r17,1
 4010bfc:	18800015 	stw	r2,0(r3)
 4010c00:	008001c4 	movi	r2,7
 4010c04:	dc800e15 	stw	r18,56(sp)
 4010c08:	dc400d15 	stw	r17,52(sp)
 4010c0c:	1440ca16 	blt	r2,r17,4010f38 <___vfprintf_internal_r+0x198c>
 4010c10:	18c00204 	addi	r3,r3,8
 4010c14:	0121c83a 	sub	r16,zero,r4
 4010c18:	0400500e 	bge	zero,r16,4010d5c <___vfprintf_internal_r+0x17b0>
 4010c1c:	00800404 	movi	r2,16
 4010c20:	1400800e 	bge	r2,r16,4010e24 <___vfprintf_internal_r+0x1878>
 4010c24:	1027883a 	mov	r19,r2
 4010c28:	07010074 	movhi	fp,1025
 4010c2c:	e71a4984 	addi	fp,fp,26918
 4010c30:	050001c4 	movi	r20,7
 4010c34:	00000306 	br	4010c44 <___vfprintf_internal_r+0x1698>
 4010c38:	18c00204 	addi	r3,r3,8
 4010c3c:	843ffc04 	addi	r16,r16,-16
 4010c40:	9c007a0e 	bge	r19,r16,4010e2c <___vfprintf_internal_r+0x1880>
 4010c44:	94800404 	addi	r18,r18,16
 4010c48:	8c400044 	addi	r17,r17,1
 4010c4c:	1f000015 	stw	fp,0(r3)
 4010c50:	1cc00115 	stw	r19,4(r3)
 4010c54:	dc800e15 	stw	r18,56(sp)
 4010c58:	dc400d15 	stw	r17,52(sp)
 4010c5c:	a47ff60e 	bge	r20,r17,4010c38 <___vfprintf_internal_r+0x168c>
 4010c60:	d9014f17 	ldw	r4,1340(sp)
 4010c64:	b00b883a 	mov	r5,r22
 4010c68:	d9800c04 	addi	r6,sp,48
 4010c6c:	400f5540 	call	400f554 <__sprint_r>
 4010c70:	103c061e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010c74:	dc800e17 	ldw	r18,56(sp)
 4010c78:	dc400d17 	ldw	r17,52(sp)
 4010c7c:	d8c01904 	addi	r3,sp,100
 4010c80:	003fee06 	br	4010c3c <___vfprintf_internal_r+0x1690>
 4010c84:	3c000017 	ldw	r16,0(r7)
 4010c88:	0023883a 	mov	r17,zero
 4010c8c:	39c00104 	addi	r7,r7,4
 4010c90:	d9c14015 	stw	r7,1280(sp)
 4010c94:	003e9206 	br	40106e0 <___vfprintf_internal_r+0x1134>
 4010c98:	d9401904 	addi	r5,sp,100
 4010c9c:	dd000f04 	addi	r20,sp,60
 4010ca0:	d9414115 	stw	r5,1284(sp)
 4010ca4:	d9814417 	ldw	r6,1296(sp)
 4010ca8:	880a973a 	slli	r5,r17,28
 4010cac:	8004d13a 	srli	r2,r16,4
 4010cb0:	810003cc 	andi	r4,r16,15
 4010cb4:	3109883a 	add	r4,r6,r4
 4010cb8:	2884b03a 	or	r2,r5,r2
 4010cbc:	21400003 	ldbu	r5,0(r4)
 4010cc0:	d9014117 	ldw	r4,1284(sp)
 4010cc4:	8806d13a 	srli	r3,r17,4
 4010cc8:	1021883a 	mov	r16,r2
 4010ccc:	213fffc4 	addi	r4,r4,-1
 4010cd0:	d9014115 	stw	r4,1284(sp)
 4010cd4:	d9814117 	ldw	r6,1284(sp)
 4010cd8:	10c8b03a 	or	r4,r2,r3
 4010cdc:	1823883a 	mov	r17,r3
 4010ce0:	31400005 	stb	r5,0(r6)
 4010ce4:	203fef1e 	bne	r4,zero,4010ca4 <___vfprintf_internal_r+0x16f8>
 4010ce8:	003ccb06 	br	4010018 <___vfprintf_internal_r+0xa6c>
 4010cec:	00800c04 	movi	r2,48
 4010cf0:	d98018c4 	addi	r6,sp,99
 4010cf4:	dd000f04 	addi	r20,sp,60
 4010cf8:	d88018c5 	stb	r2,99(sp)
 4010cfc:	d9814115 	stw	r6,1284(sp)
 4010d00:	003cc506 	br	4010018 <___vfprintf_internal_r+0xa6c>
 4010d04:	dc400d17 	ldw	r17,52(sp)
 4010d08:	07010074 	movhi	fp,1025
 4010d0c:	e71a4d84 	addi	fp,fp,26934
 4010d10:	003bc706 	br	400fc30 <___vfprintf_internal_r+0x684>
 4010d14:	d9414c17 	ldw	r5,1328(sp)
 4010d18:	2880040c 	andi	r2,r5,16
 4010d1c:	10007c26 	beq	r2,zero,4010f10 <___vfprintf_internal_r+0x1964>
 4010d20:	38800017 	ldw	r2,0(r7)
 4010d24:	39c00104 	addi	r7,r7,4
 4010d28:	d9c14015 	stw	r7,1280(sp)
 4010d2c:	d9814b17 	ldw	r6,1324(sp)
 4010d30:	d9c14017 	ldw	r7,1280(sp)
 4010d34:	11800015 	stw	r6,0(r2)
 4010d38:	003a7806 	br	400f71c <___vfprintf_internal_r+0x170>
 4010d3c:	d9014f17 	ldw	r4,1340(sp)
 4010d40:	b00b883a 	mov	r5,r22
 4010d44:	d9800c04 	addi	r6,sp,48
 4010d48:	400f5540 	call	400f554 <__sprint_r>
 4010d4c:	103bcf1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010d50:	dc800e17 	ldw	r18,56(sp)
 4010d54:	dc400d17 	ldw	r17,52(sp)
 4010d58:	d8c01904 	addi	r3,sp,100
 4010d5c:	d9014717 	ldw	r4,1308(sp)
 4010d60:	d9414117 	ldw	r5,1284(sp)
 4010d64:	8c400044 	addi	r17,r17,1
 4010d68:	9125883a 	add	r18,r18,r4
 4010d6c:	008001c4 	movi	r2,7
 4010d70:	19400015 	stw	r5,0(r3)
 4010d74:	19000115 	stw	r4,4(r3)
 4010d78:	dc800e15 	stw	r18,56(sp)
 4010d7c:	dc400d15 	stw	r17,52(sp)
 4010d80:	147cee16 	blt	r2,r17,401013c <___vfprintf_internal_r+0xb90>
 4010d84:	18c00204 	addi	r3,r3,8
 4010d88:	003b8606 	br	400fba4 <___vfprintf_internal_r+0x5f8>
 4010d8c:	38c00017 	ldw	r3,0(r7)
 4010d90:	39000204 	addi	r4,r7,8
 4010d94:	d9014015 	stw	r4,1280(sp)
 4010d98:	d8c14215 	stw	r3,1288(sp)
 4010d9c:	39c00117 	ldw	r7,4(r7)
 4010da0:	d9c14315 	stw	r7,1292(sp)
 4010da4:	003e2006 	br	4010628 <___vfprintf_internal_r+0x107c>
 4010da8:	0005883a 	mov	r2,zero
 4010dac:	1409c83a 	sub	r4,r2,r16
 4010db0:	1105803a 	cmpltu	r2,r2,r4
 4010db4:	044bc83a 	sub	r5,zero,r17
 4010db8:	2885c83a 	sub	r2,r5,r2
 4010dbc:	2021883a 	mov	r16,r4
 4010dc0:	1023883a 	mov	r17,r2
 4010dc4:	01000044 	movi	r4,1
 4010dc8:	00800b44 	movi	r2,45
 4010dcc:	d8800405 	stb	r2,16(sp)
 4010dd0:	003c8406 	br	400ffe4 <___vfprintf_internal_r+0xa38>
 4010dd4:	d9014f17 	ldw	r4,1340(sp)
 4010dd8:	b00b883a 	mov	r5,r22
 4010ddc:	d9800c04 	addi	r6,sp,48
 4010de0:	400f5540 	call	400f554 <__sprint_r>
 4010de4:	103ba91e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010de8:	dc800e17 	ldw	r18,56(sp)
 4010dec:	dc400d17 	ldw	r17,52(sp)
 4010df0:	d9000517 	ldw	r4,20(sp)
 4010df4:	d9401904 	addi	r5,sp,100
 4010df8:	003da706 	br	4010498 <___vfprintf_internal_r+0xeec>
 4010dfc:	d9014f17 	ldw	r4,1340(sp)
 4010e00:	b00b883a 	mov	r5,r22
 4010e04:	d9800c04 	addi	r6,sp,48
 4010e08:	400f5540 	call	400f554 <__sprint_r>
 4010e0c:	103b9f1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010e10:	dc800e17 	ldw	r18,56(sp)
 4010e14:	dc400d17 	ldw	r17,52(sp)
 4010e18:	d9000517 	ldw	r4,20(sp)
 4010e1c:	d8c01904 	addi	r3,sp,100
 4010e20:	003d9106 	br	4010468 <___vfprintf_internal_r+0xebc>
 4010e24:	07010074 	movhi	fp,1025
 4010e28:	e71a4984 	addi	fp,fp,26918
 4010e2c:	9425883a 	add	r18,r18,r16
 4010e30:	8c400044 	addi	r17,r17,1
 4010e34:	008001c4 	movi	r2,7
 4010e38:	1f000015 	stw	fp,0(r3)
 4010e3c:	1c000115 	stw	r16,4(r3)
 4010e40:	dc800e15 	stw	r18,56(sp)
 4010e44:	dc400d15 	stw	r17,52(sp)
 4010e48:	147fbc16 	blt	r2,r17,4010d3c <___vfprintf_internal_r+0x1790>
 4010e4c:	18c00204 	addi	r3,r3,8
 4010e50:	003fc206 	br	4010d5c <___vfprintf_internal_r+0x17b0>
 4010e54:	d9014f17 	ldw	r4,1340(sp)
 4010e58:	b00b883a 	mov	r5,r22
 4010e5c:	d9800c04 	addi	r6,sp,48
 4010e60:	400f5540 	call	400f554 <__sprint_r>
 4010e64:	103b891e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010e68:	dc800e17 	ldw	r18,56(sp)
 4010e6c:	d9000517 	ldw	r4,20(sp)
 4010e70:	d8c01904 	addi	r3,sp,100
 4010e74:	003d0206 	br	4010280 <___vfprintf_internal_r+0xcd4>
 4010e78:	07010074 	movhi	fp,1025
 4010e7c:	e71a4984 	addi	fp,fp,26918
 4010e80:	003be406 	br	400fe14 <___vfprintf_internal_r+0x868>
 4010e84:	00810074 	movhi	r2,1025
 4010e88:	109a3804 	addi	r2,r2,26848
 4010e8c:	d8814115 	stw	r2,1284(sp)
 4010e90:	003df506 	br	4010668 <___vfprintf_internal_r+0x10bc>
 4010e94:	d9014217 	ldw	r4,1288(sp)
 4010e98:	d9414317 	ldw	r5,1292(sp)
 4010e9c:	40140280 	call	4014028 <__isnand>
 4010ea0:	10003926 	beq	r2,zero,4010f88 <___vfprintf_internal_r+0x19dc>
 4010ea4:	d9414d17 	ldw	r5,1332(sp)
 4010ea8:	008011c4 	movi	r2,71
 4010eac:	1140ce16 	blt	r2,r5,40111e8 <___vfprintf_internal_r+0x1c3c>
 4010eb0:	01810074 	movhi	r6,1025
 4010eb4:	319a3904 	addi	r6,r6,26852
 4010eb8:	d9814115 	stw	r6,1284(sp)
 4010ebc:	003dea06 	br	4010668 <___vfprintf_internal_r+0x10bc>
 4010ec0:	d9014c17 	ldw	r4,1328(sp)
 4010ec4:	bdc00044 	addi	r23,r23,1
 4010ec8:	b8c00007 	ldb	r3,0(r23)
 4010ecc:	21000814 	ori	r4,r4,32
 4010ed0:	d9014c15 	stw	r4,1328(sp)
 4010ed4:	003a3406 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 4010ed8:	dcc14515 	stw	r19,1300(sp)
 4010edc:	98011016 	blt	r19,zero,4011320 <___vfprintf_internal_r+0x1d74>
 4010ee0:	980f883a 	mov	r7,r19
 4010ee4:	d8014615 	stw	zero,1304(sp)
 4010ee8:	003c5206 	br	4010034 <___vfprintf_internal_r+0xa88>
 4010eec:	d9014f17 	ldw	r4,1340(sp)
 4010ef0:	b00b883a 	mov	r5,r22
 4010ef4:	d9800c04 	addi	r6,sp,48
 4010ef8:	400f5540 	call	400f554 <__sprint_r>
 4010efc:	103b631e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010f00:	dc800e17 	ldw	r18,56(sp)
 4010f04:	d9000517 	ldw	r4,20(sp)
 4010f08:	d8c01904 	addi	r3,sp,100
 4010f0c:	003f2e06 	br	4010bc8 <___vfprintf_internal_r+0x161c>
 4010f10:	d8c14c17 	ldw	r3,1328(sp)
 4010f14:	1880100c 	andi	r2,r3,64
 4010f18:	1000a026 	beq	r2,zero,401119c <___vfprintf_internal_r+0x1bf0>
 4010f1c:	38800017 	ldw	r2,0(r7)
 4010f20:	39c00104 	addi	r7,r7,4
 4010f24:	d9c14015 	stw	r7,1280(sp)
 4010f28:	d9014b17 	ldw	r4,1324(sp)
 4010f2c:	d9c14017 	ldw	r7,1280(sp)
 4010f30:	1100000d 	sth	r4,0(r2)
 4010f34:	0039f906 	br	400f71c <___vfprintf_internal_r+0x170>
 4010f38:	d9014f17 	ldw	r4,1340(sp)
 4010f3c:	b00b883a 	mov	r5,r22
 4010f40:	d9800c04 	addi	r6,sp,48
 4010f44:	400f5540 	call	400f554 <__sprint_r>
 4010f48:	103b501e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4010f4c:	dc800e17 	ldw	r18,56(sp)
 4010f50:	dc400d17 	ldw	r17,52(sp)
 4010f54:	d9000517 	ldw	r4,20(sp)
 4010f58:	d8c01904 	addi	r3,sp,100
 4010f5c:	003f2d06 	br	4010c14 <___vfprintf_internal_r+0x1668>
 4010f60:	00800184 	movi	r2,6
 4010f64:	14c09a36 	bltu	r2,r19,40111d0 <___vfprintf_internal_r+0x1c24>
 4010f68:	dcc14515 	stw	r19,1300(sp)
 4010f6c:	9800010e 	bge	r19,zero,4010f74 <___vfprintf_internal_r+0x19c8>
 4010f70:	d8014515 	stw	zero,1300(sp)
 4010f74:	00810074 	movhi	r2,1025
 4010f78:	109a3b04 	addi	r2,r2,26860
 4010f7c:	980f883a 	mov	r7,r19
 4010f80:	d8814115 	stw	r2,1284(sp)
 4010f84:	003a7806 	br	400f968 <___vfprintf_internal_r+0x3bc>
 4010f88:	00bfffc4 	movi	r2,-1
 4010f8c:	9880e226 	beq	r19,r2,4011318 <___vfprintf_internal_r+0x1d6c>
 4010f90:	d9414d17 	ldw	r5,1332(sp)
 4010f94:	008019c4 	movi	r2,103
 4010f98:	2880dc26 	beq	r5,r2,401130c <___vfprintf_internal_r+0x1d60>
 4010f9c:	008011c4 	movi	r2,71
 4010fa0:	2880da26 	beq	r5,r2,401130c <___vfprintf_internal_r+0x1d60>
 4010fa4:	d9414c17 	ldw	r5,1328(sp)
 4010fa8:	d9014317 	ldw	r4,1292(sp)
 4010fac:	d9814217 	ldw	r6,1288(sp)
 4010fb0:	29404014 	ori	r5,r5,256
 4010fb4:	d9414c15 	stw	r5,1328(sp)
 4010fb8:	2000cc16 	blt	r4,zero,40112ec <___vfprintf_internal_r+0x1d40>
 4010fbc:	3021883a 	mov	r16,r6
 4010fc0:	2023883a 	mov	r17,r4
 4010fc4:	0039883a 	mov	fp,zero
 4010fc8:	d9414d17 	ldw	r5,1332(sp)
 4010fcc:	00801984 	movi	r2,102
 4010fd0:	2880b726 	beq	r5,r2,40112b0 <___vfprintf_internal_r+0x1d04>
 4010fd4:	00801184 	movi	r2,70
 4010fd8:	2880b526 	beq	r5,r2,40112b0 <___vfprintf_internal_r+0x1d04>
 4010fdc:	00801944 	movi	r2,101
 4010fe0:	2880c826 	beq	r5,r2,4011304 <___vfprintf_internal_r+0x1d58>
 4010fe4:	00801144 	movi	r2,69
 4010fe8:	2880c626 	beq	r5,r2,4011304 <___vfprintf_internal_r+0x1d58>
 4010fec:	9829883a 	mov	r20,r19
 4010ff0:	d9014f17 	ldw	r4,1340(sp)
 4010ff4:	d8800504 	addi	r2,sp,20
 4010ff8:	880d883a 	mov	r6,r17
 4010ffc:	d8800115 	stw	r2,4(sp)
 4011000:	d8c00604 	addi	r3,sp,24
 4011004:	d8800704 	addi	r2,sp,28
 4011008:	800b883a 	mov	r5,r16
 401100c:	01c00084 	movi	r7,2
 4011010:	d8c00215 	stw	r3,8(sp)
 4011014:	d8800315 	stw	r2,12(sp)
 4011018:	dd000015 	stw	r20,0(sp)
 401101c:	401197c0 	call	401197c <_dtoa_r>
 4011020:	d9814d17 	ldw	r6,1332(sp)
 4011024:	d8814115 	stw	r2,1284(sp)
 4011028:	008019c4 	movi	r2,103
 401102c:	30809526 	beq	r6,r2,4011284 <___vfprintf_internal_r+0x1cd8>
 4011030:	d8c14d17 	ldw	r3,1332(sp)
 4011034:	008011c4 	movi	r2,71
 4011038:	18809226 	beq	r3,r2,4011284 <___vfprintf_internal_r+0x1cd8>
 401103c:	d9414117 	ldw	r5,1284(sp)
 4011040:	d9814d17 	ldw	r6,1332(sp)
 4011044:	00801984 	movi	r2,102
 4011048:	2d25883a 	add	r18,r5,r20
 401104c:	30808626 	beq	r6,r2,4011268 <___vfprintf_internal_r+0x1cbc>
 4011050:	00801184 	movi	r2,70
 4011054:	30808426 	beq	r6,r2,4011268 <___vfprintf_internal_r+0x1cbc>
 4011058:	000d883a 	mov	r6,zero
 401105c:	000f883a 	mov	r7,zero
 4011060:	880b883a 	mov	r5,r17
 4011064:	8009883a 	mov	r4,r16
 4011068:	40158740 	call	4015874 <__eqdf2>
 401106c:	1000751e 	bne	r2,zero,4011244 <___vfprintf_internal_r+0x1c98>
 4011070:	9005883a 	mov	r2,r18
 4011074:	dc800715 	stw	r18,28(sp)
 4011078:	d9014117 	ldw	r4,1284(sp)
 401107c:	d9414d17 	ldw	r5,1332(sp)
 4011080:	00c019c4 	movi	r3,103
 4011084:	1125c83a 	sub	r18,r2,r4
 4011088:	28c06826 	beq	r5,r3,401122c <___vfprintf_internal_r+0x1c80>
 401108c:	008011c4 	movi	r2,71
 4011090:	28806626 	beq	r5,r2,401122c <___vfprintf_internal_r+0x1c80>
 4011094:	d9000517 	ldw	r4,20(sp)
 4011098:	d8c14d17 	ldw	r3,1332(sp)
 401109c:	00801944 	movi	r2,101
 40110a0:	10c05516 	blt	r2,r3,40111f8 <___vfprintf_internal_r+0x1c4c>
 40110a4:	213fffc4 	addi	r4,r4,-1
 40110a8:	d9000515 	stw	r4,20(sp)
 40110ac:	d8c00805 	stb	r3,32(sp)
 40110b0:	2021883a 	mov	r16,r4
 40110b4:	2000c116 	blt	r4,zero,40113bc <___vfprintf_internal_r+0x1e10>
 40110b8:	00800ac4 	movi	r2,43
 40110bc:	d8800845 	stb	r2,33(sp)
 40110c0:	00800244 	movi	r2,9
 40110c4:	1400af0e 	bge	r2,r16,4011384 <___vfprintf_internal_r+0x1dd8>
 40110c8:	1027883a 	mov	r19,r2
 40110cc:	dc400b84 	addi	r17,sp,46
 40110d0:	8009883a 	mov	r4,r16
 40110d4:	01400284 	movi	r5,10
 40110d8:	4015f5c0 	call	4015f5c <__modsi3>
 40110dc:	10800c04 	addi	r2,r2,48
 40110e0:	8c7fffc4 	addi	r17,r17,-1
 40110e4:	8009883a 	mov	r4,r16
 40110e8:	01400284 	movi	r5,10
 40110ec:	88800005 	stb	r2,0(r17)
 40110f0:	4015efc0 	call	4015efc <__divsi3>
 40110f4:	1021883a 	mov	r16,r2
 40110f8:	98bff516 	blt	r19,r2,40110d0 <___vfprintf_internal_r+0x1b24>
 40110fc:	10c00c04 	addi	r3,r2,48
 4011100:	d88009c4 	addi	r2,sp,39
 4011104:	108001c4 	addi	r2,r2,7
 4011108:	897fffc4 	addi	r5,r17,-1
 401110c:	88ffffc5 	stb	r3,-1(r17)
 4011110:	2880a72e 	bgeu	r5,r2,40113b0 <___vfprintf_internal_r+0x1e04>
 4011114:	1009883a 	mov	r4,r2
 4011118:	d9800804 	addi	r6,sp,32
 401111c:	d8c00884 	addi	r3,sp,34
 4011120:	28800003 	ldbu	r2,0(r5)
 4011124:	29400044 	addi	r5,r5,1
 4011128:	18800005 	stb	r2,0(r3)
 401112c:	18c00044 	addi	r3,r3,1
 4011130:	293ffb36 	bltu	r5,r4,4011120 <___vfprintf_internal_r+0x1b74>
 4011134:	1987c83a 	sub	r3,r3,r6
 4011138:	00800044 	movi	r2,1
 401113c:	d8c14815 	stw	r3,1312(sp)
 4011140:	90cf883a 	add	r7,r18,r3
 4011144:	1480960e 	bge	r2,r18,40113a0 <___vfprintf_internal_r+0x1df4>
 4011148:	39c00044 	addi	r7,r7,1
 401114c:	d9c14515 	stw	r7,1300(sp)
 4011150:	38003416 	blt	r7,zero,4011224 <___vfprintf_internal_r+0x1c78>
 4011154:	e0803fcc 	andi	r2,fp,255
 4011158:	1080201c 	xori	r2,r2,128
 401115c:	10bfe004 	addi	r2,r2,-128
 4011160:	10004e26 	beq	r2,zero,401129c <___vfprintf_internal_r+0x1cf0>
 4011164:	00800b44 	movi	r2,45
 4011168:	dc814715 	stw	r18,1308(sp)
 401116c:	d8014615 	stw	zero,1304(sp)
 4011170:	d8800405 	stb	r2,16(sp)
 4011174:	003bb106 	br	401003c <___vfprintf_internal_r+0xa90>
 4011178:	00800b44 	movi	r2,45
 401117c:	d8800405 	stb	r2,16(sp)
 4011180:	003d3306 	br	4010650 <___vfprintf_internal_r+0x10a4>
 4011184:	d9014f17 	ldw	r4,1340(sp)
 4011188:	b00b883a 	mov	r5,r22
 401118c:	d9800c04 	addi	r6,sp,48
 4011190:	400f5540 	call	400f554 <__sprint_r>
 4011194:	103abd1e 	bne	r2,zero,400fc8c <___vfprintf_internal_r+0x6e0>
 4011198:	003abb06 	br	400fc88 <___vfprintf_internal_r+0x6dc>
 401119c:	38800017 	ldw	r2,0(r7)
 40111a0:	39c00104 	addi	r7,r7,4
 40111a4:	d9c14015 	stw	r7,1280(sp)
 40111a8:	d9414b17 	ldw	r5,1324(sp)
 40111ac:	d9c14017 	ldw	r7,1280(sp)
 40111b0:	11400015 	stw	r5,0(r2)
 40111b4:	00395906 	br	400f71c <___vfprintf_internal_r+0x170>
 40111b8:	980f883a 	mov	r7,r19
 40111bc:	dcc14515 	stw	r19,1300(sp)
 40111c0:	d8014615 	stw	zero,1304(sp)
 40111c4:	003b9b06 	br	4010034 <___vfprintf_internal_r+0xa88>
 40111c8:	0027883a 	mov	r19,zero
 40111cc:	00397806 	br	400f7b0 <___vfprintf_internal_r+0x204>
 40111d0:	00c10074 	movhi	r3,1025
 40111d4:	18da3b04 	addi	r3,r3,26860
 40111d8:	100f883a 	mov	r7,r2
 40111dc:	d8814515 	stw	r2,1300(sp)
 40111e0:	d8c14115 	stw	r3,1284(sp)
 40111e4:	0039e006 	br	400f968 <___vfprintf_internal_r+0x3bc>
 40111e8:	00810074 	movhi	r2,1025
 40111ec:	109a3a04 	addi	r2,r2,26856
 40111f0:	d8814115 	stw	r2,1284(sp)
 40111f4:	003d1c06 	br	4010668 <___vfprintf_internal_r+0x10bc>
 40111f8:	d9414d17 	ldw	r5,1332(sp)
 40111fc:	00801984 	movi	r2,102
 4011200:	28804926 	beq	r5,r2,4011328 <___vfprintf_internal_r+0x1d7c>
 4011204:	200f883a 	mov	r7,r4
 4011208:	24805716 	blt	r4,r18,4011368 <___vfprintf_internal_r+0x1dbc>
 401120c:	d9414c17 	ldw	r5,1328(sp)
 4011210:	2880004c 	andi	r2,r5,1
 4011214:	10000126 	beq	r2,zero,401121c <___vfprintf_internal_r+0x1c70>
 4011218:	21c00044 	addi	r7,r4,1
 401121c:	d9c14515 	stw	r7,1300(sp)
 4011220:	383fcc0e 	bge	r7,zero,4011154 <___vfprintf_internal_r+0x1ba8>
 4011224:	d8014515 	stw	zero,1300(sp)
 4011228:	003fca06 	br	4011154 <___vfprintf_internal_r+0x1ba8>
 401122c:	d9000517 	ldw	r4,20(sp)
 4011230:	00bfff04 	movi	r2,-4
 4011234:	1100480e 	bge	r2,r4,4011358 <___vfprintf_internal_r+0x1dac>
 4011238:	99004716 	blt	r19,r4,4011358 <___vfprintf_internal_r+0x1dac>
 401123c:	d8c14d15 	stw	r3,1332(sp)
 4011240:	003ff006 	br	4011204 <___vfprintf_internal_r+0x1c58>
 4011244:	d8800717 	ldw	r2,28(sp)
 4011248:	14bf8b2e 	bgeu	r2,r18,4011078 <___vfprintf_internal_r+0x1acc>
 401124c:	9007883a 	mov	r3,r18
 4011250:	01000c04 	movi	r4,48
 4011254:	11000005 	stb	r4,0(r2)
 4011258:	10800044 	addi	r2,r2,1
 401125c:	d8800715 	stw	r2,28(sp)
 4011260:	18bffc1e 	bne	r3,r2,4011254 <___vfprintf_internal_r+0x1ca8>
 4011264:	003f8406 	br	4011078 <___vfprintf_internal_r+0x1acc>
 4011268:	d8814117 	ldw	r2,1284(sp)
 401126c:	10c00007 	ldb	r3,0(r2)
 4011270:	00800c04 	movi	r2,48
 4011274:	18805b26 	beq	r3,r2,40113e4 <___vfprintf_internal_r+0x1e38>
 4011278:	d9000517 	ldw	r4,20(sp)
 401127c:	9125883a 	add	r18,r18,r4
 4011280:	003f7506 	br	4011058 <___vfprintf_internal_r+0x1aac>
 4011284:	d9014c17 	ldw	r4,1328(sp)
 4011288:	2080004c 	andi	r2,r4,1
 401128c:	1005003a 	cmpeq	r2,r2,zero
 4011290:	103f6a26 	beq	r2,zero,401103c <___vfprintf_internal_r+0x1a90>
 4011294:	d8800717 	ldw	r2,28(sp)
 4011298:	003f7706 	br	4011078 <___vfprintf_internal_r+0x1acc>
 401129c:	d9c14515 	stw	r7,1300(sp)
 40112a0:	38004d16 	blt	r7,zero,40113d8 <___vfprintf_internal_r+0x1e2c>
 40112a4:	dc814715 	stw	r18,1308(sp)
 40112a8:	d8014615 	stw	zero,1304(sp)
 40112ac:	003b6106 	br	4010034 <___vfprintf_internal_r+0xa88>
 40112b0:	d9014f17 	ldw	r4,1340(sp)
 40112b4:	d8800504 	addi	r2,sp,20
 40112b8:	d8800115 	stw	r2,4(sp)
 40112bc:	d8c00604 	addi	r3,sp,24
 40112c0:	d8800704 	addi	r2,sp,28
 40112c4:	800b883a 	mov	r5,r16
 40112c8:	880d883a 	mov	r6,r17
 40112cc:	01c000c4 	movi	r7,3
 40112d0:	d8c00215 	stw	r3,8(sp)
 40112d4:	d8800315 	stw	r2,12(sp)
 40112d8:	dcc00015 	stw	r19,0(sp)
 40112dc:	9829883a 	mov	r20,r19
 40112e0:	401197c0 	call	401197c <_dtoa_r>
 40112e4:	d8814115 	stw	r2,1284(sp)
 40112e8:	003f5106 	br	4011030 <___vfprintf_internal_r+0x1a84>
 40112ec:	d8c14217 	ldw	r3,1288(sp)
 40112f0:	d9014317 	ldw	r4,1292(sp)
 40112f4:	07000b44 	movi	fp,45
 40112f8:	1821883a 	mov	r16,r3
 40112fc:	2460003c 	xorhi	r17,r4,32768
 4011300:	003f3106 	br	4010fc8 <___vfprintf_internal_r+0x1a1c>
 4011304:	9d000044 	addi	r20,r19,1
 4011308:	003f3906 	br	4010ff0 <___vfprintf_internal_r+0x1a44>
 401130c:	983f251e 	bne	r19,zero,4010fa4 <___vfprintf_internal_r+0x19f8>
 4011310:	04c00044 	movi	r19,1
 4011314:	003f2306 	br	4010fa4 <___vfprintf_internal_r+0x19f8>
 4011318:	04c00184 	movi	r19,6
 401131c:	003f2106 	br	4010fa4 <___vfprintf_internal_r+0x19f8>
 4011320:	d8014515 	stw	zero,1300(sp)
 4011324:	003eee06 	br	4010ee0 <___vfprintf_internal_r+0x1934>
 4011328:	200f883a 	mov	r7,r4
 401132c:	0100370e 	bge	zero,r4,401140c <___vfprintf_internal_r+0x1e60>
 4011330:	9800031e 	bne	r19,zero,4011340 <___vfprintf_internal_r+0x1d94>
 4011334:	d9814c17 	ldw	r6,1328(sp)
 4011338:	3080004c 	andi	r2,r6,1
 401133c:	103fb726 	beq	r2,zero,401121c <___vfprintf_internal_r+0x1c70>
 4011340:	20800044 	addi	r2,r4,1
 4011344:	98a7883a 	add	r19,r19,r2
 4011348:	dcc14515 	stw	r19,1300(sp)
 401134c:	980f883a 	mov	r7,r19
 4011350:	983f800e 	bge	r19,zero,4011154 <___vfprintf_internal_r+0x1ba8>
 4011354:	003fb306 	br	4011224 <___vfprintf_internal_r+0x1c78>
 4011358:	d9814d17 	ldw	r6,1332(sp)
 401135c:	31bfff84 	addi	r6,r6,-2
 4011360:	d9814d15 	stw	r6,1332(sp)
 4011364:	003f4c06 	br	4011098 <___vfprintf_internal_r+0x1aec>
 4011368:	0100180e 	bge	zero,r4,40113cc <___vfprintf_internal_r+0x1e20>
 401136c:	00800044 	movi	r2,1
 4011370:	1485883a 	add	r2,r2,r18
 4011374:	d8814515 	stw	r2,1300(sp)
 4011378:	100f883a 	mov	r7,r2
 401137c:	103f750e 	bge	r2,zero,4011154 <___vfprintf_internal_r+0x1ba8>
 4011380:	003fa806 	br	4011224 <___vfprintf_internal_r+0x1c78>
 4011384:	80c00c04 	addi	r3,r16,48
 4011388:	00800c04 	movi	r2,48
 401138c:	d8c008c5 	stb	r3,35(sp)
 4011390:	d9800804 	addi	r6,sp,32
 4011394:	d8c00904 	addi	r3,sp,36
 4011398:	d8800885 	stb	r2,34(sp)
 401139c:	003f6506 	br	4011134 <___vfprintf_internal_r+0x1b88>
 40113a0:	d9014c17 	ldw	r4,1328(sp)
 40113a4:	2084703a 	and	r2,r4,r2
 40113a8:	103f9c26 	beq	r2,zero,401121c <___vfprintf_internal_r+0x1c70>
 40113ac:	003f6606 	br	4011148 <___vfprintf_internal_r+0x1b9c>
 40113b0:	d9800804 	addi	r6,sp,32
 40113b4:	d8c00884 	addi	r3,sp,34
 40113b8:	003f5e06 	br	4011134 <___vfprintf_internal_r+0x1b88>
 40113bc:	00800b44 	movi	r2,45
 40113c0:	0121c83a 	sub	r16,zero,r4
 40113c4:	d8800845 	stb	r2,33(sp)
 40113c8:	003f3d06 	br	40110c0 <___vfprintf_internal_r+0x1b14>
 40113cc:	00800084 	movi	r2,2
 40113d0:	1105c83a 	sub	r2,r2,r4
 40113d4:	003fe606 	br	4011370 <___vfprintf_internal_r+0x1dc4>
 40113d8:	d8014515 	stw	zero,1300(sp)
 40113dc:	dc814715 	stw	r18,1308(sp)
 40113e0:	003fb106 	br	40112a8 <___vfprintf_internal_r+0x1cfc>
 40113e4:	000d883a 	mov	r6,zero
 40113e8:	000f883a 	mov	r7,zero
 40113ec:	8009883a 	mov	r4,r16
 40113f0:	880b883a 	mov	r5,r17
 40113f4:	40158fc0 	call	40158fc <__nedf2>
 40113f8:	103f9f26 	beq	r2,zero,4011278 <___vfprintf_internal_r+0x1ccc>
 40113fc:	00800044 	movi	r2,1
 4011400:	1509c83a 	sub	r4,r2,r20
 4011404:	d9000515 	stw	r4,20(sp)
 4011408:	003f9b06 	br	4011278 <___vfprintf_internal_r+0x1ccc>
 401140c:	98000d1e 	bne	r19,zero,4011444 <___vfprintf_internal_r+0x1e98>
 4011410:	d8c14c17 	ldw	r3,1328(sp)
 4011414:	1880004c 	andi	r2,r3,1
 4011418:	10000a1e 	bne	r2,zero,4011444 <___vfprintf_internal_r+0x1e98>
 401141c:	01000044 	movi	r4,1
 4011420:	200f883a 	mov	r7,r4
 4011424:	d9014515 	stw	r4,1300(sp)
 4011428:	003f4a06 	br	4011154 <___vfprintf_internal_r+0x1ba8>
 401142c:	3cc00017 	ldw	r19,0(r7)
 4011430:	39c00104 	addi	r7,r7,4
 4011434:	983d0e0e 	bge	r19,zero,4010870 <___vfprintf_internal_r+0x12c4>
 4011438:	b8c00007 	ldb	r3,0(r23)
 401143c:	04ffffc4 	movi	r19,-1
 4011440:	0038d906 	br	400f7a8 <___vfprintf_internal_r+0x1fc>
 4011444:	9cc00084 	addi	r19,r19,2
 4011448:	dcc14515 	stw	r19,1300(sp)
 401144c:	980f883a 	mov	r7,r19
 4011450:	983f400e 	bge	r19,zero,4011154 <___vfprintf_internal_r+0x1ba8>
 4011454:	003f7306 	br	4011224 <___vfprintf_internal_r+0x1c78>

04011458 <__vfprintf_internal>:
 4011458:	008100b4 	movhi	r2,1026
 401145c:	10a1b704 	addi	r2,r2,-31012
 4011460:	2013883a 	mov	r9,r4
 4011464:	11000017 	ldw	r4,0(r2)
 4011468:	2805883a 	mov	r2,r5
 401146c:	300f883a 	mov	r7,r6
 4011470:	480b883a 	mov	r5,r9
 4011474:	100d883a 	mov	r6,r2
 4011478:	400f5ac1 	jmpi	400f5ac <___vfprintf_internal_r>

0401147c <__register_exitproc>:
 401147c:	defffa04 	addi	sp,sp,-24
 4011480:	008100b4 	movhi	r2,1026
 4011484:	10a1b804 	addi	r2,r2,-31008
 4011488:	dc000015 	stw	r16,0(sp)
 401148c:	14000017 	ldw	r16,0(r2)
 4011490:	dd000415 	stw	r20,16(sp)
 4011494:	2829883a 	mov	r20,r5
 4011498:	81405217 	ldw	r5,328(r16)
 401149c:	dcc00315 	stw	r19,12(sp)
 40114a0:	dc800215 	stw	r18,8(sp)
 40114a4:	dc400115 	stw	r17,4(sp)
 40114a8:	dfc00515 	stw	ra,20(sp)
 40114ac:	2023883a 	mov	r17,r4
 40114b0:	3027883a 	mov	r19,r6
 40114b4:	3825883a 	mov	r18,r7
 40114b8:	28002526 	beq	r5,zero,4011550 <__register_exitproc+0xd4>
 40114bc:	29000117 	ldw	r4,4(r5)
 40114c0:	008007c4 	movi	r2,31
 40114c4:	11002716 	blt	r2,r4,4011564 <__register_exitproc+0xe8>
 40114c8:	8800101e 	bne	r17,zero,401150c <__register_exitproc+0x90>
 40114cc:	2105883a 	add	r2,r4,r4
 40114d0:	1085883a 	add	r2,r2,r2
 40114d4:	20c00044 	addi	r3,r4,1
 40114d8:	1145883a 	add	r2,r2,r5
 40114dc:	0009883a 	mov	r4,zero
 40114e0:	15000215 	stw	r20,8(r2)
 40114e4:	28c00115 	stw	r3,4(r5)
 40114e8:	2005883a 	mov	r2,r4
 40114ec:	dfc00517 	ldw	ra,20(sp)
 40114f0:	dd000417 	ldw	r20,16(sp)
 40114f4:	dcc00317 	ldw	r19,12(sp)
 40114f8:	dc800217 	ldw	r18,8(sp)
 40114fc:	dc400117 	ldw	r17,4(sp)
 4011500:	dc000017 	ldw	r16,0(sp)
 4011504:	dec00604 	addi	sp,sp,24
 4011508:	f800283a 	ret
 401150c:	29802204 	addi	r6,r5,136
 4011510:	00800044 	movi	r2,1
 4011514:	110e983a 	sll	r7,r2,r4
 4011518:	30c04017 	ldw	r3,256(r6)
 401151c:	2105883a 	add	r2,r4,r4
 4011520:	1085883a 	add	r2,r2,r2
 4011524:	1185883a 	add	r2,r2,r6
 4011528:	19c6b03a 	or	r3,r3,r7
 401152c:	14802015 	stw	r18,128(r2)
 4011530:	14c00015 	stw	r19,0(r2)
 4011534:	00800084 	movi	r2,2
 4011538:	30c04015 	stw	r3,256(r6)
 401153c:	88bfe31e 	bne	r17,r2,40114cc <__register_exitproc+0x50>
 4011540:	30804117 	ldw	r2,260(r6)
 4011544:	11c4b03a 	or	r2,r2,r7
 4011548:	30804115 	stw	r2,260(r6)
 401154c:	003fdf06 	br	40114cc <__register_exitproc+0x50>
 4011550:	008100b4 	movhi	r2,1026
 4011554:	108f6f04 	addi	r2,r2,15804
 4011558:	100b883a 	mov	r5,r2
 401155c:	80805215 	stw	r2,328(r16)
 4011560:	003fd606 	br	40114bc <__register_exitproc+0x40>
 4011564:	00800034 	movhi	r2,0
 4011568:	10800004 	addi	r2,r2,0
 401156c:	1000021e 	bne	r2,zero,4011578 <__register_exitproc+0xfc>
 4011570:	013fffc4 	movi	r4,-1
 4011574:	003fdc06 	br	40114e8 <__register_exitproc+0x6c>
 4011578:	01006404 	movi	r4,400
 401157c:	103ee83a 	callr	r2
 4011580:	1007883a 	mov	r3,r2
 4011584:	103ffa26 	beq	r2,zero,4011570 <__register_exitproc+0xf4>
 4011588:	80805217 	ldw	r2,328(r16)
 401158c:	180b883a 	mov	r5,r3
 4011590:	18000115 	stw	zero,4(r3)
 4011594:	18800015 	stw	r2,0(r3)
 4011598:	80c05215 	stw	r3,328(r16)
 401159c:	18006215 	stw	zero,392(r3)
 40115a0:	18006315 	stw	zero,396(r3)
 40115a4:	0009883a 	mov	r4,zero
 40115a8:	883fc826 	beq	r17,zero,40114cc <__register_exitproc+0x50>
 40115ac:	003fd706 	br	401150c <__register_exitproc+0x90>

040115b0 <register_fini>:
 40115b0:	f800283a 	ret

040115b4 <__call_exitprocs>:
 40115b4:	008100b4 	movhi	r2,1026
 40115b8:	10a1b804 	addi	r2,r2,-31008
 40115bc:	10800017 	ldw	r2,0(r2)
 40115c0:	defff304 	addi	sp,sp,-52
 40115c4:	df000b15 	stw	fp,44(sp)
 40115c8:	d8800115 	stw	r2,4(sp)
 40115cc:	00800034 	movhi	r2,0
 40115d0:	10800004 	addi	r2,r2,0
 40115d4:	1005003a 	cmpeq	r2,r2,zero
 40115d8:	d8800215 	stw	r2,8(sp)
 40115dc:	d8800117 	ldw	r2,4(sp)
 40115e0:	dd400815 	stw	r21,32(sp)
 40115e4:	dd000715 	stw	r20,28(sp)
 40115e8:	10805204 	addi	r2,r2,328
 40115ec:	dfc00c15 	stw	ra,48(sp)
 40115f0:	ddc00a15 	stw	r23,40(sp)
 40115f4:	dd800915 	stw	r22,36(sp)
 40115f8:	dcc00615 	stw	r19,24(sp)
 40115fc:	dc800515 	stw	r18,20(sp)
 4011600:	dc400415 	stw	r17,16(sp)
 4011604:	dc000315 	stw	r16,12(sp)
 4011608:	282b883a 	mov	r21,r5
 401160c:	2039883a 	mov	fp,r4
 4011610:	d8800015 	stw	r2,0(sp)
 4011614:	2829003a 	cmpeq	r20,r5,zero
 4011618:	d8800117 	ldw	r2,4(sp)
 401161c:	14405217 	ldw	r17,328(r2)
 4011620:	88001026 	beq	r17,zero,4011664 <__call_exitprocs+0xb0>
 4011624:	ddc00017 	ldw	r23,0(sp)
 4011628:	88800117 	ldw	r2,4(r17)
 401162c:	8c802204 	addi	r18,r17,136
 4011630:	143fffc4 	addi	r16,r2,-1
 4011634:	80000916 	blt	r16,zero,401165c <__call_exitprocs+0xa8>
 4011638:	05bfffc4 	movi	r22,-1
 401163c:	a000151e 	bne	r20,zero,4011694 <__call_exitprocs+0xe0>
 4011640:	8409883a 	add	r4,r16,r16
 4011644:	2105883a 	add	r2,r4,r4
 4011648:	1485883a 	add	r2,r2,r18
 401164c:	10c02017 	ldw	r3,128(r2)
 4011650:	a8c01126 	beq	r21,r3,4011698 <__call_exitprocs+0xe4>
 4011654:	843fffc4 	addi	r16,r16,-1
 4011658:	85bff81e 	bne	r16,r22,401163c <__call_exitprocs+0x88>
 401165c:	d8800217 	ldw	r2,8(sp)
 4011660:	10003126 	beq	r2,zero,4011728 <__call_exitprocs+0x174>
 4011664:	dfc00c17 	ldw	ra,48(sp)
 4011668:	df000b17 	ldw	fp,44(sp)
 401166c:	ddc00a17 	ldw	r23,40(sp)
 4011670:	dd800917 	ldw	r22,36(sp)
 4011674:	dd400817 	ldw	r21,32(sp)
 4011678:	dd000717 	ldw	r20,28(sp)
 401167c:	dcc00617 	ldw	r19,24(sp)
 4011680:	dc800517 	ldw	r18,20(sp)
 4011684:	dc400417 	ldw	r17,16(sp)
 4011688:	dc000317 	ldw	r16,12(sp)
 401168c:	dec00d04 	addi	sp,sp,52
 4011690:	f800283a 	ret
 4011694:	8409883a 	add	r4,r16,r16
 4011698:	88c00117 	ldw	r3,4(r17)
 401169c:	2105883a 	add	r2,r4,r4
 40116a0:	1445883a 	add	r2,r2,r17
 40116a4:	18ffffc4 	addi	r3,r3,-1
 40116a8:	11800217 	ldw	r6,8(r2)
 40116ac:	1c001526 	beq	r3,r16,4011704 <__call_exitprocs+0x150>
 40116b0:	10000215 	stw	zero,8(r2)
 40116b4:	303fe726 	beq	r6,zero,4011654 <__call_exitprocs+0xa0>
 40116b8:	00c00044 	movi	r3,1
 40116bc:	1c06983a 	sll	r3,r3,r16
 40116c0:	90804017 	ldw	r2,256(r18)
 40116c4:	8cc00117 	ldw	r19,4(r17)
 40116c8:	1884703a 	and	r2,r3,r2
 40116cc:	10001426 	beq	r2,zero,4011720 <__call_exitprocs+0x16c>
 40116d0:	90804117 	ldw	r2,260(r18)
 40116d4:	1884703a 	and	r2,r3,r2
 40116d8:	10000c1e 	bne	r2,zero,401170c <__call_exitprocs+0x158>
 40116dc:	2105883a 	add	r2,r4,r4
 40116e0:	1485883a 	add	r2,r2,r18
 40116e4:	11400017 	ldw	r5,0(r2)
 40116e8:	e009883a 	mov	r4,fp
 40116ec:	303ee83a 	callr	r6
 40116f0:	88800117 	ldw	r2,4(r17)
 40116f4:	98bfc81e 	bne	r19,r2,4011618 <__call_exitprocs+0x64>
 40116f8:	b8800017 	ldw	r2,0(r23)
 40116fc:	147fd526 	beq	r2,r17,4011654 <__call_exitprocs+0xa0>
 4011700:	003fc506 	br	4011618 <__call_exitprocs+0x64>
 4011704:	8c000115 	stw	r16,4(r17)
 4011708:	003fea06 	br	40116b4 <__call_exitprocs+0x100>
 401170c:	2105883a 	add	r2,r4,r4
 4011710:	1485883a 	add	r2,r2,r18
 4011714:	11000017 	ldw	r4,0(r2)
 4011718:	303ee83a 	callr	r6
 401171c:	003ff406 	br	40116f0 <__call_exitprocs+0x13c>
 4011720:	303ee83a 	callr	r6
 4011724:	003ff206 	br	40116f0 <__call_exitprocs+0x13c>
 4011728:	88800117 	ldw	r2,4(r17)
 401172c:	1000081e 	bne	r2,zero,4011750 <__call_exitprocs+0x19c>
 4011730:	89000017 	ldw	r4,0(r17)
 4011734:	20000726 	beq	r4,zero,4011754 <__call_exitprocs+0x1a0>
 4011738:	b9000015 	stw	r4,0(r23)
 401173c:	8809883a 	mov	r4,r17
 4011740:	00000000 	call	0 <__reset>
 4011744:	bc400017 	ldw	r17,0(r23)
 4011748:	883fb71e 	bne	r17,zero,4011628 <__call_exitprocs+0x74>
 401174c:	003fc506 	br	4011664 <__call_exitprocs+0xb0>
 4011750:	89000017 	ldw	r4,0(r17)
 4011754:	882f883a 	mov	r23,r17
 4011758:	2023883a 	mov	r17,r4
 401175c:	883fb21e 	bne	r17,zero,4011628 <__call_exitprocs+0x74>
 4011760:	003fc006 	br	4011664 <__call_exitprocs+0xb0>

04011764 <quorem>:
 4011764:	28c00417 	ldw	r3,16(r5)
 4011768:	20800417 	ldw	r2,16(r4)
 401176c:	defff604 	addi	sp,sp,-40
 4011770:	ddc00715 	stw	r23,28(sp)
 4011774:	dd400515 	stw	r21,20(sp)
 4011778:	dfc00915 	stw	ra,36(sp)
 401177c:	df000815 	stw	fp,32(sp)
 4011780:	dd800615 	stw	r22,24(sp)
 4011784:	dd000415 	stw	r20,16(sp)
 4011788:	dcc00315 	stw	r19,12(sp)
 401178c:	dc800215 	stw	r18,8(sp)
 4011790:	dc400115 	stw	r17,4(sp)
 4011794:	dc000015 	stw	r16,0(sp)
 4011798:	202f883a 	mov	r23,r4
 401179c:	282b883a 	mov	r21,r5
 40117a0:	10c07416 	blt	r2,r3,4011974 <quorem+0x210>
 40117a4:	1c7fffc4 	addi	r17,r3,-1
 40117a8:	8c45883a 	add	r2,r17,r17
 40117ac:	1085883a 	add	r2,r2,r2
 40117b0:	2c000504 	addi	r16,r5,20
 40117b4:	24c00504 	addi	r19,r4,20
 40117b8:	14ed883a 	add	r22,r2,r19
 40117bc:	80a5883a 	add	r18,r16,r2
 40117c0:	b7000017 	ldw	fp,0(r22)
 40117c4:	91400017 	ldw	r5,0(r18)
 40117c8:	e009883a 	mov	r4,fp
 40117cc:	29400044 	addi	r5,r5,1
 40117d0:	4015fbc0 	call	4015fbc <__udivsi3>
 40117d4:	1029883a 	mov	r20,r2
 40117d8:	10003c1e 	bne	r2,zero,40118cc <quorem+0x168>
 40117dc:	a80b883a 	mov	r5,r21
 40117e0:	b809883a 	mov	r4,r23
 40117e4:	40131500 	call	4013150 <__mcmp>
 40117e8:	10002b16 	blt	r2,zero,4011898 <quorem+0x134>
 40117ec:	a5000044 	addi	r20,r20,1
 40117f0:	980f883a 	mov	r7,r19
 40117f4:	0011883a 	mov	r8,zero
 40117f8:	0009883a 	mov	r4,zero
 40117fc:	81400017 	ldw	r5,0(r16)
 4011800:	38c00017 	ldw	r3,0(r7)
 4011804:	84000104 	addi	r16,r16,4
 4011808:	28bfffcc 	andi	r2,r5,65535
 401180c:	2085883a 	add	r2,r4,r2
 4011810:	11bfffcc 	andi	r6,r2,65535
 4011814:	193fffcc 	andi	r4,r3,65535
 4011818:	1004d43a 	srli	r2,r2,16
 401181c:	280ad43a 	srli	r5,r5,16
 4011820:	2189c83a 	sub	r4,r4,r6
 4011824:	2209883a 	add	r4,r4,r8
 4011828:	1806d43a 	srli	r3,r3,16
 401182c:	288b883a 	add	r5,r5,r2
 4011830:	200dd43a 	srai	r6,r4,16
 4011834:	28bfffcc 	andi	r2,r5,65535
 4011838:	1887c83a 	sub	r3,r3,r2
 401183c:	1987883a 	add	r3,r3,r6
 4011840:	3900000d 	sth	r4,0(r7)
 4011844:	38c0008d 	sth	r3,2(r7)
 4011848:	2808d43a 	srli	r4,r5,16
 401184c:	39c00104 	addi	r7,r7,4
 4011850:	1811d43a 	srai	r8,r3,16
 4011854:	943fe92e 	bgeu	r18,r16,40117fc <quorem+0x98>
 4011858:	8c45883a 	add	r2,r17,r17
 401185c:	1085883a 	add	r2,r2,r2
 4011860:	9885883a 	add	r2,r19,r2
 4011864:	10c00017 	ldw	r3,0(r2)
 4011868:	18000b1e 	bne	r3,zero,4011898 <quorem+0x134>
 401186c:	113fff04 	addi	r4,r2,-4
 4011870:	9900082e 	bgeu	r19,r4,4011894 <quorem+0x130>
 4011874:	10bfff17 	ldw	r2,-4(r2)
 4011878:	10000326 	beq	r2,zero,4011888 <quorem+0x124>
 401187c:	00000506 	br	4011894 <quorem+0x130>
 4011880:	20800017 	ldw	r2,0(r4)
 4011884:	1000031e 	bne	r2,zero,4011894 <quorem+0x130>
 4011888:	213fff04 	addi	r4,r4,-4
 401188c:	8c7fffc4 	addi	r17,r17,-1
 4011890:	993ffb36 	bltu	r19,r4,4011880 <quorem+0x11c>
 4011894:	bc400415 	stw	r17,16(r23)
 4011898:	a005883a 	mov	r2,r20
 401189c:	dfc00917 	ldw	ra,36(sp)
 40118a0:	df000817 	ldw	fp,32(sp)
 40118a4:	ddc00717 	ldw	r23,28(sp)
 40118a8:	dd800617 	ldw	r22,24(sp)
 40118ac:	dd400517 	ldw	r21,20(sp)
 40118b0:	dd000417 	ldw	r20,16(sp)
 40118b4:	dcc00317 	ldw	r19,12(sp)
 40118b8:	dc800217 	ldw	r18,8(sp)
 40118bc:	dc400117 	ldw	r17,4(sp)
 40118c0:	dc000017 	ldw	r16,0(sp)
 40118c4:	dec00a04 	addi	sp,sp,40
 40118c8:	f800283a 	ret
 40118cc:	980f883a 	mov	r7,r19
 40118d0:	8011883a 	mov	r8,r16
 40118d4:	0013883a 	mov	r9,zero
 40118d8:	000d883a 	mov	r6,zero
 40118dc:	40c00017 	ldw	r3,0(r8)
 40118e0:	39000017 	ldw	r4,0(r7)
 40118e4:	42000104 	addi	r8,r8,4
 40118e8:	18bfffcc 	andi	r2,r3,65535
 40118ec:	a085383a 	mul	r2,r20,r2
 40118f0:	1806d43a 	srli	r3,r3,16
 40118f4:	217fffcc 	andi	r5,r4,65535
 40118f8:	3085883a 	add	r2,r6,r2
 40118fc:	11bfffcc 	andi	r6,r2,65535
 4011900:	a0c7383a 	mul	r3,r20,r3
 4011904:	1004d43a 	srli	r2,r2,16
 4011908:	298bc83a 	sub	r5,r5,r6
 401190c:	2a4b883a 	add	r5,r5,r9
 4011910:	2008d43a 	srli	r4,r4,16
 4011914:	1887883a 	add	r3,r3,r2
 4011918:	280dd43a 	srai	r6,r5,16
 401191c:	18bfffcc 	andi	r2,r3,65535
 4011920:	2089c83a 	sub	r4,r4,r2
 4011924:	2189883a 	add	r4,r4,r6
 4011928:	3900008d 	sth	r4,2(r7)
 401192c:	3940000d 	sth	r5,0(r7)
 4011930:	180cd43a 	srli	r6,r3,16
 4011934:	39c00104 	addi	r7,r7,4
 4011938:	2013d43a 	srai	r9,r4,16
 401193c:	923fe72e 	bgeu	r18,r8,40118dc <quorem+0x178>
 4011940:	e03fa61e 	bne	fp,zero,40117dc <quorem+0x78>
 4011944:	b0ffff04 	addi	r3,r22,-4
 4011948:	98c0082e 	bgeu	r19,r3,401196c <quorem+0x208>
 401194c:	b0bfff17 	ldw	r2,-4(r22)
 4011950:	10000326 	beq	r2,zero,4011960 <quorem+0x1fc>
 4011954:	00000506 	br	401196c <quorem+0x208>
 4011958:	18800017 	ldw	r2,0(r3)
 401195c:	1000031e 	bne	r2,zero,401196c <quorem+0x208>
 4011960:	18ffff04 	addi	r3,r3,-4
 4011964:	8c7fffc4 	addi	r17,r17,-1
 4011968:	98fffb36 	bltu	r19,r3,4011958 <quorem+0x1f4>
 401196c:	bc400415 	stw	r17,16(r23)
 4011970:	003f9a06 	br	40117dc <quorem+0x78>
 4011974:	0005883a 	mov	r2,zero
 4011978:	003fc806 	br	401189c <quorem+0x138>

0401197c <_dtoa_r>:
 401197c:	22001017 	ldw	r8,64(r4)
 4011980:	deffda04 	addi	sp,sp,-152
 4011984:	dd402115 	stw	r21,132(sp)
 4011988:	dd002015 	stw	r20,128(sp)
 401198c:	dc801e15 	stw	r18,120(sp)
 4011990:	dc401d15 	stw	r17,116(sp)
 4011994:	dfc02515 	stw	ra,148(sp)
 4011998:	df002415 	stw	fp,144(sp)
 401199c:	ddc02315 	stw	r23,140(sp)
 40119a0:	dd802215 	stw	r22,136(sp)
 40119a4:	dcc01f15 	stw	r19,124(sp)
 40119a8:	dc001c15 	stw	r16,112(sp)
 40119ac:	d9001615 	stw	r4,88(sp)
 40119b0:	3023883a 	mov	r17,r6
 40119b4:	2829883a 	mov	r20,r5
 40119b8:	d9c01715 	stw	r7,92(sp)
 40119bc:	dc802817 	ldw	r18,160(sp)
 40119c0:	302b883a 	mov	r21,r6
 40119c4:	40000a26 	beq	r8,zero,40119f0 <_dtoa_r+0x74>
 40119c8:	20801117 	ldw	r2,68(r4)
 40119cc:	400b883a 	mov	r5,r8
 40119d0:	40800115 	stw	r2,4(r8)
 40119d4:	20c01117 	ldw	r3,68(r4)
 40119d8:	00800044 	movi	r2,1
 40119dc:	10c4983a 	sll	r2,r2,r3
 40119e0:	40800215 	stw	r2,8(r8)
 40119e4:	4012ff40 	call	4012ff4 <_Bfree>
 40119e8:	d8c01617 	ldw	r3,88(sp)
 40119ec:	18001015 	stw	zero,64(r3)
 40119f0:	8800a316 	blt	r17,zero,4011c80 <_dtoa_r+0x304>
 40119f4:	90000015 	stw	zero,0(r18)
 40119f8:	a8dffc2c 	andhi	r3,r21,32752
 40119fc:	009ffc34 	movhi	r2,32752
 4011a00:	18809126 	beq	r3,r2,4011c48 <_dtoa_r+0x2cc>
 4011a04:	000d883a 	mov	r6,zero
 4011a08:	000f883a 	mov	r7,zero
 4011a0c:	a009883a 	mov	r4,r20
 4011a10:	a80b883a 	mov	r5,r21
 4011a14:	dd001215 	stw	r20,72(sp)
 4011a18:	dd401315 	stw	r21,76(sp)
 4011a1c:	40158fc0 	call	40158fc <__nedf2>
 4011a20:	1000171e 	bne	r2,zero,4011a80 <_dtoa_r+0x104>
 4011a24:	d9802717 	ldw	r6,156(sp)
 4011a28:	00800044 	movi	r2,1
 4011a2c:	30800015 	stw	r2,0(r6)
 4011a30:	d8802917 	ldw	r2,164(sp)
 4011a34:	10029b26 	beq	r2,zero,40124a4 <_dtoa_r+0xb28>
 4011a38:	d9002917 	ldw	r4,164(sp)
 4011a3c:	00810074 	movhi	r2,1025
 4011a40:	109a4944 	addi	r2,r2,26917
 4011a44:	10ffffc4 	addi	r3,r2,-1
 4011a48:	20800015 	stw	r2,0(r4)
 4011a4c:	1805883a 	mov	r2,r3
 4011a50:	dfc02517 	ldw	ra,148(sp)
 4011a54:	df002417 	ldw	fp,144(sp)
 4011a58:	ddc02317 	ldw	r23,140(sp)
 4011a5c:	dd802217 	ldw	r22,136(sp)
 4011a60:	dd402117 	ldw	r21,132(sp)
 4011a64:	dd002017 	ldw	r20,128(sp)
 4011a68:	dcc01f17 	ldw	r19,124(sp)
 4011a6c:	dc801e17 	ldw	r18,120(sp)
 4011a70:	dc401d17 	ldw	r17,116(sp)
 4011a74:	dc001c17 	ldw	r16,112(sp)
 4011a78:	dec02604 	addi	sp,sp,152
 4011a7c:	f800283a 	ret
 4011a80:	d9001617 	ldw	r4,88(sp)
 4011a84:	d9401217 	ldw	r5,72(sp)
 4011a88:	d8800104 	addi	r2,sp,4
 4011a8c:	a80d883a 	mov	r6,r21
 4011a90:	d9c00204 	addi	r7,sp,8
 4011a94:	d8800015 	stw	r2,0(sp)
 4011a98:	40136300 	call	4013630 <__d2b>
 4011a9c:	d8800715 	stw	r2,28(sp)
 4011aa0:	a804d53a 	srli	r2,r21,20
 4011aa4:	1101ffcc 	andi	r4,r2,2047
 4011aa8:	20008626 	beq	r4,zero,4011cc4 <_dtoa_r+0x348>
 4011aac:	d8c01217 	ldw	r3,72(sp)
 4011ab0:	00800434 	movhi	r2,16
 4011ab4:	10bfffc4 	addi	r2,r2,-1
 4011ab8:	ddc00117 	ldw	r23,4(sp)
 4011abc:	a884703a 	and	r2,r21,r2
 4011ac0:	1811883a 	mov	r8,r3
 4011ac4:	124ffc34 	orhi	r9,r2,16368
 4011ac8:	25bf0044 	addi	r22,r4,-1023
 4011acc:	d8000815 	stw	zero,32(sp)
 4011ad0:	0005883a 	mov	r2,zero
 4011ad4:	00cffe34 	movhi	r3,16376
 4011ad8:	480b883a 	mov	r5,r9
 4011adc:	4009883a 	mov	r4,r8
 4011ae0:	180f883a 	mov	r7,r3
 4011ae4:	100d883a 	mov	r6,r2
 4011ae8:	40151640 	call	4015164 <__subdf3>
 4011aec:	0218dbf4 	movhi	r8,25455
 4011af0:	4210d844 	addi	r8,r8,17249
 4011af4:	024ff4f4 	movhi	r9,16339
 4011af8:	4a61e9c4 	addi	r9,r9,-30809
 4011afc:	480f883a 	mov	r7,r9
 4011b00:	400d883a 	mov	r6,r8
 4011b04:	180b883a 	mov	r5,r3
 4011b08:	1009883a 	mov	r4,r2
 4011b0c:	40152580 	call	4015258 <__muldf3>
 4011b10:	0222d874 	movhi	r8,35681
 4011b14:	42322cc4 	addi	r8,r8,-14157
 4011b18:	024ff1f4 	movhi	r9,16327
 4011b1c:	4a628a04 	addi	r9,r9,-30168
 4011b20:	480f883a 	mov	r7,r9
 4011b24:	400d883a 	mov	r6,r8
 4011b28:	180b883a 	mov	r5,r3
 4011b2c:	1009883a 	mov	r4,r2
 4011b30:	40151e40 	call	40151e4 <__adddf3>
 4011b34:	b009883a 	mov	r4,r22
 4011b38:	1021883a 	mov	r16,r2
 4011b3c:	1823883a 	mov	r17,r3
 4011b40:	4015b1c0 	call	4015b1c <__floatsidf>
 4011b44:	021427f4 	movhi	r8,20639
 4011b48:	421e7ec4 	addi	r8,r8,31227
 4011b4c:	024ff4f4 	movhi	r9,16339
 4011b50:	4a5104c4 	addi	r9,r9,17427
 4011b54:	480f883a 	mov	r7,r9
 4011b58:	400d883a 	mov	r6,r8
 4011b5c:	180b883a 	mov	r5,r3
 4011b60:	1009883a 	mov	r4,r2
 4011b64:	40152580 	call	4015258 <__muldf3>
 4011b68:	180f883a 	mov	r7,r3
 4011b6c:	880b883a 	mov	r5,r17
 4011b70:	100d883a 	mov	r6,r2
 4011b74:	8009883a 	mov	r4,r16
 4011b78:	40151e40 	call	40151e4 <__adddf3>
 4011b7c:	1009883a 	mov	r4,r2
 4011b80:	180b883a 	mov	r5,r3
 4011b84:	1021883a 	mov	r16,r2
 4011b88:	1823883a 	mov	r17,r3
 4011b8c:	4015c140 	call	4015c14 <__fixdfsi>
 4011b90:	000d883a 	mov	r6,zero
 4011b94:	000f883a 	mov	r7,zero
 4011b98:	8009883a 	mov	r4,r16
 4011b9c:	880b883a 	mov	r5,r17
 4011ba0:	d8800d15 	stw	r2,52(sp)
 4011ba4:	4015a940 	call	4015a94 <__ltdf2>
 4011ba8:	10031716 	blt	r2,zero,4012808 <_dtoa_r+0xe8c>
 4011bac:	d8c00d17 	ldw	r3,52(sp)
 4011bb0:	00800584 	movi	r2,22
 4011bb4:	10c1482e 	bgeu	r2,r3,40120d8 <_dtoa_r+0x75c>
 4011bb8:	01000044 	movi	r4,1
 4011bbc:	d9000c15 	stw	r4,48(sp)
 4011bc0:	bd85c83a 	sub	r2,r23,r22
 4011bc4:	11bfffc4 	addi	r6,r2,-1
 4011bc8:	30030b16 	blt	r6,zero,40127f8 <_dtoa_r+0xe7c>
 4011bcc:	d9800a15 	stw	r6,40(sp)
 4011bd0:	d8001115 	stw	zero,68(sp)
 4011bd4:	d8c00d17 	ldw	r3,52(sp)
 4011bd8:	1802ff16 	blt	r3,zero,40127d8 <_dtoa_r+0xe5c>
 4011bdc:	d9000a17 	ldw	r4,40(sp)
 4011be0:	d8c00915 	stw	r3,36(sp)
 4011be4:	d8001015 	stw	zero,64(sp)
 4011be8:	20c9883a 	add	r4,r4,r3
 4011bec:	d9000a15 	stw	r4,40(sp)
 4011bf0:	d9001717 	ldw	r4,92(sp)
 4011bf4:	00800244 	movi	r2,9
 4011bf8:	11004636 	bltu	r2,r4,4011d14 <_dtoa_r+0x398>
 4011bfc:	00800144 	movi	r2,5
 4011c00:	11020416 	blt	r2,r4,4012414 <_dtoa_r+0xa98>
 4011c04:	04400044 	movi	r17,1
 4011c08:	d8c01717 	ldw	r3,92(sp)
 4011c0c:	00800144 	movi	r2,5
 4011c10:	10c1ed36 	bltu	r2,r3,40123c8 <_dtoa_r+0xa4c>
 4011c14:	18c5883a 	add	r2,r3,r3
 4011c18:	1085883a 	add	r2,r2,r2
 4011c1c:	00c10074 	movhi	r3,1025
 4011c20:	18c70c04 	addi	r3,r3,7216
 4011c24:	10c5883a 	add	r2,r2,r3
 4011c28:	11000017 	ldw	r4,0(r2)
 4011c2c:	2000683a 	jmp	r4
 4011c30:	04011d1c 	xori	r16,zero,1140
 4011c34:	04011d1c 	xori	r16,zero,1140
 4011c38:	0401271c 	xori	r16,zero,1180
 4011c3c:	040126f4 	movhi	r16,1179
 4011c40:	04012738 	rdprs	r16,zero,1180
 4011c44:	04012744 	movi	r16,1181
 4011c48:	d9002717 	ldw	r4,156(sp)
 4011c4c:	0089c3c4 	movi	r2,9999
 4011c50:	20800015 	stw	r2,0(r4)
 4011c54:	a0001026 	beq	r20,zero,4011c98 <_dtoa_r+0x31c>
 4011c58:	00c10074 	movhi	r3,1025
 4011c5c:	18da5504 	addi	r3,r3,26964
 4011c60:	d9802917 	ldw	r6,164(sp)
 4011c64:	303f7926 	beq	r6,zero,4011a4c <_dtoa_r+0xd0>
 4011c68:	188000c7 	ldb	r2,3(r3)
 4011c6c:	190000c4 	addi	r4,r3,3
 4011c70:	1000101e 	bne	r2,zero,4011cb4 <_dtoa_r+0x338>
 4011c74:	d8802917 	ldw	r2,164(sp)
 4011c78:	11000015 	stw	r4,0(r2)
 4011c7c:	003f7306 	br	4011a4c <_dtoa_r+0xd0>
 4011c80:	00a00034 	movhi	r2,32768
 4011c84:	10bfffc4 	addi	r2,r2,-1
 4011c88:	00c00044 	movi	r3,1
 4011c8c:	88aa703a 	and	r21,r17,r2
 4011c90:	90c00015 	stw	r3,0(r18)
 4011c94:	003f5806 	br	40119f8 <_dtoa_r+0x7c>
 4011c98:	00800434 	movhi	r2,16
 4011c9c:	10bfffc4 	addi	r2,r2,-1
 4011ca0:	a884703a 	and	r2,r21,r2
 4011ca4:	103fec1e 	bne	r2,zero,4011c58 <_dtoa_r+0x2dc>
 4011ca8:	00c10074 	movhi	r3,1025
 4011cac:	18da5204 	addi	r3,r3,26952
 4011cb0:	003feb06 	br	4011c60 <_dtoa_r+0x2e4>
 4011cb4:	d8802917 	ldw	r2,164(sp)
 4011cb8:	19000204 	addi	r4,r3,8
 4011cbc:	11000015 	stw	r4,0(r2)
 4011cc0:	003f6206 	br	4011a4c <_dtoa_r+0xd0>
 4011cc4:	ddc00117 	ldw	r23,4(sp)
 4011cc8:	d8800217 	ldw	r2,8(sp)
 4011ccc:	01000804 	movi	r4,32
 4011cd0:	b8c10c84 	addi	r3,r23,1074
 4011cd4:	18a3883a 	add	r17,r3,r2
 4011cd8:	2441b80e 	bge	r4,r17,40123bc <_dtoa_r+0xa40>
 4011cdc:	00c01004 	movi	r3,64
 4011ce0:	1c47c83a 	sub	r3,r3,r17
 4011ce4:	88bff804 	addi	r2,r17,-32
 4011ce8:	a8c6983a 	sll	r3,r21,r3
 4011cec:	a084d83a 	srl	r2,r20,r2
 4011cf0:	1888b03a 	or	r4,r3,r2
 4011cf4:	4015cec0 	call	4015cec <__floatunsidf>
 4011cf8:	1011883a 	mov	r8,r2
 4011cfc:	00bf8434 	movhi	r2,65040
 4011d00:	01000044 	movi	r4,1
 4011d04:	10d3883a 	add	r9,r2,r3
 4011d08:	8dbef344 	addi	r22,r17,-1075
 4011d0c:	d9000815 	stw	r4,32(sp)
 4011d10:	003f6f06 	br	4011ad0 <_dtoa_r+0x154>
 4011d14:	d8001715 	stw	zero,92(sp)
 4011d18:	04400044 	movi	r17,1
 4011d1c:	00bfffc4 	movi	r2,-1
 4011d20:	00c00044 	movi	r3,1
 4011d24:	d8800e15 	stw	r2,56(sp)
 4011d28:	d8002615 	stw	zero,152(sp)
 4011d2c:	d8800f15 	stw	r2,60(sp)
 4011d30:	d8c00b15 	stw	r3,44(sp)
 4011d34:	1021883a 	mov	r16,r2
 4011d38:	d8801617 	ldw	r2,88(sp)
 4011d3c:	10001115 	stw	zero,68(r2)
 4011d40:	d8801617 	ldw	r2,88(sp)
 4011d44:	11401117 	ldw	r5,68(r2)
 4011d48:	1009883a 	mov	r4,r2
 4011d4c:	40135740 	call	4013574 <_Balloc>
 4011d50:	d8c01617 	ldw	r3,88(sp)
 4011d54:	d8800515 	stw	r2,20(sp)
 4011d58:	18801015 	stw	r2,64(r3)
 4011d5c:	00800384 	movi	r2,14
 4011d60:	14006836 	bltu	r2,r16,4011f04 <_dtoa_r+0x588>
 4011d64:	8805003a 	cmpeq	r2,r17,zero
 4011d68:	1000661e 	bne	r2,zero,4011f04 <_dtoa_r+0x588>
 4011d6c:	d9000d17 	ldw	r4,52(sp)
 4011d70:	0102300e 	bge	zero,r4,4012634 <_dtoa_r+0xcb8>
 4011d74:	208003cc 	andi	r2,r4,15
 4011d78:	100490fa 	slli	r2,r2,3
 4011d7c:	2025d13a 	srai	r18,r4,4
 4011d80:	00c10074 	movhi	r3,1025
 4011d84:	18da6604 	addi	r3,r3,27032
 4011d88:	10c5883a 	add	r2,r2,r3
 4011d8c:	90c0040c 	andi	r3,r18,16
 4011d90:	14000017 	ldw	r16,0(r2)
 4011d94:	14400117 	ldw	r17,4(r2)
 4011d98:	18036a1e 	bne	r3,zero,4012b44 <_dtoa_r+0x11c8>
 4011d9c:	05800084 	movi	r22,2
 4011da0:	90001026 	beq	r18,zero,4011de4 <_dtoa_r+0x468>
 4011da4:	04c10074 	movhi	r19,1025
 4011da8:	9cda9804 	addi	r19,r19,27232
 4011dac:	9080004c 	andi	r2,r18,1
 4011db0:	1005003a 	cmpeq	r2,r2,zero
 4011db4:	1000081e 	bne	r2,zero,4011dd8 <_dtoa_r+0x45c>
 4011db8:	99800017 	ldw	r6,0(r19)
 4011dbc:	99c00117 	ldw	r7,4(r19)
 4011dc0:	880b883a 	mov	r5,r17
 4011dc4:	8009883a 	mov	r4,r16
 4011dc8:	40152580 	call	4015258 <__muldf3>
 4011dcc:	1021883a 	mov	r16,r2
 4011dd0:	b5800044 	addi	r22,r22,1
 4011dd4:	1823883a 	mov	r17,r3
 4011dd8:	9025d07a 	srai	r18,r18,1
 4011ddc:	9cc00204 	addi	r19,r19,8
 4011de0:	903ff21e 	bne	r18,zero,4011dac <_dtoa_r+0x430>
 4011de4:	a80b883a 	mov	r5,r21
 4011de8:	a009883a 	mov	r4,r20
 4011dec:	880f883a 	mov	r7,r17
 4011df0:	800d883a 	mov	r6,r16
 4011df4:	401561c0 	call	401561c <__divdf3>
 4011df8:	1029883a 	mov	r20,r2
 4011dfc:	182b883a 	mov	r21,r3
 4011e00:	d8c00c17 	ldw	r3,48(sp)
 4011e04:	1805003a 	cmpeq	r2,r3,zero
 4011e08:	1000081e 	bne	r2,zero,4011e2c <_dtoa_r+0x4b0>
 4011e0c:	0005883a 	mov	r2,zero
 4011e10:	00cffc34 	movhi	r3,16368
 4011e14:	180f883a 	mov	r7,r3
 4011e18:	a009883a 	mov	r4,r20
 4011e1c:	a80b883a 	mov	r5,r21
 4011e20:	100d883a 	mov	r6,r2
 4011e24:	4015a940 	call	4015a94 <__ltdf2>
 4011e28:	1003fe16 	blt	r2,zero,4012e24 <_dtoa_r+0x14a8>
 4011e2c:	b009883a 	mov	r4,r22
 4011e30:	4015b1c0 	call	4015b1c <__floatsidf>
 4011e34:	180b883a 	mov	r5,r3
 4011e38:	1009883a 	mov	r4,r2
 4011e3c:	a00d883a 	mov	r6,r20
 4011e40:	a80f883a 	mov	r7,r21
 4011e44:	40152580 	call	4015258 <__muldf3>
 4011e48:	0011883a 	mov	r8,zero
 4011e4c:	02500734 	movhi	r9,16412
 4011e50:	1009883a 	mov	r4,r2
 4011e54:	180b883a 	mov	r5,r3
 4011e58:	480f883a 	mov	r7,r9
 4011e5c:	400d883a 	mov	r6,r8
 4011e60:	40151e40 	call	40151e4 <__adddf3>
 4011e64:	d9000f17 	ldw	r4,60(sp)
 4011e68:	102d883a 	mov	r22,r2
 4011e6c:	00bf3034 	movhi	r2,64704
 4011e70:	18b9883a 	add	fp,r3,r2
 4011e74:	e02f883a 	mov	r23,fp
 4011e78:	20028f1e 	bne	r4,zero,40128b8 <_dtoa_r+0xf3c>
 4011e7c:	0005883a 	mov	r2,zero
 4011e80:	00d00534 	movhi	r3,16404
 4011e84:	a009883a 	mov	r4,r20
 4011e88:	a80b883a 	mov	r5,r21
 4011e8c:	180f883a 	mov	r7,r3
 4011e90:	100d883a 	mov	r6,r2
 4011e94:	40151640 	call	4015164 <__subdf3>
 4011e98:	1009883a 	mov	r4,r2
 4011e9c:	e00f883a 	mov	r7,fp
 4011ea0:	180b883a 	mov	r5,r3
 4011ea4:	b00d883a 	mov	r6,r22
 4011ea8:	1025883a 	mov	r18,r2
 4011eac:	1827883a 	mov	r19,r3
 4011eb0:	40159840 	call	4015984 <__gtdf2>
 4011eb4:	00834f16 	blt	zero,r2,4012bf4 <_dtoa_r+0x1278>
 4011eb8:	e0e0003c 	xorhi	r3,fp,32768
 4011ebc:	9009883a 	mov	r4,r18
 4011ec0:	980b883a 	mov	r5,r19
 4011ec4:	180f883a 	mov	r7,r3
 4011ec8:	b00d883a 	mov	r6,r22
 4011ecc:	4015a940 	call	4015a94 <__ltdf2>
 4011ed0:	1000080e 	bge	r2,zero,4011ef4 <_dtoa_r+0x578>
 4011ed4:	0027883a 	mov	r19,zero
 4011ed8:	0025883a 	mov	r18,zero
 4011edc:	d8802617 	ldw	r2,152(sp)
 4011ee0:	df000517 	ldw	fp,20(sp)
 4011ee4:	d8000615 	stw	zero,24(sp)
 4011ee8:	0084303a 	nor	r2,zero,r2
 4011eec:	d8800d15 	stw	r2,52(sp)
 4011ef0:	00019b06 	br	4012560 <_dtoa_r+0xbe4>
 4011ef4:	d9801217 	ldw	r6,72(sp)
 4011ef8:	d8801317 	ldw	r2,76(sp)
 4011efc:	3029883a 	mov	r20,r6
 4011f00:	102b883a 	mov	r21,r2
 4011f04:	d8c00217 	ldw	r3,8(sp)
 4011f08:	18008516 	blt	r3,zero,4012120 <_dtoa_r+0x7a4>
 4011f0c:	d9000d17 	ldw	r4,52(sp)
 4011f10:	00800384 	movi	r2,14
 4011f14:	11008216 	blt	r2,r4,4012120 <_dtoa_r+0x7a4>
 4011f18:	200490fa 	slli	r2,r4,3
 4011f1c:	d9802617 	ldw	r6,152(sp)
 4011f20:	00c10074 	movhi	r3,1025
 4011f24:	18da6604 	addi	r3,r3,27032
 4011f28:	10c5883a 	add	r2,r2,r3
 4011f2c:	14800017 	ldw	r18,0(r2)
 4011f30:	14c00117 	ldw	r19,4(r2)
 4011f34:	30031e16 	blt	r6,zero,4012bb0 <_dtoa_r+0x1234>
 4011f38:	d9000517 	ldw	r4,20(sp)
 4011f3c:	d8c00f17 	ldw	r3,60(sp)
 4011f40:	a823883a 	mov	r17,r21
 4011f44:	a021883a 	mov	r16,r20
 4011f48:	192b883a 	add	r21,r3,r4
 4011f4c:	2039883a 	mov	fp,r4
 4011f50:	00000f06 	br	4011f90 <_dtoa_r+0x614>
 4011f54:	0005883a 	mov	r2,zero
 4011f58:	00d00934 	movhi	r3,16420
 4011f5c:	5009883a 	mov	r4,r10
 4011f60:	580b883a 	mov	r5,r11
 4011f64:	180f883a 	mov	r7,r3
 4011f68:	100d883a 	mov	r6,r2
 4011f6c:	40152580 	call	4015258 <__muldf3>
 4011f70:	180b883a 	mov	r5,r3
 4011f74:	000d883a 	mov	r6,zero
 4011f78:	000f883a 	mov	r7,zero
 4011f7c:	1009883a 	mov	r4,r2
 4011f80:	1021883a 	mov	r16,r2
 4011f84:	1823883a 	mov	r17,r3
 4011f88:	40158fc0 	call	40158fc <__nedf2>
 4011f8c:	10004526 	beq	r2,zero,40120a4 <_dtoa_r+0x728>
 4011f90:	900d883a 	mov	r6,r18
 4011f94:	980f883a 	mov	r7,r19
 4011f98:	8009883a 	mov	r4,r16
 4011f9c:	880b883a 	mov	r5,r17
 4011fa0:	401561c0 	call	401561c <__divdf3>
 4011fa4:	180b883a 	mov	r5,r3
 4011fa8:	1009883a 	mov	r4,r2
 4011fac:	4015c140 	call	4015c14 <__fixdfsi>
 4011fb0:	1009883a 	mov	r4,r2
 4011fb4:	1029883a 	mov	r20,r2
 4011fb8:	4015b1c0 	call	4015b1c <__floatsidf>
 4011fbc:	180f883a 	mov	r7,r3
 4011fc0:	9009883a 	mov	r4,r18
 4011fc4:	980b883a 	mov	r5,r19
 4011fc8:	100d883a 	mov	r6,r2
 4011fcc:	40152580 	call	4015258 <__muldf3>
 4011fd0:	180f883a 	mov	r7,r3
 4011fd4:	880b883a 	mov	r5,r17
 4011fd8:	8009883a 	mov	r4,r16
 4011fdc:	100d883a 	mov	r6,r2
 4011fe0:	40151640 	call	4015164 <__subdf3>
 4011fe4:	1015883a 	mov	r10,r2
 4011fe8:	a0800c04 	addi	r2,r20,48
 4011fec:	e0800005 	stb	r2,0(fp)
 4011ff0:	e7000044 	addi	fp,fp,1
 4011ff4:	1817883a 	mov	r11,r3
 4011ff8:	e57fd61e 	bne	fp,r21,4011f54 <_dtoa_r+0x5d8>
 4011ffc:	500d883a 	mov	r6,r10
 4012000:	180f883a 	mov	r7,r3
 4012004:	5009883a 	mov	r4,r10
 4012008:	180b883a 	mov	r5,r3
 401200c:	40151e40 	call	40151e4 <__adddf3>
 4012010:	100d883a 	mov	r6,r2
 4012014:	9009883a 	mov	r4,r18
 4012018:	980b883a 	mov	r5,r19
 401201c:	180f883a 	mov	r7,r3
 4012020:	1021883a 	mov	r16,r2
 4012024:	1823883a 	mov	r17,r3
 4012028:	4015a940 	call	4015a94 <__ltdf2>
 401202c:	10000816 	blt	r2,zero,4012050 <_dtoa_r+0x6d4>
 4012030:	980b883a 	mov	r5,r19
 4012034:	800d883a 	mov	r6,r16
 4012038:	880f883a 	mov	r7,r17
 401203c:	9009883a 	mov	r4,r18
 4012040:	40158740 	call	4015874 <__eqdf2>
 4012044:	1000171e 	bne	r2,zero,40120a4 <_dtoa_r+0x728>
 4012048:	a080004c 	andi	r2,r20,1
 401204c:	10001526 	beq	r2,zero,40120a4 <_dtoa_r+0x728>
 4012050:	d8800d17 	ldw	r2,52(sp)
 4012054:	d8800415 	stw	r2,16(sp)
 4012058:	e009883a 	mov	r4,fp
 401205c:	213fffc4 	addi	r4,r4,-1
 4012060:	20c00007 	ldb	r3,0(r4)
 4012064:	00800e44 	movi	r2,57
 4012068:	1880081e 	bne	r3,r2,401208c <_dtoa_r+0x710>
 401206c:	d8800517 	ldw	r2,20(sp)
 4012070:	113ffa1e 	bne	r2,r4,401205c <_dtoa_r+0x6e0>
 4012074:	d8c00417 	ldw	r3,16(sp)
 4012078:	d9800517 	ldw	r6,20(sp)
 401207c:	00800c04 	movi	r2,48
 4012080:	18c00044 	addi	r3,r3,1
 4012084:	d8c00415 	stw	r3,16(sp)
 4012088:	30800005 	stb	r2,0(r6)
 401208c:	20800003 	ldbu	r2,0(r4)
 4012090:	d8c00417 	ldw	r3,16(sp)
 4012094:	27000044 	addi	fp,r4,1
 4012098:	10800044 	addi	r2,r2,1
 401209c:	d8c00d15 	stw	r3,52(sp)
 40120a0:	20800005 	stb	r2,0(r4)
 40120a4:	d9001617 	ldw	r4,88(sp)
 40120a8:	d9400717 	ldw	r5,28(sp)
 40120ac:	4012ff40 	call	4012ff4 <_Bfree>
 40120b0:	e0000005 	stb	zero,0(fp)
 40120b4:	d9800d17 	ldw	r6,52(sp)
 40120b8:	d8c02717 	ldw	r3,156(sp)
 40120bc:	d9002917 	ldw	r4,164(sp)
 40120c0:	30800044 	addi	r2,r6,1
 40120c4:	18800015 	stw	r2,0(r3)
 40120c8:	20029c26 	beq	r4,zero,4012b3c <_dtoa_r+0x11c0>
 40120cc:	d8c00517 	ldw	r3,20(sp)
 40120d0:	27000015 	stw	fp,0(r4)
 40120d4:	003e5d06 	br	4011a4c <_dtoa_r+0xd0>
 40120d8:	d9800d17 	ldw	r6,52(sp)
 40120dc:	00c10074 	movhi	r3,1025
 40120e0:	18da6604 	addi	r3,r3,27032
 40120e4:	d9001217 	ldw	r4,72(sp)
 40120e8:	300490fa 	slli	r2,r6,3
 40120ec:	d9401317 	ldw	r5,76(sp)
 40120f0:	10c5883a 	add	r2,r2,r3
 40120f4:	12000017 	ldw	r8,0(r2)
 40120f8:	12400117 	ldw	r9,4(r2)
 40120fc:	400d883a 	mov	r6,r8
 4012100:	480f883a 	mov	r7,r9
 4012104:	4015a940 	call	4015a94 <__ltdf2>
 4012108:	1000030e 	bge	r2,zero,4012118 <_dtoa_r+0x79c>
 401210c:	d8800d17 	ldw	r2,52(sp)
 4012110:	10bfffc4 	addi	r2,r2,-1
 4012114:	d8800d15 	stw	r2,52(sp)
 4012118:	d8000c15 	stw	zero,48(sp)
 401211c:	003ea806 	br	4011bc0 <_dtoa_r+0x244>
 4012120:	d9000b17 	ldw	r4,44(sp)
 4012124:	202cc03a 	cmpne	r22,r4,zero
 4012128:	b000c71e 	bne	r22,zero,4012448 <_dtoa_r+0xacc>
 401212c:	dc001117 	ldw	r16,68(sp)
 4012130:	dc801017 	ldw	r18,64(sp)
 4012134:	0027883a 	mov	r19,zero
 4012138:	04000b0e 	bge	zero,r16,4012168 <_dtoa_r+0x7ec>
 401213c:	d8c00a17 	ldw	r3,40(sp)
 4012140:	00c0090e 	bge	zero,r3,4012168 <_dtoa_r+0x7ec>
 4012144:	8005883a 	mov	r2,r16
 4012148:	1c011316 	blt	r3,r16,4012598 <_dtoa_r+0xc1c>
 401214c:	d9000a17 	ldw	r4,40(sp)
 4012150:	d9801117 	ldw	r6,68(sp)
 4012154:	80a1c83a 	sub	r16,r16,r2
 4012158:	2089c83a 	sub	r4,r4,r2
 401215c:	308dc83a 	sub	r6,r6,r2
 4012160:	d9000a15 	stw	r4,40(sp)
 4012164:	d9801115 	stw	r6,68(sp)
 4012168:	d8801017 	ldw	r2,64(sp)
 401216c:	0080150e 	bge	zero,r2,40121c4 <_dtoa_r+0x848>
 4012170:	d8c00b17 	ldw	r3,44(sp)
 4012174:	1805003a 	cmpeq	r2,r3,zero
 4012178:	1001c91e 	bne	r2,zero,40128a0 <_dtoa_r+0xf24>
 401217c:	04800e0e 	bge	zero,r18,40121b8 <_dtoa_r+0x83c>
 4012180:	d9001617 	ldw	r4,88(sp)
 4012184:	980b883a 	mov	r5,r19
 4012188:	900d883a 	mov	r6,r18
 401218c:	4013da80 	call	4013da8 <__pow5mult>
 4012190:	d9001617 	ldw	r4,88(sp)
 4012194:	d9800717 	ldw	r6,28(sp)
 4012198:	100b883a 	mov	r5,r2
 401219c:	1027883a 	mov	r19,r2
 40121a0:	4013a840 	call	4013a84 <__multiply>
 40121a4:	d9001617 	ldw	r4,88(sp)
 40121a8:	d9400717 	ldw	r5,28(sp)
 40121ac:	1023883a 	mov	r17,r2
 40121b0:	4012ff40 	call	4012ff4 <_Bfree>
 40121b4:	dc400715 	stw	r17,28(sp)
 40121b8:	d9001017 	ldw	r4,64(sp)
 40121bc:	248dc83a 	sub	r6,r4,r18
 40121c0:	30010e1e 	bne	r6,zero,40125fc <_dtoa_r+0xc80>
 40121c4:	d9001617 	ldw	r4,88(sp)
 40121c8:	04400044 	movi	r17,1
 40121cc:	880b883a 	mov	r5,r17
 40121d0:	4013c6c0 	call	4013c6c <__i2b>
 40121d4:	d9800917 	ldw	r6,36(sp)
 40121d8:	1025883a 	mov	r18,r2
 40121dc:	0180040e 	bge	zero,r6,40121f0 <_dtoa_r+0x874>
 40121e0:	d9001617 	ldw	r4,88(sp)
 40121e4:	100b883a 	mov	r5,r2
 40121e8:	4013da80 	call	4013da8 <__pow5mult>
 40121ec:	1025883a 	mov	r18,r2
 40121f0:	d8801717 	ldw	r2,92(sp)
 40121f4:	8880f30e 	bge	r17,r2,40125c4 <_dtoa_r+0xc48>
 40121f8:	0023883a 	mov	r17,zero
 40121fc:	d9800917 	ldw	r6,36(sp)
 4012200:	30019e1e 	bne	r6,zero,401287c <_dtoa_r+0xf00>
 4012204:	00c00044 	movi	r3,1
 4012208:	d9000a17 	ldw	r4,40(sp)
 401220c:	20c5883a 	add	r2,r4,r3
 4012210:	10c007cc 	andi	r3,r2,31
 4012214:	1800841e 	bne	r3,zero,4012428 <_dtoa_r+0xaac>
 4012218:	00800704 	movi	r2,28
 401221c:	d9000a17 	ldw	r4,40(sp)
 4012220:	d9801117 	ldw	r6,68(sp)
 4012224:	80a1883a 	add	r16,r16,r2
 4012228:	2089883a 	add	r4,r4,r2
 401222c:	308d883a 	add	r6,r6,r2
 4012230:	d9000a15 	stw	r4,40(sp)
 4012234:	d9801115 	stw	r6,68(sp)
 4012238:	d8801117 	ldw	r2,68(sp)
 401223c:	0080050e 	bge	zero,r2,4012254 <_dtoa_r+0x8d8>
 4012240:	d9400717 	ldw	r5,28(sp)
 4012244:	d9001617 	ldw	r4,88(sp)
 4012248:	100d883a 	mov	r6,r2
 401224c:	40139380 	call	4013938 <__lshift>
 4012250:	d8800715 	stw	r2,28(sp)
 4012254:	d8c00a17 	ldw	r3,40(sp)
 4012258:	00c0050e 	bge	zero,r3,4012270 <_dtoa_r+0x8f4>
 401225c:	d9001617 	ldw	r4,88(sp)
 4012260:	900b883a 	mov	r5,r18
 4012264:	180d883a 	mov	r6,r3
 4012268:	40139380 	call	4013938 <__lshift>
 401226c:	1025883a 	mov	r18,r2
 4012270:	d9000c17 	ldw	r4,48(sp)
 4012274:	2005003a 	cmpeq	r2,r4,zero
 4012278:	10016f26 	beq	r2,zero,4012838 <_dtoa_r+0xebc>
 401227c:	d9000f17 	ldw	r4,60(sp)
 4012280:	0102170e 	bge	zero,r4,4012ae0 <_dtoa_r+0x1164>
 4012284:	d9800b17 	ldw	r6,44(sp)
 4012288:	3005003a 	cmpeq	r2,r6,zero
 401228c:	1000881e 	bne	r2,zero,40124b0 <_dtoa_r+0xb34>
 4012290:	0400050e 	bge	zero,r16,40122a8 <_dtoa_r+0x92c>
 4012294:	d9001617 	ldw	r4,88(sp)
 4012298:	980b883a 	mov	r5,r19
 401229c:	800d883a 	mov	r6,r16
 40122a0:	40139380 	call	4013938 <__lshift>
 40122a4:	1027883a 	mov	r19,r2
 40122a8:	8804c03a 	cmpne	r2,r17,zero
 40122ac:	1002541e 	bne	r2,zero,4012c00 <_dtoa_r+0x1284>
 40122b0:	980b883a 	mov	r5,r19
 40122b4:	dd800517 	ldw	r22,20(sp)
 40122b8:	dcc00615 	stw	r19,24(sp)
 40122bc:	a700004c 	andi	fp,r20,1
 40122c0:	2827883a 	mov	r19,r5
 40122c4:	d9000717 	ldw	r4,28(sp)
 40122c8:	900b883a 	mov	r5,r18
 40122cc:	40117640 	call	4011764 <quorem>
 40122d0:	d9000717 	ldw	r4,28(sp)
 40122d4:	d9400617 	ldw	r5,24(sp)
 40122d8:	1023883a 	mov	r17,r2
 40122dc:	8dc00c04 	addi	r23,r17,48
 40122e0:	40131500 	call	4013150 <__mcmp>
 40122e4:	d9001617 	ldw	r4,88(sp)
 40122e8:	900b883a 	mov	r5,r18
 40122ec:	980d883a 	mov	r6,r19
 40122f0:	1029883a 	mov	r20,r2
 40122f4:	40137ac0 	call	40137ac <__mdiff>
 40122f8:	102b883a 	mov	r21,r2
 40122fc:	10800317 	ldw	r2,12(r2)
 4012300:	1001281e 	bne	r2,zero,40127a4 <_dtoa_r+0xe28>
 4012304:	d9000717 	ldw	r4,28(sp)
 4012308:	a80b883a 	mov	r5,r21
 401230c:	40131500 	call	4013150 <__mcmp>
 4012310:	d9001617 	ldw	r4,88(sp)
 4012314:	1021883a 	mov	r16,r2
 4012318:	a80b883a 	mov	r5,r21
 401231c:	4012ff40 	call	4012ff4 <_Bfree>
 4012320:	8000041e 	bne	r16,zero,4012334 <_dtoa_r+0x9b8>
 4012324:	d8801717 	ldw	r2,92(sp)
 4012328:	1000021e 	bne	r2,zero,4012334 <_dtoa_r+0x9b8>
 401232c:	e004c03a 	cmpne	r2,fp,zero
 4012330:	10011726 	beq	r2,zero,4012790 <_dtoa_r+0xe14>
 4012334:	a0010616 	blt	r20,zero,4012750 <_dtoa_r+0xdd4>
 4012338:	a000041e 	bne	r20,zero,401234c <_dtoa_r+0x9d0>
 401233c:	d8c01717 	ldw	r3,92(sp)
 4012340:	1800021e 	bne	r3,zero,401234c <_dtoa_r+0x9d0>
 4012344:	e004c03a 	cmpne	r2,fp,zero
 4012348:	10010126 	beq	r2,zero,4012750 <_dtoa_r+0xdd4>
 401234c:	04023d16 	blt	zero,r16,4012c44 <_dtoa_r+0x12c8>
 4012350:	b5c00005 	stb	r23,0(r22)
 4012354:	d9800517 	ldw	r6,20(sp)
 4012358:	d9000f17 	ldw	r4,60(sp)
 401235c:	b5800044 	addi	r22,r22,1
 4012360:	3105883a 	add	r2,r6,r4
 4012364:	b0806526 	beq	r22,r2,40124fc <_dtoa_r+0xb80>
 4012368:	d9400717 	ldw	r5,28(sp)
 401236c:	d9001617 	ldw	r4,88(sp)
 4012370:	01800284 	movi	r6,10
 4012374:	000f883a 	mov	r7,zero
 4012378:	4013ca80 	call	4013ca8 <__multadd>
 401237c:	d8800715 	stw	r2,28(sp)
 4012380:	d8800617 	ldw	r2,24(sp)
 4012384:	14c10c26 	beq	r2,r19,40127b8 <_dtoa_r+0xe3c>
 4012388:	d9400617 	ldw	r5,24(sp)
 401238c:	d9001617 	ldw	r4,88(sp)
 4012390:	01800284 	movi	r6,10
 4012394:	000f883a 	mov	r7,zero
 4012398:	4013ca80 	call	4013ca8 <__multadd>
 401239c:	d9001617 	ldw	r4,88(sp)
 40123a0:	980b883a 	mov	r5,r19
 40123a4:	01800284 	movi	r6,10
 40123a8:	000f883a 	mov	r7,zero
 40123ac:	d8800615 	stw	r2,24(sp)
 40123b0:	4013ca80 	call	4013ca8 <__multadd>
 40123b4:	1027883a 	mov	r19,r2
 40123b8:	003fc206 	br	40122c4 <_dtoa_r+0x948>
 40123bc:	2445c83a 	sub	r2,r4,r17
 40123c0:	a088983a 	sll	r4,r20,r2
 40123c4:	003e4b06 	br	4011cf4 <_dtoa_r+0x378>
 40123c8:	01bfffc4 	movi	r6,-1
 40123cc:	00800044 	movi	r2,1
 40123d0:	d9800e15 	stw	r6,56(sp)
 40123d4:	d9800f15 	stw	r6,60(sp)
 40123d8:	d8800b15 	stw	r2,44(sp)
 40123dc:	d8c01617 	ldw	r3,88(sp)
 40123e0:	008005c4 	movi	r2,23
 40123e4:	18001115 	stw	zero,68(r3)
 40123e8:	1580082e 	bgeu	r2,r22,401240c <_dtoa_r+0xa90>
 40123ec:	00c00104 	movi	r3,4
 40123f0:	0009883a 	mov	r4,zero
 40123f4:	18c7883a 	add	r3,r3,r3
 40123f8:	18800504 	addi	r2,r3,20
 40123fc:	21000044 	addi	r4,r4,1
 4012400:	b0bffc2e 	bgeu	r22,r2,40123f4 <_dtoa_r+0xa78>
 4012404:	d9801617 	ldw	r6,88(sp)
 4012408:	31001115 	stw	r4,68(r6)
 401240c:	dc000f17 	ldw	r16,60(sp)
 4012410:	003e4b06 	br	4011d40 <_dtoa_r+0x3c4>
 4012414:	d9801717 	ldw	r6,92(sp)
 4012418:	0023883a 	mov	r17,zero
 401241c:	31bfff04 	addi	r6,r6,-4
 4012420:	d9801715 	stw	r6,92(sp)
 4012424:	003df806 	br	4011c08 <_dtoa_r+0x28c>
 4012428:	00800804 	movi	r2,32
 401242c:	10c9c83a 	sub	r4,r2,r3
 4012430:	00c00104 	movi	r3,4
 4012434:	19005a16 	blt	r3,r4,40125a0 <_dtoa_r+0xc24>
 4012438:	008000c4 	movi	r2,3
 401243c:	113f7e16 	blt	r2,r4,4012238 <_dtoa_r+0x8bc>
 4012440:	20800704 	addi	r2,r4,28
 4012444:	003f7506 	br	401221c <_dtoa_r+0x8a0>
 4012448:	d9801717 	ldw	r6,92(sp)
 401244c:	00800044 	movi	r2,1
 4012450:	1180a10e 	bge	r2,r6,40126d8 <_dtoa_r+0xd5c>
 4012454:	d9800f17 	ldw	r6,60(sp)
 4012458:	d8c01017 	ldw	r3,64(sp)
 401245c:	30bfffc4 	addi	r2,r6,-1
 4012460:	1881c616 	blt	r3,r2,4012b7c <_dtoa_r+0x1200>
 4012464:	18a5c83a 	sub	r18,r3,r2
 4012468:	d8800f17 	ldw	r2,60(sp)
 401246c:	10026216 	blt	r2,zero,4012df8 <_dtoa_r+0x147c>
 4012470:	dc001117 	ldw	r16,68(sp)
 4012474:	1007883a 	mov	r3,r2
 4012478:	d9800a17 	ldw	r6,40(sp)
 401247c:	d8801117 	ldw	r2,68(sp)
 4012480:	d9001617 	ldw	r4,88(sp)
 4012484:	30cd883a 	add	r6,r6,r3
 4012488:	10c5883a 	add	r2,r2,r3
 401248c:	01400044 	movi	r5,1
 4012490:	d9800a15 	stw	r6,40(sp)
 4012494:	d8801115 	stw	r2,68(sp)
 4012498:	4013c6c0 	call	4013c6c <__i2b>
 401249c:	1027883a 	mov	r19,r2
 40124a0:	003f2506 	br	4012138 <_dtoa_r+0x7bc>
 40124a4:	00c10074 	movhi	r3,1025
 40124a8:	18da4904 	addi	r3,r3,26916
 40124ac:	003d6706 	br	4011a4c <_dtoa_r+0xd0>
 40124b0:	dd800517 	ldw	r22,20(sp)
 40124b4:	04000044 	movi	r16,1
 40124b8:	00000706 	br	40124d8 <_dtoa_r+0xb5c>
 40124bc:	d9400717 	ldw	r5,28(sp)
 40124c0:	d9001617 	ldw	r4,88(sp)
 40124c4:	01800284 	movi	r6,10
 40124c8:	000f883a 	mov	r7,zero
 40124cc:	4013ca80 	call	4013ca8 <__multadd>
 40124d0:	d8800715 	stw	r2,28(sp)
 40124d4:	84000044 	addi	r16,r16,1
 40124d8:	d9000717 	ldw	r4,28(sp)
 40124dc:	900b883a 	mov	r5,r18
 40124e0:	40117640 	call	4011764 <quorem>
 40124e4:	15c00c04 	addi	r23,r2,48
 40124e8:	b5c00005 	stb	r23,0(r22)
 40124ec:	d8c00f17 	ldw	r3,60(sp)
 40124f0:	b5800044 	addi	r22,r22,1
 40124f4:	80fff116 	blt	r16,r3,40124bc <_dtoa_r+0xb40>
 40124f8:	d8000615 	stw	zero,24(sp)
 40124fc:	d9400717 	ldw	r5,28(sp)
 4012500:	d9001617 	ldw	r4,88(sp)
 4012504:	01800044 	movi	r6,1
 4012508:	40139380 	call	4013938 <__lshift>
 401250c:	1009883a 	mov	r4,r2
 4012510:	900b883a 	mov	r5,r18
 4012514:	d8800715 	stw	r2,28(sp)
 4012518:	40131500 	call	4013150 <__mcmp>
 401251c:	00803c0e 	bge	zero,r2,4012610 <_dtoa_r+0xc94>
 4012520:	b009883a 	mov	r4,r22
 4012524:	213fffc4 	addi	r4,r4,-1
 4012528:	21400003 	ldbu	r5,0(r4)
 401252c:	00800e44 	movi	r2,57
 4012530:	28c03fcc 	andi	r3,r5,255
 4012534:	18c0201c 	xori	r3,r3,128
 4012538:	18ffe004 	addi	r3,r3,-128
 401253c:	1881981e 	bne	r3,r2,4012ba0 <_dtoa_r+0x1224>
 4012540:	d9800517 	ldw	r6,20(sp)
 4012544:	21bff71e 	bne	r4,r6,4012524 <_dtoa_r+0xba8>
 4012548:	d8800d17 	ldw	r2,52(sp)
 401254c:	37000044 	addi	fp,r6,1
 4012550:	10800044 	addi	r2,r2,1
 4012554:	d8800d15 	stw	r2,52(sp)
 4012558:	00800c44 	movi	r2,49
 401255c:	30800005 	stb	r2,0(r6)
 4012560:	d9001617 	ldw	r4,88(sp)
 4012564:	900b883a 	mov	r5,r18
 4012568:	4012ff40 	call	4012ff4 <_Bfree>
 401256c:	983ecd26 	beq	r19,zero,40120a4 <_dtoa_r+0x728>
 4012570:	d8c00617 	ldw	r3,24(sp)
 4012574:	18000426 	beq	r3,zero,4012588 <_dtoa_r+0xc0c>
 4012578:	1cc00326 	beq	r3,r19,4012588 <_dtoa_r+0xc0c>
 401257c:	d9001617 	ldw	r4,88(sp)
 4012580:	180b883a 	mov	r5,r3
 4012584:	4012ff40 	call	4012ff4 <_Bfree>
 4012588:	d9001617 	ldw	r4,88(sp)
 401258c:	980b883a 	mov	r5,r19
 4012590:	4012ff40 	call	4012ff4 <_Bfree>
 4012594:	003ec306 	br	40120a4 <_dtoa_r+0x728>
 4012598:	1805883a 	mov	r2,r3
 401259c:	003eeb06 	br	401214c <_dtoa_r+0x7d0>
 40125a0:	d9800a17 	ldw	r6,40(sp)
 40125a4:	d8c01117 	ldw	r3,68(sp)
 40125a8:	20bfff04 	addi	r2,r4,-4
 40125ac:	308d883a 	add	r6,r6,r2
 40125b0:	1887883a 	add	r3,r3,r2
 40125b4:	80a1883a 	add	r16,r16,r2
 40125b8:	d9800a15 	stw	r6,40(sp)
 40125bc:	d8c01115 	stw	r3,68(sp)
 40125c0:	003f1d06 	br	4012238 <_dtoa_r+0x8bc>
 40125c4:	a03f0c1e 	bne	r20,zero,40121f8 <_dtoa_r+0x87c>
 40125c8:	00800434 	movhi	r2,16
 40125cc:	10bfffc4 	addi	r2,r2,-1
 40125d0:	a884703a 	and	r2,r21,r2
 40125d4:	103f081e 	bne	r2,zero,40121f8 <_dtoa_r+0x87c>
 40125d8:	a89ffc2c 	andhi	r2,r21,32752
 40125dc:	103f0626 	beq	r2,zero,40121f8 <_dtoa_r+0x87c>
 40125e0:	d8c01117 	ldw	r3,68(sp)
 40125e4:	d9000a17 	ldw	r4,40(sp)
 40125e8:	18c00044 	addi	r3,r3,1
 40125ec:	21000044 	addi	r4,r4,1
 40125f0:	d8c01115 	stw	r3,68(sp)
 40125f4:	d9000a15 	stw	r4,40(sp)
 40125f8:	003f0006 	br	40121fc <_dtoa_r+0x880>
 40125fc:	d9400717 	ldw	r5,28(sp)
 4012600:	d9001617 	ldw	r4,88(sp)
 4012604:	4013da80 	call	4013da8 <__pow5mult>
 4012608:	d8800715 	stw	r2,28(sp)
 401260c:	003eed06 	br	40121c4 <_dtoa_r+0x848>
 4012610:	1000021e 	bne	r2,zero,401261c <_dtoa_r+0xca0>
 4012614:	b880004c 	andi	r2,r23,1
 4012618:	103fc11e 	bne	r2,zero,4012520 <_dtoa_r+0xba4>
 401261c:	b5bfffc4 	addi	r22,r22,-1
 4012620:	b0c00007 	ldb	r3,0(r22)
 4012624:	00800c04 	movi	r2,48
 4012628:	18bffc26 	beq	r3,r2,401261c <_dtoa_r+0xca0>
 401262c:	b7000044 	addi	fp,r22,1
 4012630:	003fcb06 	br	4012560 <_dtoa_r+0xbe4>
 4012634:	d9800d17 	ldw	r6,52(sp)
 4012638:	018fc83a 	sub	r7,zero,r6
 401263c:	3801f726 	beq	r7,zero,4012e1c <_dtoa_r+0x14a0>
 4012640:	398003cc 	andi	r6,r7,15
 4012644:	300c90fa 	slli	r6,r6,3
 4012648:	01410074 	movhi	r5,1025
 401264c:	295a6604 	addi	r5,r5,27032
 4012650:	d9001217 	ldw	r4,72(sp)
 4012654:	314d883a 	add	r6,r6,r5
 4012658:	30c00117 	ldw	r3,4(r6)
 401265c:	30800017 	ldw	r2,0(r6)
 4012660:	d9401317 	ldw	r5,76(sp)
 4012664:	3821d13a 	srai	r16,r7,4
 4012668:	100d883a 	mov	r6,r2
 401266c:	180f883a 	mov	r7,r3
 4012670:	40152580 	call	4015258 <__muldf3>
 4012674:	1011883a 	mov	r8,r2
 4012678:	1813883a 	mov	r9,r3
 401267c:	1029883a 	mov	r20,r2
 4012680:	182b883a 	mov	r21,r3
 4012684:	8001e526 	beq	r16,zero,4012e1c <_dtoa_r+0x14a0>
 4012688:	05800084 	movi	r22,2
 401268c:	04410074 	movhi	r17,1025
 4012690:	8c5a9804 	addi	r17,r17,27232
 4012694:	8080004c 	andi	r2,r16,1
 4012698:	1005003a 	cmpeq	r2,r2,zero
 401269c:	1000081e 	bne	r2,zero,40126c0 <_dtoa_r+0xd44>
 40126a0:	89800017 	ldw	r6,0(r17)
 40126a4:	89c00117 	ldw	r7,4(r17)
 40126a8:	480b883a 	mov	r5,r9
 40126ac:	4009883a 	mov	r4,r8
 40126b0:	40152580 	call	4015258 <__muldf3>
 40126b4:	1011883a 	mov	r8,r2
 40126b8:	b5800044 	addi	r22,r22,1
 40126bc:	1813883a 	mov	r9,r3
 40126c0:	8021d07a 	srai	r16,r16,1
 40126c4:	8c400204 	addi	r17,r17,8
 40126c8:	803ff21e 	bne	r16,zero,4012694 <_dtoa_r+0xd18>
 40126cc:	4029883a 	mov	r20,r8
 40126d0:	482b883a 	mov	r21,r9
 40126d4:	003dca06 	br	4011e00 <_dtoa_r+0x484>
 40126d8:	d9000817 	ldw	r4,32(sp)
 40126dc:	2005003a 	cmpeq	r2,r4,zero
 40126e0:	1001f61e 	bne	r2,zero,4012ebc <_dtoa_r+0x1540>
 40126e4:	dc001117 	ldw	r16,68(sp)
 40126e8:	dc801017 	ldw	r18,64(sp)
 40126ec:	18c10cc4 	addi	r3,r3,1075
 40126f0:	003f6106 	br	4012478 <_dtoa_r+0xafc>
 40126f4:	d8000b15 	stw	zero,44(sp)
 40126f8:	d9802617 	ldw	r6,152(sp)
 40126fc:	d8c00d17 	ldw	r3,52(sp)
 4012700:	30800044 	addi	r2,r6,1
 4012704:	18ad883a 	add	r22,r3,r2
 4012708:	b13fffc4 	addi	r4,r22,-1
 401270c:	d9000e15 	stw	r4,56(sp)
 4012710:	0581f60e 	bge	zero,r22,4012eec <_dtoa_r+0x1570>
 4012714:	dd800f15 	stw	r22,60(sp)
 4012718:	003f3006 	br	40123dc <_dtoa_r+0xa60>
 401271c:	d8000b15 	stw	zero,44(sp)
 4012720:	d9002617 	ldw	r4,152(sp)
 4012724:	0101eb0e 	bge	zero,r4,4012ed4 <_dtoa_r+0x1558>
 4012728:	202d883a 	mov	r22,r4
 401272c:	d9000e15 	stw	r4,56(sp)
 4012730:	d9000f15 	stw	r4,60(sp)
 4012734:	003f2906 	br	40123dc <_dtoa_r+0xa60>
 4012738:	01800044 	movi	r6,1
 401273c:	d9800b15 	stw	r6,44(sp)
 4012740:	003ff706 	br	4012720 <_dtoa_r+0xda4>
 4012744:	01000044 	movi	r4,1
 4012748:	d9000b15 	stw	r4,44(sp)
 401274c:	003fea06 	br	40126f8 <_dtoa_r+0xd7c>
 4012750:	04000c0e 	bge	zero,r16,4012784 <_dtoa_r+0xe08>
 4012754:	d9400717 	ldw	r5,28(sp)
 4012758:	d9001617 	ldw	r4,88(sp)
 401275c:	01800044 	movi	r6,1
 4012760:	40139380 	call	4013938 <__lshift>
 4012764:	1009883a 	mov	r4,r2
 4012768:	900b883a 	mov	r5,r18
 401276c:	d8800715 	stw	r2,28(sp)
 4012770:	40131500 	call	4013150 <__mcmp>
 4012774:	0081e00e 	bge	zero,r2,4012ef8 <_dtoa_r+0x157c>
 4012778:	bdc00044 	addi	r23,r23,1
 401277c:	00800e84 	movi	r2,58
 4012780:	b881a226 	beq	r23,r2,4012e0c <_dtoa_r+0x1490>
 4012784:	b7000044 	addi	fp,r22,1
 4012788:	b5c00005 	stb	r23,0(r22)
 401278c:	003f7406 	br	4012560 <_dtoa_r+0xbe4>
 4012790:	00800e44 	movi	r2,57
 4012794:	b8819d26 	beq	r23,r2,4012e0c <_dtoa_r+0x1490>
 4012798:	053ffa0e 	bge	zero,r20,4012784 <_dtoa_r+0xe08>
 401279c:	8dc00c44 	addi	r23,r17,49
 40127a0:	003ff806 	br	4012784 <_dtoa_r+0xe08>
 40127a4:	d9001617 	ldw	r4,88(sp)
 40127a8:	a80b883a 	mov	r5,r21
 40127ac:	04000044 	movi	r16,1
 40127b0:	4012ff40 	call	4012ff4 <_Bfree>
 40127b4:	003edf06 	br	4012334 <_dtoa_r+0x9b8>
 40127b8:	d9001617 	ldw	r4,88(sp)
 40127bc:	980b883a 	mov	r5,r19
 40127c0:	01800284 	movi	r6,10
 40127c4:	000f883a 	mov	r7,zero
 40127c8:	4013ca80 	call	4013ca8 <__multadd>
 40127cc:	1027883a 	mov	r19,r2
 40127d0:	d8800615 	stw	r2,24(sp)
 40127d4:	003ebb06 	br	40122c4 <_dtoa_r+0x948>
 40127d8:	d9801117 	ldw	r6,68(sp)
 40127dc:	d8800d17 	ldw	r2,52(sp)
 40127e0:	d8000915 	stw	zero,36(sp)
 40127e4:	308dc83a 	sub	r6,r6,r2
 40127e8:	0087c83a 	sub	r3,zero,r2
 40127ec:	d9801115 	stw	r6,68(sp)
 40127f0:	d8c01015 	stw	r3,64(sp)
 40127f4:	003cfe06 	br	4011bf0 <_dtoa_r+0x274>
 40127f8:	018dc83a 	sub	r6,zero,r6
 40127fc:	d9801115 	stw	r6,68(sp)
 4012800:	d8000a15 	stw	zero,40(sp)
 4012804:	003cf306 	br	4011bd4 <_dtoa_r+0x258>
 4012808:	d9000d17 	ldw	r4,52(sp)
 401280c:	4015b1c0 	call	4015b1c <__floatsidf>
 4012810:	880b883a 	mov	r5,r17
 4012814:	8009883a 	mov	r4,r16
 4012818:	180f883a 	mov	r7,r3
 401281c:	100d883a 	mov	r6,r2
 4012820:	40158fc0 	call	40158fc <__nedf2>
 4012824:	103ce126 	beq	r2,zero,4011bac <_dtoa_r+0x230>
 4012828:	d9800d17 	ldw	r6,52(sp)
 401282c:	31bfffc4 	addi	r6,r6,-1
 4012830:	d9800d15 	stw	r6,52(sp)
 4012834:	003cdd06 	br	4011bac <_dtoa_r+0x230>
 4012838:	d9000717 	ldw	r4,28(sp)
 401283c:	900b883a 	mov	r5,r18
 4012840:	40131500 	call	4013150 <__mcmp>
 4012844:	103e8d0e 	bge	r2,zero,401227c <_dtoa_r+0x900>
 4012848:	d9400717 	ldw	r5,28(sp)
 401284c:	d9001617 	ldw	r4,88(sp)
 4012850:	01800284 	movi	r6,10
 4012854:	000f883a 	mov	r7,zero
 4012858:	4013ca80 	call	4013ca8 <__multadd>
 401285c:	d9800d17 	ldw	r6,52(sp)
 4012860:	d8800715 	stw	r2,28(sp)
 4012864:	31bfffc4 	addi	r6,r6,-1
 4012868:	d9800d15 	stw	r6,52(sp)
 401286c:	b001a71e 	bne	r22,zero,4012f0c <_dtoa_r+0x1590>
 4012870:	d8800e17 	ldw	r2,56(sp)
 4012874:	d8800f15 	stw	r2,60(sp)
 4012878:	003e8006 	br	401227c <_dtoa_r+0x900>
 401287c:	90800417 	ldw	r2,16(r18)
 4012880:	1085883a 	add	r2,r2,r2
 4012884:	1085883a 	add	r2,r2,r2
 4012888:	1485883a 	add	r2,r2,r18
 401288c:	11000417 	ldw	r4,16(r2)
 4012890:	401301c0 	call	401301c <__hi0bits>
 4012894:	00c00804 	movi	r3,32
 4012898:	1887c83a 	sub	r3,r3,r2
 401289c:	003e5a06 	br	4012208 <_dtoa_r+0x88c>
 40128a0:	d9400717 	ldw	r5,28(sp)
 40128a4:	d9801017 	ldw	r6,64(sp)
 40128a8:	d9001617 	ldw	r4,88(sp)
 40128ac:	4013da80 	call	4013da8 <__pow5mult>
 40128b0:	d8800715 	stw	r2,28(sp)
 40128b4:	003e4306 	br	40121c4 <_dtoa_r+0x848>
 40128b8:	d9800f17 	ldw	r6,60(sp)
 40128bc:	d8800d17 	ldw	r2,52(sp)
 40128c0:	d9800315 	stw	r6,12(sp)
 40128c4:	d8800415 	stw	r2,16(sp)
 40128c8:	d8c00b17 	ldw	r3,44(sp)
 40128cc:	1805003a 	cmpeq	r2,r3,zero
 40128d0:	1000e21e 	bne	r2,zero,4012c5c <_dtoa_r+0x12e0>
 40128d4:	d9000317 	ldw	r4,12(sp)
 40128d8:	0005883a 	mov	r2,zero
 40128dc:	00cff834 	movhi	r3,16352
 40128e0:	200c90fa 	slli	r6,r4,3
 40128e4:	01010074 	movhi	r4,1025
 40128e8:	211a6604 	addi	r4,r4,27032
 40128ec:	180b883a 	mov	r5,r3
 40128f0:	310d883a 	add	r6,r6,r4
 40128f4:	327fff17 	ldw	r9,-4(r6)
 40128f8:	323ffe17 	ldw	r8,-8(r6)
 40128fc:	1009883a 	mov	r4,r2
 4012900:	480f883a 	mov	r7,r9
 4012904:	400d883a 	mov	r6,r8
 4012908:	401561c0 	call	401561c <__divdf3>
 401290c:	180b883a 	mov	r5,r3
 4012910:	b00d883a 	mov	r6,r22
 4012914:	b80f883a 	mov	r7,r23
 4012918:	1009883a 	mov	r4,r2
 401291c:	40151640 	call	4015164 <__subdf3>
 4012920:	a80b883a 	mov	r5,r21
 4012924:	a009883a 	mov	r4,r20
 4012928:	d8c01915 	stw	r3,100(sp)
 401292c:	d8801815 	stw	r2,96(sp)
 4012930:	4015c140 	call	4015c14 <__fixdfsi>
 4012934:	1009883a 	mov	r4,r2
 4012938:	1027883a 	mov	r19,r2
 401293c:	4015b1c0 	call	4015b1c <__floatsidf>
 4012940:	a80b883a 	mov	r5,r21
 4012944:	a009883a 	mov	r4,r20
 4012948:	180f883a 	mov	r7,r3
 401294c:	100d883a 	mov	r6,r2
 4012950:	40151640 	call	4015164 <__subdf3>
 4012954:	d9801817 	ldw	r6,96(sp)
 4012958:	1823883a 	mov	r17,r3
 401295c:	d8801415 	stw	r2,80(sp)
 4012960:	302d883a 	mov	r22,r6
 4012964:	d9800517 	ldw	r6,20(sp)
 4012968:	9cc00c04 	addi	r19,r19,48
 401296c:	dc401515 	stw	r17,84(sp)
 4012970:	d8c01917 	ldw	r3,100(sp)
 4012974:	34c00005 	stb	r19,0(r6)
 4012978:	d8800517 	ldw	r2,20(sp)
 401297c:	d9401917 	ldw	r5,100(sp)
 4012980:	d9801417 	ldw	r6,80(sp)
 4012984:	b009883a 	mov	r4,r22
 4012988:	880f883a 	mov	r7,r17
 401298c:	182f883a 	mov	r23,r3
 4012990:	17000044 	addi	fp,r2,1
 4012994:	40159840 	call	4015984 <__gtdf2>
 4012998:	00804e16 	blt	zero,r2,4012ad4 <_dtoa_r+0x1158>
 401299c:	d9801417 	ldw	r6,80(sp)
 40129a0:	0005883a 	mov	r2,zero
 40129a4:	00cffc34 	movhi	r3,16368
 40129a8:	180b883a 	mov	r5,r3
 40129ac:	880f883a 	mov	r7,r17
 40129b0:	1009883a 	mov	r4,r2
 40129b4:	40151640 	call	4015164 <__subdf3>
 40129b8:	d9401917 	ldw	r5,100(sp)
 40129bc:	180f883a 	mov	r7,r3
 40129c0:	b009883a 	mov	r4,r22
 40129c4:	100d883a 	mov	r6,r2
 40129c8:	40159840 	call	4015984 <__gtdf2>
 40129cc:	00bda216 	blt	zero,r2,4012058 <_dtoa_r+0x6dc>
 40129d0:	d8c00317 	ldw	r3,12(sp)
 40129d4:	00800044 	movi	r2,1
 40129d8:	10c01216 	blt	r2,r3,4012a24 <_dtoa_r+0x10a8>
 40129dc:	003d4506 	br	4011ef4 <_dtoa_r+0x578>
 40129e0:	d9801417 	ldw	r6,80(sp)
 40129e4:	0005883a 	mov	r2,zero
 40129e8:	00cffc34 	movhi	r3,16368
 40129ec:	180b883a 	mov	r5,r3
 40129f0:	880f883a 	mov	r7,r17
 40129f4:	1009883a 	mov	r4,r2
 40129f8:	40151640 	call	4015164 <__subdf3>
 40129fc:	d9c01b17 	ldw	r7,108(sp)
 4012a00:	180b883a 	mov	r5,r3
 4012a04:	1009883a 	mov	r4,r2
 4012a08:	b00d883a 	mov	r6,r22
 4012a0c:	4015a940 	call	4015a94 <__ltdf2>
 4012a10:	103d9116 	blt	r2,zero,4012058 <_dtoa_r+0x6dc>
 4012a14:	d9800517 	ldw	r6,20(sp)
 4012a18:	d9000317 	ldw	r4,12(sp)
 4012a1c:	3105883a 	add	r2,r6,r4
 4012a20:	e0bd3426 	beq	fp,r2,4011ef4 <_dtoa_r+0x578>
 4012a24:	04500934 	movhi	r17,16420
 4012a28:	0021883a 	mov	r16,zero
 4012a2c:	b80b883a 	mov	r5,r23
 4012a30:	b009883a 	mov	r4,r22
 4012a34:	800d883a 	mov	r6,r16
 4012a38:	880f883a 	mov	r7,r17
 4012a3c:	40152580 	call	4015258 <__muldf3>
 4012a40:	d9401517 	ldw	r5,84(sp)
 4012a44:	d9001417 	ldw	r4,80(sp)
 4012a48:	880f883a 	mov	r7,r17
 4012a4c:	000d883a 	mov	r6,zero
 4012a50:	d8801a15 	stw	r2,104(sp)
 4012a54:	d8c01b15 	stw	r3,108(sp)
 4012a58:	40152580 	call	4015258 <__muldf3>
 4012a5c:	180b883a 	mov	r5,r3
 4012a60:	1009883a 	mov	r4,r2
 4012a64:	1823883a 	mov	r17,r3
 4012a68:	1021883a 	mov	r16,r2
 4012a6c:	4015c140 	call	4015c14 <__fixdfsi>
 4012a70:	1009883a 	mov	r4,r2
 4012a74:	102b883a 	mov	r21,r2
 4012a78:	4015b1c0 	call	4015b1c <__floatsidf>
 4012a7c:	880b883a 	mov	r5,r17
 4012a80:	8009883a 	mov	r4,r16
 4012a84:	180f883a 	mov	r7,r3
 4012a88:	100d883a 	mov	r6,r2
 4012a8c:	40151640 	call	4015164 <__subdf3>
 4012a90:	1021883a 	mov	r16,r2
 4012a94:	d9001b17 	ldw	r4,108(sp)
 4012a98:	1823883a 	mov	r17,r3
 4012a9c:	dc001415 	stw	r16,80(sp)
 4012aa0:	ad400c04 	addi	r21,r21,48
 4012aa4:	dc401515 	stw	r17,84(sp)
 4012aa8:	d8801a17 	ldw	r2,104(sp)
 4012aac:	e5400005 	stb	r21,0(fp)
 4012ab0:	202f883a 	mov	r23,r4
 4012ab4:	d9c01b17 	ldw	r7,108(sp)
 4012ab8:	d9001417 	ldw	r4,80(sp)
 4012abc:	880b883a 	mov	r5,r17
 4012ac0:	100d883a 	mov	r6,r2
 4012ac4:	102d883a 	mov	r22,r2
 4012ac8:	e7000044 	addi	fp,fp,1
 4012acc:	4015a940 	call	4015a94 <__ltdf2>
 4012ad0:	103fc30e 	bge	r2,zero,40129e0 <_dtoa_r+0x1064>
 4012ad4:	d9000417 	ldw	r4,16(sp)
 4012ad8:	d9000d15 	stw	r4,52(sp)
 4012adc:	003d7106 	br	40120a4 <_dtoa_r+0x728>
 4012ae0:	d9801717 	ldw	r6,92(sp)
 4012ae4:	00800084 	movi	r2,2
 4012ae8:	11bde60e 	bge	r2,r6,4012284 <_dtoa_r+0x908>
 4012aec:	203cfb1e 	bne	r4,zero,4011edc <_dtoa_r+0x560>
 4012af0:	d9001617 	ldw	r4,88(sp)
 4012af4:	900b883a 	mov	r5,r18
 4012af8:	01800144 	movi	r6,5
 4012afc:	000f883a 	mov	r7,zero
 4012b00:	4013ca80 	call	4013ca8 <__multadd>
 4012b04:	d9000717 	ldw	r4,28(sp)
 4012b08:	100b883a 	mov	r5,r2
 4012b0c:	1025883a 	mov	r18,r2
 4012b10:	40131500 	call	4013150 <__mcmp>
 4012b14:	00bcf10e 	bge	zero,r2,4011edc <_dtoa_r+0x560>
 4012b18:	d8c00d17 	ldw	r3,52(sp)
 4012b1c:	d9000517 	ldw	r4,20(sp)
 4012b20:	d8000615 	stw	zero,24(sp)
 4012b24:	18c00044 	addi	r3,r3,1
 4012b28:	d8c00d15 	stw	r3,52(sp)
 4012b2c:	00800c44 	movi	r2,49
 4012b30:	27000044 	addi	fp,r4,1
 4012b34:	20800005 	stb	r2,0(r4)
 4012b38:	003e8906 	br	4012560 <_dtoa_r+0xbe4>
 4012b3c:	d8c00517 	ldw	r3,20(sp)
 4012b40:	003bc206 	br	4011a4c <_dtoa_r+0xd0>
 4012b44:	01810074 	movhi	r6,1025
 4012b48:	319a9804 	addi	r6,r6,27232
 4012b4c:	30c00917 	ldw	r3,36(r6)
 4012b50:	30800817 	ldw	r2,32(r6)
 4012b54:	d9001217 	ldw	r4,72(sp)
 4012b58:	d9401317 	ldw	r5,76(sp)
 4012b5c:	180f883a 	mov	r7,r3
 4012b60:	100d883a 	mov	r6,r2
 4012b64:	401561c0 	call	401561c <__divdf3>
 4012b68:	948003cc 	andi	r18,r18,15
 4012b6c:	058000c4 	movi	r22,3
 4012b70:	1029883a 	mov	r20,r2
 4012b74:	182b883a 	mov	r21,r3
 4012b78:	003c8906 	br	4011da0 <_dtoa_r+0x424>
 4012b7c:	d9001017 	ldw	r4,64(sp)
 4012b80:	d9800917 	ldw	r6,36(sp)
 4012b84:	0025883a 	mov	r18,zero
 4012b88:	1105c83a 	sub	r2,r2,r4
 4012b8c:	2089883a 	add	r4,r4,r2
 4012b90:	308d883a 	add	r6,r6,r2
 4012b94:	d9001015 	stw	r4,64(sp)
 4012b98:	d9800915 	stw	r6,36(sp)
 4012b9c:	003e3206 	br	4012468 <_dtoa_r+0xaec>
 4012ba0:	28800044 	addi	r2,r5,1
 4012ba4:	27000044 	addi	fp,r4,1
 4012ba8:	20800005 	stb	r2,0(r4)
 4012bac:	003e6c06 	br	4012560 <_dtoa_r+0xbe4>
 4012bb0:	d8800f17 	ldw	r2,60(sp)
 4012bb4:	00bce016 	blt	zero,r2,4011f38 <_dtoa_r+0x5bc>
 4012bb8:	d9800f17 	ldw	r6,60(sp)
 4012bbc:	303cc51e 	bne	r6,zero,4011ed4 <_dtoa_r+0x558>
 4012bc0:	0005883a 	mov	r2,zero
 4012bc4:	00d00534 	movhi	r3,16404
 4012bc8:	980b883a 	mov	r5,r19
 4012bcc:	180f883a 	mov	r7,r3
 4012bd0:	9009883a 	mov	r4,r18
 4012bd4:	100d883a 	mov	r6,r2
 4012bd8:	40152580 	call	4015258 <__muldf3>
 4012bdc:	180b883a 	mov	r5,r3
 4012be0:	a80f883a 	mov	r7,r21
 4012be4:	1009883a 	mov	r4,r2
 4012be8:	a00d883a 	mov	r6,r20
 4012bec:	4015a0c0 	call	4015a0c <__gedf2>
 4012bf0:	103cb80e 	bge	r2,zero,4011ed4 <_dtoa_r+0x558>
 4012bf4:	0027883a 	mov	r19,zero
 4012bf8:	0025883a 	mov	r18,zero
 4012bfc:	003fc606 	br	4012b18 <_dtoa_r+0x119c>
 4012c00:	99400117 	ldw	r5,4(r19)
 4012c04:	d9001617 	ldw	r4,88(sp)
 4012c08:	40135740 	call	4013574 <_Balloc>
 4012c0c:	99800417 	ldw	r6,16(r19)
 4012c10:	11000304 	addi	r4,r2,12
 4012c14:	99400304 	addi	r5,r19,12
 4012c18:	318d883a 	add	r6,r6,r6
 4012c1c:	318d883a 	add	r6,r6,r6
 4012c20:	31800204 	addi	r6,r6,8
 4012c24:	1023883a 	mov	r17,r2
 4012c28:	40014dc0 	call	40014dc <memcpy>
 4012c2c:	d9001617 	ldw	r4,88(sp)
 4012c30:	880b883a 	mov	r5,r17
 4012c34:	01800044 	movi	r6,1
 4012c38:	40139380 	call	4013938 <__lshift>
 4012c3c:	100b883a 	mov	r5,r2
 4012c40:	003d9c06 	br	40122b4 <_dtoa_r+0x938>
 4012c44:	00800e44 	movi	r2,57
 4012c48:	b8807026 	beq	r23,r2,4012e0c <_dtoa_r+0x1490>
 4012c4c:	b8800044 	addi	r2,r23,1
 4012c50:	b7000044 	addi	fp,r22,1
 4012c54:	b0800005 	stb	r2,0(r22)
 4012c58:	003e4106 	br	4012560 <_dtoa_r+0xbe4>
 4012c5c:	d8800317 	ldw	r2,12(sp)
 4012c60:	01810074 	movhi	r6,1025
 4012c64:	319a6604 	addi	r6,r6,27032
 4012c68:	b009883a 	mov	r4,r22
 4012c6c:	100e90fa 	slli	r7,r2,3
 4012c70:	b80b883a 	mov	r5,r23
 4012c74:	398f883a 	add	r7,r7,r6
 4012c78:	38bffe17 	ldw	r2,-8(r7)
 4012c7c:	d9800517 	ldw	r6,20(sp)
 4012c80:	38ffff17 	ldw	r3,-4(r7)
 4012c84:	37000044 	addi	fp,r6,1
 4012c88:	180f883a 	mov	r7,r3
 4012c8c:	100d883a 	mov	r6,r2
 4012c90:	40152580 	call	4015258 <__muldf3>
 4012c94:	a80b883a 	mov	r5,r21
 4012c98:	a009883a 	mov	r4,r20
 4012c9c:	182f883a 	mov	r23,r3
 4012ca0:	102d883a 	mov	r22,r2
 4012ca4:	4015c140 	call	4015c14 <__fixdfsi>
 4012ca8:	1009883a 	mov	r4,r2
 4012cac:	1027883a 	mov	r19,r2
 4012cb0:	4015b1c0 	call	4015b1c <__floatsidf>
 4012cb4:	a80b883a 	mov	r5,r21
 4012cb8:	a009883a 	mov	r4,r20
 4012cbc:	180f883a 	mov	r7,r3
 4012cc0:	100d883a 	mov	r6,r2
 4012cc4:	40151640 	call	4015164 <__subdf3>
 4012cc8:	180b883a 	mov	r5,r3
 4012ccc:	d8c00517 	ldw	r3,20(sp)
 4012cd0:	9cc00c04 	addi	r19,r19,48
 4012cd4:	1009883a 	mov	r4,r2
 4012cd8:	1cc00005 	stb	r19,0(r3)
 4012cdc:	2021883a 	mov	r16,r4
 4012ce0:	d9000317 	ldw	r4,12(sp)
 4012ce4:	00800044 	movi	r2,1
 4012ce8:	2823883a 	mov	r17,r5
 4012cec:	20802226 	beq	r4,r2,4012d78 <_dtoa_r+0x13fc>
 4012cf0:	1029883a 	mov	r20,r2
 4012cf4:	0005883a 	mov	r2,zero
 4012cf8:	00d00934 	movhi	r3,16420
 4012cfc:	180f883a 	mov	r7,r3
 4012d00:	100d883a 	mov	r6,r2
 4012d04:	880b883a 	mov	r5,r17
 4012d08:	8009883a 	mov	r4,r16
 4012d0c:	40152580 	call	4015258 <__muldf3>
 4012d10:	180b883a 	mov	r5,r3
 4012d14:	1009883a 	mov	r4,r2
 4012d18:	1823883a 	mov	r17,r3
 4012d1c:	1021883a 	mov	r16,r2
 4012d20:	4015c140 	call	4015c14 <__fixdfsi>
 4012d24:	1009883a 	mov	r4,r2
 4012d28:	102b883a 	mov	r21,r2
 4012d2c:	4015b1c0 	call	4015b1c <__floatsidf>
 4012d30:	880b883a 	mov	r5,r17
 4012d34:	8009883a 	mov	r4,r16
 4012d38:	180f883a 	mov	r7,r3
 4012d3c:	100d883a 	mov	r6,r2
 4012d40:	40151640 	call	4015164 <__subdf3>
 4012d44:	180b883a 	mov	r5,r3
 4012d48:	d8c00517 	ldw	r3,20(sp)
 4012d4c:	1009883a 	mov	r4,r2
 4012d50:	ad400c04 	addi	r21,r21,48
 4012d54:	1d05883a 	add	r2,r3,r20
 4012d58:	15400005 	stb	r21,0(r2)
 4012d5c:	2021883a 	mov	r16,r4
 4012d60:	d9000317 	ldw	r4,12(sp)
 4012d64:	a5000044 	addi	r20,r20,1
 4012d68:	2823883a 	mov	r17,r5
 4012d6c:	a13fe11e 	bne	r20,r4,4012cf4 <_dtoa_r+0x1378>
 4012d70:	e505883a 	add	r2,fp,r20
 4012d74:	173fffc4 	addi	fp,r2,-1
 4012d78:	0025883a 	mov	r18,zero
 4012d7c:	04cff834 	movhi	r19,16352
 4012d80:	b009883a 	mov	r4,r22
 4012d84:	b80b883a 	mov	r5,r23
 4012d88:	900d883a 	mov	r6,r18
 4012d8c:	980f883a 	mov	r7,r19
 4012d90:	40151e40 	call	40151e4 <__adddf3>
 4012d94:	180b883a 	mov	r5,r3
 4012d98:	1009883a 	mov	r4,r2
 4012d9c:	800d883a 	mov	r6,r16
 4012da0:	880f883a 	mov	r7,r17
 4012da4:	4015a940 	call	4015a94 <__ltdf2>
 4012da8:	103cab16 	blt	r2,zero,4012058 <_dtoa_r+0x6dc>
 4012dac:	0009883a 	mov	r4,zero
 4012db0:	980b883a 	mov	r5,r19
 4012db4:	b80f883a 	mov	r7,r23
 4012db8:	b00d883a 	mov	r6,r22
 4012dbc:	40151640 	call	4015164 <__subdf3>
 4012dc0:	180b883a 	mov	r5,r3
 4012dc4:	880f883a 	mov	r7,r17
 4012dc8:	1009883a 	mov	r4,r2
 4012dcc:	800d883a 	mov	r6,r16
 4012dd0:	40159840 	call	4015984 <__gtdf2>
 4012dd4:	00bc470e 	bge	zero,r2,4011ef4 <_dtoa_r+0x578>
 4012dd8:	00c00c04 	movi	r3,48
 4012ddc:	e73fffc4 	addi	fp,fp,-1
 4012de0:	e0800007 	ldb	r2,0(fp)
 4012de4:	10fffd26 	beq	r2,r3,4012ddc <_dtoa_r+0x1460>
 4012de8:	d9800417 	ldw	r6,16(sp)
 4012dec:	e7000044 	addi	fp,fp,1
 4012df0:	d9800d15 	stw	r6,52(sp)
 4012df4:	003cab06 	br	40120a4 <_dtoa_r+0x728>
 4012df8:	d8c00f17 	ldw	r3,60(sp)
 4012dfc:	d9001117 	ldw	r4,68(sp)
 4012e00:	20e1c83a 	sub	r16,r4,r3
 4012e04:	0007883a 	mov	r3,zero
 4012e08:	003d9b06 	br	4012478 <_dtoa_r+0xafc>
 4012e0c:	00800e44 	movi	r2,57
 4012e10:	b0800005 	stb	r2,0(r22)
 4012e14:	b5800044 	addi	r22,r22,1
 4012e18:	003dc106 	br	4012520 <_dtoa_r+0xba4>
 4012e1c:	05800084 	movi	r22,2
 4012e20:	003bf706 	br	4011e00 <_dtoa_r+0x484>
 4012e24:	d9000f17 	ldw	r4,60(sp)
 4012e28:	013c000e 	bge	zero,r4,4011e2c <_dtoa_r+0x4b0>
 4012e2c:	d9800e17 	ldw	r6,56(sp)
 4012e30:	01bc300e 	bge	zero,r6,4011ef4 <_dtoa_r+0x578>
 4012e34:	0005883a 	mov	r2,zero
 4012e38:	00d00934 	movhi	r3,16420
 4012e3c:	a80b883a 	mov	r5,r21
 4012e40:	180f883a 	mov	r7,r3
 4012e44:	a009883a 	mov	r4,r20
 4012e48:	100d883a 	mov	r6,r2
 4012e4c:	40152580 	call	4015258 <__muldf3>
 4012e50:	b1000044 	addi	r4,r22,1
 4012e54:	1021883a 	mov	r16,r2
 4012e58:	1823883a 	mov	r17,r3
 4012e5c:	4015b1c0 	call	4015b1c <__floatsidf>
 4012e60:	880b883a 	mov	r5,r17
 4012e64:	8009883a 	mov	r4,r16
 4012e68:	180f883a 	mov	r7,r3
 4012e6c:	100d883a 	mov	r6,r2
 4012e70:	40152580 	call	4015258 <__muldf3>
 4012e74:	0011883a 	mov	r8,zero
 4012e78:	02500734 	movhi	r9,16412
 4012e7c:	180b883a 	mov	r5,r3
 4012e80:	480f883a 	mov	r7,r9
 4012e84:	1009883a 	mov	r4,r2
 4012e88:	400d883a 	mov	r6,r8
 4012e8c:	40151e40 	call	40151e4 <__adddf3>
 4012e90:	102d883a 	mov	r22,r2
 4012e94:	00bf3034 	movhi	r2,64704
 4012e98:	10ef883a 	add	r23,r2,r3
 4012e9c:	d8800d17 	ldw	r2,52(sp)
 4012ea0:	d8c00e17 	ldw	r3,56(sp)
 4012ea4:	8029883a 	mov	r20,r16
 4012ea8:	10bfffc4 	addi	r2,r2,-1
 4012eac:	882b883a 	mov	r21,r17
 4012eb0:	d8800415 	stw	r2,16(sp)
 4012eb4:	d8c00315 	stw	r3,12(sp)
 4012eb8:	003e8306 	br	40128c8 <_dtoa_r+0xf4c>
 4012ebc:	d8800117 	ldw	r2,4(sp)
 4012ec0:	dc001117 	ldw	r16,68(sp)
 4012ec4:	dc801017 	ldw	r18,64(sp)
 4012ec8:	00c00d84 	movi	r3,54
 4012ecc:	1887c83a 	sub	r3,r3,r2
 4012ed0:	003d6906 	br	4012478 <_dtoa_r+0xafc>
 4012ed4:	01800044 	movi	r6,1
 4012ed8:	3021883a 	mov	r16,r6
 4012edc:	d9800f15 	stw	r6,60(sp)
 4012ee0:	d9802615 	stw	r6,152(sp)
 4012ee4:	d9800e15 	stw	r6,56(sp)
 4012ee8:	003b9306 	br	4011d38 <_dtoa_r+0x3bc>
 4012eec:	b021883a 	mov	r16,r22
 4012ef0:	dd800f15 	stw	r22,60(sp)
 4012ef4:	003b9006 	br	4011d38 <_dtoa_r+0x3bc>
 4012ef8:	103e221e 	bne	r2,zero,4012784 <_dtoa_r+0xe08>
 4012efc:	b880004c 	andi	r2,r23,1
 4012f00:	1005003a 	cmpeq	r2,r2,zero
 4012f04:	103e1f1e 	bne	r2,zero,4012784 <_dtoa_r+0xe08>
 4012f08:	003e1b06 	br	4012778 <_dtoa_r+0xdfc>
 4012f0c:	d9001617 	ldw	r4,88(sp)
 4012f10:	980b883a 	mov	r5,r19
 4012f14:	01800284 	movi	r6,10
 4012f18:	000f883a 	mov	r7,zero
 4012f1c:	4013ca80 	call	4013ca8 <__multadd>
 4012f20:	d8c00e17 	ldw	r3,56(sp)
 4012f24:	1027883a 	mov	r19,r2
 4012f28:	d8c00f15 	stw	r3,60(sp)
 4012f2c:	003cd306 	br	401227c <_dtoa_r+0x900>

04012f30 <__locale_charset>:
 4012f30:	d0a03017 	ldw	r2,-32576(gp)
 4012f34:	f800283a 	ret

04012f38 <_localeconv_r>:
 4012f38:	00810074 	movhi	r2,1025
 4012f3c:	109a5a04 	addi	r2,r2,26984
 4012f40:	f800283a 	ret

04012f44 <localeconv>:
 4012f44:	008100b4 	movhi	r2,1026
 4012f48:	10a1b704 	addi	r2,r2,-31012
 4012f4c:	11000017 	ldw	r4,0(r2)
 4012f50:	4012f381 	jmpi	4012f38 <_localeconv_r>

04012f54 <_setlocale_r>:
 4012f54:	defffc04 	addi	sp,sp,-16
 4012f58:	00c10074 	movhi	r3,1025
 4012f5c:	18d9d004 	addi	r3,r3,26432
 4012f60:	dc800215 	stw	r18,8(sp)
 4012f64:	dc400115 	stw	r17,4(sp)
 4012f68:	dc000015 	stw	r16,0(sp)
 4012f6c:	2023883a 	mov	r17,r4
 4012f70:	2825883a 	mov	r18,r5
 4012f74:	dfc00315 	stw	ra,12(sp)
 4012f78:	3021883a 	mov	r16,r6
 4012f7c:	3009883a 	mov	r4,r6
 4012f80:	180b883a 	mov	r5,r3
 4012f84:	30000926 	beq	r6,zero,4012fac <_setlocale_r+0x58>
 4012f88:	40140580 	call	4014058 <strcmp>
 4012f8c:	8009883a 	mov	r4,r16
 4012f90:	01410074 	movhi	r5,1025
 4012f94:	295a4104 	addi	r5,r5,26884
 4012f98:	10000b1e 	bne	r2,zero,4012fc8 <_setlocale_r+0x74>
 4012f9c:	8c000d15 	stw	r16,52(r17)
 4012fa0:	8c800c15 	stw	r18,48(r17)
 4012fa4:	00c10074 	movhi	r3,1025
 4012fa8:	18d9d004 	addi	r3,r3,26432
 4012fac:	1805883a 	mov	r2,r3
 4012fb0:	dfc00317 	ldw	ra,12(sp)
 4012fb4:	dc800217 	ldw	r18,8(sp)
 4012fb8:	dc400117 	ldw	r17,4(sp)
 4012fbc:	dc000017 	ldw	r16,0(sp)
 4012fc0:	dec00404 	addi	sp,sp,16
 4012fc4:	f800283a 	ret
 4012fc8:	40140580 	call	4014058 <strcmp>
 4012fcc:	0007883a 	mov	r3,zero
 4012fd0:	103ff226 	beq	r2,zero,4012f9c <_setlocale_r+0x48>
 4012fd4:	003ff506 	br	4012fac <_setlocale_r+0x58>

04012fd8 <setlocale>:
 4012fd8:	018100b4 	movhi	r6,1026
 4012fdc:	31a1b704 	addi	r6,r6,-31012
 4012fe0:	2007883a 	mov	r3,r4
 4012fe4:	31000017 	ldw	r4,0(r6)
 4012fe8:	280d883a 	mov	r6,r5
 4012fec:	180b883a 	mov	r5,r3
 4012ff0:	4012f541 	jmpi	4012f54 <_setlocale_r>

04012ff4 <_Bfree>:
 4012ff4:	28000826 	beq	r5,zero,4013018 <_Bfree+0x24>
 4012ff8:	28800117 	ldw	r2,4(r5)
 4012ffc:	21001317 	ldw	r4,76(r4)
 4013000:	1085883a 	add	r2,r2,r2
 4013004:	1085883a 	add	r2,r2,r2
 4013008:	1105883a 	add	r2,r2,r4
 401300c:	10c00017 	ldw	r3,0(r2)
 4013010:	28c00015 	stw	r3,0(r5)
 4013014:	11400015 	stw	r5,0(r2)
 4013018:	f800283a 	ret

0401301c <__hi0bits>:
 401301c:	20bfffec 	andhi	r2,r4,65535
 4013020:	10001426 	beq	r2,zero,4013074 <__hi0bits+0x58>
 4013024:	0007883a 	mov	r3,zero
 4013028:	20bfc02c 	andhi	r2,r4,65280
 401302c:	1000021e 	bne	r2,zero,4013038 <__hi0bits+0x1c>
 4013030:	2008923a 	slli	r4,r4,8
 4013034:	18c00204 	addi	r3,r3,8
 4013038:	20bc002c 	andhi	r2,r4,61440
 401303c:	1000021e 	bne	r2,zero,4013048 <__hi0bits+0x2c>
 4013040:	2008913a 	slli	r4,r4,4
 4013044:	18c00104 	addi	r3,r3,4
 4013048:	20b0002c 	andhi	r2,r4,49152
 401304c:	1000031e 	bne	r2,zero,401305c <__hi0bits+0x40>
 4013050:	2105883a 	add	r2,r4,r4
 4013054:	18c00084 	addi	r3,r3,2
 4013058:	1089883a 	add	r4,r2,r2
 401305c:	20000316 	blt	r4,zero,401306c <__hi0bits+0x50>
 4013060:	2090002c 	andhi	r2,r4,16384
 4013064:	10000626 	beq	r2,zero,4013080 <__hi0bits+0x64>
 4013068:	18c00044 	addi	r3,r3,1
 401306c:	1805883a 	mov	r2,r3
 4013070:	f800283a 	ret
 4013074:	2008943a 	slli	r4,r4,16
 4013078:	00c00404 	movi	r3,16
 401307c:	003fea06 	br	4013028 <__hi0bits+0xc>
 4013080:	00c00804 	movi	r3,32
 4013084:	1805883a 	mov	r2,r3
 4013088:	f800283a 	ret

0401308c <__lo0bits>:
 401308c:	20c00017 	ldw	r3,0(r4)
 4013090:	188001cc 	andi	r2,r3,7
 4013094:	10000a26 	beq	r2,zero,40130c0 <__lo0bits+0x34>
 4013098:	1880004c 	andi	r2,r3,1
 401309c:	1005003a 	cmpeq	r2,r2,zero
 40130a0:	10002126 	beq	r2,zero,4013128 <__lo0bits+0x9c>
 40130a4:	1880008c 	andi	r2,r3,2
 40130a8:	1000251e 	bne	r2,zero,4013140 <__lo0bits+0xb4>
 40130ac:	1804d0ba 	srli	r2,r3,2
 40130b0:	01400084 	movi	r5,2
 40130b4:	20800015 	stw	r2,0(r4)
 40130b8:	2805883a 	mov	r2,r5
 40130bc:	f800283a 	ret
 40130c0:	18bfffcc 	andi	r2,r3,65535
 40130c4:	10001526 	beq	r2,zero,401311c <__lo0bits+0x90>
 40130c8:	000b883a 	mov	r5,zero
 40130cc:	18803fcc 	andi	r2,r3,255
 40130d0:	1000021e 	bne	r2,zero,40130dc <__lo0bits+0x50>
 40130d4:	1806d23a 	srli	r3,r3,8
 40130d8:	29400204 	addi	r5,r5,8
 40130dc:	188003cc 	andi	r2,r3,15
 40130e0:	1000021e 	bne	r2,zero,40130ec <__lo0bits+0x60>
 40130e4:	1806d13a 	srli	r3,r3,4
 40130e8:	29400104 	addi	r5,r5,4
 40130ec:	188000cc 	andi	r2,r3,3
 40130f0:	1000021e 	bne	r2,zero,40130fc <__lo0bits+0x70>
 40130f4:	1806d0ba 	srli	r3,r3,2
 40130f8:	29400084 	addi	r5,r5,2
 40130fc:	1880004c 	andi	r2,r3,1
 4013100:	1000031e 	bne	r2,zero,4013110 <__lo0bits+0x84>
 4013104:	1806d07a 	srli	r3,r3,1
 4013108:	18000a26 	beq	r3,zero,4013134 <__lo0bits+0xa8>
 401310c:	29400044 	addi	r5,r5,1
 4013110:	2805883a 	mov	r2,r5
 4013114:	20c00015 	stw	r3,0(r4)
 4013118:	f800283a 	ret
 401311c:	1806d43a 	srli	r3,r3,16
 4013120:	01400404 	movi	r5,16
 4013124:	003fe906 	br	40130cc <__lo0bits+0x40>
 4013128:	000b883a 	mov	r5,zero
 401312c:	2805883a 	mov	r2,r5
 4013130:	f800283a 	ret
 4013134:	01400804 	movi	r5,32
 4013138:	2805883a 	mov	r2,r5
 401313c:	f800283a 	ret
 4013140:	1804d07a 	srli	r2,r3,1
 4013144:	01400044 	movi	r5,1
 4013148:	20800015 	stw	r2,0(r4)
 401314c:	003fda06 	br	40130b8 <__lo0bits+0x2c>

04013150 <__mcmp>:
 4013150:	20800417 	ldw	r2,16(r4)
 4013154:	28c00417 	ldw	r3,16(r5)
 4013158:	10cfc83a 	sub	r7,r2,r3
 401315c:	38000c1e 	bne	r7,zero,4013190 <__mcmp+0x40>
 4013160:	18c5883a 	add	r2,r3,r3
 4013164:	1085883a 	add	r2,r2,r2
 4013168:	10c00504 	addi	r3,r2,20
 401316c:	21000504 	addi	r4,r4,20
 4013170:	28cb883a 	add	r5,r5,r3
 4013174:	2085883a 	add	r2,r4,r2
 4013178:	10bfff04 	addi	r2,r2,-4
 401317c:	297fff04 	addi	r5,r5,-4
 4013180:	11800017 	ldw	r6,0(r2)
 4013184:	28c00017 	ldw	r3,0(r5)
 4013188:	30c0031e 	bne	r6,r3,4013198 <__mcmp+0x48>
 401318c:	20bffa36 	bltu	r4,r2,4013178 <__mcmp+0x28>
 4013190:	3805883a 	mov	r2,r7
 4013194:	f800283a 	ret
 4013198:	30c00336 	bltu	r6,r3,40131a8 <__mcmp+0x58>
 401319c:	01c00044 	movi	r7,1
 40131a0:	3805883a 	mov	r2,r7
 40131a4:	f800283a 	ret
 40131a8:	01ffffc4 	movi	r7,-1
 40131ac:	003ff806 	br	4013190 <__mcmp+0x40>

040131b0 <__ulp>:
 40131b0:	295ffc2c 	andhi	r5,r5,32752
 40131b4:	013f3034 	movhi	r4,64704
 40131b8:	290b883a 	add	r5,r5,r4
 40131bc:	0145c83a 	sub	r2,zero,r5
 40131c0:	1007d53a 	srai	r3,r2,20
 40131c4:	000d883a 	mov	r6,zero
 40131c8:	0140040e 	bge	zero,r5,40131dc <__ulp+0x2c>
 40131cc:	280f883a 	mov	r7,r5
 40131d0:	3807883a 	mov	r3,r7
 40131d4:	3005883a 	mov	r2,r6
 40131d8:	f800283a 	ret
 40131dc:	008004c4 	movi	r2,19
 40131e0:	193ffb04 	addi	r4,r3,-20
 40131e4:	10c00c0e 	bge	r2,r3,4013218 <__ulp+0x68>
 40131e8:	008007c4 	movi	r2,31
 40131ec:	1107c83a 	sub	r3,r2,r4
 40131f0:	00800784 	movi	r2,30
 40131f4:	01400044 	movi	r5,1
 40131f8:	11000216 	blt	r2,r4,4013204 <__ulp+0x54>
 40131fc:	00800044 	movi	r2,1
 4013200:	10ca983a 	sll	r5,r2,r3
 4013204:	000f883a 	mov	r7,zero
 4013208:	280d883a 	mov	r6,r5
 401320c:	3807883a 	mov	r3,r7
 4013210:	3005883a 	mov	r2,r6
 4013214:	f800283a 	ret
 4013218:	00800234 	movhi	r2,8
 401321c:	10cfd83a 	sra	r7,r2,r3
 4013220:	000d883a 	mov	r6,zero
 4013224:	3005883a 	mov	r2,r6
 4013228:	3807883a 	mov	r3,r7
 401322c:	f800283a 	ret

04013230 <__b2d>:
 4013230:	20800417 	ldw	r2,16(r4)
 4013234:	defff904 	addi	sp,sp,-28
 4013238:	dd000415 	stw	r20,16(sp)
 401323c:	1085883a 	add	r2,r2,r2
 4013240:	25000504 	addi	r20,r4,20
 4013244:	1085883a 	add	r2,r2,r2
 4013248:	dc000015 	stw	r16,0(sp)
 401324c:	a0a1883a 	add	r16,r20,r2
 4013250:	dd400515 	stw	r21,20(sp)
 4013254:	857fff17 	ldw	r21,-4(r16)
 4013258:	dc400115 	stw	r17,4(sp)
 401325c:	dfc00615 	stw	ra,24(sp)
 4013260:	a809883a 	mov	r4,r21
 4013264:	2823883a 	mov	r17,r5
 4013268:	dcc00315 	stw	r19,12(sp)
 401326c:	dc800215 	stw	r18,8(sp)
 4013270:	401301c0 	call	401301c <__hi0bits>
 4013274:	100b883a 	mov	r5,r2
 4013278:	00800804 	movi	r2,32
 401327c:	1145c83a 	sub	r2,r2,r5
 4013280:	88800015 	stw	r2,0(r17)
 4013284:	00800284 	movi	r2,10
 4013288:	80ffff04 	addi	r3,r16,-4
 401328c:	11401416 	blt	r2,r5,40132e0 <__b2d+0xb0>
 4013290:	008002c4 	movi	r2,11
 4013294:	1149c83a 	sub	r4,r2,r5
 4013298:	a0c02736 	bltu	r20,r3,4013338 <__b2d+0x108>
 401329c:	000d883a 	mov	r6,zero
 40132a0:	28800544 	addi	r2,r5,21
 40132a4:	a906d83a 	srl	r3,r21,r4
 40132a8:	a884983a 	sll	r2,r21,r2
 40132ac:	1ccffc34 	orhi	r19,r3,16368
 40132b0:	11a4b03a 	or	r18,r2,r6
 40132b4:	9005883a 	mov	r2,r18
 40132b8:	9807883a 	mov	r3,r19
 40132bc:	dfc00617 	ldw	ra,24(sp)
 40132c0:	dd400517 	ldw	r21,20(sp)
 40132c4:	dd000417 	ldw	r20,16(sp)
 40132c8:	dcc00317 	ldw	r19,12(sp)
 40132cc:	dc800217 	ldw	r18,8(sp)
 40132d0:	dc400117 	ldw	r17,4(sp)
 40132d4:	dc000017 	ldw	r16,0(sp)
 40132d8:	dec00704 	addi	sp,sp,28
 40132dc:	f800283a 	ret
 40132e0:	a0c00e36 	bltu	r20,r3,401331c <__b2d+0xec>
 40132e4:	293ffd44 	addi	r4,r5,-11
 40132e8:	000d883a 	mov	r6,zero
 40132ec:	20000f26 	beq	r4,zero,401332c <__b2d+0xfc>
 40132f0:	00800804 	movi	r2,32
 40132f4:	110bc83a 	sub	r5,r2,r4
 40132f8:	a0c01236 	bltu	r20,r3,4013344 <__b2d+0x114>
 40132fc:	000f883a 	mov	r7,zero
 4013300:	a904983a 	sll	r2,r21,r4
 4013304:	3146d83a 	srl	r3,r6,r5
 4013308:	3108983a 	sll	r4,r6,r4
 401330c:	108ffc34 	orhi	r2,r2,16368
 4013310:	18a6b03a 	or	r19,r3,r2
 4013314:	3924b03a 	or	r18,r7,r4
 4013318:	003fe606 	br	40132b4 <__b2d+0x84>
 401331c:	293ffd44 	addi	r4,r5,-11
 4013320:	81bffe17 	ldw	r6,-8(r16)
 4013324:	80fffe04 	addi	r3,r16,-8
 4013328:	203ff11e 	bne	r4,zero,40132f0 <__b2d+0xc0>
 401332c:	accffc34 	orhi	r19,r21,16368
 4013330:	3025883a 	mov	r18,r6
 4013334:	003fdf06 	br	40132b4 <__b2d+0x84>
 4013338:	18bfff17 	ldw	r2,-4(r3)
 401333c:	110cd83a 	srl	r6,r2,r4
 4013340:	003fd706 	br	40132a0 <__b2d+0x70>
 4013344:	18bfff17 	ldw	r2,-4(r3)
 4013348:	114ed83a 	srl	r7,r2,r5
 401334c:	003fec06 	br	4013300 <__b2d+0xd0>

04013350 <__ratio>:
 4013350:	defff904 	addi	sp,sp,-28
 4013354:	dc400215 	stw	r17,8(sp)
 4013358:	2823883a 	mov	r17,r5
 401335c:	d80b883a 	mov	r5,sp
 4013360:	dfc00615 	stw	ra,24(sp)
 4013364:	dd000515 	stw	r20,20(sp)
 4013368:	dcc00415 	stw	r19,16(sp)
 401336c:	dc800315 	stw	r18,12(sp)
 4013370:	2025883a 	mov	r18,r4
 4013374:	40132300 	call	4013230 <__b2d>
 4013378:	8809883a 	mov	r4,r17
 401337c:	d9400104 	addi	r5,sp,4
 4013380:	1027883a 	mov	r19,r2
 4013384:	1829883a 	mov	r20,r3
 4013388:	40132300 	call	4013230 <__b2d>
 401338c:	89000417 	ldw	r4,16(r17)
 4013390:	91c00417 	ldw	r7,16(r18)
 4013394:	d9800117 	ldw	r6,4(sp)
 4013398:	180b883a 	mov	r5,r3
 401339c:	390fc83a 	sub	r7,r7,r4
 40133a0:	1009883a 	mov	r4,r2
 40133a4:	d8800017 	ldw	r2,0(sp)
 40133a8:	380e917a 	slli	r7,r7,5
 40133ac:	2011883a 	mov	r8,r4
 40133b0:	1185c83a 	sub	r2,r2,r6
 40133b4:	11c5883a 	add	r2,r2,r7
 40133b8:	1006953a 	slli	r3,r2,20
 40133bc:	2813883a 	mov	r9,r5
 40133c0:	00800d0e 	bge	zero,r2,40133f8 <__ratio+0xa8>
 40133c4:	1d29883a 	add	r20,r3,r20
 40133c8:	a00b883a 	mov	r5,r20
 40133cc:	480f883a 	mov	r7,r9
 40133d0:	9809883a 	mov	r4,r19
 40133d4:	400d883a 	mov	r6,r8
 40133d8:	401561c0 	call	401561c <__divdf3>
 40133dc:	dfc00617 	ldw	ra,24(sp)
 40133e0:	dd000517 	ldw	r20,20(sp)
 40133e4:	dcc00417 	ldw	r19,16(sp)
 40133e8:	dc800317 	ldw	r18,12(sp)
 40133ec:	dc400217 	ldw	r17,8(sp)
 40133f0:	dec00704 	addi	sp,sp,28
 40133f4:	f800283a 	ret
 40133f8:	28d3c83a 	sub	r9,r5,r3
 40133fc:	003ff206 	br	40133c8 <__ratio+0x78>

04013400 <_mprec_log10>:
 4013400:	defffe04 	addi	sp,sp,-8
 4013404:	008005c4 	movi	r2,23
 4013408:	dc000015 	stw	r16,0(sp)
 401340c:	dfc00115 	stw	ra,4(sp)
 4013410:	2021883a 	mov	r16,r4
 4013414:	11000c16 	blt	r2,r4,4013448 <_mprec_log10+0x48>
 4013418:	200490fa 	slli	r2,r4,3
 401341c:	00c10074 	movhi	r3,1025
 4013420:	18da6604 	addi	r3,r3,27032
 4013424:	10c5883a 	add	r2,r2,r3
 4013428:	12400117 	ldw	r9,4(r2)
 401342c:	12000017 	ldw	r8,0(r2)
 4013430:	4807883a 	mov	r3,r9
 4013434:	4005883a 	mov	r2,r8
 4013438:	dfc00117 	ldw	ra,4(sp)
 401343c:	dc000017 	ldw	r16,0(sp)
 4013440:	dec00204 	addi	sp,sp,8
 4013444:	f800283a 	ret
 4013448:	0011883a 	mov	r8,zero
 401344c:	024ffc34 	movhi	r9,16368
 4013450:	0005883a 	mov	r2,zero
 4013454:	00d00934 	movhi	r3,16420
 4013458:	480b883a 	mov	r5,r9
 401345c:	4009883a 	mov	r4,r8
 4013460:	180f883a 	mov	r7,r3
 4013464:	100d883a 	mov	r6,r2
 4013468:	40152580 	call	4015258 <__muldf3>
 401346c:	843fffc4 	addi	r16,r16,-1
 4013470:	1011883a 	mov	r8,r2
 4013474:	1813883a 	mov	r9,r3
 4013478:	803ff51e 	bne	r16,zero,4013450 <_mprec_log10+0x50>
 401347c:	4005883a 	mov	r2,r8
 4013480:	4807883a 	mov	r3,r9
 4013484:	dfc00117 	ldw	ra,4(sp)
 4013488:	dc000017 	ldw	r16,0(sp)
 401348c:	dec00204 	addi	sp,sp,8
 4013490:	f800283a 	ret

04013494 <__copybits>:
 4013494:	297fffc4 	addi	r5,r5,-1
 4013498:	30800417 	ldw	r2,16(r6)
 401349c:	280bd17a 	srai	r5,r5,5
 40134a0:	31800504 	addi	r6,r6,20
 40134a4:	1085883a 	add	r2,r2,r2
 40134a8:	294b883a 	add	r5,r5,r5
 40134ac:	294b883a 	add	r5,r5,r5
 40134b0:	1085883a 	add	r2,r2,r2
 40134b4:	290b883a 	add	r5,r5,r4
 40134b8:	3087883a 	add	r3,r6,r2
 40134bc:	29400104 	addi	r5,r5,4
 40134c0:	30c0052e 	bgeu	r6,r3,40134d8 <__copybits+0x44>
 40134c4:	30800017 	ldw	r2,0(r6)
 40134c8:	31800104 	addi	r6,r6,4
 40134cc:	20800015 	stw	r2,0(r4)
 40134d0:	21000104 	addi	r4,r4,4
 40134d4:	30fffb36 	bltu	r6,r3,40134c4 <__copybits+0x30>
 40134d8:	2140032e 	bgeu	r4,r5,40134e8 <__copybits+0x54>
 40134dc:	20000015 	stw	zero,0(r4)
 40134e0:	21000104 	addi	r4,r4,4
 40134e4:	217ffd36 	bltu	r4,r5,40134dc <__copybits+0x48>
 40134e8:	f800283a 	ret

040134ec <__any_on>:
 40134ec:	20800417 	ldw	r2,16(r4)
 40134f0:	2807d17a 	srai	r3,r5,5
 40134f4:	21000504 	addi	r4,r4,20
 40134f8:	10c00d0e 	bge	r2,r3,4013530 <__any_on+0x44>
 40134fc:	1085883a 	add	r2,r2,r2
 4013500:	1085883a 	add	r2,r2,r2
 4013504:	208d883a 	add	r6,r4,r2
 4013508:	2180182e 	bgeu	r4,r6,401356c <__any_on+0x80>
 401350c:	30bfff17 	ldw	r2,-4(r6)
 4013510:	30ffff04 	addi	r3,r6,-4
 4013514:	1000041e 	bne	r2,zero,4013528 <__any_on+0x3c>
 4013518:	20c0142e 	bgeu	r4,r3,401356c <__any_on+0x80>
 401351c:	18ffff04 	addi	r3,r3,-4
 4013520:	18800017 	ldw	r2,0(r3)
 4013524:	103ffc26 	beq	r2,zero,4013518 <__any_on+0x2c>
 4013528:	00800044 	movi	r2,1
 401352c:	f800283a 	ret
 4013530:	18800a0e 	bge	r3,r2,401355c <__any_on+0x70>
 4013534:	294007cc 	andi	r5,r5,31
 4013538:	28000826 	beq	r5,zero,401355c <__any_on+0x70>
 401353c:	18c5883a 	add	r2,r3,r3
 4013540:	1085883a 	add	r2,r2,r2
 4013544:	208d883a 	add	r6,r4,r2
 4013548:	30c00017 	ldw	r3,0(r6)
 401354c:	1944d83a 	srl	r2,r3,r5
 4013550:	1144983a 	sll	r2,r2,r5
 4013554:	18bff41e 	bne	r3,r2,4013528 <__any_on+0x3c>
 4013558:	003feb06 	br	4013508 <__any_on+0x1c>
 401355c:	18c5883a 	add	r2,r3,r3
 4013560:	1085883a 	add	r2,r2,r2
 4013564:	208d883a 	add	r6,r4,r2
 4013568:	003fe706 	br	4013508 <__any_on+0x1c>
 401356c:	0005883a 	mov	r2,zero
 4013570:	f800283a 	ret

04013574 <_Balloc>:
 4013574:	20c01317 	ldw	r3,76(r4)
 4013578:	defffb04 	addi	sp,sp,-20
 401357c:	dcc00315 	stw	r19,12(sp)
 4013580:	dc800215 	stw	r18,8(sp)
 4013584:	dfc00415 	stw	ra,16(sp)
 4013588:	2825883a 	mov	r18,r5
 401358c:	dc400115 	stw	r17,4(sp)
 4013590:	dc000015 	stw	r16,0(sp)
 4013594:	2027883a 	mov	r19,r4
 4013598:	01800404 	movi	r6,16
 401359c:	01400104 	movi	r5,4
 40135a0:	18001726 	beq	r3,zero,4013600 <_Balloc+0x8c>
 40135a4:	01400044 	movi	r5,1
 40135a8:	9485883a 	add	r2,r18,r18
 40135ac:	2ca2983a 	sll	r17,r5,r18
 40135b0:	1085883a 	add	r2,r2,r2
 40135b4:	10c7883a 	add	r3,r2,r3
 40135b8:	1c000017 	ldw	r16,0(r3)
 40135bc:	8c4d883a 	add	r6,r17,r17
 40135c0:	318d883a 	add	r6,r6,r6
 40135c4:	9809883a 	mov	r4,r19
 40135c8:	31800504 	addi	r6,r6,20
 40135cc:	80001226 	beq	r16,zero,4013618 <_Balloc+0xa4>
 40135d0:	80800017 	ldw	r2,0(r16)
 40135d4:	18800015 	stw	r2,0(r3)
 40135d8:	80000415 	stw	zero,16(r16)
 40135dc:	80000315 	stw	zero,12(r16)
 40135e0:	8005883a 	mov	r2,r16
 40135e4:	dfc00417 	ldw	ra,16(sp)
 40135e8:	dcc00317 	ldw	r19,12(sp)
 40135ec:	dc800217 	ldw	r18,8(sp)
 40135f0:	dc400117 	ldw	r17,4(sp)
 40135f4:	dc000017 	ldw	r16,0(sp)
 40135f8:	dec00504 	addi	sp,sp,20
 40135fc:	f800283a 	ret
 4013600:	40141140 	call	4014114 <_calloc_r>
 4013604:	1007883a 	mov	r3,r2
 4013608:	0021883a 	mov	r16,zero
 401360c:	98801315 	stw	r2,76(r19)
 4013610:	103fe41e 	bne	r2,zero,40135a4 <_Balloc+0x30>
 4013614:	003ff206 	br	40135e0 <_Balloc+0x6c>
 4013618:	40141140 	call	4014114 <_calloc_r>
 401361c:	103ff026 	beq	r2,zero,40135e0 <_Balloc+0x6c>
 4013620:	1021883a 	mov	r16,r2
 4013624:	14800115 	stw	r18,4(r2)
 4013628:	14400215 	stw	r17,8(r2)
 401362c:	003fea06 	br	40135d8 <_Balloc+0x64>

04013630 <__d2b>:
 4013630:	defff504 	addi	sp,sp,-44
 4013634:	dcc00515 	stw	r19,20(sp)
 4013638:	04c00044 	movi	r19,1
 401363c:	dc000215 	stw	r16,8(sp)
 4013640:	2821883a 	mov	r16,r5
 4013644:	980b883a 	mov	r5,r19
 4013648:	ddc00915 	stw	r23,36(sp)
 401364c:	dd800815 	stw	r22,32(sp)
 4013650:	dd400715 	stw	r21,28(sp)
 4013654:	dd000615 	stw	r20,24(sp)
 4013658:	dc800415 	stw	r18,16(sp)
 401365c:	dc400315 	stw	r17,12(sp)
 4013660:	dfc00a15 	stw	ra,40(sp)
 4013664:	3023883a 	mov	r17,r6
 4013668:	382d883a 	mov	r22,r7
 401366c:	ddc00b17 	ldw	r23,44(sp)
 4013670:	40135740 	call	4013574 <_Balloc>
 4013674:	1025883a 	mov	r18,r2
 4013678:	00a00034 	movhi	r2,32768
 401367c:	10bfffc4 	addi	r2,r2,-1
 4013680:	8888703a 	and	r4,r17,r2
 4013684:	202ad53a 	srli	r21,r4,20
 4013688:	00800434 	movhi	r2,16
 401368c:	10bfffc4 	addi	r2,r2,-1
 4013690:	8886703a 	and	r3,r17,r2
 4013694:	a829003a 	cmpeq	r20,r21,zero
 4013698:	800b883a 	mov	r5,r16
 401369c:	d8c00115 	stw	r3,4(sp)
 40136a0:	94000504 	addi	r16,r18,20
 40136a4:	a000021e 	bne	r20,zero,40136b0 <__d2b+0x80>
 40136a8:	18c00434 	orhi	r3,r3,16
 40136ac:	d8c00115 	stw	r3,4(sp)
 40136b0:	28002726 	beq	r5,zero,4013750 <__d2b+0x120>
 40136b4:	d809883a 	mov	r4,sp
 40136b8:	d9400015 	stw	r5,0(sp)
 40136bc:	401308c0 	call	401308c <__lo0bits>
 40136c0:	100d883a 	mov	r6,r2
 40136c4:	10003526 	beq	r2,zero,401379c <__d2b+0x16c>
 40136c8:	d8c00117 	ldw	r3,4(sp)
 40136cc:	00800804 	movi	r2,32
 40136d0:	1185c83a 	sub	r2,r2,r6
 40136d4:	d9000017 	ldw	r4,0(sp)
 40136d8:	1886983a 	sll	r3,r3,r2
 40136dc:	1906b03a 	or	r3,r3,r4
 40136e0:	90c00515 	stw	r3,20(r18)
 40136e4:	d8c00117 	ldw	r3,4(sp)
 40136e8:	1986d83a 	srl	r3,r3,r6
 40136ec:	d8c00115 	stw	r3,4(sp)
 40136f0:	180b003a 	cmpeq	r5,r3,zero
 40136f4:	00800084 	movi	r2,2
 40136f8:	114bc83a 	sub	r5,r2,r5
 40136fc:	80c00115 	stw	r3,4(r16)
 4013700:	91400415 	stw	r5,16(r18)
 4013704:	a0001a1e 	bne	r20,zero,4013770 <__d2b+0x140>
 4013708:	3545883a 	add	r2,r6,r21
 401370c:	10bef344 	addi	r2,r2,-1075
 4013710:	00c00d44 	movi	r3,53
 4013714:	b0800015 	stw	r2,0(r22)
 4013718:	1987c83a 	sub	r3,r3,r6
 401371c:	b8c00015 	stw	r3,0(r23)
 4013720:	9005883a 	mov	r2,r18
 4013724:	dfc00a17 	ldw	ra,40(sp)
 4013728:	ddc00917 	ldw	r23,36(sp)
 401372c:	dd800817 	ldw	r22,32(sp)
 4013730:	dd400717 	ldw	r21,28(sp)
 4013734:	dd000617 	ldw	r20,24(sp)
 4013738:	dcc00517 	ldw	r19,20(sp)
 401373c:	dc800417 	ldw	r18,16(sp)
 4013740:	dc400317 	ldw	r17,12(sp)
 4013744:	dc000217 	ldw	r16,8(sp)
 4013748:	dec00b04 	addi	sp,sp,44
 401374c:	f800283a 	ret
 4013750:	d9000104 	addi	r4,sp,4
 4013754:	401308c0 	call	401308c <__lo0bits>
 4013758:	11800804 	addi	r6,r2,32
 401375c:	d8800117 	ldw	r2,4(sp)
 4013760:	94c00415 	stw	r19,16(r18)
 4013764:	980b883a 	mov	r5,r19
 4013768:	90800515 	stw	r2,20(r18)
 401376c:	a03fe626 	beq	r20,zero,4013708 <__d2b+0xd8>
 4013770:	2945883a 	add	r2,r5,r5
 4013774:	1085883a 	add	r2,r2,r2
 4013778:	1405883a 	add	r2,r2,r16
 401377c:	113fff17 	ldw	r4,-4(r2)
 4013780:	30fef384 	addi	r3,r6,-1074
 4013784:	2820917a 	slli	r16,r5,5
 4013788:	b0c00015 	stw	r3,0(r22)
 401378c:	401301c0 	call	401301c <__hi0bits>
 4013790:	80a1c83a 	sub	r16,r16,r2
 4013794:	bc000015 	stw	r16,0(r23)
 4013798:	003fe106 	br	4013720 <__d2b+0xf0>
 401379c:	d8800017 	ldw	r2,0(sp)
 40137a0:	90800515 	stw	r2,20(r18)
 40137a4:	d8c00117 	ldw	r3,4(sp)
 40137a8:	003fd106 	br	40136f0 <__d2b+0xc0>

040137ac <__mdiff>:
 40137ac:	defffb04 	addi	sp,sp,-20
 40137b0:	dc000015 	stw	r16,0(sp)
 40137b4:	2821883a 	mov	r16,r5
 40137b8:	dc800215 	stw	r18,8(sp)
 40137bc:	300b883a 	mov	r5,r6
 40137c0:	2025883a 	mov	r18,r4
 40137c4:	8009883a 	mov	r4,r16
 40137c8:	dc400115 	stw	r17,4(sp)
 40137cc:	dfc00415 	stw	ra,16(sp)
 40137d0:	dcc00315 	stw	r19,12(sp)
 40137d4:	3023883a 	mov	r17,r6
 40137d8:	40131500 	call	4013150 <__mcmp>
 40137dc:	10004226 	beq	r2,zero,40138e8 <__mdiff+0x13c>
 40137e0:	10005016 	blt	r2,zero,4013924 <__mdiff+0x178>
 40137e4:	0027883a 	mov	r19,zero
 40137e8:	81400117 	ldw	r5,4(r16)
 40137ec:	9009883a 	mov	r4,r18
 40137f0:	40135740 	call	4013574 <_Balloc>
 40137f4:	1019883a 	mov	r12,r2
 40137f8:	82800417 	ldw	r10,16(r16)
 40137fc:	88800417 	ldw	r2,16(r17)
 4013800:	81800504 	addi	r6,r16,20
 4013804:	5287883a 	add	r3,r10,r10
 4013808:	1085883a 	add	r2,r2,r2
 401380c:	18c7883a 	add	r3,r3,r3
 4013810:	1085883a 	add	r2,r2,r2
 4013814:	8a000504 	addi	r8,r17,20
 4013818:	64c00315 	stw	r19,12(r12)
 401381c:	30db883a 	add	r13,r6,r3
 4013820:	4097883a 	add	r11,r8,r2
 4013824:	61c00504 	addi	r7,r12,20
 4013828:	0013883a 	mov	r9,zero
 401382c:	31000017 	ldw	r4,0(r6)
 4013830:	41400017 	ldw	r5,0(r8)
 4013834:	42000104 	addi	r8,r8,4
 4013838:	20bfffcc 	andi	r2,r4,65535
 401383c:	28ffffcc 	andi	r3,r5,65535
 4013840:	10c5c83a 	sub	r2,r2,r3
 4013844:	1245883a 	add	r2,r2,r9
 4013848:	2008d43a 	srli	r4,r4,16
 401384c:	280ad43a 	srli	r5,r5,16
 4013850:	1007d43a 	srai	r3,r2,16
 4013854:	3880000d 	sth	r2,0(r7)
 4013858:	2149c83a 	sub	r4,r4,r5
 401385c:	20c9883a 	add	r4,r4,r3
 4013860:	3900008d 	sth	r4,2(r7)
 4013864:	31800104 	addi	r6,r6,4
 4013868:	39c00104 	addi	r7,r7,4
 401386c:	2013d43a 	srai	r9,r4,16
 4013870:	42ffee36 	bltu	r8,r11,401382c <__mdiff+0x80>
 4013874:	33400c2e 	bgeu	r6,r13,40138a8 <__mdiff+0xfc>
 4013878:	30800017 	ldw	r2,0(r6)
 401387c:	31800104 	addi	r6,r6,4
 4013880:	10ffffcc 	andi	r3,r2,65535
 4013884:	1a47883a 	add	r3,r3,r9
 4013888:	1004d43a 	srli	r2,r2,16
 401388c:	1809d43a 	srai	r4,r3,16
 4013890:	38c0000d 	sth	r3,0(r7)
 4013894:	1105883a 	add	r2,r2,r4
 4013898:	3880008d 	sth	r2,2(r7)
 401389c:	1013d43a 	srai	r9,r2,16
 40138a0:	39c00104 	addi	r7,r7,4
 40138a4:	337ff436 	bltu	r6,r13,4013878 <__mdiff+0xcc>
 40138a8:	38bfff17 	ldw	r2,-4(r7)
 40138ac:	38ffff04 	addi	r3,r7,-4
 40138b0:	1000041e 	bne	r2,zero,40138c4 <__mdiff+0x118>
 40138b4:	18ffff04 	addi	r3,r3,-4
 40138b8:	18800017 	ldw	r2,0(r3)
 40138bc:	52bfffc4 	addi	r10,r10,-1
 40138c0:	103ffc26 	beq	r2,zero,40138b4 <__mdiff+0x108>
 40138c4:	6005883a 	mov	r2,r12
 40138c8:	62800415 	stw	r10,16(r12)
 40138cc:	dfc00417 	ldw	ra,16(sp)
 40138d0:	dcc00317 	ldw	r19,12(sp)
 40138d4:	dc800217 	ldw	r18,8(sp)
 40138d8:	dc400117 	ldw	r17,4(sp)
 40138dc:	dc000017 	ldw	r16,0(sp)
 40138e0:	dec00504 	addi	sp,sp,20
 40138e4:	f800283a 	ret
 40138e8:	9009883a 	mov	r4,r18
 40138ec:	000b883a 	mov	r5,zero
 40138f0:	40135740 	call	4013574 <_Balloc>
 40138f4:	1019883a 	mov	r12,r2
 40138f8:	00800044 	movi	r2,1
 40138fc:	60800415 	stw	r2,16(r12)
 4013900:	6005883a 	mov	r2,r12
 4013904:	60000515 	stw	zero,20(r12)
 4013908:	dfc00417 	ldw	ra,16(sp)
 401390c:	dcc00317 	ldw	r19,12(sp)
 4013910:	dc800217 	ldw	r18,8(sp)
 4013914:	dc400117 	ldw	r17,4(sp)
 4013918:	dc000017 	ldw	r16,0(sp)
 401391c:	dec00504 	addi	sp,sp,20
 4013920:	f800283a 	ret
 4013924:	880d883a 	mov	r6,r17
 4013928:	04c00044 	movi	r19,1
 401392c:	8023883a 	mov	r17,r16
 4013930:	3021883a 	mov	r16,r6
 4013934:	003fac06 	br	40137e8 <__mdiff+0x3c>

04013938 <__lshift>:
 4013938:	defff904 	addi	sp,sp,-28
 401393c:	28800417 	ldw	r2,16(r5)
 4013940:	dc000015 	stw	r16,0(sp)
 4013944:	3021d17a 	srai	r16,r6,5
 4013948:	28c00217 	ldw	r3,8(r5)
 401394c:	10800044 	addi	r2,r2,1
 4013950:	dc400115 	stw	r17,4(sp)
 4013954:	80a3883a 	add	r17,r16,r2
 4013958:	dd400515 	stw	r21,20(sp)
 401395c:	dd000415 	stw	r20,16(sp)
 4013960:	dc800215 	stw	r18,8(sp)
 4013964:	dfc00615 	stw	ra,24(sp)
 4013968:	2825883a 	mov	r18,r5
 401396c:	dcc00315 	stw	r19,12(sp)
 4013970:	3029883a 	mov	r20,r6
 4013974:	202b883a 	mov	r21,r4
 4013978:	29400117 	ldw	r5,4(r5)
 401397c:	1c40030e 	bge	r3,r17,401398c <__lshift+0x54>
 4013980:	18c7883a 	add	r3,r3,r3
 4013984:	29400044 	addi	r5,r5,1
 4013988:	1c7ffd16 	blt	r3,r17,4013980 <__lshift+0x48>
 401398c:	a809883a 	mov	r4,r21
 4013990:	40135740 	call	4013574 <_Balloc>
 4013994:	1027883a 	mov	r19,r2
 4013998:	11400504 	addi	r5,r2,20
 401399c:	0400090e 	bge	zero,r16,40139c4 <__lshift+0x8c>
 40139a0:	2805883a 	mov	r2,r5
 40139a4:	0007883a 	mov	r3,zero
 40139a8:	18c00044 	addi	r3,r3,1
 40139ac:	10000015 	stw	zero,0(r2)
 40139b0:	10800104 	addi	r2,r2,4
 40139b4:	80fffc1e 	bne	r16,r3,40139a8 <__lshift+0x70>
 40139b8:	8405883a 	add	r2,r16,r16
 40139bc:	1085883a 	add	r2,r2,r2
 40139c0:	288b883a 	add	r5,r5,r2
 40139c4:	90800417 	ldw	r2,16(r18)
 40139c8:	91000504 	addi	r4,r18,20
 40139cc:	a18007cc 	andi	r6,r20,31
 40139d0:	1085883a 	add	r2,r2,r2
 40139d4:	1085883a 	add	r2,r2,r2
 40139d8:	208f883a 	add	r7,r4,r2
 40139dc:	30001e26 	beq	r6,zero,4013a58 <__lshift+0x120>
 40139e0:	00800804 	movi	r2,32
 40139e4:	1191c83a 	sub	r8,r2,r6
 40139e8:	0007883a 	mov	r3,zero
 40139ec:	20800017 	ldw	r2,0(r4)
 40139f0:	1184983a 	sll	r2,r2,r6
 40139f4:	1884b03a 	or	r2,r3,r2
 40139f8:	28800015 	stw	r2,0(r5)
 40139fc:	20c00017 	ldw	r3,0(r4)
 4013a00:	21000104 	addi	r4,r4,4
 4013a04:	29400104 	addi	r5,r5,4
 4013a08:	1a06d83a 	srl	r3,r3,r8
 4013a0c:	21fff736 	bltu	r4,r7,40139ec <__lshift+0xb4>
 4013a10:	28c00015 	stw	r3,0(r5)
 4013a14:	18000126 	beq	r3,zero,4013a1c <__lshift+0xe4>
 4013a18:	8c400044 	addi	r17,r17,1
 4013a1c:	88bfffc4 	addi	r2,r17,-1
 4013a20:	98800415 	stw	r2,16(r19)
 4013a24:	a809883a 	mov	r4,r21
 4013a28:	900b883a 	mov	r5,r18
 4013a2c:	4012ff40 	call	4012ff4 <_Bfree>
 4013a30:	9805883a 	mov	r2,r19
 4013a34:	dfc00617 	ldw	ra,24(sp)
 4013a38:	dd400517 	ldw	r21,20(sp)
 4013a3c:	dd000417 	ldw	r20,16(sp)
 4013a40:	dcc00317 	ldw	r19,12(sp)
 4013a44:	dc800217 	ldw	r18,8(sp)
 4013a48:	dc400117 	ldw	r17,4(sp)
 4013a4c:	dc000017 	ldw	r16,0(sp)
 4013a50:	dec00704 	addi	sp,sp,28
 4013a54:	f800283a 	ret
 4013a58:	20800017 	ldw	r2,0(r4)
 4013a5c:	21000104 	addi	r4,r4,4
 4013a60:	28800015 	stw	r2,0(r5)
 4013a64:	29400104 	addi	r5,r5,4
 4013a68:	21ffec2e 	bgeu	r4,r7,4013a1c <__lshift+0xe4>
 4013a6c:	20800017 	ldw	r2,0(r4)
 4013a70:	21000104 	addi	r4,r4,4
 4013a74:	28800015 	stw	r2,0(r5)
 4013a78:	29400104 	addi	r5,r5,4
 4013a7c:	21fff636 	bltu	r4,r7,4013a58 <__lshift+0x120>
 4013a80:	003fe606 	br	4013a1c <__lshift+0xe4>

04013a84 <__multiply>:
 4013a84:	defff904 	addi	sp,sp,-28
 4013a88:	dcc00315 	stw	r19,12(sp)
 4013a8c:	dc800215 	stw	r18,8(sp)
 4013a90:	2cc00417 	ldw	r19,16(r5)
 4013a94:	34800417 	ldw	r18,16(r6)
 4013a98:	dd000415 	stw	r20,16(sp)
 4013a9c:	dc400115 	stw	r17,4(sp)
 4013aa0:	dfc00615 	stw	ra,24(sp)
 4013aa4:	dd400515 	stw	r21,20(sp)
 4013aa8:	dc000015 	stw	r16,0(sp)
 4013aac:	2823883a 	mov	r17,r5
 4013ab0:	3029883a 	mov	r20,r6
 4013ab4:	9c80040e 	bge	r19,r18,4013ac8 <__multiply+0x44>
 4013ab8:	9027883a 	mov	r19,r18
 4013abc:	2c800417 	ldw	r18,16(r5)
 4013ac0:	2829883a 	mov	r20,r5
 4013ac4:	3023883a 	mov	r17,r6
 4013ac8:	88800217 	ldw	r2,8(r17)
 4013acc:	9ca1883a 	add	r16,r19,r18
 4013ad0:	89400117 	ldw	r5,4(r17)
 4013ad4:	1400010e 	bge	r2,r16,4013adc <__multiply+0x58>
 4013ad8:	29400044 	addi	r5,r5,1
 4013adc:	40135740 	call	4013574 <_Balloc>
 4013ae0:	102b883a 	mov	r21,r2
 4013ae4:	8405883a 	add	r2,r16,r16
 4013ae8:	1085883a 	add	r2,r2,r2
 4013aec:	a9000504 	addi	r4,r21,20
 4013af0:	209d883a 	add	r14,r4,r2
 4013af4:	2380042e 	bgeu	r4,r14,4013b08 <__multiply+0x84>
 4013af8:	2005883a 	mov	r2,r4
 4013afc:	10000015 	stw	zero,0(r2)
 4013b00:	10800104 	addi	r2,r2,4
 4013b04:	13bffd36 	bltu	r2,r14,4013afc <__multiply+0x78>
 4013b08:	9485883a 	add	r2,r18,r18
 4013b0c:	9cc7883a 	add	r3,r19,r19
 4013b10:	a1800504 	addi	r6,r20,20
 4013b14:	1085883a 	add	r2,r2,r2
 4013b18:	8b400504 	addi	r13,r17,20
 4013b1c:	18c7883a 	add	r3,r3,r3
 4013b20:	309f883a 	add	r15,r6,r2
 4013b24:	68d7883a 	add	r11,r13,r3
 4013b28:	33c03b2e 	bgeu	r6,r15,4013c18 <__multiply+0x194>
 4013b2c:	2019883a 	mov	r12,r4
 4013b30:	30800017 	ldw	r2,0(r6)
 4013b34:	127fffcc 	andi	r9,r2,65535
 4013b38:	48001826 	beq	r9,zero,4013b9c <__multiply+0x118>
 4013b3c:	6811883a 	mov	r8,r13
 4013b40:	600f883a 	mov	r7,r12
 4013b44:	0015883a 	mov	r10,zero
 4013b48:	40c00017 	ldw	r3,0(r8)
 4013b4c:	39400017 	ldw	r5,0(r7)
 4013b50:	42000104 	addi	r8,r8,4
 4013b54:	193fffcc 	andi	r4,r3,65535
 4013b58:	4909383a 	mul	r4,r9,r4
 4013b5c:	1806d43a 	srli	r3,r3,16
 4013b60:	28bfffcc 	andi	r2,r5,65535
 4013b64:	5085883a 	add	r2,r10,r2
 4013b68:	2089883a 	add	r4,r4,r2
 4013b6c:	48c7383a 	mul	r3,r9,r3
 4013b70:	280ad43a 	srli	r5,r5,16
 4013b74:	2004d43a 	srli	r2,r4,16
 4013b78:	3900000d 	sth	r4,0(r7)
 4013b7c:	1947883a 	add	r3,r3,r5
 4013b80:	10c5883a 	add	r2,r2,r3
 4013b84:	3880008d 	sth	r2,2(r7)
 4013b88:	1014d43a 	srli	r10,r2,16
 4013b8c:	39c00104 	addi	r7,r7,4
 4013b90:	42ffed36 	bltu	r8,r11,4013b48 <__multiply+0xc4>
 4013b94:	3a800015 	stw	r10,0(r7)
 4013b98:	30800017 	ldw	r2,0(r6)
 4013b9c:	1012d43a 	srli	r9,r2,16
 4013ba0:	48001926 	beq	r9,zero,4013c08 <__multiply+0x184>
 4013ba4:	60800017 	ldw	r2,0(r12)
 4013ba8:	6811883a 	mov	r8,r13
 4013bac:	600f883a 	mov	r7,r12
 4013bb0:	0015883a 	mov	r10,zero
 4013bb4:	100b883a 	mov	r5,r2
 4013bb8:	41000017 	ldw	r4,0(r8)
 4013bbc:	2806d43a 	srli	r3,r5,16
 4013bc0:	3880000d 	sth	r2,0(r7)
 4013bc4:	20bfffcc 	andi	r2,r4,65535
 4013bc8:	4885383a 	mul	r2,r9,r2
 4013bcc:	50c7883a 	add	r3,r10,r3
 4013bd0:	2008d43a 	srli	r4,r4,16
 4013bd4:	10c5883a 	add	r2,r2,r3
 4013bd8:	3880008d 	sth	r2,2(r7)
 4013bdc:	39c00104 	addi	r7,r7,4
 4013be0:	39400017 	ldw	r5,0(r7)
 4013be4:	4909383a 	mul	r4,r9,r4
 4013be8:	1004d43a 	srli	r2,r2,16
 4013bec:	28ffffcc 	andi	r3,r5,65535
 4013bf0:	20c9883a 	add	r4,r4,r3
 4013bf4:	1105883a 	add	r2,r2,r4
 4013bf8:	42000104 	addi	r8,r8,4
 4013bfc:	1014d43a 	srli	r10,r2,16
 4013c00:	42ffed36 	bltu	r8,r11,4013bb8 <__multiply+0x134>
 4013c04:	38800015 	stw	r2,0(r7)
 4013c08:	31800104 	addi	r6,r6,4
 4013c0c:	33c0022e 	bgeu	r6,r15,4013c18 <__multiply+0x194>
 4013c10:	63000104 	addi	r12,r12,4
 4013c14:	003fc606 	br	4013b30 <__multiply+0xac>
 4013c18:	0400090e 	bge	zero,r16,4013c40 <__multiply+0x1bc>
 4013c1c:	70bfff17 	ldw	r2,-4(r14)
 4013c20:	70ffff04 	addi	r3,r14,-4
 4013c24:	10000326 	beq	r2,zero,4013c34 <__multiply+0x1b0>
 4013c28:	00000506 	br	4013c40 <__multiply+0x1bc>
 4013c2c:	18800017 	ldw	r2,0(r3)
 4013c30:	1000031e 	bne	r2,zero,4013c40 <__multiply+0x1bc>
 4013c34:	843fffc4 	addi	r16,r16,-1
 4013c38:	18ffff04 	addi	r3,r3,-4
 4013c3c:	803ffb1e 	bne	r16,zero,4013c2c <__multiply+0x1a8>
 4013c40:	a805883a 	mov	r2,r21
 4013c44:	ac000415 	stw	r16,16(r21)
 4013c48:	dfc00617 	ldw	ra,24(sp)
 4013c4c:	dd400517 	ldw	r21,20(sp)
 4013c50:	dd000417 	ldw	r20,16(sp)
 4013c54:	dcc00317 	ldw	r19,12(sp)
 4013c58:	dc800217 	ldw	r18,8(sp)
 4013c5c:	dc400117 	ldw	r17,4(sp)
 4013c60:	dc000017 	ldw	r16,0(sp)
 4013c64:	dec00704 	addi	sp,sp,28
 4013c68:	f800283a 	ret

04013c6c <__i2b>:
 4013c6c:	defffd04 	addi	sp,sp,-12
 4013c70:	dc000015 	stw	r16,0(sp)
 4013c74:	04000044 	movi	r16,1
 4013c78:	dc800115 	stw	r18,4(sp)
 4013c7c:	2825883a 	mov	r18,r5
 4013c80:	800b883a 	mov	r5,r16
 4013c84:	dfc00215 	stw	ra,8(sp)
 4013c88:	40135740 	call	4013574 <_Balloc>
 4013c8c:	14000415 	stw	r16,16(r2)
 4013c90:	14800515 	stw	r18,20(r2)
 4013c94:	dfc00217 	ldw	ra,8(sp)
 4013c98:	dc800117 	ldw	r18,4(sp)
 4013c9c:	dc000017 	ldw	r16,0(sp)
 4013ca0:	dec00304 	addi	sp,sp,12
 4013ca4:	f800283a 	ret

04013ca8 <__multadd>:
 4013ca8:	defffa04 	addi	sp,sp,-24
 4013cac:	dc800215 	stw	r18,8(sp)
 4013cb0:	2c800417 	ldw	r18,16(r5)
 4013cb4:	dd000415 	stw	r20,16(sp)
 4013cb8:	dcc00315 	stw	r19,12(sp)
 4013cbc:	dc000015 	stw	r16,0(sp)
 4013cc0:	dfc00515 	stw	ra,20(sp)
 4013cc4:	3821883a 	mov	r16,r7
 4013cc8:	dc400115 	stw	r17,4(sp)
 4013ccc:	2827883a 	mov	r19,r5
 4013cd0:	2029883a 	mov	r20,r4
 4013cd4:	2a000504 	addi	r8,r5,20
 4013cd8:	000f883a 	mov	r7,zero
 4013cdc:	40800017 	ldw	r2,0(r8)
 4013ce0:	39c00044 	addi	r7,r7,1
 4013ce4:	10ffffcc 	andi	r3,r2,65535
 4013ce8:	1987383a 	mul	r3,r3,r6
 4013cec:	1004d43a 	srli	r2,r2,16
 4013cf0:	1c07883a 	add	r3,r3,r16
 4013cf4:	180ad43a 	srli	r5,r3,16
 4013cf8:	1185383a 	mul	r2,r2,r6
 4013cfc:	18ffffcc 	andi	r3,r3,65535
 4013d00:	1145883a 	add	r2,r2,r5
 4013d04:	1008943a 	slli	r4,r2,16
 4013d08:	1020d43a 	srli	r16,r2,16
 4013d0c:	20c9883a 	add	r4,r4,r3
 4013d10:	41000015 	stw	r4,0(r8)
 4013d14:	42000104 	addi	r8,r8,4
 4013d18:	3cbff016 	blt	r7,r18,4013cdc <__multadd+0x34>
 4013d1c:	80000826 	beq	r16,zero,4013d40 <__multadd+0x98>
 4013d20:	98800217 	ldw	r2,8(r19)
 4013d24:	90800f0e 	bge	r18,r2,4013d64 <__multadd+0xbc>
 4013d28:	9485883a 	add	r2,r18,r18
 4013d2c:	1085883a 	add	r2,r2,r2
 4013d30:	14c5883a 	add	r2,r2,r19
 4013d34:	90c00044 	addi	r3,r18,1
 4013d38:	14000515 	stw	r16,20(r2)
 4013d3c:	98c00415 	stw	r3,16(r19)
 4013d40:	9805883a 	mov	r2,r19
 4013d44:	dfc00517 	ldw	ra,20(sp)
 4013d48:	dd000417 	ldw	r20,16(sp)
 4013d4c:	dcc00317 	ldw	r19,12(sp)
 4013d50:	dc800217 	ldw	r18,8(sp)
 4013d54:	dc400117 	ldw	r17,4(sp)
 4013d58:	dc000017 	ldw	r16,0(sp)
 4013d5c:	dec00604 	addi	sp,sp,24
 4013d60:	f800283a 	ret
 4013d64:	99400117 	ldw	r5,4(r19)
 4013d68:	a009883a 	mov	r4,r20
 4013d6c:	29400044 	addi	r5,r5,1
 4013d70:	40135740 	call	4013574 <_Balloc>
 4013d74:	99800417 	ldw	r6,16(r19)
 4013d78:	99400304 	addi	r5,r19,12
 4013d7c:	11000304 	addi	r4,r2,12
 4013d80:	318d883a 	add	r6,r6,r6
 4013d84:	318d883a 	add	r6,r6,r6
 4013d88:	31800204 	addi	r6,r6,8
 4013d8c:	1023883a 	mov	r17,r2
 4013d90:	40014dc0 	call	40014dc <memcpy>
 4013d94:	980b883a 	mov	r5,r19
 4013d98:	a009883a 	mov	r4,r20
 4013d9c:	4012ff40 	call	4012ff4 <_Bfree>
 4013da0:	8827883a 	mov	r19,r17
 4013da4:	003fe006 	br	4013d28 <__multadd+0x80>

04013da8 <__pow5mult>:
 4013da8:	defffa04 	addi	sp,sp,-24
 4013dac:	308000cc 	andi	r2,r6,3
 4013db0:	dd000415 	stw	r20,16(sp)
 4013db4:	dcc00315 	stw	r19,12(sp)
 4013db8:	dc000015 	stw	r16,0(sp)
 4013dbc:	dfc00515 	stw	ra,20(sp)
 4013dc0:	dc800215 	stw	r18,8(sp)
 4013dc4:	dc400115 	stw	r17,4(sp)
 4013dc8:	3021883a 	mov	r16,r6
 4013dcc:	2027883a 	mov	r19,r4
 4013dd0:	2829883a 	mov	r20,r5
 4013dd4:	10002b1e 	bne	r2,zero,4013e84 <__pow5mult+0xdc>
 4013dd8:	8025d0ba 	srai	r18,r16,2
 4013ddc:	90001b26 	beq	r18,zero,4013e4c <__pow5mult+0xa4>
 4013de0:	9c001217 	ldw	r16,72(r19)
 4013de4:	8000081e 	bne	r16,zero,4013e08 <__pow5mult+0x60>
 4013de8:	00003006 	br	4013eac <__pow5mult+0x104>
 4013dec:	800b883a 	mov	r5,r16
 4013df0:	800d883a 	mov	r6,r16
 4013df4:	9809883a 	mov	r4,r19
 4013df8:	90001426 	beq	r18,zero,4013e4c <__pow5mult+0xa4>
 4013dfc:	80800017 	ldw	r2,0(r16)
 4013e00:	10001b26 	beq	r2,zero,4013e70 <__pow5mult+0xc8>
 4013e04:	1021883a 	mov	r16,r2
 4013e08:	9080004c 	andi	r2,r18,1
 4013e0c:	1005003a 	cmpeq	r2,r2,zero
 4013e10:	9025d07a 	srai	r18,r18,1
 4013e14:	800d883a 	mov	r6,r16
 4013e18:	9809883a 	mov	r4,r19
 4013e1c:	a00b883a 	mov	r5,r20
 4013e20:	103ff21e 	bne	r2,zero,4013dec <__pow5mult+0x44>
 4013e24:	4013a840 	call	4013a84 <__multiply>
 4013e28:	a00b883a 	mov	r5,r20
 4013e2c:	9809883a 	mov	r4,r19
 4013e30:	1023883a 	mov	r17,r2
 4013e34:	4012ff40 	call	4012ff4 <_Bfree>
 4013e38:	8829883a 	mov	r20,r17
 4013e3c:	800b883a 	mov	r5,r16
 4013e40:	800d883a 	mov	r6,r16
 4013e44:	9809883a 	mov	r4,r19
 4013e48:	903fec1e 	bne	r18,zero,4013dfc <__pow5mult+0x54>
 4013e4c:	a005883a 	mov	r2,r20
 4013e50:	dfc00517 	ldw	ra,20(sp)
 4013e54:	dd000417 	ldw	r20,16(sp)
 4013e58:	dcc00317 	ldw	r19,12(sp)
 4013e5c:	dc800217 	ldw	r18,8(sp)
 4013e60:	dc400117 	ldw	r17,4(sp)
 4013e64:	dc000017 	ldw	r16,0(sp)
 4013e68:	dec00604 	addi	sp,sp,24
 4013e6c:	f800283a 	ret
 4013e70:	4013a840 	call	4013a84 <__multiply>
 4013e74:	80800015 	stw	r2,0(r16)
 4013e78:	1021883a 	mov	r16,r2
 4013e7c:	10000015 	stw	zero,0(r2)
 4013e80:	003fe106 	br	4013e08 <__pow5mult+0x60>
 4013e84:	1085883a 	add	r2,r2,r2
 4013e88:	00c10074 	movhi	r3,1025
 4013e8c:	18daac04 	addi	r3,r3,27312
 4013e90:	1085883a 	add	r2,r2,r2
 4013e94:	10c5883a 	add	r2,r2,r3
 4013e98:	11bfff17 	ldw	r6,-4(r2)
 4013e9c:	000f883a 	mov	r7,zero
 4013ea0:	4013ca80 	call	4013ca8 <__multadd>
 4013ea4:	1029883a 	mov	r20,r2
 4013ea8:	003fcb06 	br	4013dd8 <__pow5mult+0x30>
 4013eac:	9809883a 	mov	r4,r19
 4013eb0:	01409c44 	movi	r5,625
 4013eb4:	4013c6c0 	call	4013c6c <__i2b>
 4013eb8:	98801215 	stw	r2,72(r19)
 4013ebc:	1021883a 	mov	r16,r2
 4013ec0:	10000015 	stw	zero,0(r2)
 4013ec4:	003fd006 	br	4013e08 <__pow5mult+0x60>

04013ec8 <__s2b>:
 4013ec8:	defff904 	addi	sp,sp,-28
 4013ecc:	dcc00315 	stw	r19,12(sp)
 4013ed0:	dc800215 	stw	r18,8(sp)
 4013ed4:	2827883a 	mov	r19,r5
 4013ed8:	2025883a 	mov	r18,r4
 4013edc:	01400244 	movi	r5,9
 4013ee0:	39000204 	addi	r4,r7,8
 4013ee4:	dd000415 	stw	r20,16(sp)
 4013ee8:	dc400115 	stw	r17,4(sp)
 4013eec:	dfc00615 	stw	ra,24(sp)
 4013ef0:	dd400515 	stw	r21,20(sp)
 4013ef4:	dc000015 	stw	r16,0(sp)
 4013ef8:	3829883a 	mov	r20,r7
 4013efc:	3023883a 	mov	r17,r6
 4013f00:	4015efc0 	call	4015efc <__divsi3>
 4013f04:	00c00044 	movi	r3,1
 4013f08:	1880350e 	bge	r3,r2,4013fe0 <__s2b+0x118>
 4013f0c:	000b883a 	mov	r5,zero
 4013f10:	18c7883a 	add	r3,r3,r3
 4013f14:	29400044 	addi	r5,r5,1
 4013f18:	18bffd16 	blt	r3,r2,4013f10 <__s2b+0x48>
 4013f1c:	9009883a 	mov	r4,r18
 4013f20:	40135740 	call	4013574 <_Balloc>
 4013f24:	1011883a 	mov	r8,r2
 4013f28:	d8800717 	ldw	r2,28(sp)
 4013f2c:	00c00044 	movi	r3,1
 4013f30:	01800244 	movi	r6,9
 4013f34:	40800515 	stw	r2,20(r8)
 4013f38:	40c00415 	stw	r3,16(r8)
 4013f3c:	3440260e 	bge	r6,r17,4013fd8 <__s2b+0x110>
 4013f40:	3021883a 	mov	r16,r6
 4013f44:	99ab883a 	add	r21,r19,r6
 4013f48:	9c05883a 	add	r2,r19,r16
 4013f4c:	11c00007 	ldb	r7,0(r2)
 4013f50:	400b883a 	mov	r5,r8
 4013f54:	9009883a 	mov	r4,r18
 4013f58:	39fff404 	addi	r7,r7,-48
 4013f5c:	01800284 	movi	r6,10
 4013f60:	4013ca80 	call	4013ca8 <__multadd>
 4013f64:	84000044 	addi	r16,r16,1
 4013f68:	1011883a 	mov	r8,r2
 4013f6c:	8c3ff61e 	bne	r17,r16,4013f48 <__s2b+0x80>
 4013f70:	ac45883a 	add	r2,r21,r17
 4013f74:	117ffe04 	addi	r5,r2,-8
 4013f78:	880d883a 	mov	r6,r17
 4013f7c:	35000c0e 	bge	r6,r20,4013fb0 <__s2b+0xe8>
 4013f80:	a185c83a 	sub	r2,r20,r6
 4013f84:	2821883a 	mov	r16,r5
 4013f88:	28a3883a 	add	r17,r5,r2
 4013f8c:	81c00007 	ldb	r7,0(r16)
 4013f90:	400b883a 	mov	r5,r8
 4013f94:	9009883a 	mov	r4,r18
 4013f98:	39fff404 	addi	r7,r7,-48
 4013f9c:	01800284 	movi	r6,10
 4013fa0:	4013ca80 	call	4013ca8 <__multadd>
 4013fa4:	84000044 	addi	r16,r16,1
 4013fa8:	1011883a 	mov	r8,r2
 4013fac:	847ff71e 	bne	r16,r17,4013f8c <__s2b+0xc4>
 4013fb0:	4005883a 	mov	r2,r8
 4013fb4:	dfc00617 	ldw	ra,24(sp)
 4013fb8:	dd400517 	ldw	r21,20(sp)
 4013fbc:	dd000417 	ldw	r20,16(sp)
 4013fc0:	dcc00317 	ldw	r19,12(sp)
 4013fc4:	dc800217 	ldw	r18,8(sp)
 4013fc8:	dc400117 	ldw	r17,4(sp)
 4013fcc:	dc000017 	ldw	r16,0(sp)
 4013fd0:	dec00704 	addi	sp,sp,28
 4013fd4:	f800283a 	ret
 4013fd8:	99400284 	addi	r5,r19,10
 4013fdc:	003fe706 	br	4013f7c <__s2b+0xb4>
 4013fe0:	000b883a 	mov	r5,zero
 4013fe4:	003fcd06 	br	4013f1c <__s2b+0x54>

04013fe8 <__isinfd>:
 4013fe8:	200d883a 	mov	r6,r4
 4013fec:	0109c83a 	sub	r4,zero,r4
 4013ff0:	2188b03a 	or	r4,r4,r6
 4013ff4:	2008d7fa 	srli	r4,r4,31
 4013ff8:	00a00034 	movhi	r2,32768
 4013ffc:	10bfffc4 	addi	r2,r2,-1
 4014000:	1144703a 	and	r2,r2,r5
 4014004:	2088b03a 	or	r4,r4,r2
 4014008:	009ffc34 	movhi	r2,32752
 401400c:	1105c83a 	sub	r2,r2,r4
 4014010:	0087c83a 	sub	r3,zero,r2
 4014014:	10c4b03a 	or	r2,r2,r3
 4014018:	1004d7fa 	srli	r2,r2,31
 401401c:	00c00044 	movi	r3,1
 4014020:	1885c83a 	sub	r2,r3,r2
 4014024:	f800283a 	ret

04014028 <__isnand>:
 4014028:	200d883a 	mov	r6,r4
 401402c:	0109c83a 	sub	r4,zero,r4
 4014030:	2188b03a 	or	r4,r4,r6
 4014034:	2008d7fa 	srli	r4,r4,31
 4014038:	00a00034 	movhi	r2,32768
 401403c:	10bfffc4 	addi	r2,r2,-1
 4014040:	1144703a 	and	r2,r2,r5
 4014044:	2088b03a 	or	r4,r4,r2
 4014048:	009ffc34 	movhi	r2,32752
 401404c:	1105c83a 	sub	r2,r2,r4
 4014050:	1004d7fa 	srli	r2,r2,31
 4014054:	f800283a 	ret

04014058 <strcmp>:
 4014058:	2144b03a 	or	r2,r4,r5
 401405c:	108000cc 	andi	r2,r2,3
 4014060:	10001d1e 	bne	r2,zero,40140d8 <strcmp+0x80>
 4014064:	200f883a 	mov	r7,r4
 4014068:	28800017 	ldw	r2,0(r5)
 401406c:	21000017 	ldw	r4,0(r4)
 4014070:	280d883a 	mov	r6,r5
 4014074:	2080161e 	bne	r4,r2,40140d0 <strcmp+0x78>
 4014078:	023fbff4 	movhi	r8,65279
 401407c:	423fbfc4 	addi	r8,r8,-257
 4014080:	2207883a 	add	r3,r4,r8
 4014084:	01602074 	movhi	r5,32897
 4014088:	29602004 	addi	r5,r5,-32640
 401408c:	1946703a 	and	r3,r3,r5
 4014090:	0104303a 	nor	r2,zero,r4
 4014094:	10c4703a 	and	r2,r2,r3
 4014098:	10001c1e 	bne	r2,zero,401410c <strcmp+0xb4>
 401409c:	4013883a 	mov	r9,r8
 40140a0:	2811883a 	mov	r8,r5
 40140a4:	00000106 	br	40140ac <strcmp+0x54>
 40140a8:	1800181e 	bne	r3,zero,401410c <strcmp+0xb4>
 40140ac:	39c00104 	addi	r7,r7,4
 40140b0:	39000017 	ldw	r4,0(r7)
 40140b4:	31800104 	addi	r6,r6,4
 40140b8:	31400017 	ldw	r5,0(r6)
 40140bc:	2245883a 	add	r2,r4,r9
 40140c0:	1204703a 	and	r2,r2,r8
 40140c4:	0106303a 	nor	r3,zero,r4
 40140c8:	1886703a 	and	r3,r3,r2
 40140cc:	217ff626 	beq	r4,r5,40140a8 <strcmp+0x50>
 40140d0:	3809883a 	mov	r4,r7
 40140d4:	300b883a 	mov	r5,r6
 40140d8:	20c00007 	ldb	r3,0(r4)
 40140dc:	1800051e 	bne	r3,zero,40140f4 <strcmp+0x9c>
 40140e0:	00000606 	br	40140fc <strcmp+0xa4>
 40140e4:	21000044 	addi	r4,r4,1
 40140e8:	20c00007 	ldb	r3,0(r4)
 40140ec:	29400044 	addi	r5,r5,1
 40140f0:	18000226 	beq	r3,zero,40140fc <strcmp+0xa4>
 40140f4:	28800007 	ldb	r2,0(r5)
 40140f8:	18bffa26 	beq	r3,r2,40140e4 <strcmp+0x8c>
 40140fc:	20c00003 	ldbu	r3,0(r4)
 4014100:	28800003 	ldbu	r2,0(r5)
 4014104:	1885c83a 	sub	r2,r3,r2
 4014108:	f800283a 	ret
 401410c:	0005883a 	mov	r2,zero
 4014110:	f800283a 	ret

04014114 <_calloc_r>:
 4014114:	298b383a 	mul	r5,r5,r6
 4014118:	defffe04 	addi	sp,sp,-8
 401411c:	dc000015 	stw	r16,0(sp)
 4014120:	dfc00115 	stw	ra,4(sp)
 4014124:	4000cb80 	call	4000cb8 <_malloc_r>
 4014128:	1021883a 	mov	r16,r2
 401412c:	01c00904 	movi	r7,36
 4014130:	10000d26 	beq	r2,zero,4014168 <_calloc_r+0x54>
 4014134:	10ffff17 	ldw	r3,-4(r2)
 4014138:	1009883a 	mov	r4,r2
 401413c:	00bfff04 	movi	r2,-4
 4014140:	1886703a 	and	r3,r3,r2
 4014144:	1887883a 	add	r3,r3,r2
 4014148:	180d883a 	mov	r6,r3
 401414c:	000b883a 	mov	r5,zero
 4014150:	38c01736 	bltu	r7,r3,40141b0 <_calloc_r+0x9c>
 4014154:	008004c4 	movi	r2,19
 4014158:	10c00836 	bltu	r2,r3,401417c <_calloc_r+0x68>
 401415c:	20000215 	stw	zero,8(r4)
 4014160:	20000015 	stw	zero,0(r4)
 4014164:	20000115 	stw	zero,4(r4)
 4014168:	8005883a 	mov	r2,r16
 401416c:	dfc00117 	ldw	ra,4(sp)
 4014170:	dc000017 	ldw	r16,0(sp)
 4014174:	dec00204 	addi	sp,sp,8
 4014178:	f800283a 	ret
 401417c:	008006c4 	movi	r2,27
 4014180:	80000015 	stw	zero,0(r16)
 4014184:	80000115 	stw	zero,4(r16)
 4014188:	81000204 	addi	r4,r16,8
 401418c:	10fff32e 	bgeu	r2,r3,401415c <_calloc_r+0x48>
 4014190:	80000215 	stw	zero,8(r16)
 4014194:	80000315 	stw	zero,12(r16)
 4014198:	81000404 	addi	r4,r16,16
 401419c:	19ffef1e 	bne	r3,r7,401415c <_calloc_r+0x48>
 40141a0:	81000604 	addi	r4,r16,24
 40141a4:	80000415 	stw	zero,16(r16)
 40141a8:	80000515 	stw	zero,20(r16)
 40141ac:	003feb06 	br	401415c <_calloc_r+0x48>
 40141b0:	4002a400 	call	4002a40 <memset>
 40141b4:	8005883a 	mov	r2,r16
 40141b8:	dfc00117 	ldw	ra,4(sp)
 40141bc:	dc000017 	ldw	r16,0(sp)
 40141c0:	dec00204 	addi	sp,sp,8
 40141c4:	f800283a 	ret

040141c8 <__udivdi3>:
 40141c8:	defff004 	addi	sp,sp,-64
 40141cc:	2005883a 	mov	r2,r4
 40141d0:	3011883a 	mov	r8,r6
 40141d4:	df000e15 	stw	fp,56(sp)
 40141d8:	dd000a15 	stw	r20,40(sp)
 40141dc:	dc000615 	stw	r16,24(sp)
 40141e0:	dfc00f15 	stw	ra,60(sp)
 40141e4:	ddc00d15 	stw	r23,52(sp)
 40141e8:	dd800c15 	stw	r22,48(sp)
 40141ec:	dd400b15 	stw	r21,44(sp)
 40141f0:	dcc00915 	stw	r19,36(sp)
 40141f4:	dc800815 	stw	r18,32(sp)
 40141f8:	dc400715 	stw	r17,28(sp)
 40141fc:	4021883a 	mov	r16,r8
 4014200:	1039883a 	mov	fp,r2
 4014204:	2829883a 	mov	r20,r5
 4014208:	38003b1e 	bne	r7,zero,40142f8 <__udivdi3+0x130>
 401420c:	2a005c36 	bltu	r5,r8,4014380 <__udivdi3+0x1b8>
 4014210:	4000a626 	beq	r8,zero,40144ac <__udivdi3+0x2e4>
 4014214:	00bfffd4 	movui	r2,65535
 4014218:	14009e36 	bltu	r2,r16,4014494 <__udivdi3+0x2cc>
 401421c:	00803fc4 	movi	r2,255
 4014220:	14013d36 	bltu	r2,r16,4014718 <__udivdi3+0x550>
 4014224:	000b883a 	mov	r5,zero
 4014228:	0005883a 	mov	r2,zero
 401422c:	8084d83a 	srl	r2,r16,r2
 4014230:	01010074 	movhi	r4,1025
 4014234:	211ab404 	addi	r4,r4,27344
 4014238:	01800804 	movi	r6,32
 401423c:	1105883a 	add	r2,r2,r4
 4014240:	10c00003 	ldbu	r3,0(r2)
 4014244:	28c7883a 	add	r3,r5,r3
 4014248:	30edc83a 	sub	r22,r6,r3
 401424c:	b000ee1e 	bne	r22,zero,4014608 <__udivdi3+0x440>
 4014250:	802ad43a 	srli	r21,r16,16
 4014254:	00800044 	movi	r2,1
 4014258:	a423c83a 	sub	r17,r20,r16
 401425c:	85ffffcc 	andi	r23,r16,65535
 4014260:	d8800315 	stw	r2,12(sp)
 4014264:	8809883a 	mov	r4,r17
 4014268:	a80b883a 	mov	r5,r21
 401426c:	4015fbc0 	call	4015fbc <__udivsi3>
 4014270:	8809883a 	mov	r4,r17
 4014274:	a80b883a 	mov	r5,r21
 4014278:	102d883a 	mov	r22,r2
 401427c:	4015fc40 	call	4015fc4 <__umodsi3>
 4014280:	1004943a 	slli	r2,r2,16
 4014284:	e006d43a 	srli	r3,fp,16
 4014288:	bda3383a 	mul	r17,r23,r22
 401428c:	10c4b03a 	or	r2,r2,r3
 4014290:	1440042e 	bgeu	r2,r17,40142a4 <__udivdi3+0xdc>
 4014294:	1405883a 	add	r2,r2,r16
 4014298:	b5bfffc4 	addi	r22,r22,-1
 401429c:	14000136 	bltu	r2,r16,40142a4 <__udivdi3+0xdc>
 40142a0:	14413d36 	bltu	r2,r17,4014798 <__udivdi3+0x5d0>
 40142a4:	1463c83a 	sub	r17,r2,r17
 40142a8:	8809883a 	mov	r4,r17
 40142ac:	a80b883a 	mov	r5,r21
 40142b0:	4015fbc0 	call	4015fbc <__udivsi3>
 40142b4:	8809883a 	mov	r4,r17
 40142b8:	a80b883a 	mov	r5,r21
 40142bc:	1029883a 	mov	r20,r2
 40142c0:	4015fc40 	call	4015fc4 <__umodsi3>
 40142c4:	1004943a 	slli	r2,r2,16
 40142c8:	bd09383a 	mul	r4,r23,r20
 40142cc:	e0ffffcc 	andi	r3,fp,65535
 40142d0:	10c4b03a 	or	r2,r2,r3
 40142d4:	1100042e 	bgeu	r2,r4,40142e8 <__udivdi3+0x120>
 40142d8:	8085883a 	add	r2,r16,r2
 40142dc:	a53fffc4 	addi	r20,r20,-1
 40142e0:	14000136 	bltu	r2,r16,40142e8 <__udivdi3+0x120>
 40142e4:	11012036 	bltu	r2,r4,4014768 <__udivdi3+0x5a0>
 40142e8:	b004943a 	slli	r2,r22,16
 40142ec:	d9000317 	ldw	r4,12(sp)
 40142f0:	a084b03a 	or	r2,r20,r2
 40142f4:	00001506 	br	401434c <__udivdi3+0x184>
 40142f8:	380d883a 	mov	r6,r7
 40142fc:	29c06236 	bltu	r5,r7,4014488 <__udivdi3+0x2c0>
 4014300:	00bfffd4 	movui	r2,65535
 4014304:	11c05a36 	bltu	r2,r7,4014470 <__udivdi3+0x2a8>
 4014308:	00803fc4 	movi	r2,255
 401430c:	11c0fc36 	bltu	r2,r7,4014700 <__udivdi3+0x538>
 4014310:	000b883a 	mov	r5,zero
 4014314:	0005883a 	mov	r2,zero
 4014318:	3084d83a 	srl	r2,r6,r2
 401431c:	01010074 	movhi	r4,1025
 4014320:	211ab404 	addi	r4,r4,27344
 4014324:	01c00804 	movi	r7,32
 4014328:	1105883a 	add	r2,r2,r4
 401432c:	10c00003 	ldbu	r3,0(r2)
 4014330:	28c7883a 	add	r3,r5,r3
 4014334:	38efc83a 	sub	r23,r7,r3
 4014338:	b800691e 	bne	r23,zero,40144e0 <__udivdi3+0x318>
 401433c:	35000136 	bltu	r6,r20,4014344 <__udivdi3+0x17c>
 4014340:	e4005136 	bltu	fp,r16,4014488 <__udivdi3+0x2c0>
 4014344:	00800044 	movi	r2,1
 4014348:	0009883a 	mov	r4,zero
 401434c:	2007883a 	mov	r3,r4
 4014350:	dfc00f17 	ldw	ra,60(sp)
 4014354:	df000e17 	ldw	fp,56(sp)
 4014358:	ddc00d17 	ldw	r23,52(sp)
 401435c:	dd800c17 	ldw	r22,48(sp)
 4014360:	dd400b17 	ldw	r21,44(sp)
 4014364:	dd000a17 	ldw	r20,40(sp)
 4014368:	dcc00917 	ldw	r19,36(sp)
 401436c:	dc800817 	ldw	r18,32(sp)
 4014370:	dc400717 	ldw	r17,28(sp)
 4014374:	dc000617 	ldw	r16,24(sp)
 4014378:	dec01004 	addi	sp,sp,64
 401437c:	f800283a 	ret
 4014380:	00bfffd4 	movui	r2,65535
 4014384:	12005036 	bltu	r2,r8,40144c8 <__udivdi3+0x300>
 4014388:	00803fc4 	movi	r2,255
 401438c:	1200e836 	bltu	r2,r8,4014730 <__udivdi3+0x568>
 4014390:	000b883a 	mov	r5,zero
 4014394:	0005883a 	mov	r2,zero
 4014398:	8084d83a 	srl	r2,r16,r2
 401439c:	01010074 	movhi	r4,1025
 40143a0:	211ab404 	addi	r4,r4,27344
 40143a4:	01800804 	movi	r6,32
 40143a8:	1105883a 	add	r2,r2,r4
 40143ac:	10c00003 	ldbu	r3,0(r2)
 40143b0:	28c7883a 	add	r3,r5,r3
 40143b4:	30cbc83a 	sub	r5,r6,r3
 40143b8:	28000626 	beq	r5,zero,40143d4 <__udivdi3+0x20c>
 40143bc:	3145c83a 	sub	r2,r6,r5
 40143c0:	e084d83a 	srl	r2,fp,r2
 40143c4:	a146983a 	sll	r3,r20,r5
 40143c8:	e178983a 	sll	fp,fp,r5
 40143cc:	8160983a 	sll	r16,r16,r5
 40143d0:	18a8b03a 	or	r20,r3,r2
 40143d4:	802ad43a 	srli	r21,r16,16
 40143d8:	a009883a 	mov	r4,r20
 40143dc:	85ffffcc 	andi	r23,r16,65535
 40143e0:	a80b883a 	mov	r5,r21
 40143e4:	4015fbc0 	call	4015fbc <__udivsi3>
 40143e8:	a009883a 	mov	r4,r20
 40143ec:	a80b883a 	mov	r5,r21
 40143f0:	102d883a 	mov	r22,r2
 40143f4:	4015fc40 	call	4015fc4 <__umodsi3>
 40143f8:	1004943a 	slli	r2,r2,16
 40143fc:	e006d43a 	srli	r3,fp,16
 4014400:	bda3383a 	mul	r17,r23,r22
 4014404:	10c4b03a 	or	r2,r2,r3
 4014408:	1440042e 	bgeu	r2,r17,401441c <__udivdi3+0x254>
 401440c:	1405883a 	add	r2,r2,r16
 4014410:	b5bfffc4 	addi	r22,r22,-1
 4014414:	14000136 	bltu	r2,r16,401441c <__udivdi3+0x254>
 4014418:	1440d536 	bltu	r2,r17,4014770 <__udivdi3+0x5a8>
 401441c:	1463c83a 	sub	r17,r2,r17
 4014420:	8809883a 	mov	r4,r17
 4014424:	a80b883a 	mov	r5,r21
 4014428:	4015fbc0 	call	4015fbc <__udivsi3>
 401442c:	8809883a 	mov	r4,r17
 4014430:	a80b883a 	mov	r5,r21
 4014434:	1029883a 	mov	r20,r2
 4014438:	4015fc40 	call	4015fc4 <__umodsi3>
 401443c:	1004943a 	slli	r2,r2,16
 4014440:	bd09383a 	mul	r4,r23,r20
 4014444:	e0ffffcc 	andi	r3,fp,65535
 4014448:	10c4b03a 	or	r2,r2,r3
 401444c:	1100042e 	bgeu	r2,r4,4014460 <__udivdi3+0x298>
 4014450:	8085883a 	add	r2,r16,r2
 4014454:	a53fffc4 	addi	r20,r20,-1
 4014458:	14000136 	bltu	r2,r16,4014460 <__udivdi3+0x298>
 401445c:	1100c736 	bltu	r2,r4,401477c <__udivdi3+0x5b4>
 4014460:	b004943a 	slli	r2,r22,16
 4014464:	0009883a 	mov	r4,zero
 4014468:	a084b03a 	or	r2,r20,r2
 401446c:	003fb706 	br	401434c <__udivdi3+0x184>
 4014470:	00804034 	movhi	r2,256
 4014474:	10bfffc4 	addi	r2,r2,-1
 4014478:	11c0a436 	bltu	r2,r7,401470c <__udivdi3+0x544>
 401447c:	01400404 	movi	r5,16
 4014480:	2805883a 	mov	r2,r5
 4014484:	003fa406 	br	4014318 <__udivdi3+0x150>
 4014488:	0005883a 	mov	r2,zero
 401448c:	0009883a 	mov	r4,zero
 4014490:	003fae06 	br	401434c <__udivdi3+0x184>
 4014494:	00804034 	movhi	r2,256
 4014498:	10bfffc4 	addi	r2,r2,-1
 401449c:	1400a136 	bltu	r2,r16,4014724 <__udivdi3+0x55c>
 40144a0:	01400404 	movi	r5,16
 40144a4:	2805883a 	mov	r2,r5
 40144a8:	003f6006 	br	401422c <__udivdi3+0x64>
 40144ac:	01000044 	movi	r4,1
 40144b0:	000b883a 	mov	r5,zero
 40144b4:	4015fbc0 	call	4015fbc <__udivsi3>
 40144b8:	1021883a 	mov	r16,r2
 40144bc:	00bfffd4 	movui	r2,65535
 40144c0:	143ff436 	bltu	r2,r16,4014494 <__udivdi3+0x2cc>
 40144c4:	003f5506 	br	401421c <__udivdi3+0x54>
 40144c8:	00804034 	movhi	r2,256
 40144cc:	10bfffc4 	addi	r2,r2,-1
 40144d0:	12009a36 	bltu	r2,r8,401473c <__udivdi3+0x574>
 40144d4:	01400404 	movi	r5,16
 40144d8:	2805883a 	mov	r2,r5
 40144dc:	003fae06 	br	4014398 <__udivdi3+0x1d0>
 40144e0:	3dc5c83a 	sub	r2,r7,r23
 40144e4:	35c8983a 	sll	r4,r6,r23
 40144e8:	8086d83a 	srl	r3,r16,r2
 40144ec:	a0a2d83a 	srl	r17,r20,r2
 40144f0:	e084d83a 	srl	r2,fp,r2
 40144f4:	20eab03a 	or	r21,r4,r3
 40144f8:	a82cd43a 	srli	r22,r21,16
 40144fc:	a5c6983a 	sll	r3,r20,r23
 4014500:	8809883a 	mov	r4,r17
 4014504:	b00b883a 	mov	r5,r22
 4014508:	1886b03a 	or	r3,r3,r2
 401450c:	d8c00215 	stw	r3,8(sp)
 4014510:	4015fbc0 	call	4015fbc <__udivsi3>
 4014514:	8809883a 	mov	r4,r17
 4014518:	b00b883a 	mov	r5,r22
 401451c:	1029883a 	mov	r20,r2
 4014520:	4015fc40 	call	4015fc4 <__umodsi3>
 4014524:	a8ffffcc 	andi	r3,r21,65535
 4014528:	d8c00515 	stw	r3,20(sp)
 401452c:	d9000217 	ldw	r4,8(sp)
 4014530:	d9400517 	ldw	r5,20(sp)
 4014534:	1004943a 	slli	r2,r2,16
 4014538:	2006d43a 	srli	r3,r4,16
 401453c:	85e0983a 	sll	r16,r16,r23
 4014540:	2d23383a 	mul	r17,r5,r20
 4014544:	10c4b03a 	or	r2,r2,r3
 4014548:	dc000015 	stw	r16,0(sp)
 401454c:	1440032e 	bgeu	r2,r17,401455c <__udivdi3+0x394>
 4014550:	1545883a 	add	r2,r2,r21
 4014554:	a53fffc4 	addi	r20,r20,-1
 4014558:	15407f2e 	bgeu	r2,r21,4014758 <__udivdi3+0x590>
 401455c:	1463c83a 	sub	r17,r2,r17
 4014560:	8809883a 	mov	r4,r17
 4014564:	b00b883a 	mov	r5,r22
 4014568:	4015fbc0 	call	4015fbc <__udivsi3>
 401456c:	8809883a 	mov	r4,r17
 4014570:	b00b883a 	mov	r5,r22
 4014574:	1021883a 	mov	r16,r2
 4014578:	4015fc40 	call	4015fc4 <__umodsi3>
 401457c:	d8c00517 	ldw	r3,20(sp)
 4014580:	d9000217 	ldw	r4,8(sp)
 4014584:	1004943a 	slli	r2,r2,16
 4014588:	1c0f383a 	mul	r7,r3,r16
 401458c:	20ffffcc 	andi	r3,r4,65535
 4014590:	10e2b03a 	or	r17,r2,r3
 4014594:	89c0032e 	bgeu	r17,r7,40145a4 <__udivdi3+0x3dc>
 4014598:	8d63883a 	add	r17,r17,r21
 401459c:	843fffc4 	addi	r16,r16,-1
 40145a0:	8d40692e 	bgeu	r17,r21,4014748 <__udivdi3+0x580>
 40145a4:	a008943a 	slli	r4,r20,16
 40145a8:	d9400017 	ldw	r5,0(sp)
 40145ac:	89e3c83a 	sub	r17,r17,r7
 40145b0:	8110b03a 	or	r8,r16,r4
 40145b4:	280cd43a 	srli	r6,r5,16
 40145b8:	28ffffcc 	andi	r3,r5,65535
 40145bc:	40bfffcc 	andi	r2,r8,65535
 40145c0:	400ad43a 	srli	r5,r8,16
 40145c4:	10d3383a 	mul	r9,r2,r3
 40145c8:	1185383a 	mul	r2,r2,r6
 40145cc:	28c7383a 	mul	r3,r5,r3
 40145d0:	4808d43a 	srli	r4,r9,16
 40145d4:	298b383a 	mul	r5,r5,r6
 40145d8:	10c5883a 	add	r2,r2,r3
 40145dc:	2089883a 	add	r4,r4,r2
 40145e0:	20c0022e 	bgeu	r4,r3,40145ec <__udivdi3+0x424>
 40145e4:	00800074 	movhi	r2,1
 40145e8:	288b883a 	add	r5,r5,r2
 40145ec:	2004d43a 	srli	r2,r4,16
 40145f0:	288b883a 	add	r5,r5,r2
 40145f4:	89403f36 	bltu	r17,r5,40146f4 <__udivdi3+0x52c>
 40145f8:	89403926 	beq	r17,r5,40146e0 <__udivdi3+0x518>
 40145fc:	4005883a 	mov	r2,r8
 4014600:	0009883a 	mov	r4,zero
 4014604:	003f5106 	br	401434c <__udivdi3+0x184>
 4014608:	85a0983a 	sll	r16,r16,r22
 401460c:	3585c83a 	sub	r2,r6,r22
 4014610:	a0a2d83a 	srl	r17,r20,r2
 4014614:	802ad43a 	srli	r21,r16,16
 4014618:	e084d83a 	srl	r2,fp,r2
 401461c:	a586983a 	sll	r3,r20,r22
 4014620:	8809883a 	mov	r4,r17
 4014624:	a80b883a 	mov	r5,r21
 4014628:	1886b03a 	or	r3,r3,r2
 401462c:	d8c00115 	stw	r3,4(sp)
 4014630:	4015fbc0 	call	4015fbc <__udivsi3>
 4014634:	8809883a 	mov	r4,r17
 4014638:	a80b883a 	mov	r5,r21
 401463c:	d8800415 	stw	r2,16(sp)
 4014640:	4015fc40 	call	4015fc4 <__umodsi3>
 4014644:	d9000117 	ldw	r4,4(sp)
 4014648:	d9400417 	ldw	r5,16(sp)
 401464c:	1004943a 	slli	r2,r2,16
 4014650:	85ffffcc 	andi	r23,r16,65535
 4014654:	2006d43a 	srli	r3,r4,16
 4014658:	b963383a 	mul	r17,r23,r5
 401465c:	10c4b03a 	or	r2,r2,r3
 4014660:	1440042e 	bgeu	r2,r17,4014674 <__udivdi3+0x4ac>
 4014664:	297fffc4 	addi	r5,r5,-1
 4014668:	1405883a 	add	r2,r2,r16
 401466c:	d9400415 	stw	r5,16(sp)
 4014670:	1400442e 	bgeu	r2,r16,4014784 <__udivdi3+0x5bc>
 4014674:	1463c83a 	sub	r17,r2,r17
 4014678:	8809883a 	mov	r4,r17
 401467c:	a80b883a 	mov	r5,r21
 4014680:	4015fbc0 	call	4015fbc <__udivsi3>
 4014684:	8809883a 	mov	r4,r17
 4014688:	a80b883a 	mov	r5,r21
 401468c:	1029883a 	mov	r20,r2
 4014690:	4015fc40 	call	4015fc4 <__umodsi3>
 4014694:	d9400117 	ldw	r5,4(sp)
 4014698:	1004943a 	slli	r2,r2,16
 401469c:	bd09383a 	mul	r4,r23,r20
 40146a0:	28ffffcc 	andi	r3,r5,65535
 40146a4:	10c6b03a 	or	r3,r2,r3
 40146a8:	1900062e 	bgeu	r3,r4,40146c4 <__udivdi3+0x4fc>
 40146ac:	1c07883a 	add	r3,r3,r16
 40146b0:	a53fffc4 	addi	r20,r20,-1
 40146b4:	1c000336 	bltu	r3,r16,40146c4 <__udivdi3+0x4fc>
 40146b8:	1900022e 	bgeu	r3,r4,40146c4 <__udivdi3+0x4fc>
 40146bc:	a53fffc4 	addi	r20,r20,-1
 40146c0:	1c07883a 	add	r3,r3,r16
 40146c4:	d9400417 	ldw	r5,16(sp)
 40146c8:	e5b8983a 	sll	fp,fp,r22
 40146cc:	1923c83a 	sub	r17,r3,r4
 40146d0:	2804943a 	slli	r2,r5,16
 40146d4:	a0a8b03a 	or	r20,r20,r2
 40146d8:	dd000315 	stw	r20,12(sp)
 40146dc:	003ee106 	br	4014264 <__udivdi3+0x9c>
 40146e0:	2004943a 	slli	r2,r4,16
 40146e4:	e5c8983a 	sll	r4,fp,r23
 40146e8:	48ffffcc 	andi	r3,r9,65535
 40146ec:	10c5883a 	add	r2,r2,r3
 40146f0:	20bfc22e 	bgeu	r4,r2,40145fc <__udivdi3+0x434>
 40146f4:	40bfffc4 	addi	r2,r8,-1
 40146f8:	0009883a 	mov	r4,zero
 40146fc:	003f1306 	br	401434c <__udivdi3+0x184>
 4014700:	01400204 	movi	r5,8
 4014704:	2805883a 	mov	r2,r5
 4014708:	003f0306 	br	4014318 <__udivdi3+0x150>
 401470c:	01400604 	movi	r5,24
 4014710:	2805883a 	mov	r2,r5
 4014714:	003f0006 	br	4014318 <__udivdi3+0x150>
 4014718:	01400204 	movi	r5,8
 401471c:	2805883a 	mov	r2,r5
 4014720:	003ec206 	br	401422c <__udivdi3+0x64>
 4014724:	01400604 	movi	r5,24
 4014728:	2805883a 	mov	r2,r5
 401472c:	003ebf06 	br	401422c <__udivdi3+0x64>
 4014730:	01400204 	movi	r5,8
 4014734:	2805883a 	mov	r2,r5
 4014738:	003f1706 	br	4014398 <__udivdi3+0x1d0>
 401473c:	01400604 	movi	r5,24
 4014740:	2805883a 	mov	r2,r5
 4014744:	003f1406 	br	4014398 <__udivdi3+0x1d0>
 4014748:	89ff962e 	bgeu	r17,r7,40145a4 <__udivdi3+0x3dc>
 401474c:	8d63883a 	add	r17,r17,r21
 4014750:	843fffc4 	addi	r16,r16,-1
 4014754:	003f9306 	br	40145a4 <__udivdi3+0x3dc>
 4014758:	147f802e 	bgeu	r2,r17,401455c <__udivdi3+0x394>
 401475c:	a53fffc4 	addi	r20,r20,-1
 4014760:	1545883a 	add	r2,r2,r21
 4014764:	003f7d06 	br	401455c <__udivdi3+0x394>
 4014768:	a53fffc4 	addi	r20,r20,-1
 401476c:	003ede06 	br	40142e8 <__udivdi3+0x120>
 4014770:	b5bfffc4 	addi	r22,r22,-1
 4014774:	1405883a 	add	r2,r2,r16
 4014778:	003f2806 	br	401441c <__udivdi3+0x254>
 401477c:	a53fffc4 	addi	r20,r20,-1
 4014780:	003f3706 	br	4014460 <__udivdi3+0x298>
 4014784:	147fbb2e 	bgeu	r2,r17,4014674 <__udivdi3+0x4ac>
 4014788:	297fffc4 	addi	r5,r5,-1
 401478c:	1405883a 	add	r2,r2,r16
 4014790:	d9400415 	stw	r5,16(sp)
 4014794:	003fb706 	br	4014674 <__udivdi3+0x4ac>
 4014798:	b5bfffc4 	addi	r22,r22,-1
 401479c:	1405883a 	add	r2,r2,r16
 40147a0:	003ec006 	br	40142a4 <__udivdi3+0xdc>

040147a4 <__umoddi3>:
 40147a4:	defff104 	addi	sp,sp,-60
 40147a8:	dd800b15 	stw	r22,44(sp)
 40147ac:	dd000915 	stw	r20,36(sp)
 40147b0:	dc000515 	stw	r16,20(sp)
 40147b4:	dfc00e15 	stw	ra,56(sp)
 40147b8:	df000d15 	stw	fp,52(sp)
 40147bc:	ddc00c15 	stw	r23,48(sp)
 40147c0:	dd400a15 	stw	r21,40(sp)
 40147c4:	dcc00815 	stw	r19,32(sp)
 40147c8:	dc800715 	stw	r18,28(sp)
 40147cc:	dc400615 	stw	r17,24(sp)
 40147d0:	3021883a 	mov	r16,r6
 40147d4:	202d883a 	mov	r22,r4
 40147d8:	2829883a 	mov	r20,r5
 40147dc:	38002b1e 	bne	r7,zero,401488c <__umoddi3+0xe8>
 40147e0:	29805036 	bltu	r5,r6,4014924 <__umoddi3+0x180>
 40147e4:	30008a26 	beq	r6,zero,4014a10 <__umoddi3+0x26c>
 40147e8:	00bfffd4 	movui	r2,65535
 40147ec:	14008236 	bltu	r2,r16,40149f8 <__umoddi3+0x254>
 40147f0:	00803fc4 	movi	r2,255
 40147f4:	14013636 	bltu	r2,r16,4014cd0 <__umoddi3+0x52c>
 40147f8:	000b883a 	mov	r5,zero
 40147fc:	0005883a 	mov	r2,zero
 4014800:	8084d83a 	srl	r2,r16,r2
 4014804:	01010074 	movhi	r4,1025
 4014808:	211ab404 	addi	r4,r4,27344
 401480c:	01800804 	movi	r6,32
 4014810:	1105883a 	add	r2,r2,r4
 4014814:	10c00003 	ldbu	r3,0(r2)
 4014818:	28c7883a 	add	r3,r5,r3
 401481c:	30efc83a 	sub	r23,r6,r3
 4014820:	b800941e 	bne	r23,zero,4014a74 <__umoddi3+0x2d0>
 4014824:	802ad43a 	srli	r21,r16,16
 4014828:	a423c83a 	sub	r17,r20,r16
 401482c:	0039883a 	mov	fp,zero
 4014830:	853fffcc 	andi	r20,r16,65535
 4014834:	8809883a 	mov	r4,r17
 4014838:	a80b883a 	mov	r5,r21
 401483c:	4015fbc0 	call	4015fbc <__udivsi3>
 4014840:	8809883a 	mov	r4,r17
 4014844:	a80b883a 	mov	r5,r21
 4014848:	a0a3383a 	mul	r17,r20,r2
 401484c:	4015fc40 	call	4015fc4 <__umodsi3>
 4014850:	1004943a 	slli	r2,r2,16
 4014854:	b006d43a 	srli	r3,r22,16
 4014858:	10c4b03a 	or	r2,r2,r3
 401485c:	1440032e 	bgeu	r2,r17,401486c <__umoddi3+0xc8>
 4014860:	1405883a 	add	r2,r2,r16
 4014864:	14000136 	bltu	r2,r16,401486c <__umoddi3+0xc8>
 4014868:	14413536 	bltu	r2,r17,4014d40 <__umoddi3+0x59c>
 401486c:	1463c83a 	sub	r17,r2,r17
 4014870:	8809883a 	mov	r4,r17
 4014874:	a80b883a 	mov	r5,r21
 4014878:	4015fbc0 	call	4015fbc <__udivsi3>
 401487c:	8809883a 	mov	r4,r17
 4014880:	a0a3383a 	mul	r17,r20,r2
 4014884:	a80b883a 	mov	r5,r21
 4014888:	00004d06 	br	40149c0 <__umoddi3+0x21c>
 401488c:	380d883a 	mov	r6,r7
 4014890:	29c0102e 	bgeu	r5,r7,40148d4 <__umoddi3+0x130>
 4014894:	2011883a 	mov	r8,r4
 4014898:	2813883a 	mov	r9,r5
 401489c:	4005883a 	mov	r2,r8
 40148a0:	4807883a 	mov	r3,r9
 40148a4:	dfc00e17 	ldw	ra,56(sp)
 40148a8:	df000d17 	ldw	fp,52(sp)
 40148ac:	ddc00c17 	ldw	r23,48(sp)
 40148b0:	dd800b17 	ldw	r22,44(sp)
 40148b4:	dd400a17 	ldw	r21,40(sp)
 40148b8:	dd000917 	ldw	r20,36(sp)
 40148bc:	dcc00817 	ldw	r19,32(sp)
 40148c0:	dc800717 	ldw	r18,28(sp)
 40148c4:	dc400617 	ldw	r17,24(sp)
 40148c8:	dc000517 	ldw	r16,20(sp)
 40148cc:	dec00f04 	addi	sp,sp,60
 40148d0:	f800283a 	ret
 40148d4:	00bfffd4 	movui	r2,65535
 40148d8:	11c05a36 	bltu	r2,r7,4014a44 <__umoddi3+0x2a0>
 40148dc:	00803fc4 	movi	r2,255
 40148e0:	11c0fe36 	bltu	r2,r7,4014cdc <__umoddi3+0x538>
 40148e4:	000b883a 	mov	r5,zero
 40148e8:	0005883a 	mov	r2,zero
 40148ec:	3084d83a 	srl	r2,r6,r2
 40148f0:	01010074 	movhi	r4,1025
 40148f4:	211ab404 	addi	r4,r4,27344
 40148f8:	01c00804 	movi	r7,32
 40148fc:	1105883a 	add	r2,r2,r4
 4014900:	10c00003 	ldbu	r3,0(r2)
 4014904:	28c7883a 	add	r3,r5,r3
 4014908:	38ebc83a 	sub	r21,r7,r3
 401490c:	a800851e 	bne	r21,zero,4014b24 <__umoddi3+0x380>
 4014910:	35005236 	bltu	r6,r20,4014a5c <__umoddi3+0x2b8>
 4014914:	b400512e 	bgeu	r22,r16,4014a5c <__umoddi3+0x2b8>
 4014918:	b011883a 	mov	r8,r22
 401491c:	a013883a 	mov	r9,r20
 4014920:	003fde06 	br	401489c <__umoddi3+0xf8>
 4014924:	00bfffd4 	movui	r2,65535
 4014928:	11804036 	bltu	r2,r6,4014a2c <__umoddi3+0x288>
 401492c:	00803fc4 	movi	r2,255
 4014930:	1180ed36 	bltu	r2,r6,4014ce8 <__umoddi3+0x544>
 4014934:	000b883a 	mov	r5,zero
 4014938:	0005883a 	mov	r2,zero
 401493c:	8084d83a 	srl	r2,r16,r2
 4014940:	01010074 	movhi	r4,1025
 4014944:	211ab404 	addi	r4,r4,27344
 4014948:	01800804 	movi	r6,32
 401494c:	1105883a 	add	r2,r2,r4
 4014950:	10c00003 	ldbu	r3,0(r2)
 4014954:	28c7883a 	add	r3,r5,r3
 4014958:	30c7c83a 	sub	r3,r6,r3
 401495c:	1800bf1e 	bne	r3,zero,4014c5c <__umoddi3+0x4b8>
 4014960:	0039883a 	mov	fp,zero
 4014964:	802ad43a 	srli	r21,r16,16
 4014968:	a009883a 	mov	r4,r20
 401496c:	85ffffcc 	andi	r23,r16,65535
 4014970:	a80b883a 	mov	r5,r21
 4014974:	4015fbc0 	call	4015fbc <__udivsi3>
 4014978:	a009883a 	mov	r4,r20
 401497c:	a80b883a 	mov	r5,r21
 4014980:	b8a3383a 	mul	r17,r23,r2
 4014984:	4015fc40 	call	4015fc4 <__umodsi3>
 4014988:	1004943a 	slli	r2,r2,16
 401498c:	b006d43a 	srli	r3,r22,16
 4014990:	10c4b03a 	or	r2,r2,r3
 4014994:	1440032e 	bgeu	r2,r17,40149a4 <__umoddi3+0x200>
 4014998:	1405883a 	add	r2,r2,r16
 401499c:	14000136 	bltu	r2,r16,40149a4 <__umoddi3+0x200>
 40149a0:	1440e536 	bltu	r2,r17,4014d38 <__umoddi3+0x594>
 40149a4:	1463c83a 	sub	r17,r2,r17
 40149a8:	8809883a 	mov	r4,r17
 40149ac:	a80b883a 	mov	r5,r21
 40149b0:	4015fbc0 	call	4015fbc <__udivsi3>
 40149b4:	8809883a 	mov	r4,r17
 40149b8:	b8a3383a 	mul	r17,r23,r2
 40149bc:	a80b883a 	mov	r5,r21
 40149c0:	4015fc40 	call	4015fc4 <__umodsi3>
 40149c4:	1004943a 	slli	r2,r2,16
 40149c8:	b0ffffcc 	andi	r3,r22,65535
 40149cc:	10c4b03a 	or	r2,r2,r3
 40149d0:	1440042e 	bgeu	r2,r17,40149e4 <__umoddi3+0x240>
 40149d4:	1405883a 	add	r2,r2,r16
 40149d8:	14000236 	bltu	r2,r16,40149e4 <__umoddi3+0x240>
 40149dc:	1440012e 	bgeu	r2,r17,40149e4 <__umoddi3+0x240>
 40149e0:	1405883a 	add	r2,r2,r16
 40149e4:	1445c83a 	sub	r2,r2,r17
 40149e8:	1724d83a 	srl	r18,r2,fp
 40149ec:	0013883a 	mov	r9,zero
 40149f0:	9011883a 	mov	r8,r18
 40149f4:	003fa906 	br	401489c <__umoddi3+0xf8>
 40149f8:	00804034 	movhi	r2,256
 40149fc:	10bfffc4 	addi	r2,r2,-1
 4014a00:	1400b036 	bltu	r2,r16,4014cc4 <__umoddi3+0x520>
 4014a04:	01400404 	movi	r5,16
 4014a08:	2805883a 	mov	r2,r5
 4014a0c:	003f7c06 	br	4014800 <__umoddi3+0x5c>
 4014a10:	01000044 	movi	r4,1
 4014a14:	000b883a 	mov	r5,zero
 4014a18:	4015fbc0 	call	4015fbc <__udivsi3>
 4014a1c:	1021883a 	mov	r16,r2
 4014a20:	00bfffd4 	movui	r2,65535
 4014a24:	143ff436 	bltu	r2,r16,40149f8 <__umoddi3+0x254>
 4014a28:	003f7106 	br	40147f0 <__umoddi3+0x4c>
 4014a2c:	00804034 	movhi	r2,256
 4014a30:	10bfffc4 	addi	r2,r2,-1
 4014a34:	1180af36 	bltu	r2,r6,4014cf4 <__umoddi3+0x550>
 4014a38:	01400404 	movi	r5,16
 4014a3c:	2805883a 	mov	r2,r5
 4014a40:	003fbe06 	br	401493c <__umoddi3+0x198>
 4014a44:	00804034 	movhi	r2,256
 4014a48:	10bfffc4 	addi	r2,r2,-1
 4014a4c:	11c0ac36 	bltu	r2,r7,4014d00 <__umoddi3+0x55c>
 4014a50:	01400404 	movi	r5,16
 4014a54:	2805883a 	mov	r2,r5
 4014a58:	003fa406 	br	40148ec <__umoddi3+0x148>
 4014a5c:	b409c83a 	sub	r4,r22,r16
 4014a60:	b105803a 	cmpltu	r2,r22,r4
 4014a64:	a187c83a 	sub	r3,r20,r6
 4014a68:	18a9c83a 	sub	r20,r3,r2
 4014a6c:	202d883a 	mov	r22,r4
 4014a70:	003fa906 	br	4014918 <__umoddi3+0x174>
 4014a74:	85e0983a 	sll	r16,r16,r23
 4014a78:	35c5c83a 	sub	r2,r6,r23
 4014a7c:	a0a2d83a 	srl	r17,r20,r2
 4014a80:	802ad43a 	srli	r21,r16,16
 4014a84:	b084d83a 	srl	r2,r22,r2
 4014a88:	a5c6983a 	sll	r3,r20,r23
 4014a8c:	8809883a 	mov	r4,r17
 4014a90:	a80b883a 	mov	r5,r21
 4014a94:	1886b03a 	or	r3,r3,r2
 4014a98:	d8c00115 	stw	r3,4(sp)
 4014a9c:	853fffcc 	andi	r20,r16,65535
 4014aa0:	4015fbc0 	call	4015fbc <__udivsi3>
 4014aa4:	8809883a 	mov	r4,r17
 4014aa8:	a80b883a 	mov	r5,r21
 4014aac:	a0a3383a 	mul	r17,r20,r2
 4014ab0:	4015fc40 	call	4015fc4 <__umodsi3>
 4014ab4:	d9000117 	ldw	r4,4(sp)
 4014ab8:	1004943a 	slli	r2,r2,16
 4014abc:	b839883a 	mov	fp,r23
 4014ac0:	2006d43a 	srli	r3,r4,16
 4014ac4:	10c4b03a 	or	r2,r2,r3
 4014ac8:	1440022e 	bgeu	r2,r17,4014ad4 <__umoddi3+0x330>
 4014acc:	1405883a 	add	r2,r2,r16
 4014ad0:	1400962e 	bgeu	r2,r16,4014d2c <__umoddi3+0x588>
 4014ad4:	1463c83a 	sub	r17,r2,r17
 4014ad8:	8809883a 	mov	r4,r17
 4014adc:	a80b883a 	mov	r5,r21
 4014ae0:	4015fbc0 	call	4015fbc <__udivsi3>
 4014ae4:	8809883a 	mov	r4,r17
 4014ae8:	a80b883a 	mov	r5,r21
 4014aec:	a0a3383a 	mul	r17,r20,r2
 4014af0:	4015fc40 	call	4015fc4 <__umodsi3>
 4014af4:	d9400117 	ldw	r5,4(sp)
 4014af8:	1004943a 	slli	r2,r2,16
 4014afc:	28ffffcc 	andi	r3,r5,65535
 4014b00:	10c4b03a 	or	r2,r2,r3
 4014b04:	1440042e 	bgeu	r2,r17,4014b18 <__umoddi3+0x374>
 4014b08:	1405883a 	add	r2,r2,r16
 4014b0c:	14000236 	bltu	r2,r16,4014b18 <__umoddi3+0x374>
 4014b10:	1440012e 	bgeu	r2,r17,4014b18 <__umoddi3+0x374>
 4014b14:	1405883a 	add	r2,r2,r16
 4014b18:	b5ec983a 	sll	r22,r22,r23
 4014b1c:	1463c83a 	sub	r17,r2,r17
 4014b20:	003f4406 	br	4014834 <__umoddi3+0x90>
 4014b24:	3d4fc83a 	sub	r7,r7,r21
 4014b28:	3546983a 	sll	r3,r6,r21
 4014b2c:	81c4d83a 	srl	r2,r16,r7
 4014b30:	a1e2d83a 	srl	r17,r20,r7
 4014b34:	a54c983a 	sll	r6,r20,r21
 4014b38:	18aeb03a 	or	r23,r3,r2
 4014b3c:	b828d43a 	srli	r20,r23,16
 4014b40:	b1c4d83a 	srl	r2,r22,r7
 4014b44:	8809883a 	mov	r4,r17
 4014b48:	a00b883a 	mov	r5,r20
 4014b4c:	308cb03a 	or	r6,r6,r2
 4014b50:	d9c00315 	stw	r7,12(sp)
 4014b54:	d9800215 	stw	r6,8(sp)
 4014b58:	4015fbc0 	call	4015fbc <__udivsi3>
 4014b5c:	8809883a 	mov	r4,r17
 4014b60:	a00b883a 	mov	r5,r20
 4014b64:	1039883a 	mov	fp,r2
 4014b68:	4015fc40 	call	4015fc4 <__umodsi3>
 4014b6c:	b8ffffcc 	andi	r3,r23,65535
 4014b70:	d8c00415 	stw	r3,16(sp)
 4014b74:	d9000217 	ldw	r4,8(sp)
 4014b78:	d9400417 	ldw	r5,16(sp)
 4014b7c:	1004943a 	slli	r2,r2,16
 4014b80:	2006d43a 	srli	r3,r4,16
 4014b84:	8560983a 	sll	r16,r16,r21
 4014b88:	2f23383a 	mul	r17,r5,fp
 4014b8c:	10c4b03a 	or	r2,r2,r3
 4014b90:	dc000015 	stw	r16,0(sp)
 4014b94:	b56c983a 	sll	r22,r22,r21
 4014b98:	1440032e 	bgeu	r2,r17,4014ba8 <__umoddi3+0x404>
 4014b9c:	15c5883a 	add	r2,r2,r23
 4014ba0:	e73fffc4 	addi	fp,fp,-1
 4014ba4:	15c05d2e 	bgeu	r2,r23,4014d1c <__umoddi3+0x578>
 4014ba8:	1463c83a 	sub	r17,r2,r17
 4014bac:	8809883a 	mov	r4,r17
 4014bb0:	a00b883a 	mov	r5,r20
 4014bb4:	4015fbc0 	call	4015fbc <__udivsi3>
 4014bb8:	8809883a 	mov	r4,r17
 4014bbc:	a00b883a 	mov	r5,r20
 4014bc0:	1021883a 	mov	r16,r2
 4014bc4:	4015fc40 	call	4015fc4 <__umodsi3>
 4014bc8:	d8c00417 	ldw	r3,16(sp)
 4014bcc:	d9000217 	ldw	r4,8(sp)
 4014bd0:	1004943a 	slli	r2,r2,16
 4014bd4:	1c23383a 	mul	r17,r3,r16
 4014bd8:	20ffffcc 	andi	r3,r4,65535
 4014bdc:	10ceb03a 	or	r7,r2,r3
 4014be0:	3c40032e 	bgeu	r7,r17,4014bf0 <__umoddi3+0x44c>
 4014be4:	3dcf883a 	add	r7,r7,r23
 4014be8:	843fffc4 	addi	r16,r16,-1
 4014bec:	3dc0472e 	bgeu	r7,r23,4014d0c <__umoddi3+0x568>
 4014bf0:	e004943a 	slli	r2,fp,16
 4014bf4:	d9400017 	ldw	r5,0(sp)
 4014bf8:	3c4fc83a 	sub	r7,r7,r17
 4014bfc:	8084b03a 	or	r2,r16,r2
 4014c00:	28ffffcc 	andi	r3,r5,65535
 4014c04:	280cd43a 	srli	r6,r5,16
 4014c08:	100ad43a 	srli	r5,r2,16
 4014c0c:	10bfffcc 	andi	r2,r2,65535
 4014c10:	10d1383a 	mul	r8,r2,r3
 4014c14:	28c7383a 	mul	r3,r5,r3
 4014c18:	1185383a 	mul	r2,r2,r6
 4014c1c:	4008d43a 	srli	r4,r8,16
 4014c20:	298b383a 	mul	r5,r5,r6
 4014c24:	10c5883a 	add	r2,r2,r3
 4014c28:	2089883a 	add	r4,r4,r2
 4014c2c:	20c0022e 	bgeu	r4,r3,4014c38 <__umoddi3+0x494>
 4014c30:	00800074 	movhi	r2,1
 4014c34:	288b883a 	add	r5,r5,r2
 4014c38:	2004d43a 	srli	r2,r4,16
 4014c3c:	2008943a 	slli	r4,r4,16
 4014c40:	40ffffcc 	andi	r3,r8,65535
 4014c44:	288b883a 	add	r5,r5,r2
 4014c48:	20c9883a 	add	r4,r4,r3
 4014c4c:	39400b36 	bltu	r7,r5,4014c7c <__umoddi3+0x4d8>
 4014c50:	39403d26 	beq	r7,r5,4014d48 <__umoddi3+0x5a4>
 4014c54:	394bc83a 	sub	r5,r7,r5
 4014c58:	00000f06 	br	4014c98 <__umoddi3+0x4f4>
 4014c5c:	30c5c83a 	sub	r2,r6,r3
 4014c60:	1839883a 	mov	fp,r3
 4014c64:	b084d83a 	srl	r2,r22,r2
 4014c68:	a0c6983a 	sll	r3,r20,r3
 4014c6c:	8720983a 	sll	r16,r16,fp
 4014c70:	b72c983a 	sll	r22,r22,fp
 4014c74:	18a8b03a 	or	r20,r3,r2
 4014c78:	003f3a06 	br	4014964 <__umoddi3+0x1c0>
 4014c7c:	d8c00017 	ldw	r3,0(sp)
 4014c80:	20c5c83a 	sub	r2,r4,r3
 4014c84:	2089803a 	cmpltu	r4,r4,r2
 4014c88:	2dc7c83a 	sub	r3,r5,r23
 4014c8c:	1907c83a 	sub	r3,r3,r4
 4014c90:	38cbc83a 	sub	r5,r7,r3
 4014c94:	1009883a 	mov	r4,r2
 4014c98:	b105c83a 	sub	r2,r22,r4
 4014c9c:	b087803a 	cmpltu	r3,r22,r2
 4014ca0:	28c7c83a 	sub	r3,r5,r3
 4014ca4:	d9400317 	ldw	r5,12(sp)
 4014ca8:	1544d83a 	srl	r2,r2,r21
 4014cac:	1948983a 	sll	r4,r3,r5
 4014cb0:	1d46d83a 	srl	r3,r3,r21
 4014cb4:	20a4b03a 	or	r18,r4,r2
 4014cb8:	9011883a 	mov	r8,r18
 4014cbc:	1813883a 	mov	r9,r3
 4014cc0:	003ef606 	br	401489c <__umoddi3+0xf8>
 4014cc4:	01400604 	movi	r5,24
 4014cc8:	2805883a 	mov	r2,r5
 4014ccc:	003ecc06 	br	4014800 <__umoddi3+0x5c>
 4014cd0:	01400204 	movi	r5,8
 4014cd4:	2805883a 	mov	r2,r5
 4014cd8:	003ec906 	br	4014800 <__umoddi3+0x5c>
 4014cdc:	01400204 	movi	r5,8
 4014ce0:	2805883a 	mov	r2,r5
 4014ce4:	003f0106 	br	40148ec <__umoddi3+0x148>
 4014ce8:	01400204 	movi	r5,8
 4014cec:	2805883a 	mov	r2,r5
 4014cf0:	003f1206 	br	401493c <__umoddi3+0x198>
 4014cf4:	01400604 	movi	r5,24
 4014cf8:	2805883a 	mov	r2,r5
 4014cfc:	003f0f06 	br	401493c <__umoddi3+0x198>
 4014d00:	01400604 	movi	r5,24
 4014d04:	2805883a 	mov	r2,r5
 4014d08:	003ef806 	br	40148ec <__umoddi3+0x148>
 4014d0c:	3c7fb82e 	bgeu	r7,r17,4014bf0 <__umoddi3+0x44c>
 4014d10:	843fffc4 	addi	r16,r16,-1
 4014d14:	3dcf883a 	add	r7,r7,r23
 4014d18:	003fb506 	br	4014bf0 <__umoddi3+0x44c>
 4014d1c:	147fa22e 	bgeu	r2,r17,4014ba8 <__umoddi3+0x404>
 4014d20:	e73fffc4 	addi	fp,fp,-1
 4014d24:	15c5883a 	add	r2,r2,r23
 4014d28:	003f9f06 	br	4014ba8 <__umoddi3+0x404>
 4014d2c:	147f692e 	bgeu	r2,r17,4014ad4 <__umoddi3+0x330>
 4014d30:	1405883a 	add	r2,r2,r16
 4014d34:	003f6706 	br	4014ad4 <__umoddi3+0x330>
 4014d38:	1405883a 	add	r2,r2,r16
 4014d3c:	003f1906 	br	40149a4 <__umoddi3+0x200>
 4014d40:	1405883a 	add	r2,r2,r16
 4014d44:	003ec906 	br	401486c <__umoddi3+0xc8>
 4014d48:	b13fcc36 	bltu	r22,r4,4014c7c <__umoddi3+0x4d8>
 4014d4c:	000b883a 	mov	r5,zero
 4014d50:	003fd106 	br	4014c98 <__umoddi3+0x4f4>

04014d54 <_fpadd_parts>:
 4014d54:	defff804 	addi	sp,sp,-32
 4014d58:	dcc00315 	stw	r19,12(sp)
 4014d5c:	2027883a 	mov	r19,r4
 4014d60:	21000017 	ldw	r4,0(r4)
 4014d64:	00c00044 	movi	r3,1
 4014d68:	dd400515 	stw	r21,20(sp)
 4014d6c:	dd000415 	stw	r20,16(sp)
 4014d70:	ddc00715 	stw	r23,28(sp)
 4014d74:	dd800615 	stw	r22,24(sp)
 4014d78:	dc800215 	stw	r18,8(sp)
 4014d7c:	dc400115 	stw	r17,4(sp)
 4014d80:	dc000015 	stw	r16,0(sp)
 4014d84:	282b883a 	mov	r21,r5
 4014d88:	3029883a 	mov	r20,r6
 4014d8c:	1900632e 	bgeu	r3,r4,4014f1c <_fpadd_parts+0x1c8>
 4014d90:	28800017 	ldw	r2,0(r5)
 4014d94:	1880812e 	bgeu	r3,r2,4014f9c <_fpadd_parts+0x248>
 4014d98:	00c00104 	movi	r3,4
 4014d9c:	20c0dc26 	beq	r4,r3,4015110 <_fpadd_parts+0x3bc>
 4014da0:	10c07e26 	beq	r2,r3,4014f9c <_fpadd_parts+0x248>
 4014da4:	00c00084 	movi	r3,2
 4014da8:	10c06726 	beq	r2,r3,4014f48 <_fpadd_parts+0x1f4>
 4014dac:	20c07b26 	beq	r4,r3,4014f9c <_fpadd_parts+0x248>
 4014db0:	9dc00217 	ldw	r23,8(r19)
 4014db4:	28c00217 	ldw	r3,8(r5)
 4014db8:	9c400317 	ldw	r17,12(r19)
 4014dbc:	2bc00317 	ldw	r15,12(r5)
 4014dc0:	b8cdc83a 	sub	r6,r23,r3
 4014dc4:	9c800417 	ldw	r18,16(r19)
 4014dc8:	2c000417 	ldw	r16,16(r5)
 4014dcc:	3009883a 	mov	r4,r6
 4014dd0:	30009716 	blt	r6,zero,4015030 <_fpadd_parts+0x2dc>
 4014dd4:	00800fc4 	movi	r2,63
 4014dd8:	11806b16 	blt	r2,r6,4014f88 <_fpadd_parts+0x234>
 4014ddc:	0100a40e 	bge	zero,r4,4015070 <_fpadd_parts+0x31c>
 4014de0:	35bff804 	addi	r22,r6,-32
 4014de4:	b000bc16 	blt	r22,zero,40150d8 <_fpadd_parts+0x384>
 4014de8:	8596d83a 	srl	r11,r16,r22
 4014dec:	0019883a 	mov	r12,zero
 4014df0:	0013883a 	mov	r9,zero
 4014df4:	01000044 	movi	r4,1
 4014df8:	0015883a 	mov	r10,zero
 4014dfc:	b000be16 	blt	r22,zero,40150f8 <_fpadd_parts+0x3a4>
 4014e00:	2590983a 	sll	r8,r4,r22
 4014e04:	000f883a 	mov	r7,zero
 4014e08:	00bfffc4 	movi	r2,-1
 4014e0c:	3889883a 	add	r4,r7,r2
 4014e10:	408b883a 	add	r5,r8,r2
 4014e14:	21cd803a 	cmpltu	r6,r4,r7
 4014e18:	314b883a 	add	r5,r6,r5
 4014e1c:	7904703a 	and	r2,r15,r4
 4014e20:	8146703a 	and	r3,r16,r5
 4014e24:	10c4b03a 	or	r2,r2,r3
 4014e28:	10000226 	beq	r2,zero,4014e34 <_fpadd_parts+0xe0>
 4014e2c:	02400044 	movi	r9,1
 4014e30:	0015883a 	mov	r10,zero
 4014e34:	5a5eb03a 	or	r15,r11,r9
 4014e38:	62a0b03a 	or	r16,r12,r10
 4014e3c:	99400117 	ldw	r5,4(r19)
 4014e40:	a8800117 	ldw	r2,4(r21)
 4014e44:	28806e26 	beq	r5,r2,4015000 <_fpadd_parts+0x2ac>
 4014e48:	28006626 	beq	r5,zero,4014fe4 <_fpadd_parts+0x290>
 4014e4c:	7c45c83a 	sub	r2,r15,r17
 4014e50:	7889803a 	cmpltu	r4,r15,r2
 4014e54:	8487c83a 	sub	r3,r16,r18
 4014e58:	1909c83a 	sub	r4,r3,r4
 4014e5c:	100d883a 	mov	r6,r2
 4014e60:	200f883a 	mov	r7,r4
 4014e64:	38007716 	blt	r7,zero,4015044 <_fpadd_parts+0x2f0>
 4014e68:	a5c00215 	stw	r23,8(r20)
 4014e6c:	a1c00415 	stw	r7,16(r20)
 4014e70:	a0000115 	stw	zero,4(r20)
 4014e74:	a1800315 	stw	r6,12(r20)
 4014e78:	a2000317 	ldw	r8,12(r20)
 4014e7c:	a2400417 	ldw	r9,16(r20)
 4014e80:	00bfffc4 	movi	r2,-1
 4014e84:	408b883a 	add	r5,r8,r2
 4014e88:	2a09803a 	cmpltu	r4,r5,r8
 4014e8c:	488d883a 	add	r6,r9,r2
 4014e90:	01c40034 	movhi	r7,4096
 4014e94:	39ffffc4 	addi	r7,r7,-1
 4014e98:	218d883a 	add	r6,r4,r6
 4014e9c:	39801736 	bltu	r7,r6,4014efc <_fpadd_parts+0x1a8>
 4014ea0:	31c06526 	beq	r6,r7,4015038 <_fpadd_parts+0x2e4>
 4014ea4:	a3000217 	ldw	r12,8(r20)
 4014ea8:	4209883a 	add	r4,r8,r8
 4014eac:	00bfffc4 	movi	r2,-1
 4014eb0:	220f803a 	cmpltu	r7,r4,r8
 4014eb4:	4a4b883a 	add	r5,r9,r9
 4014eb8:	394f883a 	add	r7,r7,r5
 4014ebc:	2095883a 	add	r10,r4,r2
 4014ec0:	3897883a 	add	r11,r7,r2
 4014ec4:	510d803a 	cmpltu	r6,r10,r4
 4014ec8:	6099883a 	add	r12,r12,r2
 4014ecc:	32d7883a 	add	r11,r6,r11
 4014ed0:	00840034 	movhi	r2,4096
 4014ed4:	10bfffc4 	addi	r2,r2,-1
 4014ed8:	2011883a 	mov	r8,r4
 4014edc:	3813883a 	mov	r9,r7
 4014ee0:	a1000315 	stw	r4,12(r20)
 4014ee4:	a1c00415 	stw	r7,16(r20)
 4014ee8:	a3000215 	stw	r12,8(r20)
 4014eec:	12c00336 	bltu	r2,r11,4014efc <_fpadd_parts+0x1a8>
 4014ef0:	58bfed1e 	bne	r11,r2,4014ea8 <_fpadd_parts+0x154>
 4014ef4:	00bfff84 	movi	r2,-2
 4014ef8:	12bfeb2e 	bgeu	r2,r10,4014ea8 <_fpadd_parts+0x154>
 4014efc:	a2800417 	ldw	r10,16(r20)
 4014f00:	008000c4 	movi	r2,3
 4014f04:	00c80034 	movhi	r3,8192
 4014f08:	18ffffc4 	addi	r3,r3,-1
 4014f0c:	a2400317 	ldw	r9,12(r20)
 4014f10:	a0800015 	stw	r2,0(r20)
 4014f14:	1a802336 	bltu	r3,r10,4014fa4 <_fpadd_parts+0x250>
 4014f18:	a027883a 	mov	r19,r20
 4014f1c:	9805883a 	mov	r2,r19
 4014f20:	ddc00717 	ldw	r23,28(sp)
 4014f24:	dd800617 	ldw	r22,24(sp)
 4014f28:	dd400517 	ldw	r21,20(sp)
 4014f2c:	dd000417 	ldw	r20,16(sp)
 4014f30:	dcc00317 	ldw	r19,12(sp)
 4014f34:	dc800217 	ldw	r18,8(sp)
 4014f38:	dc400117 	ldw	r17,4(sp)
 4014f3c:	dc000017 	ldw	r16,0(sp)
 4014f40:	dec00804 	addi	sp,sp,32
 4014f44:	f800283a 	ret
 4014f48:	20fff41e 	bne	r4,r3,4014f1c <_fpadd_parts+0x1c8>
 4014f4c:	31000015 	stw	r4,0(r6)
 4014f50:	98800117 	ldw	r2,4(r19)
 4014f54:	30800115 	stw	r2,4(r6)
 4014f58:	98c00217 	ldw	r3,8(r19)
 4014f5c:	30c00215 	stw	r3,8(r6)
 4014f60:	98800317 	ldw	r2,12(r19)
 4014f64:	30800315 	stw	r2,12(r6)
 4014f68:	98c00417 	ldw	r3,16(r19)
 4014f6c:	30c00415 	stw	r3,16(r6)
 4014f70:	98800117 	ldw	r2,4(r19)
 4014f74:	28c00117 	ldw	r3,4(r5)
 4014f78:	3027883a 	mov	r19,r6
 4014f7c:	10c4703a 	and	r2,r2,r3
 4014f80:	30800115 	stw	r2,4(r6)
 4014f84:	003fe506 	br	4014f1c <_fpadd_parts+0x1c8>
 4014f88:	1dc02616 	blt	r3,r23,4015024 <_fpadd_parts+0x2d0>
 4014f8c:	0023883a 	mov	r17,zero
 4014f90:	182f883a 	mov	r23,r3
 4014f94:	0025883a 	mov	r18,zero
 4014f98:	003fa806 	br	4014e3c <_fpadd_parts+0xe8>
 4014f9c:	a827883a 	mov	r19,r21
 4014fa0:	003fde06 	br	4014f1c <_fpadd_parts+0x1c8>
 4014fa4:	01800044 	movi	r6,1
 4014fa8:	500497fa 	slli	r2,r10,31
 4014fac:	4808d07a 	srli	r4,r9,1
 4014fb0:	518ad83a 	srl	r5,r10,r6
 4014fb4:	a2000217 	ldw	r8,8(r20)
 4014fb8:	1108b03a 	or	r4,r2,r4
 4014fbc:	0007883a 	mov	r3,zero
 4014fc0:	4984703a 	and	r2,r9,r6
 4014fc4:	208cb03a 	or	r6,r4,r2
 4014fc8:	28ceb03a 	or	r7,r5,r3
 4014fcc:	42000044 	addi	r8,r8,1
 4014fd0:	a027883a 	mov	r19,r20
 4014fd4:	a1c00415 	stw	r7,16(r20)
 4014fd8:	a2000215 	stw	r8,8(r20)
 4014fdc:	a1800315 	stw	r6,12(r20)
 4014fe0:	003fce06 	br	4014f1c <_fpadd_parts+0x1c8>
 4014fe4:	8bc5c83a 	sub	r2,r17,r15
 4014fe8:	8889803a 	cmpltu	r4,r17,r2
 4014fec:	9407c83a 	sub	r3,r18,r16
 4014ff0:	1909c83a 	sub	r4,r3,r4
 4014ff4:	100d883a 	mov	r6,r2
 4014ff8:	200f883a 	mov	r7,r4
 4014ffc:	003f9906 	br	4014e64 <_fpadd_parts+0x110>
 4015000:	8bc5883a 	add	r2,r17,r15
 4015004:	1449803a 	cmpltu	r4,r2,r17
 4015008:	9407883a 	add	r3,r18,r16
 401500c:	20c9883a 	add	r4,r4,r3
 4015010:	a1400115 	stw	r5,4(r20)
 4015014:	a5c00215 	stw	r23,8(r20)
 4015018:	a0800315 	stw	r2,12(r20)
 401501c:	a1000415 	stw	r4,16(r20)
 4015020:	003fb606 	br	4014efc <_fpadd_parts+0x1a8>
 4015024:	001f883a 	mov	r15,zero
 4015028:	0021883a 	mov	r16,zero
 401502c:	003f8306 	br	4014e3c <_fpadd_parts+0xe8>
 4015030:	018dc83a 	sub	r6,zero,r6
 4015034:	003f6706 	br	4014dd4 <_fpadd_parts+0x80>
 4015038:	00bfff84 	movi	r2,-2
 401503c:	117faf36 	bltu	r2,r5,4014efc <_fpadd_parts+0x1a8>
 4015040:	003f9806 	br	4014ea4 <_fpadd_parts+0x150>
 4015044:	0005883a 	mov	r2,zero
 4015048:	1189c83a 	sub	r4,r2,r6
 401504c:	1105803a 	cmpltu	r2,r2,r4
 4015050:	01cbc83a 	sub	r5,zero,r7
 4015054:	2885c83a 	sub	r2,r5,r2
 4015058:	01800044 	movi	r6,1
 401505c:	a1800115 	stw	r6,4(r20)
 4015060:	a5c00215 	stw	r23,8(r20)
 4015064:	a1000315 	stw	r4,12(r20)
 4015068:	a0800415 	stw	r2,16(r20)
 401506c:	003f8206 	br	4014e78 <_fpadd_parts+0x124>
 4015070:	203f7226 	beq	r4,zero,4014e3c <_fpadd_parts+0xe8>
 4015074:	35bff804 	addi	r22,r6,-32
 4015078:	b9af883a 	add	r23,r23,r6
 401507c:	b0003116 	blt	r22,zero,4015144 <_fpadd_parts+0x3f0>
 4015080:	959ad83a 	srl	r13,r18,r22
 4015084:	001d883a 	mov	r14,zero
 4015088:	000f883a 	mov	r7,zero
 401508c:	01000044 	movi	r4,1
 4015090:	0011883a 	mov	r8,zero
 4015094:	b0002516 	blt	r22,zero,401512c <_fpadd_parts+0x3d8>
 4015098:	2594983a 	sll	r10,r4,r22
 401509c:	0013883a 	mov	r9,zero
 40150a0:	00bfffc4 	movi	r2,-1
 40150a4:	4889883a 	add	r4,r9,r2
 40150a8:	508b883a 	add	r5,r10,r2
 40150ac:	224d803a 	cmpltu	r6,r4,r9
 40150b0:	314b883a 	add	r5,r6,r5
 40150b4:	8904703a 	and	r2,r17,r4
 40150b8:	9146703a 	and	r3,r18,r5
 40150bc:	10c4b03a 	or	r2,r2,r3
 40150c0:	10000226 	beq	r2,zero,40150cc <_fpadd_parts+0x378>
 40150c4:	01c00044 	movi	r7,1
 40150c8:	0011883a 	mov	r8,zero
 40150cc:	69e2b03a 	or	r17,r13,r7
 40150d0:	7224b03a 	or	r18,r14,r8
 40150d4:	003f5906 	br	4014e3c <_fpadd_parts+0xe8>
 40150d8:	8407883a 	add	r3,r16,r16
 40150dc:	008007c4 	movi	r2,31
 40150e0:	1185c83a 	sub	r2,r2,r6
 40150e4:	1886983a 	sll	r3,r3,r2
 40150e8:	7996d83a 	srl	r11,r15,r6
 40150ec:	8198d83a 	srl	r12,r16,r6
 40150f0:	1ad6b03a 	or	r11,r3,r11
 40150f4:	003f3e06 	br	4014df0 <_fpadd_parts+0x9c>
 40150f8:	2006d07a 	srli	r3,r4,1
 40150fc:	008007c4 	movi	r2,31
 4015100:	1185c83a 	sub	r2,r2,r6
 4015104:	1890d83a 	srl	r8,r3,r2
 4015108:	218e983a 	sll	r7,r4,r6
 401510c:	003f3e06 	br	4014e08 <_fpadd_parts+0xb4>
 4015110:	113f821e 	bne	r2,r4,4014f1c <_fpadd_parts+0x1c8>
 4015114:	28c00117 	ldw	r3,4(r5)
 4015118:	98800117 	ldw	r2,4(r19)
 401511c:	10ff7f26 	beq	r2,r3,4014f1c <_fpadd_parts+0x1c8>
 4015120:	04c10074 	movhi	r19,1025
 4015124:	9cdaaf04 	addi	r19,r19,27324
 4015128:	003f7c06 	br	4014f1c <_fpadd_parts+0x1c8>
 401512c:	2006d07a 	srli	r3,r4,1
 4015130:	008007c4 	movi	r2,31
 4015134:	1185c83a 	sub	r2,r2,r6
 4015138:	1894d83a 	srl	r10,r3,r2
 401513c:	2192983a 	sll	r9,r4,r6
 4015140:	003fd706 	br	40150a0 <_fpadd_parts+0x34c>
 4015144:	9487883a 	add	r3,r18,r18
 4015148:	008007c4 	movi	r2,31
 401514c:	1185c83a 	sub	r2,r2,r6
 4015150:	1886983a 	sll	r3,r3,r2
 4015154:	899ad83a 	srl	r13,r17,r6
 4015158:	919cd83a 	srl	r14,r18,r6
 401515c:	1b5ab03a 	or	r13,r3,r13
 4015160:	003fc906 	br	4015088 <_fpadd_parts+0x334>

04015164 <__subdf3>:
 4015164:	deffea04 	addi	sp,sp,-88
 4015168:	dcc01415 	stw	r19,80(sp)
 401516c:	dcc00404 	addi	r19,sp,16
 4015170:	2011883a 	mov	r8,r4
 4015174:	2813883a 	mov	r9,r5
 4015178:	dc401315 	stw	r17,76(sp)
 401517c:	d809883a 	mov	r4,sp
 4015180:	980b883a 	mov	r5,r19
 4015184:	dc400904 	addi	r17,sp,36
 4015188:	dfc01515 	stw	ra,84(sp)
 401518c:	da400115 	stw	r9,4(sp)
 4015190:	d9c00315 	stw	r7,12(sp)
 4015194:	da000015 	stw	r8,0(sp)
 4015198:	d9800215 	stw	r6,8(sp)
 401519c:	40163f80 	call	40163f8 <__unpack_d>
 40151a0:	d9000204 	addi	r4,sp,8
 40151a4:	880b883a 	mov	r5,r17
 40151a8:	40163f80 	call	40163f8 <__unpack_d>
 40151ac:	d8800a17 	ldw	r2,40(sp)
 40151b0:	880b883a 	mov	r5,r17
 40151b4:	9809883a 	mov	r4,r19
 40151b8:	d9800e04 	addi	r6,sp,56
 40151bc:	1080005c 	xori	r2,r2,1
 40151c0:	d8800a15 	stw	r2,40(sp)
 40151c4:	4014d540 	call	4014d54 <_fpadd_parts>
 40151c8:	1009883a 	mov	r4,r2
 40151cc:	40160e40 	call	40160e4 <__pack_d>
 40151d0:	dfc01517 	ldw	ra,84(sp)
 40151d4:	dcc01417 	ldw	r19,80(sp)
 40151d8:	dc401317 	ldw	r17,76(sp)
 40151dc:	dec01604 	addi	sp,sp,88
 40151e0:	f800283a 	ret

040151e4 <__adddf3>:
 40151e4:	deffea04 	addi	sp,sp,-88
 40151e8:	dcc01415 	stw	r19,80(sp)
 40151ec:	dcc00404 	addi	r19,sp,16
 40151f0:	2011883a 	mov	r8,r4
 40151f4:	2813883a 	mov	r9,r5
 40151f8:	dc401315 	stw	r17,76(sp)
 40151fc:	d809883a 	mov	r4,sp
 4015200:	980b883a 	mov	r5,r19
 4015204:	dc400904 	addi	r17,sp,36
 4015208:	dfc01515 	stw	ra,84(sp)
 401520c:	da400115 	stw	r9,4(sp)
 4015210:	d9c00315 	stw	r7,12(sp)
 4015214:	da000015 	stw	r8,0(sp)
 4015218:	d9800215 	stw	r6,8(sp)
 401521c:	40163f80 	call	40163f8 <__unpack_d>
 4015220:	d9000204 	addi	r4,sp,8
 4015224:	880b883a 	mov	r5,r17
 4015228:	40163f80 	call	40163f8 <__unpack_d>
 401522c:	d9800e04 	addi	r6,sp,56
 4015230:	9809883a 	mov	r4,r19
 4015234:	880b883a 	mov	r5,r17
 4015238:	4014d540 	call	4014d54 <_fpadd_parts>
 401523c:	1009883a 	mov	r4,r2
 4015240:	40160e40 	call	40160e4 <__pack_d>
 4015244:	dfc01517 	ldw	ra,84(sp)
 4015248:	dcc01417 	ldw	r19,80(sp)
 401524c:	dc401317 	ldw	r17,76(sp)
 4015250:	dec01604 	addi	sp,sp,88
 4015254:	f800283a 	ret

04015258 <__muldf3>:
 4015258:	deffe004 	addi	sp,sp,-128
 401525c:	dc401815 	stw	r17,96(sp)
 4015260:	dc400404 	addi	r17,sp,16
 4015264:	2011883a 	mov	r8,r4
 4015268:	2813883a 	mov	r9,r5
 401526c:	dc001715 	stw	r16,92(sp)
 4015270:	d809883a 	mov	r4,sp
 4015274:	880b883a 	mov	r5,r17
 4015278:	dc000904 	addi	r16,sp,36
 401527c:	dfc01f15 	stw	ra,124(sp)
 4015280:	da400115 	stw	r9,4(sp)
 4015284:	d9c00315 	stw	r7,12(sp)
 4015288:	da000015 	stw	r8,0(sp)
 401528c:	d9800215 	stw	r6,8(sp)
 4015290:	ddc01e15 	stw	r23,120(sp)
 4015294:	dd801d15 	stw	r22,116(sp)
 4015298:	dd401c15 	stw	r21,112(sp)
 401529c:	dd001b15 	stw	r20,108(sp)
 40152a0:	dcc01a15 	stw	r19,104(sp)
 40152a4:	dc801915 	stw	r18,100(sp)
 40152a8:	40163f80 	call	40163f8 <__unpack_d>
 40152ac:	d9000204 	addi	r4,sp,8
 40152b0:	800b883a 	mov	r5,r16
 40152b4:	40163f80 	call	40163f8 <__unpack_d>
 40152b8:	d9000417 	ldw	r4,16(sp)
 40152bc:	00800044 	movi	r2,1
 40152c0:	1100102e 	bgeu	r2,r4,4015304 <__muldf3+0xac>
 40152c4:	d8c00917 	ldw	r3,36(sp)
 40152c8:	10c0062e 	bgeu	r2,r3,40152e4 <__muldf3+0x8c>
 40152cc:	00800104 	movi	r2,4
 40152d0:	20800a26 	beq	r4,r2,40152fc <__muldf3+0xa4>
 40152d4:	1880cc26 	beq	r3,r2,4015608 <__muldf3+0x3b0>
 40152d8:	00800084 	movi	r2,2
 40152dc:	20800926 	beq	r4,r2,4015304 <__muldf3+0xac>
 40152e0:	1880191e 	bne	r3,r2,4015348 <__muldf3+0xf0>
 40152e4:	d8c00a17 	ldw	r3,40(sp)
 40152e8:	d8800517 	ldw	r2,20(sp)
 40152ec:	8009883a 	mov	r4,r16
 40152f0:	10c4c03a 	cmpne	r2,r2,r3
 40152f4:	d8800a15 	stw	r2,40(sp)
 40152f8:	00000706 	br	4015318 <__muldf3+0xc0>
 40152fc:	00800084 	movi	r2,2
 4015300:	1880c326 	beq	r3,r2,4015610 <__muldf3+0x3b8>
 4015304:	d8800517 	ldw	r2,20(sp)
 4015308:	d8c00a17 	ldw	r3,40(sp)
 401530c:	8809883a 	mov	r4,r17
 4015310:	10c4c03a 	cmpne	r2,r2,r3
 4015314:	d8800515 	stw	r2,20(sp)
 4015318:	40160e40 	call	40160e4 <__pack_d>
 401531c:	dfc01f17 	ldw	ra,124(sp)
 4015320:	ddc01e17 	ldw	r23,120(sp)
 4015324:	dd801d17 	ldw	r22,116(sp)
 4015328:	dd401c17 	ldw	r21,112(sp)
 401532c:	dd001b17 	ldw	r20,108(sp)
 4015330:	dcc01a17 	ldw	r19,104(sp)
 4015334:	dc801917 	ldw	r18,100(sp)
 4015338:	dc401817 	ldw	r17,96(sp)
 401533c:	dc001717 	ldw	r16,92(sp)
 4015340:	dec02004 	addi	sp,sp,128
 4015344:	f800283a 	ret
 4015348:	dd800717 	ldw	r22,28(sp)
 401534c:	dc800c17 	ldw	r18,48(sp)
 4015350:	002b883a 	mov	r21,zero
 4015354:	0023883a 	mov	r17,zero
 4015358:	a80b883a 	mov	r5,r21
 401535c:	b00d883a 	mov	r6,r22
 4015360:	880f883a 	mov	r7,r17
 4015364:	ddc00817 	ldw	r23,32(sp)
 4015368:	dcc00d17 	ldw	r19,52(sp)
 401536c:	9009883a 	mov	r4,r18
 4015370:	4015fcc0 	call	4015fcc <__muldi3>
 4015374:	001b883a 	mov	r13,zero
 4015378:	680f883a 	mov	r7,r13
 401537c:	b009883a 	mov	r4,r22
 4015380:	000b883a 	mov	r5,zero
 4015384:	980d883a 	mov	r6,r19
 4015388:	b82d883a 	mov	r22,r23
 401538c:	002f883a 	mov	r23,zero
 4015390:	db401615 	stw	r13,88(sp)
 4015394:	d8801315 	stw	r2,76(sp)
 4015398:	d8c01415 	stw	r3,80(sp)
 401539c:	dcc01515 	stw	r19,84(sp)
 40153a0:	4015fcc0 	call	4015fcc <__muldi3>
 40153a4:	b00d883a 	mov	r6,r22
 40153a8:	000b883a 	mov	r5,zero
 40153ac:	9009883a 	mov	r4,r18
 40153b0:	b80f883a 	mov	r7,r23
 40153b4:	1021883a 	mov	r16,r2
 40153b8:	1823883a 	mov	r17,r3
 40153bc:	4015fcc0 	call	4015fcc <__muldi3>
 40153c0:	8085883a 	add	r2,r16,r2
 40153c4:	140d803a 	cmpltu	r6,r2,r16
 40153c8:	88c7883a 	add	r3,r17,r3
 40153cc:	30cd883a 	add	r6,r6,r3
 40153d0:	1029883a 	mov	r20,r2
 40153d4:	302b883a 	mov	r21,r6
 40153d8:	da801317 	ldw	r10,76(sp)
 40153dc:	dac01417 	ldw	r11,80(sp)
 40153e0:	db001517 	ldw	r12,84(sp)
 40153e4:	db401617 	ldw	r13,88(sp)
 40153e8:	3440612e 	bgeu	r6,r17,4015570 <__muldf3+0x318>
 40153ec:	0009883a 	mov	r4,zero
 40153f0:	5105883a 	add	r2,r10,r4
 40153f4:	128d803a 	cmpltu	r6,r2,r10
 40153f8:	5d07883a 	add	r3,r11,r20
 40153fc:	30cd883a 	add	r6,r6,r3
 4015400:	0021883a 	mov	r16,zero
 4015404:	04400044 	movi	r17,1
 4015408:	1025883a 	mov	r18,r2
 401540c:	3027883a 	mov	r19,r6
 4015410:	32c06236 	bltu	r6,r11,401559c <__muldf3+0x344>
 4015414:	59807a26 	beq	r11,r6,4015600 <__muldf3+0x3a8>
 4015418:	680b883a 	mov	r5,r13
 401541c:	b80f883a 	mov	r7,r23
 4015420:	6009883a 	mov	r4,r12
 4015424:	b00d883a 	mov	r6,r22
 4015428:	4015fcc0 	call	4015fcc <__muldi3>
 401542c:	1009883a 	mov	r4,r2
 4015430:	000f883a 	mov	r7,zero
 4015434:	1545883a 	add	r2,r2,r21
 4015438:	1111803a 	cmpltu	r8,r2,r4
 401543c:	19c7883a 	add	r3,r3,r7
 4015440:	40c7883a 	add	r3,r8,r3
 4015444:	88cb883a 	add	r5,r17,r3
 4015448:	d8c00617 	ldw	r3,24(sp)
 401544c:	8089883a 	add	r4,r16,r2
 4015450:	d8800b17 	ldw	r2,44(sp)
 4015454:	18c00104 	addi	r3,r3,4
 4015458:	240d803a 	cmpltu	r6,r4,r16
 401545c:	10c7883a 	add	r3,r2,r3
 4015460:	2013883a 	mov	r9,r4
 4015464:	d8800a17 	ldw	r2,40(sp)
 4015468:	d9000517 	ldw	r4,20(sp)
 401546c:	314d883a 	add	r6,r6,r5
 4015470:	3015883a 	mov	r10,r6
 4015474:	2088c03a 	cmpne	r4,r4,r2
 4015478:	00880034 	movhi	r2,8192
 401547c:	10bfffc4 	addi	r2,r2,-1
 4015480:	d9000f15 	stw	r4,60(sp)
 4015484:	d8c01015 	stw	r3,64(sp)
 4015488:	1180162e 	bgeu	r2,r6,40154e4 <__muldf3+0x28c>
 401548c:	1811883a 	mov	r8,r3
 4015490:	101f883a 	mov	r15,r2
 4015494:	980497fa 	slli	r2,r19,31
 4015498:	9016d07a 	srli	r11,r18,1
 401549c:	500697fa 	slli	r3,r10,31
 40154a0:	480cd07a 	srli	r6,r9,1
 40154a4:	500ed07a 	srli	r7,r10,1
 40154a8:	12d6b03a 	or	r11,r2,r11
 40154ac:	00800044 	movi	r2,1
 40154b0:	198cb03a 	or	r6,r3,r6
 40154b4:	4888703a 	and	r4,r9,r2
 40154b8:	9818d07a 	srli	r12,r19,1
 40154bc:	001b883a 	mov	r13,zero
 40154c0:	03a00034 	movhi	r14,32768
 40154c4:	3013883a 	mov	r9,r6
 40154c8:	3815883a 	mov	r10,r7
 40154cc:	4091883a 	add	r8,r8,r2
 40154d0:	20000226 	beq	r4,zero,40154dc <__muldf3+0x284>
 40154d4:	5b64b03a 	or	r18,r11,r13
 40154d8:	63a6b03a 	or	r19,r12,r14
 40154dc:	7abfed36 	bltu	r15,r10,4015494 <__muldf3+0x23c>
 40154e0:	da001015 	stw	r8,64(sp)
 40154e4:	00840034 	movhi	r2,4096
 40154e8:	10bfffc4 	addi	r2,r2,-1
 40154ec:	12801436 	bltu	r2,r10,4015540 <__muldf3+0x2e8>
 40154f0:	da001017 	ldw	r8,64(sp)
 40154f4:	101f883a 	mov	r15,r2
 40154f8:	4a45883a 	add	r2,r9,r9
 40154fc:	124d803a 	cmpltu	r6,r2,r9
 4015500:	5287883a 	add	r3,r10,r10
 4015504:	9497883a 	add	r11,r18,r18
 4015508:	5c8f803a 	cmpltu	r7,r11,r18
 401550c:	9cd9883a 	add	r12,r19,r19
 4015510:	01000044 	movi	r4,1
 4015514:	30cd883a 	add	r6,r6,r3
 4015518:	3b0f883a 	add	r7,r7,r12
 401551c:	423fffc4 	addi	r8,r8,-1
 4015520:	1013883a 	mov	r9,r2
 4015524:	3015883a 	mov	r10,r6
 4015528:	111ab03a 	or	r13,r2,r4
 401552c:	98003016 	blt	r19,zero,40155f0 <__muldf3+0x398>
 4015530:	5825883a 	mov	r18,r11
 4015534:	3827883a 	mov	r19,r7
 4015538:	7abfef2e 	bgeu	r15,r10,40154f8 <__muldf3+0x2a0>
 401553c:	da001015 	stw	r8,64(sp)
 4015540:	00803fc4 	movi	r2,255
 4015544:	488e703a 	and	r7,r9,r2
 4015548:	00802004 	movi	r2,128
 401554c:	0007883a 	mov	r3,zero
 4015550:	0011883a 	mov	r8,zero
 4015554:	38801826 	beq	r7,r2,40155b8 <__muldf3+0x360>
 4015558:	008000c4 	movi	r2,3
 401555c:	d9000e04 	addi	r4,sp,56
 4015560:	da801215 	stw	r10,72(sp)
 4015564:	d8800e15 	stw	r2,56(sp)
 4015568:	da401115 	stw	r9,68(sp)
 401556c:	003f6a06 	br	4015318 <__muldf3+0xc0>
 4015570:	89802126 	beq	r17,r6,40155f8 <__muldf3+0x3a0>
 4015574:	0009883a 	mov	r4,zero
 4015578:	5105883a 	add	r2,r10,r4
 401557c:	128d803a 	cmpltu	r6,r2,r10
 4015580:	5d07883a 	add	r3,r11,r20
 4015584:	30cd883a 	add	r6,r6,r3
 4015588:	0021883a 	mov	r16,zero
 401558c:	0023883a 	mov	r17,zero
 4015590:	1025883a 	mov	r18,r2
 4015594:	3027883a 	mov	r19,r6
 4015598:	32ff9e2e 	bgeu	r6,r11,4015414 <__muldf3+0x1bc>
 401559c:	00800044 	movi	r2,1
 40155a0:	8089883a 	add	r4,r16,r2
 40155a4:	240d803a 	cmpltu	r6,r4,r16
 40155a8:	344d883a 	add	r6,r6,r17
 40155ac:	2021883a 	mov	r16,r4
 40155b0:	3023883a 	mov	r17,r6
 40155b4:	003f9806 	br	4015418 <__muldf3+0x1c0>
 40155b8:	403fe71e 	bne	r8,zero,4015558 <__muldf3+0x300>
 40155bc:	01004004 	movi	r4,256
 40155c0:	4904703a 	and	r2,r9,r4
 40155c4:	10c4b03a 	or	r2,r2,r3
 40155c8:	103fe31e 	bne	r2,zero,4015558 <__muldf3+0x300>
 40155cc:	94c4b03a 	or	r2,r18,r19
 40155d0:	103fe126 	beq	r2,zero,4015558 <__muldf3+0x300>
 40155d4:	49c5883a 	add	r2,r9,r7
 40155d8:	1251803a 	cmpltu	r8,r2,r9
 40155dc:	4291883a 	add	r8,r8,r10
 40155e0:	013fc004 	movi	r4,-256
 40155e4:	1112703a 	and	r9,r2,r4
 40155e8:	4015883a 	mov	r10,r8
 40155ec:	003fda06 	br	4015558 <__muldf3+0x300>
 40155f0:	6813883a 	mov	r9,r13
 40155f4:	003fce06 	br	4015530 <__muldf3+0x2d8>
 40155f8:	143f7c36 	bltu	r2,r16,40153ec <__muldf3+0x194>
 40155fc:	003fdd06 	br	4015574 <__muldf3+0x31c>
 4015600:	12bf852e 	bgeu	r2,r10,4015418 <__muldf3+0x1c0>
 4015604:	003fe506 	br	401559c <__muldf3+0x344>
 4015608:	00800084 	movi	r2,2
 401560c:	20bf351e 	bne	r4,r2,40152e4 <__muldf3+0x8c>
 4015610:	01010074 	movhi	r4,1025
 4015614:	211aaf04 	addi	r4,r4,27324
 4015618:	003f3f06 	br	4015318 <__muldf3+0xc0>

0401561c <__divdf3>:
 401561c:	deffed04 	addi	sp,sp,-76
 4015620:	dcc01115 	stw	r19,68(sp)
 4015624:	dcc00404 	addi	r19,sp,16
 4015628:	2011883a 	mov	r8,r4
 401562c:	2813883a 	mov	r9,r5
 4015630:	dc000e15 	stw	r16,56(sp)
 4015634:	d809883a 	mov	r4,sp
 4015638:	980b883a 	mov	r5,r19
 401563c:	dc000904 	addi	r16,sp,36
 4015640:	dfc01215 	stw	ra,72(sp)
 4015644:	da400115 	stw	r9,4(sp)
 4015648:	d9c00315 	stw	r7,12(sp)
 401564c:	da000015 	stw	r8,0(sp)
 4015650:	d9800215 	stw	r6,8(sp)
 4015654:	dc801015 	stw	r18,64(sp)
 4015658:	dc400f15 	stw	r17,60(sp)
 401565c:	40163f80 	call	40163f8 <__unpack_d>
 4015660:	d9000204 	addi	r4,sp,8
 4015664:	800b883a 	mov	r5,r16
 4015668:	40163f80 	call	40163f8 <__unpack_d>
 401566c:	d9000417 	ldw	r4,16(sp)
 4015670:	00800044 	movi	r2,1
 4015674:	11000b2e 	bgeu	r2,r4,40156a4 <__divdf3+0x88>
 4015678:	d9400917 	ldw	r5,36(sp)
 401567c:	1140762e 	bgeu	r2,r5,4015858 <__divdf3+0x23c>
 4015680:	d8800517 	ldw	r2,20(sp)
 4015684:	d8c00a17 	ldw	r3,40(sp)
 4015688:	01800104 	movi	r6,4
 401568c:	10c4f03a 	xor	r2,r2,r3
 4015690:	d8800515 	stw	r2,20(sp)
 4015694:	21800226 	beq	r4,r6,40156a0 <__divdf3+0x84>
 4015698:	00800084 	movi	r2,2
 401569c:	2080141e 	bne	r4,r2,40156f0 <__divdf3+0xd4>
 40156a0:	29000926 	beq	r5,r4,40156c8 <__divdf3+0xac>
 40156a4:	9809883a 	mov	r4,r19
 40156a8:	40160e40 	call	40160e4 <__pack_d>
 40156ac:	dfc01217 	ldw	ra,72(sp)
 40156b0:	dcc01117 	ldw	r19,68(sp)
 40156b4:	dc801017 	ldw	r18,64(sp)
 40156b8:	dc400f17 	ldw	r17,60(sp)
 40156bc:	dc000e17 	ldw	r16,56(sp)
 40156c0:	dec01304 	addi	sp,sp,76
 40156c4:	f800283a 	ret
 40156c8:	01010074 	movhi	r4,1025
 40156cc:	211aaf04 	addi	r4,r4,27324
 40156d0:	40160e40 	call	40160e4 <__pack_d>
 40156d4:	dfc01217 	ldw	ra,72(sp)
 40156d8:	dcc01117 	ldw	r19,68(sp)
 40156dc:	dc801017 	ldw	r18,64(sp)
 40156e0:	dc400f17 	ldw	r17,60(sp)
 40156e4:	dc000e17 	ldw	r16,56(sp)
 40156e8:	dec01304 	addi	sp,sp,76
 40156ec:	f800283a 	ret
 40156f0:	29805b26 	beq	r5,r6,4015860 <__divdf3+0x244>
 40156f4:	28802d26 	beq	r5,r2,40157ac <__divdf3+0x190>
 40156f8:	d8c00617 	ldw	r3,24(sp)
 40156fc:	d8800b17 	ldw	r2,44(sp)
 4015700:	d9c00817 	ldw	r7,32(sp)
 4015704:	dc400d17 	ldw	r17,52(sp)
 4015708:	188bc83a 	sub	r5,r3,r2
 401570c:	d9800717 	ldw	r6,28(sp)
 4015710:	dc000c17 	ldw	r16,48(sp)
 4015714:	d9400615 	stw	r5,24(sp)
 4015718:	3c403836 	bltu	r7,r17,40157fc <__divdf3+0x1e0>
 401571c:	89c03626 	beq	r17,r7,40157f8 <__divdf3+0x1dc>
 4015720:	0015883a 	mov	r10,zero
 4015724:	001d883a 	mov	r14,zero
 4015728:	02c40034 	movhi	r11,4096
 401572c:	001f883a 	mov	r15,zero
 4015730:	003f883a 	mov	ra,zero
 4015734:	04800f44 	movi	r18,61
 4015738:	00000f06 	br	4015778 <__divdf3+0x15c>
 401573c:	601d883a 	mov	r14,r12
 4015740:	681f883a 	mov	r15,r13
 4015744:	400d883a 	mov	r6,r8
 4015748:	100f883a 	mov	r7,r2
 401574c:	3191883a 	add	r8,r6,r6
 4015750:	5808d07a 	srli	r4,r11,1
 4015754:	4185803a 	cmpltu	r2,r8,r6
 4015758:	39d3883a 	add	r9,r7,r7
 401575c:	28c6b03a 	or	r3,r5,r3
 4015760:	1245883a 	add	r2,r2,r9
 4015764:	1815883a 	mov	r10,r3
 4015768:	2017883a 	mov	r11,r4
 401576c:	400d883a 	mov	r6,r8
 4015770:	100f883a 	mov	r7,r2
 4015774:	fc801726 	beq	ra,r18,40157d4 <__divdf3+0x1b8>
 4015778:	580a97fa 	slli	r5,r11,31
 401577c:	5006d07a 	srli	r3,r10,1
 4015780:	ffc00044 	addi	ra,ra,1
 4015784:	3c7ff136 	bltu	r7,r17,401574c <__divdf3+0x130>
 4015788:	3411c83a 	sub	r8,r6,r16
 401578c:	3205803a 	cmpltu	r2,r6,r8
 4015790:	3c53c83a 	sub	r9,r7,r17
 4015794:	7298b03a 	or	r12,r14,r10
 4015798:	7adab03a 	or	r13,r15,r11
 401579c:	4885c83a 	sub	r2,r9,r2
 40157a0:	89ffe61e 	bne	r17,r7,401573c <__divdf3+0x120>
 40157a4:	343fe936 	bltu	r6,r16,401574c <__divdf3+0x130>
 40157a8:	003fe406 	br	401573c <__divdf3+0x120>
 40157ac:	9809883a 	mov	r4,r19
 40157b0:	d9800415 	stw	r6,16(sp)
 40157b4:	40160e40 	call	40160e4 <__pack_d>
 40157b8:	dfc01217 	ldw	ra,72(sp)
 40157bc:	dcc01117 	ldw	r19,68(sp)
 40157c0:	dc801017 	ldw	r18,64(sp)
 40157c4:	dc400f17 	ldw	r17,60(sp)
 40157c8:	dc000e17 	ldw	r16,56(sp)
 40157cc:	dec01304 	addi	sp,sp,76
 40157d0:	f800283a 	ret
 40157d4:	00803fc4 	movi	r2,255
 40157d8:	7090703a 	and	r8,r14,r2
 40157dc:	00802004 	movi	r2,128
 40157e0:	0007883a 	mov	r3,zero
 40157e4:	0013883a 	mov	r9,zero
 40157e8:	40800d26 	beq	r8,r2,4015820 <__divdf3+0x204>
 40157ec:	dbc00815 	stw	r15,32(sp)
 40157f0:	db800715 	stw	r14,28(sp)
 40157f4:	003fab06 	br	40156a4 <__divdf3+0x88>
 40157f8:	343fc92e 	bgeu	r6,r16,4015720 <__divdf3+0x104>
 40157fc:	3185883a 	add	r2,r6,r6
 4015800:	1189803a 	cmpltu	r4,r2,r6
 4015804:	39c7883a 	add	r3,r7,r7
 4015808:	20c9883a 	add	r4,r4,r3
 401580c:	297fffc4 	addi	r5,r5,-1
 4015810:	100d883a 	mov	r6,r2
 4015814:	200f883a 	mov	r7,r4
 4015818:	d9400615 	stw	r5,24(sp)
 401581c:	003fc006 	br	4015720 <__divdf3+0x104>
 4015820:	483ff21e 	bne	r9,zero,40157ec <__divdf3+0x1d0>
 4015824:	01004004 	movi	r4,256
 4015828:	7104703a 	and	r2,r14,r4
 401582c:	10c4b03a 	or	r2,r2,r3
 4015830:	103fee1e 	bne	r2,zero,40157ec <__divdf3+0x1d0>
 4015834:	31c4b03a 	or	r2,r6,r7
 4015838:	103fec26 	beq	r2,zero,40157ec <__divdf3+0x1d0>
 401583c:	7205883a 	add	r2,r14,r8
 4015840:	1391803a 	cmpltu	r8,r2,r14
 4015844:	43d1883a 	add	r8,r8,r15
 4015848:	013fc004 	movi	r4,-256
 401584c:	111c703a 	and	r14,r2,r4
 4015850:	401f883a 	mov	r15,r8
 4015854:	003fe506 	br	40157ec <__divdf3+0x1d0>
 4015858:	8009883a 	mov	r4,r16
 401585c:	003f9206 	br	40156a8 <__divdf3+0x8c>
 4015860:	9809883a 	mov	r4,r19
 4015864:	d8000715 	stw	zero,28(sp)
 4015868:	d8000815 	stw	zero,32(sp)
 401586c:	d8000615 	stw	zero,24(sp)
 4015870:	003f8d06 	br	40156a8 <__divdf3+0x8c>

04015874 <__eqdf2>:
 4015874:	deffef04 	addi	sp,sp,-68
 4015878:	dc400f15 	stw	r17,60(sp)
 401587c:	dc400404 	addi	r17,sp,16
 4015880:	2005883a 	mov	r2,r4
 4015884:	2807883a 	mov	r3,r5
 4015888:	dc000e15 	stw	r16,56(sp)
 401588c:	d809883a 	mov	r4,sp
 4015890:	880b883a 	mov	r5,r17
 4015894:	dc000904 	addi	r16,sp,36
 4015898:	d8c00115 	stw	r3,4(sp)
 401589c:	d8800015 	stw	r2,0(sp)
 40158a0:	d9800215 	stw	r6,8(sp)
 40158a4:	dfc01015 	stw	ra,64(sp)
 40158a8:	d9c00315 	stw	r7,12(sp)
 40158ac:	40163f80 	call	40163f8 <__unpack_d>
 40158b0:	d9000204 	addi	r4,sp,8
 40158b4:	800b883a 	mov	r5,r16
 40158b8:	40163f80 	call	40163f8 <__unpack_d>
 40158bc:	d8800417 	ldw	r2,16(sp)
 40158c0:	00c00044 	movi	r3,1
 40158c4:	180d883a 	mov	r6,r3
 40158c8:	1880062e 	bgeu	r3,r2,40158e4 <__eqdf2+0x70>
 40158cc:	d8800917 	ldw	r2,36(sp)
 40158d0:	8809883a 	mov	r4,r17
 40158d4:	800b883a 	mov	r5,r16
 40158d8:	1880022e 	bgeu	r3,r2,40158e4 <__eqdf2+0x70>
 40158dc:	40165300 	call	4016530 <__fpcmp_parts_d>
 40158e0:	100d883a 	mov	r6,r2
 40158e4:	3005883a 	mov	r2,r6
 40158e8:	dfc01017 	ldw	ra,64(sp)
 40158ec:	dc400f17 	ldw	r17,60(sp)
 40158f0:	dc000e17 	ldw	r16,56(sp)
 40158f4:	dec01104 	addi	sp,sp,68
 40158f8:	f800283a 	ret

040158fc <__nedf2>:
 40158fc:	deffef04 	addi	sp,sp,-68
 4015900:	dc400f15 	stw	r17,60(sp)
 4015904:	dc400404 	addi	r17,sp,16
 4015908:	2005883a 	mov	r2,r4
 401590c:	2807883a 	mov	r3,r5
 4015910:	dc000e15 	stw	r16,56(sp)
 4015914:	d809883a 	mov	r4,sp
 4015918:	880b883a 	mov	r5,r17
 401591c:	dc000904 	addi	r16,sp,36
 4015920:	d8c00115 	stw	r3,4(sp)
 4015924:	d8800015 	stw	r2,0(sp)
 4015928:	d9800215 	stw	r6,8(sp)
 401592c:	dfc01015 	stw	ra,64(sp)
 4015930:	d9c00315 	stw	r7,12(sp)
 4015934:	40163f80 	call	40163f8 <__unpack_d>
 4015938:	d9000204 	addi	r4,sp,8
 401593c:	800b883a 	mov	r5,r16
 4015940:	40163f80 	call	40163f8 <__unpack_d>
 4015944:	d8800417 	ldw	r2,16(sp)
 4015948:	00c00044 	movi	r3,1
 401594c:	180d883a 	mov	r6,r3
 4015950:	1880062e 	bgeu	r3,r2,401596c <__nedf2+0x70>
 4015954:	d8800917 	ldw	r2,36(sp)
 4015958:	8809883a 	mov	r4,r17
 401595c:	800b883a 	mov	r5,r16
 4015960:	1880022e 	bgeu	r3,r2,401596c <__nedf2+0x70>
 4015964:	40165300 	call	4016530 <__fpcmp_parts_d>
 4015968:	100d883a 	mov	r6,r2
 401596c:	3005883a 	mov	r2,r6
 4015970:	dfc01017 	ldw	ra,64(sp)
 4015974:	dc400f17 	ldw	r17,60(sp)
 4015978:	dc000e17 	ldw	r16,56(sp)
 401597c:	dec01104 	addi	sp,sp,68
 4015980:	f800283a 	ret

04015984 <__gtdf2>:
 4015984:	deffef04 	addi	sp,sp,-68
 4015988:	dc400f15 	stw	r17,60(sp)
 401598c:	dc400404 	addi	r17,sp,16
 4015990:	2005883a 	mov	r2,r4
 4015994:	2807883a 	mov	r3,r5
 4015998:	dc000e15 	stw	r16,56(sp)
 401599c:	d809883a 	mov	r4,sp
 40159a0:	880b883a 	mov	r5,r17
 40159a4:	dc000904 	addi	r16,sp,36
 40159a8:	d8c00115 	stw	r3,4(sp)
 40159ac:	d8800015 	stw	r2,0(sp)
 40159b0:	d9800215 	stw	r6,8(sp)
 40159b4:	dfc01015 	stw	ra,64(sp)
 40159b8:	d9c00315 	stw	r7,12(sp)
 40159bc:	40163f80 	call	40163f8 <__unpack_d>
 40159c0:	d9000204 	addi	r4,sp,8
 40159c4:	800b883a 	mov	r5,r16
 40159c8:	40163f80 	call	40163f8 <__unpack_d>
 40159cc:	d8800417 	ldw	r2,16(sp)
 40159d0:	00c00044 	movi	r3,1
 40159d4:	01bfffc4 	movi	r6,-1
 40159d8:	1880062e 	bgeu	r3,r2,40159f4 <__gtdf2+0x70>
 40159dc:	d8800917 	ldw	r2,36(sp)
 40159e0:	8809883a 	mov	r4,r17
 40159e4:	800b883a 	mov	r5,r16
 40159e8:	1880022e 	bgeu	r3,r2,40159f4 <__gtdf2+0x70>
 40159ec:	40165300 	call	4016530 <__fpcmp_parts_d>
 40159f0:	100d883a 	mov	r6,r2
 40159f4:	3005883a 	mov	r2,r6
 40159f8:	dfc01017 	ldw	ra,64(sp)
 40159fc:	dc400f17 	ldw	r17,60(sp)
 4015a00:	dc000e17 	ldw	r16,56(sp)
 4015a04:	dec01104 	addi	sp,sp,68
 4015a08:	f800283a 	ret

04015a0c <__gedf2>:
 4015a0c:	deffef04 	addi	sp,sp,-68
 4015a10:	dc400f15 	stw	r17,60(sp)
 4015a14:	dc400404 	addi	r17,sp,16
 4015a18:	2005883a 	mov	r2,r4
 4015a1c:	2807883a 	mov	r3,r5
 4015a20:	dc000e15 	stw	r16,56(sp)
 4015a24:	d809883a 	mov	r4,sp
 4015a28:	880b883a 	mov	r5,r17
 4015a2c:	dc000904 	addi	r16,sp,36
 4015a30:	d8c00115 	stw	r3,4(sp)
 4015a34:	d8800015 	stw	r2,0(sp)
 4015a38:	d9800215 	stw	r6,8(sp)
 4015a3c:	dfc01015 	stw	ra,64(sp)
 4015a40:	d9c00315 	stw	r7,12(sp)
 4015a44:	40163f80 	call	40163f8 <__unpack_d>
 4015a48:	d9000204 	addi	r4,sp,8
 4015a4c:	800b883a 	mov	r5,r16
 4015a50:	40163f80 	call	40163f8 <__unpack_d>
 4015a54:	d8800417 	ldw	r2,16(sp)
 4015a58:	00c00044 	movi	r3,1
 4015a5c:	01bfffc4 	movi	r6,-1
 4015a60:	1880062e 	bgeu	r3,r2,4015a7c <__gedf2+0x70>
 4015a64:	d8800917 	ldw	r2,36(sp)
 4015a68:	8809883a 	mov	r4,r17
 4015a6c:	800b883a 	mov	r5,r16
 4015a70:	1880022e 	bgeu	r3,r2,4015a7c <__gedf2+0x70>
 4015a74:	40165300 	call	4016530 <__fpcmp_parts_d>
 4015a78:	100d883a 	mov	r6,r2
 4015a7c:	3005883a 	mov	r2,r6
 4015a80:	dfc01017 	ldw	ra,64(sp)
 4015a84:	dc400f17 	ldw	r17,60(sp)
 4015a88:	dc000e17 	ldw	r16,56(sp)
 4015a8c:	dec01104 	addi	sp,sp,68
 4015a90:	f800283a 	ret

04015a94 <__ltdf2>:
 4015a94:	deffef04 	addi	sp,sp,-68
 4015a98:	dc400f15 	stw	r17,60(sp)
 4015a9c:	dc400404 	addi	r17,sp,16
 4015aa0:	2005883a 	mov	r2,r4
 4015aa4:	2807883a 	mov	r3,r5
 4015aa8:	dc000e15 	stw	r16,56(sp)
 4015aac:	d809883a 	mov	r4,sp
 4015ab0:	880b883a 	mov	r5,r17
 4015ab4:	dc000904 	addi	r16,sp,36
 4015ab8:	d8c00115 	stw	r3,4(sp)
 4015abc:	d8800015 	stw	r2,0(sp)
 4015ac0:	d9800215 	stw	r6,8(sp)
 4015ac4:	dfc01015 	stw	ra,64(sp)
 4015ac8:	d9c00315 	stw	r7,12(sp)
 4015acc:	40163f80 	call	40163f8 <__unpack_d>
 4015ad0:	d9000204 	addi	r4,sp,8
 4015ad4:	800b883a 	mov	r5,r16
 4015ad8:	40163f80 	call	40163f8 <__unpack_d>
 4015adc:	d8800417 	ldw	r2,16(sp)
 4015ae0:	00c00044 	movi	r3,1
 4015ae4:	180d883a 	mov	r6,r3
 4015ae8:	1880062e 	bgeu	r3,r2,4015b04 <__ltdf2+0x70>
 4015aec:	d8800917 	ldw	r2,36(sp)
 4015af0:	8809883a 	mov	r4,r17
 4015af4:	800b883a 	mov	r5,r16
 4015af8:	1880022e 	bgeu	r3,r2,4015b04 <__ltdf2+0x70>
 4015afc:	40165300 	call	4016530 <__fpcmp_parts_d>
 4015b00:	100d883a 	mov	r6,r2
 4015b04:	3005883a 	mov	r2,r6
 4015b08:	dfc01017 	ldw	ra,64(sp)
 4015b0c:	dc400f17 	ldw	r17,60(sp)
 4015b10:	dc000e17 	ldw	r16,56(sp)
 4015b14:	dec01104 	addi	sp,sp,68
 4015b18:	f800283a 	ret

04015b1c <__floatsidf>:
 4015b1c:	2006d7fa 	srli	r3,r4,31
 4015b20:	defff604 	addi	sp,sp,-40
 4015b24:	008000c4 	movi	r2,3
 4015b28:	dfc00915 	stw	ra,36(sp)
 4015b2c:	dcc00815 	stw	r19,32(sp)
 4015b30:	dc800715 	stw	r18,28(sp)
 4015b34:	dc400615 	stw	r17,24(sp)
 4015b38:	dc000515 	stw	r16,20(sp)
 4015b3c:	d8800015 	stw	r2,0(sp)
 4015b40:	d8c00115 	stw	r3,4(sp)
 4015b44:	20000f1e 	bne	r4,zero,4015b84 <__floatsidf+0x68>
 4015b48:	00800084 	movi	r2,2
 4015b4c:	d8800015 	stw	r2,0(sp)
 4015b50:	d809883a 	mov	r4,sp
 4015b54:	40160e40 	call	40160e4 <__pack_d>
 4015b58:	1009883a 	mov	r4,r2
 4015b5c:	180b883a 	mov	r5,r3
 4015b60:	2005883a 	mov	r2,r4
 4015b64:	2807883a 	mov	r3,r5
 4015b68:	dfc00917 	ldw	ra,36(sp)
 4015b6c:	dcc00817 	ldw	r19,32(sp)
 4015b70:	dc800717 	ldw	r18,28(sp)
 4015b74:	dc400617 	ldw	r17,24(sp)
 4015b78:	dc000517 	ldw	r16,20(sp)
 4015b7c:	dec00a04 	addi	sp,sp,40
 4015b80:	f800283a 	ret
 4015b84:	00800f04 	movi	r2,60
 4015b88:	1807003a 	cmpeq	r3,r3,zero
 4015b8c:	d8800215 	stw	r2,8(sp)
 4015b90:	18001126 	beq	r3,zero,4015bd8 <__floatsidf+0xbc>
 4015b94:	0027883a 	mov	r19,zero
 4015b98:	2025883a 	mov	r18,r4
 4015b9c:	d9000315 	stw	r4,12(sp)
 4015ba0:	dcc00415 	stw	r19,16(sp)
 4015ba4:	40160640 	call	4016064 <__clzsi2>
 4015ba8:	11000744 	addi	r4,r2,29
 4015bac:	013fe80e 	bge	zero,r4,4015b50 <__floatsidf+0x34>
 4015bb0:	10bfff44 	addi	r2,r2,-3
 4015bb4:	10000c16 	blt	r2,zero,4015be8 <__floatsidf+0xcc>
 4015bb8:	90a2983a 	sll	r17,r18,r2
 4015bbc:	0021883a 	mov	r16,zero
 4015bc0:	d8800217 	ldw	r2,8(sp)
 4015bc4:	dc400415 	stw	r17,16(sp)
 4015bc8:	dc000315 	stw	r16,12(sp)
 4015bcc:	1105c83a 	sub	r2,r2,r4
 4015bd0:	d8800215 	stw	r2,8(sp)
 4015bd4:	003fde06 	br	4015b50 <__floatsidf+0x34>
 4015bd8:	00a00034 	movhi	r2,32768
 4015bdc:	20800a26 	beq	r4,r2,4015c08 <__floatsidf+0xec>
 4015be0:	0109c83a 	sub	r4,zero,r4
 4015be4:	003feb06 	br	4015b94 <__floatsidf+0x78>
 4015be8:	9006d07a 	srli	r3,r18,1
 4015bec:	008007c4 	movi	r2,31
 4015bf0:	1105c83a 	sub	r2,r2,r4
 4015bf4:	1886d83a 	srl	r3,r3,r2
 4015bf8:	9922983a 	sll	r17,r19,r4
 4015bfc:	9120983a 	sll	r16,r18,r4
 4015c00:	1c62b03a 	or	r17,r3,r17
 4015c04:	003fee06 	br	4015bc0 <__floatsidf+0xa4>
 4015c08:	0009883a 	mov	r4,zero
 4015c0c:	01707834 	movhi	r5,49632
 4015c10:	003fd306 	br	4015b60 <__floatsidf+0x44>

04015c14 <__fixdfsi>:
 4015c14:	defff804 	addi	sp,sp,-32
 4015c18:	2005883a 	mov	r2,r4
 4015c1c:	2807883a 	mov	r3,r5
 4015c20:	d809883a 	mov	r4,sp
 4015c24:	d9400204 	addi	r5,sp,8
 4015c28:	d8c00115 	stw	r3,4(sp)
 4015c2c:	d8800015 	stw	r2,0(sp)
 4015c30:	dfc00715 	stw	ra,28(sp)
 4015c34:	40163f80 	call	40163f8 <__unpack_d>
 4015c38:	d8c00217 	ldw	r3,8(sp)
 4015c3c:	00800084 	movi	r2,2
 4015c40:	1880051e 	bne	r3,r2,4015c58 <__fixdfsi+0x44>
 4015c44:	0007883a 	mov	r3,zero
 4015c48:	1805883a 	mov	r2,r3
 4015c4c:	dfc00717 	ldw	ra,28(sp)
 4015c50:	dec00804 	addi	sp,sp,32
 4015c54:	f800283a 	ret
 4015c58:	00800044 	movi	r2,1
 4015c5c:	10fff92e 	bgeu	r2,r3,4015c44 <__fixdfsi+0x30>
 4015c60:	00800104 	movi	r2,4
 4015c64:	18800426 	beq	r3,r2,4015c78 <__fixdfsi+0x64>
 4015c68:	d8c00417 	ldw	r3,16(sp)
 4015c6c:	183ff516 	blt	r3,zero,4015c44 <__fixdfsi+0x30>
 4015c70:	00800784 	movi	r2,30
 4015c74:	10c0080e 	bge	r2,r3,4015c98 <__fixdfsi+0x84>
 4015c78:	d8800317 	ldw	r2,12(sp)
 4015c7c:	1000121e 	bne	r2,zero,4015cc8 <__fixdfsi+0xb4>
 4015c80:	00e00034 	movhi	r3,32768
 4015c84:	18ffffc4 	addi	r3,r3,-1
 4015c88:	1805883a 	mov	r2,r3
 4015c8c:	dfc00717 	ldw	ra,28(sp)
 4015c90:	dec00804 	addi	sp,sp,32
 4015c94:	f800283a 	ret
 4015c98:	00800f04 	movi	r2,60
 4015c9c:	10d1c83a 	sub	r8,r2,r3
 4015ca0:	40bff804 	addi	r2,r8,-32
 4015ca4:	d9800517 	ldw	r6,20(sp)
 4015ca8:	d9c00617 	ldw	r7,24(sp)
 4015cac:	10000816 	blt	r2,zero,4015cd0 <__fixdfsi+0xbc>
 4015cb0:	3888d83a 	srl	r4,r7,r2
 4015cb4:	d8800317 	ldw	r2,12(sp)
 4015cb8:	2007883a 	mov	r3,r4
 4015cbc:	103fe226 	beq	r2,zero,4015c48 <__fixdfsi+0x34>
 4015cc0:	0107c83a 	sub	r3,zero,r4
 4015cc4:	003fe006 	br	4015c48 <__fixdfsi+0x34>
 4015cc8:	00e00034 	movhi	r3,32768
 4015ccc:	003fde06 	br	4015c48 <__fixdfsi+0x34>
 4015cd0:	39c7883a 	add	r3,r7,r7
 4015cd4:	008007c4 	movi	r2,31
 4015cd8:	1205c83a 	sub	r2,r2,r8
 4015cdc:	1886983a 	sll	r3,r3,r2
 4015ce0:	3208d83a 	srl	r4,r6,r8
 4015ce4:	1908b03a 	or	r4,r3,r4
 4015ce8:	003ff206 	br	4015cb4 <__fixdfsi+0xa0>

04015cec <__floatunsidf>:
 4015cec:	defff204 	addi	sp,sp,-56
 4015cf0:	dfc00d15 	stw	ra,52(sp)
 4015cf4:	ddc00c15 	stw	r23,48(sp)
 4015cf8:	dd800b15 	stw	r22,44(sp)
 4015cfc:	dd400a15 	stw	r21,40(sp)
 4015d00:	dd000915 	stw	r20,36(sp)
 4015d04:	dcc00815 	stw	r19,32(sp)
 4015d08:	dc800715 	stw	r18,28(sp)
 4015d0c:	dc400615 	stw	r17,24(sp)
 4015d10:	dc000515 	stw	r16,20(sp)
 4015d14:	d8000115 	stw	zero,4(sp)
 4015d18:	20000f1e 	bne	r4,zero,4015d58 <__floatunsidf+0x6c>
 4015d1c:	00800084 	movi	r2,2
 4015d20:	d8800015 	stw	r2,0(sp)
 4015d24:	d809883a 	mov	r4,sp
 4015d28:	40160e40 	call	40160e4 <__pack_d>
 4015d2c:	dfc00d17 	ldw	ra,52(sp)
 4015d30:	ddc00c17 	ldw	r23,48(sp)
 4015d34:	dd800b17 	ldw	r22,44(sp)
 4015d38:	dd400a17 	ldw	r21,40(sp)
 4015d3c:	dd000917 	ldw	r20,36(sp)
 4015d40:	dcc00817 	ldw	r19,32(sp)
 4015d44:	dc800717 	ldw	r18,28(sp)
 4015d48:	dc400617 	ldw	r17,24(sp)
 4015d4c:	dc000517 	ldw	r16,20(sp)
 4015d50:	dec00e04 	addi	sp,sp,56
 4015d54:	f800283a 	ret
 4015d58:	008000c4 	movi	r2,3
 4015d5c:	00c00f04 	movi	r3,60
 4015d60:	002f883a 	mov	r23,zero
 4015d64:	202d883a 	mov	r22,r4
 4015d68:	d8800015 	stw	r2,0(sp)
 4015d6c:	d8c00215 	stw	r3,8(sp)
 4015d70:	d9000315 	stw	r4,12(sp)
 4015d74:	ddc00415 	stw	r23,16(sp)
 4015d78:	40160640 	call	4016064 <__clzsi2>
 4015d7c:	12400744 	addi	r9,r2,29
 4015d80:	48000b16 	blt	r9,zero,4015db0 <__floatunsidf+0xc4>
 4015d84:	483fe726 	beq	r9,zero,4015d24 <__floatunsidf+0x38>
 4015d88:	10bfff44 	addi	r2,r2,-3
 4015d8c:	10002e16 	blt	r2,zero,4015e48 <__floatunsidf+0x15c>
 4015d90:	b0a2983a 	sll	r17,r22,r2
 4015d94:	0021883a 	mov	r16,zero
 4015d98:	d8800217 	ldw	r2,8(sp)
 4015d9c:	dc400415 	stw	r17,16(sp)
 4015da0:	dc000315 	stw	r16,12(sp)
 4015da4:	1245c83a 	sub	r2,r2,r9
 4015da8:	d8800215 	stw	r2,8(sp)
 4015dac:	003fdd06 	br	4015d24 <__floatunsidf+0x38>
 4015db0:	0255c83a 	sub	r10,zero,r9
 4015db4:	51bff804 	addi	r6,r10,-32
 4015db8:	30001b16 	blt	r6,zero,4015e28 <__floatunsidf+0x13c>
 4015dbc:	b9a8d83a 	srl	r20,r23,r6
 4015dc0:	002b883a 	mov	r21,zero
 4015dc4:	000f883a 	mov	r7,zero
 4015dc8:	01000044 	movi	r4,1
 4015dcc:	0011883a 	mov	r8,zero
 4015dd0:	30002516 	blt	r6,zero,4015e68 <__floatunsidf+0x17c>
 4015dd4:	21a6983a 	sll	r19,r4,r6
 4015dd8:	0025883a 	mov	r18,zero
 4015ddc:	00bfffc4 	movi	r2,-1
 4015de0:	9089883a 	add	r4,r18,r2
 4015de4:	988b883a 	add	r5,r19,r2
 4015de8:	248d803a 	cmpltu	r6,r4,r18
 4015dec:	314b883a 	add	r5,r6,r5
 4015df0:	b104703a 	and	r2,r22,r4
 4015df4:	b946703a 	and	r3,r23,r5
 4015df8:	10c4b03a 	or	r2,r2,r3
 4015dfc:	10000226 	beq	r2,zero,4015e08 <__floatunsidf+0x11c>
 4015e00:	01c00044 	movi	r7,1
 4015e04:	0011883a 	mov	r8,zero
 4015e08:	d9000217 	ldw	r4,8(sp)
 4015e0c:	a1c4b03a 	or	r2,r20,r7
 4015e10:	aa06b03a 	or	r3,r21,r8
 4015e14:	2249c83a 	sub	r4,r4,r9
 4015e18:	d8c00415 	stw	r3,16(sp)
 4015e1c:	d9000215 	stw	r4,8(sp)
 4015e20:	d8800315 	stw	r2,12(sp)
 4015e24:	003fbf06 	br	4015d24 <__floatunsidf+0x38>
 4015e28:	bdc7883a 	add	r3,r23,r23
 4015e2c:	008007c4 	movi	r2,31
 4015e30:	1285c83a 	sub	r2,r2,r10
 4015e34:	1886983a 	sll	r3,r3,r2
 4015e38:	b2a8d83a 	srl	r20,r22,r10
 4015e3c:	baaad83a 	srl	r21,r23,r10
 4015e40:	1d28b03a 	or	r20,r3,r20
 4015e44:	003fdf06 	br	4015dc4 <__floatunsidf+0xd8>
 4015e48:	b006d07a 	srli	r3,r22,1
 4015e4c:	008007c4 	movi	r2,31
 4015e50:	1245c83a 	sub	r2,r2,r9
 4015e54:	1886d83a 	srl	r3,r3,r2
 4015e58:	ba62983a 	sll	r17,r23,r9
 4015e5c:	b260983a 	sll	r16,r22,r9
 4015e60:	1c62b03a 	or	r17,r3,r17
 4015e64:	003fcc06 	br	4015d98 <__floatunsidf+0xac>
 4015e68:	2006d07a 	srli	r3,r4,1
 4015e6c:	008007c4 	movi	r2,31
 4015e70:	1285c83a 	sub	r2,r2,r10
 4015e74:	18a6d83a 	srl	r19,r3,r2
 4015e78:	22a4983a 	sll	r18,r4,r10
 4015e7c:	003fd706 	br	4015ddc <__floatunsidf+0xf0>

04015e80 <udivmodsi4>:
 4015e80:	29001b2e 	bgeu	r5,r4,4015ef0 <udivmodsi4+0x70>
 4015e84:	28001a16 	blt	r5,zero,4015ef0 <udivmodsi4+0x70>
 4015e88:	00800044 	movi	r2,1
 4015e8c:	0007883a 	mov	r3,zero
 4015e90:	01c007c4 	movi	r7,31
 4015e94:	00000306 	br	4015ea4 <udivmodsi4+0x24>
 4015e98:	19c01326 	beq	r3,r7,4015ee8 <udivmodsi4+0x68>
 4015e9c:	18c00044 	addi	r3,r3,1
 4015ea0:	28000416 	blt	r5,zero,4015eb4 <udivmodsi4+0x34>
 4015ea4:	294b883a 	add	r5,r5,r5
 4015ea8:	1085883a 	add	r2,r2,r2
 4015eac:	293ffa36 	bltu	r5,r4,4015e98 <udivmodsi4+0x18>
 4015eb0:	10000d26 	beq	r2,zero,4015ee8 <udivmodsi4+0x68>
 4015eb4:	0007883a 	mov	r3,zero
 4015eb8:	21400236 	bltu	r4,r5,4015ec4 <udivmodsi4+0x44>
 4015ebc:	2149c83a 	sub	r4,r4,r5
 4015ec0:	1886b03a 	or	r3,r3,r2
 4015ec4:	1004d07a 	srli	r2,r2,1
 4015ec8:	280ad07a 	srli	r5,r5,1
 4015ecc:	103ffa1e 	bne	r2,zero,4015eb8 <udivmodsi4+0x38>
 4015ed0:	30000226 	beq	r6,zero,4015edc <udivmodsi4+0x5c>
 4015ed4:	2005883a 	mov	r2,r4
 4015ed8:	f800283a 	ret
 4015edc:	1809883a 	mov	r4,r3
 4015ee0:	2005883a 	mov	r2,r4
 4015ee4:	f800283a 	ret
 4015ee8:	0007883a 	mov	r3,zero
 4015eec:	003ff806 	br	4015ed0 <udivmodsi4+0x50>
 4015ef0:	00800044 	movi	r2,1
 4015ef4:	0007883a 	mov	r3,zero
 4015ef8:	003fef06 	br	4015eb8 <udivmodsi4+0x38>

04015efc <__divsi3>:
 4015efc:	defffe04 	addi	sp,sp,-8
 4015f00:	dc000015 	stw	r16,0(sp)
 4015f04:	dfc00115 	stw	ra,4(sp)
 4015f08:	0021883a 	mov	r16,zero
 4015f0c:	20000c16 	blt	r4,zero,4015f40 <__divsi3+0x44>
 4015f10:	000d883a 	mov	r6,zero
 4015f14:	28000e16 	blt	r5,zero,4015f50 <__divsi3+0x54>
 4015f18:	4015e800 	call	4015e80 <udivmodsi4>
 4015f1c:	1007883a 	mov	r3,r2
 4015f20:	8005003a 	cmpeq	r2,r16,zero
 4015f24:	1000011e 	bne	r2,zero,4015f2c <__divsi3+0x30>
 4015f28:	00c7c83a 	sub	r3,zero,r3
 4015f2c:	1805883a 	mov	r2,r3
 4015f30:	dfc00117 	ldw	ra,4(sp)
 4015f34:	dc000017 	ldw	r16,0(sp)
 4015f38:	dec00204 	addi	sp,sp,8
 4015f3c:	f800283a 	ret
 4015f40:	0109c83a 	sub	r4,zero,r4
 4015f44:	04000044 	movi	r16,1
 4015f48:	000d883a 	mov	r6,zero
 4015f4c:	283ff20e 	bge	r5,zero,4015f18 <__divsi3+0x1c>
 4015f50:	014bc83a 	sub	r5,zero,r5
 4015f54:	8021003a 	cmpeq	r16,r16,zero
 4015f58:	003fef06 	br	4015f18 <__divsi3+0x1c>

04015f5c <__modsi3>:
 4015f5c:	deffff04 	addi	sp,sp,-4
 4015f60:	dfc00015 	stw	ra,0(sp)
 4015f64:	01800044 	movi	r6,1
 4015f68:	2807883a 	mov	r3,r5
 4015f6c:	20000416 	blt	r4,zero,4015f80 <__modsi3+0x24>
 4015f70:	28000c16 	blt	r5,zero,4015fa4 <__modsi3+0x48>
 4015f74:	dfc00017 	ldw	ra,0(sp)
 4015f78:	dec00104 	addi	sp,sp,4
 4015f7c:	4015e801 	jmpi	4015e80 <udivmodsi4>
 4015f80:	0109c83a 	sub	r4,zero,r4
 4015f84:	28000b16 	blt	r5,zero,4015fb4 <__modsi3+0x58>
 4015f88:	180b883a 	mov	r5,r3
 4015f8c:	01800044 	movi	r6,1
 4015f90:	4015e800 	call	4015e80 <udivmodsi4>
 4015f94:	0085c83a 	sub	r2,zero,r2
 4015f98:	dfc00017 	ldw	ra,0(sp)
 4015f9c:	dec00104 	addi	sp,sp,4
 4015fa0:	f800283a 	ret
 4015fa4:	014bc83a 	sub	r5,zero,r5
 4015fa8:	dfc00017 	ldw	ra,0(sp)
 4015fac:	dec00104 	addi	sp,sp,4
 4015fb0:	4015e801 	jmpi	4015e80 <udivmodsi4>
 4015fb4:	0147c83a 	sub	r3,zero,r5
 4015fb8:	003ff306 	br	4015f88 <__modsi3+0x2c>

04015fbc <__udivsi3>:
 4015fbc:	000d883a 	mov	r6,zero
 4015fc0:	4015e801 	jmpi	4015e80 <udivmodsi4>

04015fc4 <__umodsi3>:
 4015fc4:	01800044 	movi	r6,1
 4015fc8:	4015e801 	jmpi	4015e80 <udivmodsi4>

04015fcc <__muldi3>:
 4015fcc:	2011883a 	mov	r8,r4
 4015fd0:	427fffcc 	andi	r9,r8,65535
 4015fd4:	4018d43a 	srli	r12,r8,16
 4015fd8:	32bfffcc 	andi	r10,r6,65535
 4015fdc:	3016d43a 	srli	r11,r6,16
 4015fe0:	4a85383a 	mul	r2,r9,r10
 4015fe4:	6295383a 	mul	r10,r12,r10
 4015fe8:	4ad3383a 	mul	r9,r9,r11
 4015fec:	113fffcc 	andi	r4,r2,65535
 4015ff0:	1004d43a 	srli	r2,r2,16
 4015ff4:	4a93883a 	add	r9,r9,r10
 4015ff8:	3807883a 	mov	r3,r7
 4015ffc:	1245883a 	add	r2,r2,r9
 4016000:	280f883a 	mov	r7,r5
 4016004:	180b883a 	mov	r5,r3
 4016008:	1006943a 	slli	r3,r2,16
 401600c:	defffd04 	addi	sp,sp,-12
 4016010:	dc800215 	stw	r18,8(sp)
 4016014:	1907883a 	add	r3,r3,r4
 4016018:	dc400115 	stw	r17,4(sp)
 401601c:	dc000015 	stw	r16,0(sp)
 4016020:	4165383a 	mul	r18,r8,r5
 4016024:	31e3383a 	mul	r17,r6,r7
 4016028:	1012d43a 	srli	r9,r2,16
 401602c:	62d9383a 	mul	r12,r12,r11
 4016030:	181f883a 	mov	r15,r3
 4016034:	1280022e 	bgeu	r2,r10,4016040 <__muldi3+0x74>
 4016038:	00800074 	movhi	r2,1
 401603c:	6099883a 	add	r12,r12,r2
 4016040:	624d883a 	add	r6,r12,r9
 4016044:	9187883a 	add	r3,r18,r6
 4016048:	88c7883a 	add	r3,r17,r3
 401604c:	7805883a 	mov	r2,r15
 4016050:	dc800217 	ldw	r18,8(sp)
 4016054:	dc400117 	ldw	r17,4(sp)
 4016058:	dc000017 	ldw	r16,0(sp)
 401605c:	dec00304 	addi	sp,sp,12
 4016060:	f800283a 	ret

04016064 <__clzsi2>:
 4016064:	00bfffd4 	movui	r2,65535
 4016068:	11000e36 	bltu	r2,r4,40160a4 <__clzsi2+0x40>
 401606c:	00803fc4 	movi	r2,255
 4016070:	01400204 	movi	r5,8
 4016074:	0007883a 	mov	r3,zero
 4016078:	11001036 	bltu	r2,r4,40160bc <__clzsi2+0x58>
 401607c:	000b883a 	mov	r5,zero
 4016080:	20c6d83a 	srl	r3,r4,r3
 4016084:	00810074 	movhi	r2,1025
 4016088:	109ab404 	addi	r2,r2,27344
 401608c:	1887883a 	add	r3,r3,r2
 4016090:	18800003 	ldbu	r2,0(r3)
 4016094:	00c00804 	movi	r3,32
 4016098:	2885883a 	add	r2,r5,r2
 401609c:	1885c83a 	sub	r2,r3,r2
 40160a0:	f800283a 	ret
 40160a4:	01400404 	movi	r5,16
 40160a8:	00804034 	movhi	r2,256
 40160ac:	10bfffc4 	addi	r2,r2,-1
 40160b0:	2807883a 	mov	r3,r5
 40160b4:	113ff22e 	bgeu	r2,r4,4016080 <__clzsi2+0x1c>
 40160b8:	01400604 	movi	r5,24
 40160bc:	2807883a 	mov	r3,r5
 40160c0:	20c6d83a 	srl	r3,r4,r3
 40160c4:	00810074 	movhi	r2,1025
 40160c8:	109ab404 	addi	r2,r2,27344
 40160cc:	1887883a 	add	r3,r3,r2
 40160d0:	18800003 	ldbu	r2,0(r3)
 40160d4:	00c00804 	movi	r3,32
 40160d8:	2885883a 	add	r2,r5,r2
 40160dc:	1885c83a 	sub	r2,r3,r2
 40160e0:	f800283a 	ret

040160e4 <__pack_d>:
 40160e4:	20c00017 	ldw	r3,0(r4)
 40160e8:	defffd04 	addi	sp,sp,-12
 40160ec:	dc000015 	stw	r16,0(sp)
 40160f0:	dc800215 	stw	r18,8(sp)
 40160f4:	dc400115 	stw	r17,4(sp)
 40160f8:	00800044 	movi	r2,1
 40160fc:	22000317 	ldw	r8,12(r4)
 4016100:	001f883a 	mov	r15,zero
 4016104:	22400417 	ldw	r9,16(r4)
 4016108:	24000117 	ldw	r16,4(r4)
 401610c:	10c0552e 	bgeu	r2,r3,4016264 <__pack_d+0x180>
 4016110:	00800104 	movi	r2,4
 4016114:	18804f26 	beq	r3,r2,4016254 <__pack_d+0x170>
 4016118:	00800084 	movi	r2,2
 401611c:	18800226 	beq	r3,r2,4016128 <__pack_d+0x44>
 4016120:	4244b03a 	or	r2,r8,r9
 4016124:	10001a1e 	bne	r2,zero,4016190 <__pack_d+0xac>
 4016128:	000d883a 	mov	r6,zero
 401612c:	000f883a 	mov	r7,zero
 4016130:	0011883a 	mov	r8,zero
 4016134:	00800434 	movhi	r2,16
 4016138:	10bfffc4 	addi	r2,r2,-1
 401613c:	301d883a 	mov	r14,r6
 4016140:	3884703a 	and	r2,r7,r2
 4016144:	400a953a 	slli	r5,r8,20
 4016148:	79bffc2c 	andhi	r6,r15,65520
 401614c:	308cb03a 	or	r6,r6,r2
 4016150:	00e00434 	movhi	r3,32784
 4016154:	18ffffc4 	addi	r3,r3,-1
 4016158:	800497fa 	slli	r2,r16,31
 401615c:	30c6703a 	and	r3,r6,r3
 4016160:	1946b03a 	or	r3,r3,r5
 4016164:	01600034 	movhi	r5,32768
 4016168:	297fffc4 	addi	r5,r5,-1
 401616c:	194a703a 	and	r5,r3,r5
 4016170:	288ab03a 	or	r5,r5,r2
 4016174:	2807883a 	mov	r3,r5
 4016178:	7005883a 	mov	r2,r14
 401617c:	dc800217 	ldw	r18,8(sp)
 4016180:	dc400117 	ldw	r17,4(sp)
 4016184:	dc000017 	ldw	r16,0(sp)
 4016188:	dec00304 	addi	sp,sp,12
 401618c:	f800283a 	ret
 4016190:	21000217 	ldw	r4,8(r4)
 4016194:	00bf0084 	movi	r2,-1022
 4016198:	20803f16 	blt	r4,r2,4016298 <__pack_d+0x1b4>
 401619c:	0080ffc4 	movi	r2,1023
 40161a0:	11002c16 	blt	r2,r4,4016254 <__pack_d+0x170>
 40161a4:	00803fc4 	movi	r2,255
 40161a8:	408c703a 	and	r6,r8,r2
 40161ac:	00802004 	movi	r2,128
 40161b0:	0007883a 	mov	r3,zero
 40161b4:	000f883a 	mov	r7,zero
 40161b8:	2280ffc4 	addi	r10,r4,1023
 40161bc:	30801e26 	beq	r6,r2,4016238 <__pack_d+0x154>
 40161c0:	00801fc4 	movi	r2,127
 40161c4:	4089883a 	add	r4,r8,r2
 40161c8:	220d803a 	cmpltu	r6,r4,r8
 40161cc:	324d883a 	add	r6,r6,r9
 40161d0:	2011883a 	mov	r8,r4
 40161d4:	3013883a 	mov	r9,r6
 40161d8:	00880034 	movhi	r2,8192
 40161dc:	10bfffc4 	addi	r2,r2,-1
 40161e0:	12400d36 	bltu	r2,r9,4016218 <__pack_d+0x134>
 40161e4:	4804963a 	slli	r2,r9,24
 40161e8:	400cd23a 	srli	r6,r8,8
 40161ec:	480ed23a 	srli	r7,r9,8
 40161f0:	013fffc4 	movi	r4,-1
 40161f4:	118cb03a 	or	r6,r2,r6
 40161f8:	01400434 	movhi	r5,16
 40161fc:	297fffc4 	addi	r5,r5,-1
 4016200:	3104703a 	and	r2,r6,r4
 4016204:	3946703a 	and	r3,r7,r5
 4016208:	5201ffcc 	andi	r8,r10,2047
 401620c:	100d883a 	mov	r6,r2
 4016210:	180f883a 	mov	r7,r3
 4016214:	003fc706 	br	4016134 <__pack_d+0x50>
 4016218:	480897fa 	slli	r4,r9,31
 401621c:	4004d07a 	srli	r2,r8,1
 4016220:	4806d07a 	srli	r3,r9,1
 4016224:	52800044 	addi	r10,r10,1
 4016228:	2084b03a 	or	r2,r4,r2
 401622c:	1011883a 	mov	r8,r2
 4016230:	1813883a 	mov	r9,r3
 4016234:	003feb06 	br	40161e4 <__pack_d+0x100>
 4016238:	383fe11e 	bne	r7,zero,40161c0 <__pack_d+0xdc>
 401623c:	01004004 	movi	r4,256
 4016240:	4104703a 	and	r2,r8,r4
 4016244:	10c4b03a 	or	r2,r2,r3
 4016248:	103fe326 	beq	r2,zero,40161d8 <__pack_d+0xf4>
 401624c:	3005883a 	mov	r2,r6
 4016250:	003fdc06 	br	40161c4 <__pack_d+0xe0>
 4016254:	000d883a 	mov	r6,zero
 4016258:	000f883a 	mov	r7,zero
 401625c:	0201ffc4 	movi	r8,2047
 4016260:	003fb406 	br	4016134 <__pack_d+0x50>
 4016264:	0005883a 	mov	r2,zero
 4016268:	00c00234 	movhi	r3,8
 401626c:	408cb03a 	or	r6,r8,r2
 4016270:	48ceb03a 	or	r7,r9,r3
 4016274:	013fffc4 	movi	r4,-1
 4016278:	01400434 	movhi	r5,16
 401627c:	297fffc4 	addi	r5,r5,-1
 4016280:	3104703a 	and	r2,r6,r4
 4016284:	3946703a 	and	r3,r7,r5
 4016288:	100d883a 	mov	r6,r2
 401628c:	180f883a 	mov	r7,r3
 4016290:	0201ffc4 	movi	r8,2047
 4016294:	003fa706 	br	4016134 <__pack_d+0x50>
 4016298:	1109c83a 	sub	r4,r2,r4
 401629c:	00800e04 	movi	r2,56
 40162a0:	11004316 	blt	r2,r4,40163b0 <__pack_d+0x2cc>
 40162a4:	21fff804 	addi	r7,r4,-32
 40162a8:	38004516 	blt	r7,zero,40163c0 <__pack_d+0x2dc>
 40162ac:	49d8d83a 	srl	r12,r9,r7
 40162b0:	001b883a 	mov	r13,zero
 40162b4:	0023883a 	mov	r17,zero
 40162b8:	01400044 	movi	r5,1
 40162bc:	0025883a 	mov	r18,zero
 40162c0:	38004716 	blt	r7,zero,40163e0 <__pack_d+0x2fc>
 40162c4:	29d6983a 	sll	r11,r5,r7
 40162c8:	0015883a 	mov	r10,zero
 40162cc:	00bfffc4 	movi	r2,-1
 40162d0:	5089883a 	add	r4,r10,r2
 40162d4:	588b883a 	add	r5,r11,r2
 40162d8:	228d803a 	cmpltu	r6,r4,r10
 40162dc:	314b883a 	add	r5,r6,r5
 40162e0:	4104703a 	and	r2,r8,r4
 40162e4:	4946703a 	and	r3,r9,r5
 40162e8:	10c4b03a 	or	r2,r2,r3
 40162ec:	10000226 	beq	r2,zero,40162f8 <__pack_d+0x214>
 40162f0:	04400044 	movi	r17,1
 40162f4:	0025883a 	mov	r18,zero
 40162f8:	00803fc4 	movi	r2,255
 40162fc:	644eb03a 	or	r7,r12,r17
 4016300:	3892703a 	and	r9,r7,r2
 4016304:	00802004 	movi	r2,128
 4016308:	6c90b03a 	or	r8,r13,r18
 401630c:	0015883a 	mov	r10,zero
 4016310:	48801626 	beq	r9,r2,401636c <__pack_d+0x288>
 4016314:	01001fc4 	movi	r4,127
 4016318:	3905883a 	add	r2,r7,r4
 401631c:	11cd803a 	cmpltu	r6,r2,r7
 4016320:	320d883a 	add	r6,r6,r8
 4016324:	100f883a 	mov	r7,r2
 4016328:	00840034 	movhi	r2,4096
 401632c:	10bfffc4 	addi	r2,r2,-1
 4016330:	3011883a 	mov	r8,r6
 4016334:	0007883a 	mov	r3,zero
 4016338:	11801b36 	bltu	r2,r6,40163a8 <__pack_d+0x2c4>
 401633c:	4004963a 	slli	r2,r8,24
 4016340:	3808d23a 	srli	r4,r7,8
 4016344:	400ad23a 	srli	r5,r8,8
 4016348:	1813883a 	mov	r9,r3
 401634c:	1108b03a 	or	r4,r2,r4
 4016350:	00bfffc4 	movi	r2,-1
 4016354:	00c00434 	movhi	r3,16
 4016358:	18ffffc4 	addi	r3,r3,-1
 401635c:	208c703a 	and	r6,r4,r2
 4016360:	28ce703a 	and	r7,r5,r3
 4016364:	4a01ffcc 	andi	r8,r9,2047
 4016368:	003f7206 	br	4016134 <__pack_d+0x50>
 401636c:	503fe91e 	bne	r10,zero,4016314 <__pack_d+0x230>
 4016370:	01004004 	movi	r4,256
 4016374:	3904703a 	and	r2,r7,r4
 4016378:	0007883a 	mov	r3,zero
 401637c:	10c4b03a 	or	r2,r2,r3
 4016380:	10000626 	beq	r2,zero,401639c <__pack_d+0x2b8>
 4016384:	3a45883a 	add	r2,r7,r9
 4016388:	11cd803a 	cmpltu	r6,r2,r7
 401638c:	320d883a 	add	r6,r6,r8
 4016390:	100f883a 	mov	r7,r2
 4016394:	3011883a 	mov	r8,r6
 4016398:	0007883a 	mov	r3,zero
 401639c:	00840034 	movhi	r2,4096
 40163a0:	10bfffc4 	addi	r2,r2,-1
 40163a4:	123fe52e 	bgeu	r2,r8,401633c <__pack_d+0x258>
 40163a8:	00c00044 	movi	r3,1
 40163ac:	003fe306 	br	401633c <__pack_d+0x258>
 40163b0:	0009883a 	mov	r4,zero
 40163b4:	0013883a 	mov	r9,zero
 40163b8:	000b883a 	mov	r5,zero
 40163bc:	003fe406 	br	4016350 <__pack_d+0x26c>
 40163c0:	4a47883a 	add	r3,r9,r9
 40163c4:	008007c4 	movi	r2,31
 40163c8:	1105c83a 	sub	r2,r2,r4
 40163cc:	1886983a 	sll	r3,r3,r2
 40163d0:	4118d83a 	srl	r12,r8,r4
 40163d4:	491ad83a 	srl	r13,r9,r4
 40163d8:	1b18b03a 	or	r12,r3,r12
 40163dc:	003fb506 	br	40162b4 <__pack_d+0x1d0>
 40163e0:	2806d07a 	srli	r3,r5,1
 40163e4:	008007c4 	movi	r2,31
 40163e8:	1105c83a 	sub	r2,r2,r4
 40163ec:	1896d83a 	srl	r11,r3,r2
 40163f0:	2914983a 	sll	r10,r5,r4
 40163f4:	003fb506 	br	40162cc <__pack_d+0x1e8>

040163f8 <__unpack_d>:
 40163f8:	20c00117 	ldw	r3,4(r4)
 40163fc:	22400017 	ldw	r9,0(r4)
 4016400:	00800434 	movhi	r2,16
 4016404:	10bfffc4 	addi	r2,r2,-1
 4016408:	1808d53a 	srli	r4,r3,20
 401640c:	180cd7fa 	srli	r6,r3,31
 4016410:	1894703a 	and	r10,r3,r2
 4016414:	2201ffcc 	andi	r8,r4,2047
 4016418:	281b883a 	mov	r13,r5
 401641c:	4817883a 	mov	r11,r9
 4016420:	29800115 	stw	r6,4(r5)
 4016424:	5019883a 	mov	r12,r10
 4016428:	40001e1e 	bne	r8,zero,40164a4 <__unpack_d+0xac>
 401642c:	4a84b03a 	or	r2,r9,r10
 4016430:	10001926 	beq	r2,zero,4016498 <__unpack_d+0xa0>
 4016434:	4804d63a 	srli	r2,r9,24
 4016438:	500c923a 	slli	r6,r10,8
 401643c:	013f0084 	movi	r4,-1022
 4016440:	00c40034 	movhi	r3,4096
 4016444:	18ffffc4 	addi	r3,r3,-1
 4016448:	118cb03a 	or	r6,r2,r6
 401644c:	008000c4 	movi	r2,3
 4016450:	480a923a 	slli	r5,r9,8
 4016454:	68800015 	stw	r2,0(r13)
 4016458:	69000215 	stw	r4,8(r13)
 401645c:	19800b36 	bltu	r3,r6,401648c <__unpack_d+0x94>
 4016460:	200f883a 	mov	r7,r4
 4016464:	1811883a 	mov	r8,r3
 4016468:	2945883a 	add	r2,r5,r5
 401646c:	1149803a 	cmpltu	r4,r2,r5
 4016470:	3187883a 	add	r3,r6,r6
 4016474:	20c9883a 	add	r4,r4,r3
 4016478:	100b883a 	mov	r5,r2
 401647c:	200d883a 	mov	r6,r4
 4016480:	39ffffc4 	addi	r7,r7,-1
 4016484:	413ff82e 	bgeu	r8,r4,4016468 <__unpack_d+0x70>
 4016488:	69c00215 	stw	r7,8(r13)
 401648c:	69800415 	stw	r6,16(r13)
 4016490:	69400315 	stw	r5,12(r13)
 4016494:	f800283a 	ret
 4016498:	00800084 	movi	r2,2
 401649c:	28800015 	stw	r2,0(r5)
 40164a0:	f800283a 	ret
 40164a4:	0081ffc4 	movi	r2,2047
 40164a8:	40800f26 	beq	r8,r2,40164e8 <__unpack_d+0xf0>
 40164ac:	480cd63a 	srli	r6,r9,24
 40164b0:	5006923a 	slli	r3,r10,8
 40164b4:	4804923a 	slli	r2,r9,8
 40164b8:	0009883a 	mov	r4,zero
 40164bc:	30c6b03a 	or	r3,r6,r3
 40164c0:	01440034 	movhi	r5,4096
 40164c4:	110cb03a 	or	r6,r2,r4
 40164c8:	423f0044 	addi	r8,r8,-1023
 40164cc:	194eb03a 	or	r7,r3,r5
 40164d0:	008000c4 	movi	r2,3
 40164d4:	69c00415 	stw	r7,16(r13)
 40164d8:	6a000215 	stw	r8,8(r13)
 40164dc:	68800015 	stw	r2,0(r13)
 40164e0:	69800315 	stw	r6,12(r13)
 40164e4:	f800283a 	ret
 40164e8:	4a84b03a 	or	r2,r9,r10
 40164ec:	1000031e 	bne	r2,zero,40164fc <__unpack_d+0x104>
 40164f0:	00800104 	movi	r2,4
 40164f4:	28800015 	stw	r2,0(r5)
 40164f8:	f800283a 	ret
 40164fc:	0009883a 	mov	r4,zero
 4016500:	01400234 	movhi	r5,8
 4016504:	4904703a 	and	r2,r9,r4
 4016508:	5146703a 	and	r3,r10,r5
 401650c:	10c4b03a 	or	r2,r2,r3
 4016510:	10000526 	beq	r2,zero,4016528 <__unpack_d+0x130>
 4016514:	00800044 	movi	r2,1
 4016518:	68800015 	stw	r2,0(r13)
 401651c:	6b000415 	stw	r12,16(r13)
 4016520:	6ac00315 	stw	r11,12(r13)
 4016524:	f800283a 	ret
 4016528:	68000015 	stw	zero,0(r13)
 401652c:	003ffb06 	br	401651c <__unpack_d+0x124>

04016530 <__fpcmp_parts_d>:
 4016530:	21800017 	ldw	r6,0(r4)
 4016534:	00c00044 	movi	r3,1
 4016538:	19800a2e 	bgeu	r3,r6,4016564 <__fpcmp_parts_d+0x34>
 401653c:	28800017 	ldw	r2,0(r5)
 4016540:	1880082e 	bgeu	r3,r2,4016564 <__fpcmp_parts_d+0x34>
 4016544:	00c00104 	movi	r3,4
 4016548:	30c02626 	beq	r6,r3,40165e4 <__fpcmp_parts_d+0xb4>
 401654c:	10c02226 	beq	r2,r3,40165d8 <__fpcmp_parts_d+0xa8>
 4016550:	00c00084 	movi	r3,2
 4016554:	30c00526 	beq	r6,r3,401656c <__fpcmp_parts_d+0x3c>
 4016558:	10c0071e 	bne	r2,r3,4016578 <__fpcmp_parts_d+0x48>
 401655c:	20800117 	ldw	r2,4(r4)
 4016560:	1000091e 	bne	r2,zero,4016588 <__fpcmp_parts_d+0x58>
 4016564:	00800044 	movi	r2,1
 4016568:	f800283a 	ret
 401656c:	10c01a1e 	bne	r2,r3,40165d8 <__fpcmp_parts_d+0xa8>
 4016570:	0005883a 	mov	r2,zero
 4016574:	f800283a 	ret
 4016578:	22000117 	ldw	r8,4(r4)
 401657c:	28800117 	ldw	r2,4(r5)
 4016580:	40800326 	beq	r8,r2,4016590 <__fpcmp_parts_d+0x60>
 4016584:	403ff726 	beq	r8,zero,4016564 <__fpcmp_parts_d+0x34>
 4016588:	00bfffc4 	movi	r2,-1
 401658c:	f800283a 	ret
 4016590:	20c00217 	ldw	r3,8(r4)
 4016594:	28800217 	ldw	r2,8(r5)
 4016598:	10fffa16 	blt	r2,r3,4016584 <__fpcmp_parts_d+0x54>
 401659c:	18800916 	blt	r3,r2,40165c4 <__fpcmp_parts_d+0x94>
 40165a0:	21c00417 	ldw	r7,16(r4)
 40165a4:	28c00417 	ldw	r3,16(r5)
 40165a8:	21800317 	ldw	r6,12(r4)
 40165ac:	28800317 	ldw	r2,12(r5)
 40165b0:	19fff436 	bltu	r3,r7,4016584 <__fpcmp_parts_d+0x54>
 40165b4:	38c00526 	beq	r7,r3,40165cc <__fpcmp_parts_d+0x9c>
 40165b8:	38c00236 	bltu	r7,r3,40165c4 <__fpcmp_parts_d+0x94>
 40165bc:	19ffec1e 	bne	r3,r7,4016570 <__fpcmp_parts_d+0x40>
 40165c0:	30bfeb2e 	bgeu	r6,r2,4016570 <__fpcmp_parts_d+0x40>
 40165c4:	403fe71e 	bne	r8,zero,4016564 <__fpcmp_parts_d+0x34>
 40165c8:	003fef06 	br	4016588 <__fpcmp_parts_d+0x58>
 40165cc:	11bffa2e 	bgeu	r2,r6,40165b8 <__fpcmp_parts_d+0x88>
 40165d0:	403fe426 	beq	r8,zero,4016564 <__fpcmp_parts_d+0x34>
 40165d4:	003fec06 	br	4016588 <__fpcmp_parts_d+0x58>
 40165d8:	28800117 	ldw	r2,4(r5)
 40165dc:	103fe11e 	bne	r2,zero,4016564 <__fpcmp_parts_d+0x34>
 40165e0:	003fe906 	br	4016588 <__fpcmp_parts_d+0x58>
 40165e4:	11bfdd1e 	bne	r2,r6,401655c <__fpcmp_parts_d+0x2c>
 40165e8:	28c00117 	ldw	r3,4(r5)
 40165ec:	20800117 	ldw	r2,4(r4)
 40165f0:	1885c83a 	sub	r2,r3,r2
 40165f4:	f800283a 	ret

040165f8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 40165f8:	defffd04 	addi	sp,sp,-12
 40165fc:	df000215 	stw	fp,8(sp)
 4016600:	df000204 	addi	fp,sp,8
 4016604:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4016608:	e0bfff17 	ldw	r2,-4(fp)
 401660c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4016610:	e0bffe17 	ldw	r2,-8(fp)
 4016614:	1005003a 	cmpeq	r2,r2,zero
 4016618:	1000021e 	bne	r2,zero,4016624 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 401661c:	002af070 	cmpltui	zero,zero,43969
 4016620:	00000106 	br	4016628 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4016624:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4016628:	e037883a 	mov	sp,fp
 401662c:	df000017 	ldw	fp,0(sp)
 4016630:	dec00104 	addi	sp,sp,4
 4016634:	f800283a 	ret

04016638 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4016638:	defffd04 	addi	sp,sp,-12
 401663c:	dfc00215 	stw	ra,8(sp)
 4016640:	df000115 	stw	fp,4(sp)
 4016644:	df000104 	addi	fp,sp,4
 4016648:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401664c:	008100b4 	movhi	r2,1026
 4016650:	10a1f444 	addi	r2,r2,-30767
 4016654:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4016658:	e13fff17 	ldw	r4,-4(fp)
 401665c:	40165f80 	call	40165f8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4016660:	003fff06 	br	4016660 <_exit+0x28>
 4016664:	00000010 	cmplti	zero,zero,0
 4016668:	00000000 	call	0 <__reset>
 401666c:	00527a01 	jmpi	527a0 <OSCtxSw_SWITCH_PC+0x52760>
 4016670:	011f7c01 	jmpi	11f7c0 <OSCtxSw_SWITCH_PC+0x11f780>
 4016674:	001b0c0b 	ldhu	zero,27696(zero)
 4016678:	00000028 	cmpgeui	zero,zero,0
 401667c:	00000018 	cmpnei	zero,zero,0
 4016680:	040141c8 	cmpgei	r16,zero,1287
 4016684:	000005dc 	xori	zero,zero,23
 4016688:	400e4400 	call	400e440 <alt_iic_isr_register+0xac>
 401668c:	92099170 	cmpltui	r8,r18,9797
 4016690:	95079308 	cmpgei	r20,r18,7756
 4016694:	97049605 	stb	fp,4696(r18)
 4016698:	90019f03 	ldbu	zero,1660(r18)
 401669c:	9c06940a 	0x9c06940a
 40166a0:	00000002 	0x2
 40166a4:	00000028 	cmpgeui	zero,zero,0
 40166a8:	00000044 	movi	zero,1
 40166ac:	040147a4 	muli	r16,zero,1310
 40166b0:	000005b0 	cmpltui	zero,zero,22
 40166b4:	3c0e4400 	call	3c0e440 <OSCtxSw_SWITCH_PC+0x3c0e400>
 40166b8:	92099168 	cmpgeui	r8,r18,9797
 40166bc:	95079308 	cmpgei	r20,r18,7756
 40166c0:	9c039705 	stb	r16,3676(r19)
 40166c4:	90019f02 	0x90019f02
 40166c8:	9606940a 	0x9606940a
 40166cc:	00000004 	movi	zero,0
 40166d0:	040115b0 	cmpltui	r16,zero,1110
